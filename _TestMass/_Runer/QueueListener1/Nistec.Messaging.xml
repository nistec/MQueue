<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nistec.Messaging</name>
    </assembly>
    <members>
        <member name="T:MControl.Messaging.Server.QueueConfig">
            <summary>
            Represent queue config section in <see cref="T:System.Configuration.ConfigurationSection"/>
            </summary>
        </member>
        <member name="M:MControl.Messaging.Server.QueueConfig.GetConfig">
            <summary>
            Get MQueue config section.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.QueueConfig.FindPipeServer(System.String)">
            <summary>
            Find pipe server item.
            </summary>
            <param name="pipeName"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.QueueConfig.FindPipeClient(System.String)">
            <summary>
             Find pipe client item.
            </summary>
            <param name="pipeName"></param>
            <returns></returns>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfig.QueueSettings">
            <summary>
            Get Queue Settings items.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfig.PipeServerSettings">
            <summary>
            Get <see cref="T:MControl.Messaging.Server.PipeServerConfigItems"/> collection.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfig.PipeClientSettings">
            <summary>
            Get <see cref="T:MControl.Messaging.Server.PipeClientConfigItems"/> collection.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Server.PipeServerConfigItems">
            <summary>
            Represent Pipe server configuration element collection.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Server.PipeServerConfigItems.CreateNewElement">
            <summary>
            Create New Element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.PipeServerConfigItems.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Get Element Key
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:MControl.Messaging.Server.PipeServerConfigItems.Item(System.Int32)">
            <summary>
            Get or Set <see cref="T:MControl.Messaging.Server.PipeServerConfigItem"/> item by index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:MControl.Messaging.Server.PipeServerConfigItems.Item(System.String)">
            <summary>
            Get or Set <see cref="T:MControl.Messaging.Server.PipeServerConfigItem"/> item by key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:MControl.Messaging.Server.PipeConfigItem">
            <summary>
            Represent pipe  <see cref="T:System.Configuration.ConfigurationElement"/> item.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.PipeConfigItem.PipeName">
            <summary>
            Get pipe name.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.PipeConfigItem.PipeDirection">
            <summary>
            Get pipe direction.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.PipeConfigItem.PipeOptions">
            <summary>
            Get pipe options.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.PipeConfigItem.VerifyPipe">
            <summary>
            Get Verify Pipe Name.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.PipeConfigItem.ConnectTimeout">
            <summary>
            Get connection timeout.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.PipeConfigItem.InBufferSize">
            <summary>
            Get In buffer size in bytes.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.PipeConfigItem.OutBufferSize">
            <summary>
            Get Out buffer size in bytes.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Server.PipeServerConfigItem">
            <summary>
            Represent pipe server config item.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.PipeServerConfigItem.MaxServerConnections">
            <summary>
            Get max server connection.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.PipeServerConfigItem.MaxAllowedServerInstances">
            <summary>
            Get max allowed server instances.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.TimerEx">
            <summary>
            Simple timer implementation.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.TimerEx.#ctor">
            <summary>
            Default contructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.TimerEx.#ctor(System.Double)">
            <summary>
            Default contructor.
            </summary>
            <param name="interval">The time in milliseconds between events.</param>
        </member>
        <member name="M:MControl.Messaging.Net.TimerEx.#ctor(System.Double,System.Boolean)">
            <summary>
            Default contructor.
            </summary>
            <param name="interval">The time in milliseconds between events.</param>
            <param name="autoReset">Specifies if timer is auto reseted.</param>
        </member>
        <member name="T:MControl.Messaging.Net.Tcp.Pool.SocketPool">
            <summary>
            Holds Socket Pool
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.SocketPool.POOL_IDLE_TIMOUT">
            <summary>
            POOL IDLE TIMOUT in minute
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.SocketPool.SOCKET_TIMEOUT">
            <summary>
            Socket Timeout In Seconds
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.SocketPool.m_LastActivityTime">
            <summary>
            LastActivityTime
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.SocketPool.socketsPool">
            <summary>
            Queue of available socket connections.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.SocketPool.hostIP">
            <summary>
            host IP Address
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.SocketPool.hostPort">
            <summary>
            host Port
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.SocketPool.addressFamily">
            <summary>
            addressFamily
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.SocketPool.sendReceiveTimeout">
            <summary>
            sendReceiveTimeout
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.SocketPool.POOL_MIN_SIZE">
            <summary>
            Initial number of connections
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.SocketPool.POOL_MAX_SIZE">
            <summary>
            The maximum size of the connection pool.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.SocketPool.SocketCounter">
            <summary>
            Created host Connection counter 
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.SocketPool.ActiveCounter">
            <summary>
            Created host Active Connection counter 
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.SocketPool.#ctor(System.Net.IPEndPoint,System.Int32)">
            <summary>
            ctor
            </summary>
            <param name="host"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.SocketPool.#ctor(System.Net.Sockets.AddressFamily,System.String,System.Int32,System.Int32)">
            <summary>
            ctor
            </summary>
            <param name="address"></param>
            <param name="hostIPAddress"></param>
            <param name="hostPortNumber"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.SocketPool.#ctor(System.Net.Sockets.AddressFamily,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            ctor
            </summary>
            <param name="address"></param>
            <param name="hostIPAddress"></param>
            <param name="hostPortNumber"></param>
            <param name="minConnections"></param>
            <param name="maxConnections"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.SocketPool.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.SocketPool.KillAll">
            <summary>
            Close and kill All sockets
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.SocketPool.CloseAll">
            <summary>
            Close All sockets
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.SocketPool.TrimPool">
            <summary>
            Trim Pool
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.SocketPool.Acquire">
            <summary>
            Get an open socket from the connection pool.
            </summary>
            <returns>Socket returned from the pool or new socket opened. </returns>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.SocketPool.Return(MControl.Messaging.Net.Tcp.Pool.TcpSocket)">
            <summary>
            Enqueue Socket
            </summary>
            <param name="socket">Socket connection to return.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.SocketPool.SocketClose(MControl.Messaging.Net.Tcp.Pool.TcpSocket)">
            <summary>
            Close Socket
            </summary>
            <param name="socket">Socket connection to return.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.SocketPool.CreateSocket">
            <summary>
            Create a new socket connection.
            </summary>
            <returns>Newly opened socket connection.</returns>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.SocketPool.ConnectionPoolIdleTimeout">
            <summary>
            Get indicate if ConnectionPool is IdleTimeout
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.SocketPool.LastActivity">
            <summary>
            Get the LastActivity
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.SocketPool.ConnectionPollCount">
            <summary>
            Get the all connection pool sockets count
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.SocketPool.PoolName">
            <summary>
            Get PoolName
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.SocketPool.IsPoolIdleTimeout">
            <summary>
            Get indicate if SocketPool is IdleTimeout
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.SocketPool.AvailableCount">
            <summary>
            Get available socket count
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.SocketPool.ActiveCount">
            <summary>
            Get the active sockets count
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.SocketPool.TotalCount">
            <summary>
            Get the all sockets count
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.SocketPool.HostIP">
            <summary>
            Get HostIP
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.SocketPool.Port">
            <summary>
            Get Host Port
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.SocketPool.AddressFamily">
            <summary>
            Get AddressFamily
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.SocketPool.Timeout">
            <summary>
            Get Send Receive Timeout
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.ErrorEventHandler">
            <summary>
            Represent the method what will handle Error event.
            </summary>
            <param name="sender">Delegate caller.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="T:MControl.Messaging.QProperties">
            <summary>
            AsyncQueueThread
            </summary>
        </member>
        <member name="M:MControl.Messaging.QProperties.IsValid(System.String)">
            <summary>
            Get if is valid queue properties if not throw exception
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.QProperties.#ctor(System.String)">
            <summary>
            QProperties ctor
            </summary>
            <param name="queueName"></param>
        </member>
        <member name="M:MControl.Messaging.QProperties.#ctor(System.String,System.Boolean,MControl.Messaging.CoverMode)">
            <summary>
            QProperties ctor
            </summary>
            <param name="queueName"></param>
            <param name="isTrans"></param>
            <param name="recoverable"></param>
        </member>
        <member name="M:MControl.Messaging.QProperties.#ctor(System.Xml.XmlNode)">
            <summary>
            QProperties ctor
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:MControl.Messaging.IQueueItem.ItemId">
            <summary>
            Get ItemId
            </summary>
        </member>
        <member name="P:MControl.Messaging.IQueueItem.MessageId">
            <summary>
            Get MessageId
            </summary>
        </member>
        <member name="P:MControl.Messaging.IQueueItem.Priority">
            <summary>
            Get Priority
            </summary>
        </member>
        <member name="P:MControl.Messaging.IQueueItem.Retry">
            <summary>
            Get Retry
            </summary>
        </member>
        <member name="P:MControl.Messaging.IQueueItem.ArrivedTime">
            <summary>
            Get ArrivedTime
            </summary>
        </member>
        <member name="P:MControl.Messaging.IQueueItem.SentTime">
            <summary>
            Get SentTime
            </summary>
        </member>
        <member name="P:MControl.Messaging.IQueueItem.Status">
            <summary>
            Get or Set Status
            </summary>
        </member>
        <member name="P:MControl.Messaging.IQueueItem.TimeOut">
            <summary>
            Get or Set timeout in seconds
            </summary>
        </member>
        <member name="P:MControl.Messaging.IQueueItem.IsTimeOut">
            <summary>
            Get indicate wether the item is timeout 
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItemStream.ItemId">
            <summary>
            Get ItemId
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItemStream.MessageId">
            <summary>
            Get MessageId
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItemStream.Priority">
            <summary>
            Get Priority
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItemStream.Retry">
            <summary>
            Get Retry
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItemStream.ArrivedTime">
            <summary>
            Get ArrivedTime
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItemStream.SentTime">
            <summary>
            Get SentTime
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItemStream.Status">
            <summary>
            Get or Set Status
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItemStream.TimeOut">
            <summary>
            Get or Set timeout in seconds
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItemStream.IsTimeOut">
            <summary>
            Get indicate wether the item is timeout 
            </summary>
        </member>
        <member name="T:MControl.Messaging.Remote.ChannelManager">
            <summary>
            ChannelManager
            </summary>
        </member>
        <member name="M:MControl.Messaging.Remote.ChannelManager.Init(MControl.Messaging.Remote.ChannelQ[])">
            <summary>
            Init Manager
            </summary>
            <param name="channels"></param>
        </member>
        <member name="M:MControl.Messaging.Remote.ChannelManager.Init(MControl.Messaging.Remote.ChannelProperties[],System.Boolean)">
            <summary>
            Init Manager
            </summary>
            <param name="settings"></param>
            <param name="props"></param>
            <param name="isRemote"></param>
        </member>
        <member name="M:MControl.Messaging.Remote.ChannelManager.StartAsyncManager">
            <summary>
            StartAsyncManager
            </summary>
        </member>
        <member name="M:MControl.Messaging.Remote.ChannelManager.StopAsyncManager">
            <summary>
            StopAsyncManager
            </summary>
        </member>
        <member name="M:MControl.Messaging.Remote.ChannelManager.OnCheckSetting">
            <summary>
            OnCheckSetting
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Tcp.Pool.SocketPoolState">
            <summary>
            SocketPoolState
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.SocketPoolState.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.SocketPoolState.InPool">
            <summary>
            InPool
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.SocketPoolState.Active">
            <summary>
            Active
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Tcp.Pool.SmtpFeatures">
            <summary>
            SmtpFeatures
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.SmtpFeatures.IsEsmtpSupported">
            <summary>
            IsEsmtpSupported
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.SmtpFeatures.RemoteHostName">
            <summary>
            RemoteHostName
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.SmtpFeatures.EsmtpFeatures">
            <summary>
            EsmtpFeatures
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.SmtpFeatures.#ctor(System.Boolean,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            SmtpFeatures
            </summary>
            <param name="isEsmtpSupported"></param>
            <param name="remoteHostName"></param>
            <param name="esmtpFeatures"></param>
        </member>
        <member name="T:MControl.Messaging.Net.Tcp.Pool.SocketPoolException">
            <summary>
            SocketPoolException
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.SocketPoolException.ShouldReconnect">
            <summary>
            ShouldReconnect
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.SocketPoolException.#ctor(System.String)">
            <summary>
            SocketPoolException
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:MControl.Messaging.Net.Tcp.Pool.TcpSocket">
            <summary>
            Holds tcp socket
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.TcpSocket.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            ctor
            </summary>
            <param name="addressFamily"></param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.TcpSocket.#ctor(MControl.Messaging.Net.Tcp.Pool.SocketPool,MControl.Messaging.Net.Tcp.Pool.SocketPoolState)">
            <summary>
             ctor
            </summary>
            <param name="pool"></param>
            <param name="state"></param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.TcpSocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.IPEndPoint,MControl.Messaging.Net.Tcp.Pool.SocketPoolState,System.Int32)">
            <summary>
            ctor
            </summary>
            <param name="addressFamily"></param>
            <param name="target"></param>
            <param name="state"></param>
            <param name="sendReceiveTimeout"></param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.TcpSocket.#ctor(System.Net.Sockets.AddressFamily,System.String,System.Int32,MControl.Messaging.Net.Tcp.Pool.SocketPoolState,System.Int32)">
            <summary>
            ctor
            </summary>
            <param name="addressFamily"></param>
            <param name="host"></param>
            <param name="port"></param>
            <param name="state"></param>
            <param name="sendReceiveTimeout"></param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.TcpSocket.IsConnected">
            <summary>
            Get indicate if socket is connected and available
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.TcpSocket.SocketCompleted">
            <summary>
            Populate host socket completed on sending or receiveing
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.TcpSocket.SocketClose">
            <summary>
            Socket safely Close
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.TcpSocket.SocketKill">
            <summary>
            Socket Shutdown and Close
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.TcpSocket.Print">
            <summary>
            Print Socket
            </summary>
            <returns></returns>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.TcpSocket.Tag">
            <summary>
            Get or Set Tag object
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.TcpSocket.SocketState">
            <summary>
            Get the socket pool state
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.TcpSocket.LastActivity">
            <summary>
            Gets when was last socket(read or write) activity.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.TcpSocket.Host">
            <summary>
            Get Host
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.TcpSocket.Port">
            <summary>
            Get Port
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.TcpSocket.SocketId">
            <summary>
            Get SocketId
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.TcpSocket.InPool">
            <summary>
            Get indicate if socket belong to pool
            </summary>
        </member>
        <member name="M:MControl.Messaging.TransactionTable.CommitTrans(System.String)">
            <summary>
            Async Commit Transaction
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.TransactionTable.AbortTrans(System.String)">
            <summary>
            Async Abort Transaction
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.TransactionTable.RemoveTrans(System.String)">
            <summary>
            Remove transaction item
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:MControl.Messaging.TransactionTable.Reset">
            <summary>
            Reset all items
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.ExceptionEventArgs">
            <summary>
            This class provides data for error events and methods.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Default constructor.
            </summary>
            <param name="exception">Exception.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>exception</b> is null reference value.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.ExceptionEventArgs.Exception">
            <summary>
            Gets exception.
            </summary>
        </member>
        <member name="T:MControl.Messaging.MessageException">
            <summary>
            Exception that framework  can raise for message
            </summary>
        </member>
        <member name="M:MControl.Messaging.MessageException.#ctor(MControl.Messaging.MessageState,System.String)">
            <summary>
            MessageException
            </summary>
            <param name="ack"></param>
            <param name="msg"></param>
        </member>
        <member name="P:MControl.Messaging.MessageException.MessageState">
            <summary>
            AcknowledgStatus
            </summary>
        </member>
        <member name="M:MControl.Messaging.SysUtil.StreamCopy(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies <b>source</b> stream data to <b>target</b> stream.
            </summary>
            <param name="source">Source stream. Reading starts from stream current position.</param>
            <param name="target">Target stream. Writing starts from stream current position.</param>
            <param name="blockSize">Specifies transfer block size in bytes.</param>
            <returns>Returns number of bytes copied.</returns>
        </member>
        <member name="M:MControl.Messaging.SysUtil.NormalizeFolder(System.String)">
            <summary>
            Normalizes folder value. Replaces \ to /, removes duplicate //, removes / from folder start and end.
            </summary>
            <param name="folder">Folder to normalize.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.SysUtil.PathFix(System.String)">
            <summary>
            Fixes path separator, replaces / \ with platform separator char.
            </summary>
            <param name="path">Path to fix.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.SysUtil.DirectoryExists(System.String)">
            <summary>
            Checks if directory exists. If linux, checks with case-insenstively (linux is case-sensitive). 
            Returns actual dir (In linux it may differ from requested directory, because of case-sensitivity.)
            or null if directory doesn't exist.
            </summary>
            <param name="dirName">Directory to check.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.SysUtil.EnsureFolder(System.String)">
            <summary>
            Ensures that specified folder exists, if not it will be created.
            Returns actual dir (In linux it may differ from requested directory, because of case-sensitivity.).
            </summary>
            <param name="folder">Folder name with path.</param>
        </member>
        <member name="M:MControl.Messaging.SysUtil.FileExists(System.String)">
            <summary>
            Checks if file exists. If linux, checks with case-insenstively (linux is case-sensitive). 
            Returns actual file (In linux it may differ from requested file, because of case-sensitivity.)
            or null if file doesn't exist.
            </summary>
            <param name="fileName">File to check.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.SysUtil.StreamCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies all data from source stream to destination stream.
            Copy starts from source stream current position and will be copied to the end of source stream.
            </summary>
            <param name="source">Source stream.</param>
            <param name="destination">Destination stream.</param>
        </member>
        <member name="T:MControl.Messaging.Server.MQueueBase">
            <summary>
            AsyncQueueHandlerBase
            </summary>
        </member>
        <member name="M:MControl.Messaging.Server.MQueueBase.#ctor(MControl.Messaging.QProperties)">
            <summary>
            AsyncQueue Ctor
            </summary>
            <param name="queueName"></param>
        </member>
        <member name="M:MControl.Messaging.Server.MQueueBase.Dequeue">
            <summary>
            DequeueMessage
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.MQueueBase.Enqueue(MControl.Messaging.IQueueItem)">
            <summary>
            EnqueueMessage
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MControl.Messaging.Server.MQueueBase.ReEnqueue(MControl.Messaging.IQueueItem)">
            <summary>
            ReEnqueueMessage
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MControl.Messaging.Server.MQueueBase.AbortTrans(System.Guid)">
            <summary>
            Abort Transaction
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.MQueueBase.CommitTrans(System.Guid)">
            <summary>
            Commit Transaction
            </summary>
            <param name="ItemId"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.MQueueBase.OnErrorOcurred(System.String)">
            <summary>
            OnErrorOcurred
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:MControl.Messaging.Server.MQueueBase.OnErrorOcurred(MControl.Generic.GenericEventArgs{System.String})">
            <summary>
            OnErrorOcurred
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MControl.Messaging.Server.MQueueBase.OnPropertyChanged(MControl.Generic.GenericEventArgs{System.String,System.Object})">
            <summary>
            OnPropertyChanged
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MControl.Messaging.Server.MQueueBase.GetQueueItems">
            <summary>
            GetQueueItems
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.MQueueBase.initMQueueSys(MControl.Messaging.QProperties)">
            <summary>
            AsyncQueue Ctor
            </summary>
            <param name="mqp"></param>
        </member>
        <member name="M:MControl.Messaging.Server.MQueueBase.Completed(System.Guid,System.Int32)">
            <summary>
            CompletedMessage
            </summary>
            <param name="ItemId"></param>
            <param name="status"></param>
        </member>
        <member name="M:MControl.Messaging.Server.MQueueBase.HoldItemsCount">
            <summary>
            Get HoldItemsCount by interval minute
            </summary>
            <param name="intervalMinute"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.MQueueBase.HoldItemsEnqueue(System.Int32)">
            <summary>
            Re Enqueue all Hold Items remain in DB by interval minute 
            </summary>
            <param name="capacity"></param>
            <param name="intervalMinute"></param>
        </member>
        <member name="E:MControl.Messaging.Server.MQueueBase.ErrorOcurred">
            <summary>
            ErrorOcurred
            </summary>
        </member>
        <member name="E:MControl.Messaging.Server.MQueueBase.PropertyChanged">
            <summary>
            PropertyChanged
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.MQueueBase.Count">
            <summary>
            Get Count of items in Queue.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.MQueueBase.MaxRetry">
            <summary>
            Get max retry for item
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.MQueueBase.IsTrans">
            <summary>
            Get if is it trnsactional queue
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.MQueueBase.Server">
            <summary>
            Get Server
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.MQueueBase.CoverMode">
            <summary>
            Get CoverMode
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.MQueueBase.MaxItemsPerSecond">
            <summary>
            Get or Set Max Items Per Second,if zero no limit item Per Second
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.MQueueBase.SerializeBody">
            <summary>
            Get or Set wether the queue Use Serialization to body
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.MQueueBase.DateFormat">
            <summary>
            Get or Set Date format
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.MQueueBase.HoldDequeue">
            <summary>
            Get or Set a value indicating whether the Queue is holding Dequeue.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.MQueueBase.HoldEnqueue">
            <summary>
            Get or Set a value indicating whether the Queue is holding Enqueue.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.MQueueBase.Enabled">
            <summary>
            Get or Set a value indicating whether the Queue is Enabled.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.MQueueBase.MaxCapacity">
            <summary>
            Get or Set a value indicating whether the Max Capacity in Queue.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.MQueueBase.MinCapacity">
            <summary>
            Get a value indicating whether the Min Capacity in Queue.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.MQueueBase.Collate">
            <summary>
            Get or Set the DB Collation.
            </summary>
        </member>
        <member name="M:MControl.Messaging.QueueResponse.GetEntityStream(System.Boolean)">
            <summary>
            Get entity as stream.
            </summary>
            <param name="writeContextType"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.QueueResponse.SetEntityStream(MControl.IO.NetStream,System.Boolean)">
            <summary>
            Set entity from stream.
            </summary>
            <param name="stream"></param>
            <param name="writeContextType"></param>
            <returns></returns>
        </member>
        <member name="T:MControl.Messaging.Net.Tcp.Pool.RelayPool">
            <summary>
            Holds ConnectionPool for sockets
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.RelayPool.POOL_MIN_SIZE">
            <summary>
            Initial number of connections
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.RelayPool.POOL_MAX_SIZE">
            <summary>
            The maximum size of the connection pool.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Tcp.Pool.RelayPool.DEFAULT_PORT">
            <summary>
            The default port.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.RelayPool.GetServerPool(System.String,System.Boolean)">
            <summary>
            Get Server Pool
            </summary>
            <param name="host"></param>
            <param name="addPool"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.RelayPool.GetSocket(System.String,System.Net.Sockets.AddressFamily,System.Net.IPEndPoint,System.Int32)">
            <summary>
            Get Socket from pool
            </summary>
            <param name="host"></param>
            <param name="addressFamily"></param>
            <param name="target"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.RelayPool.RemovePool(System.String,System.Net.Sockets.AddressFamily,System.String,System.Int32)">
            <summary>
            Remove Pool
            </summary>
            <param name="host"></param>
            <param name="addressFamily"></param>
            <param name="hostIPAddress"></param>
            <param name="hostPortNumber"></param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.RelayPool.RemoveRelayPool(System.String)">
            <summary>
            Remove Pool
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.RelayPool.TrimRelayPool(System.String)">
            <summary>
            Trim Relay Pool
            </summary>
            <param name="host"></param>
        </member>
        <member name="T:MControl.Messaging.Net.Tcp.Pool.RelayPool.RelayPoolEntry">
            <summary>
            Relay Pool Entry
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.RelayPool.RelayPoolEntry.#ctor(System.String)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.RelayPool.RelayPoolEntry.GetPool(System.Net.IPEndPoint)">
            <summary>
            Get Pool
            </summary>
            <param name="remoteEP"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.RelayPool.RelayPoolEntry.RemovePool(System.Net.Sockets.AddressFamily,System.String,System.Int32)">
            <summary>
            Remove Pool
            </summary>
            <param name="addressFamily"></param>
            <param name="hostIPAddress"></param>
            <param name="hostPortNumber"></param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.RelayPool.RelayPoolEntry.AddPool(System.Net.Sockets.AddressFamily,System.String,System.Int32,System.Int32)">
            <summary>
            Add Pool
            </summary>
            <param name="addressFamily"></param>
            <param name="hostIPAddress"></param>
            <param name="hostPortNumber"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.RelayPool.RelayPoolEntry.AddPool(System.Net.Sockets.AddressFamily,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add Pool
            </summary>
            <param name="addressFamily"></param>
            <param name="hostIPAddress"></param>
            <param name="hostPortNumber"></param>
            <param name="minConnections"></param>
            <param name="maxConnections"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.RelayPool.RelayPoolEntry.GetSocket(System.Net.Sockets.AddressFamily,System.Net.IPEndPoint,System.Int32,System.Boolean)">
            <summary>
            Get Socket from pool
            </summary>
            <param name="addressFamily"></param>
            <param name="target"></param>
            <param name="timeout"></param>
            <param name="addToPool"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.RelayPool.RelayPoolEntry.GetSocket(System.Net.Sockets.AddressFamily,System.Net.IPEndPoint,System.Int32)">
            <summary>
            Get Socket from pool
            </summary>
            <param name="addressFamily"></param>
            <param name="target"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.RelayPool.RelayPoolEntry.GetSocket(System.Net.Sockets.AddressFamily,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get Socket from pool
            </summary>
            <param name="addressFamily"></param>
            <param name="hostIPAddress"></param>
            <param name="hostPortNumber"></param>
            <param name="timeout"></param>
            <param name="addToPool"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.RelayPool.RelayPoolEntry.GetSocket(System.String)">
            <summary>
             Get Socket
            </summary>
            <param name="host"></param>
            <returns></returns>
            <exception cref="T:System.Exception">Invalid SocketPool</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.RelayPool.RelayPoolEntry.RemovePool(System.Net.Sockets.AddressFamily,System.String,System.Int32,System.Boolean)">
            <summary>
            Remove Pool
            </summary>
            <param name="addressFamily"></param>
            <param name="hostIPAddress"></param>
            <param name="hostPortNumber"></param>
            <param name="closeAll"></param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.Pool.RelayPool.RelayPoolEntry.TrimPool(System.Boolean)">
            <summary>
            Trim Pool
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.RelayPool.RelayPoolEntry.RelayPoolIdleTimeout">
            <summary>
            Get indicate if ConnectionPool is IdleTimeout
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.RelayPool.RelayPoolEntry.Host">
            <summary>
            Get Relay Host
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.Pool.RelayPool.RelayPoolEntry.Count">
            <summary>
            Get current connection in pool
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.IPBindInfo">
            <summary>
            Holds IP bind info.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IPBindInfo.#ctor(System.String,MControl.Messaging.Net.BindInfoProtocol,System.Net.IPAddress,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">Host name.</param>
            <param name="protocol">Bind protocol.</param>
            <param name="ip">IP address to listen.</param>
            <param name="port">Port to listen.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IPBindInfo.#ctor(System.String,System.Net.IPAddress,System.Int32,MControl.Messaging.Net.SslMode,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">Host name.</param>
            <param name="ip">IP address to listen.</param>
            <param name="port">Port to listen.</param>
            <param name="sslMode">Specifies SSL mode.</param>
            <param name="sslCertificate">Certificate to use for SSL connections.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IPBindInfo.#ctor(System.String,MControl.Messaging.Net.BindInfoProtocol,System.Net.IPAddress,System.Int32,MControl.Messaging.Net.SslMode,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">Host name.</param>
            <param name="protocol">Bind protocol.</param>
            <param name="ip">IP address to listen.</param>
            <param name="port">Port to listen.</param>
            <param name="sslMode">Specifies SSL mode.</param>
            <param name="sslCertificate">Certificate to use for SSL connections.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IPBindInfo.Equals(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>Returns true if two objects are equal.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.IPBindInfo.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
            <returns>Returns the hash code.</returns>
        </member>
        <member name="P:MControl.Messaging.Net.IPBindInfo.HostName">
            <summary>
            Gets host name.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IPBindInfo.Protocol">
            <summary>
            Gets protocol.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IPBindInfo.EndPoint">
            <summary>
            Gets IP end point.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IPBindInfo.IP">
            <summary>
            Gets IP address.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IPBindInfo.Port">
            <summary>
            Gets port.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IPBindInfo.SslMode">
            <summary>
            Gets SSL mode.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IPBindInfo.SSL_Certificate">
            <summary>
            Gets SSL certificate.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IPBindInfo.Certificate">
            <summary>
            Gets SSL certificate.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IPBindInfo.Tag">
            <summary>
            Gets or sets user data. This is used internally don't use it !!!.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Server.PipeServerQueue.#ctor(System.String,System.Boolean)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="name"></param>
            <param name="loadFromSettings"></param>
        </member>
        <member name="M:MControl.Messaging.Server.PipeServerQueue.#ctor(MControl.Messaging.Remote.PipeQueueSettings)">
            <summary>
            Constractor with settings
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:MControl.Messaging.Server.PipeServerQueue.ExecRequset(MControl.Messaging.QueueMessage)">
            <summary>
            Exec Requset
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.PipeServerQueue.Run">
            <summary>
            Use the pipe classes in the System.IO.Pipes namespace to create the 
            named pipe. This solution is recommended.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Server.PipeServerQueue.RunAsync">
            <summary>
            Use the pipe classes in the System.IO.Pipes namespace to create the 
            named pipe. This solution is recommended.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Server.PipeServerQueue.CreateSystemIOPipeSecurity">
            <summary>
            The CreateSystemIOPipeSecurity function creates a new PipeSecurity 
            object to allow Authenticated Users read and write access to a pipe, 
            and to allow the Administrators group full access to the pipe.
            </summary>
            <returns>
            A PipeSecurity object that allows Authenticated Users read and write 
            access to a pipe, and allows the Administrators group full access to 
            the pipe.
            </returns>
            <see cref="!:http://msdn.microsoft.com/en-us/library/aa365600(VS.85).aspx"/>
        </member>
        <member name="M:MControl.Messaging.IRemotingTable.Push(System.String,System.Object)">
            <summary>
            Push item and begin transaction
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MControl.Messaging.IRemotingTable.Pop(System.String)">
            <summary>
            Pop item and Commit Transaction
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.IRemotingTable.AbortTrans(System.String)">
            <summary>
            Async Abort Transaction
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.IRemotingTable.RemoveTrans(System.String)">
            <summary>
            Remove transaction item
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:MControl.Messaging.IRemotingTable.Reset">
            <summary>
            Reset all items
            </summary>
        </member>
        <member name="M:MControl.Messaging.RemotingTable.Push(System.String,System.Object)">
            <summary>
            Push item and begin transaction
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MControl.Messaging.RemotingTable.Pop(System.String)">
            <summary>
            Pop item and Commit Transaction
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.RemotingTable.Pop(System.String,System.TimeSpan)">
            <summary>
            Pop item and Commit Transaction
            </summary>
            <param name="item"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.RemotingTable.AbortTrans(System.String)">
            <summary>
            Async Abort Transaction
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.RemotingTable.RemoveTrans(System.String)">
            <summary>
            Remove transaction item
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:MControl.Messaging.RemotingTable.Reset">
            <summary>
            Reset all items
            </summary>
        </member>
        <member name="T:MControl.Messaging.Server.QueueSettings">
            <summary>
            Represent the queue settings as read only.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Server.QueueSettings.MaxSize">
            <summary>MaxSize.</summary>
        </member>
        <member name="F:MControl.Messaging.Server.QueueSettings.DefaultExpiration">
            <summary>DefaultExpiration.</summary>
        </member>
        <member name="F:MControl.Messaging.Server.QueueSettings.SyncInterval">
            <summary>Sync Interval in seconds.</summary>
        </member>
        <member name="F:MControl.Messaging.Server.QueueSettings.InitialCapacity">
            <summary>InitialCapacity.</summary>
        </member>
        <member name="F:MControl.Messaging.Server.QueueSettings.EnableLog">
            <summary>EnableLog.</summary>
        </member>
        <member name="F:MControl.Messaging.Server.QueueSettings.InBufferSize">
            <summary>InBufferSize.</summary>
        </member>
        <member name="F:MControl.Messaging.Server.QueueSettings.OutBufferSize">
            <summary>OutBufferSize.</summary>
        </member>
        <member name="F:MControl.Messaging.Server.QueueSettings.QueueConfigFile">
            <summary>QueueConfigFile.</summary>
        </member>
        <member name="F:MControl.Messaging.Server.QueueSettings.EnableFileWatcher">
            <summary>EnableFileWatcher.</summary>
        </member>
        <member name="F:MControl.Messaging.Server.QueueSettings.TaskerTimeout">
            <summary>SyncTaskerTimeout.</summary>
        </member>
        <member name="F:MControl.Messaging.Server.QueueSettings.EnableAsyncTask">
            <summary>EnableAsyncTask.</summary>
        </member>
        <member name="F:MControl.Messaging.Server.QueueSettings.EnableMailerQueue">
            <summary>EnableMailerQueue.</summary>
        </member>
        <member name="F:MControl.Messaging.Server.QueueSettings.EnableQueueManager">
            <summary>EnableQueueManager.</summary>
        </member>
        <member name="F:MControl.Messaging.Server.QueueSettings.EnableSizeHandler">
            <summary>EnableSizeHandler.</summary>
        </member>
        <member name="F:MControl.Messaging.Server.QueueSettings.EnablePerformanceCounter">
            <summary>EnablePerformanceCounter.</summary>
        </member>
        <member name="T:MControl.Messaging.Server.QueueConfigItem">
            <summary>
            Represents a queue section  settings within a configuration file.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.QueueName">
            <summary>Get QueueName</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.MaxSize">
            <summary>Get Queue Max Size</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.DefaultExpiration">
            <summary>Get Default Expiration in minutes</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.RemoveExpiredItemOnSync">
            <summary>Get if Remove Expired Item On Sync</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.SyncInterval">
            <summary>Get Sync Interval in seconds</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.InitialCapacity">
            <summary>Get Initial Capacity</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.MaxSessionTimeout">
            <summary>Get Max Session Timeout in minutes</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.EnableLog">
            <summary>Get if Enable Logging</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.InBufferSize">
            <summary>Get Pipe In Buffer Size</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.OutBufferSize">
            <summary>Get Pipe Out Buffer Size</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.SyncConfigFile">
            <summary>Get Sync Config File</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.DbConfigFile">
            <summary>Get Db Config File</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.EnableSyncFileWatcher">
            <summary>Get if Enable SyncFileWatcher</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.ReloadSyncOnChange">
            <summary>Get if Reload Sync OnChange</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.EnableAsyncTask">
            <summary>Get QueueName</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.SyncTaskerTimeout">
            <summary>Get Sync Tasker Timeout in seconds</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.EnableRemoteQueue">
            <summary>Get if Enable RemoteQueue</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.EnableSyncQueue">
            <summary>Get if Enable SyncQueue</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.EnableSessionQueue">
            <summary>Get if Enable SessionQueue</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.EnableDataQueue">
            <summary>Get if Enable DataQueue</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.EnableQueueManager">
            <summary>Get if Enable QueueManager</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.EnableSizeHandler">
            <summary>Get if Enable size handler</summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigItem.EnablePerformanceCounter">
            <summary>Get if Enable queue performance counter</summary>
        </member>
        <member name="T:MControl.Messaging.Net.IO.SizeExceededAction">
            <summary>
            Specifies action what is done if requested action exceeds maximum allowed size.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.IO.SizeExceededAction.ThrowException">
            <summary>
            Throws exception at once when maximum size exceeded.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.IO.SizeExceededAction.SkipAndThrowException">
            <summary>
            Skip all data what exceeds maximum allowed size and after requested operation completes,
            throws exception.
            </summary>
        </member>
        <member name="T:MControl.Messaging.ErrorHandler">
            <summary>
            Error handling.
            </summary>
        </member>
        <member name="M:MControl.Messaging.ErrorHandler.DumpError(System.Exception)">
            <summary>
            Writes error to error log file.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:MControl.Messaging.ErrorHandler.DumpError(System.String,System.Exception)">
            <summary>
            Writes error to error log file.
            </summary>
            <param name="virtualServer">Virtual server name.</param>
            <param name="x"></param>
        </member>
        <member name="M:MControl.Messaging.ErrorHandler.DumpError(System.Exception,System.Diagnostics.StackTrace)">
            <summary>
            Writes error to error log file.
            </summary>
            <param name="x"></param>
            <param name="stackTrace"></param>
        </member>
        <member name="M:MControl.Messaging.ErrorHandler.DumpError(System.String,System.Exception,System.Diagnostics.StackTrace)">
            <summary>
            Writes error to error log file.
            </summary>
            <param name="virtualServer">Virtual server name.</param>
            <param name="x"></param>
            <param name="stackTrace"></param>
        </member>
        <member name="M:MControl.Messaging.ErrorHandler.DumpError(System.String,System.String)">
            <summary>
            Writes error to error log file.
            </summary> 
            <param name="virtualServer">Virtual server name.</param>
            <param name="errorText">Error text to dump.</param>
        </member>
        <member name="P:MControl.Messaging.ErrorHandler.ErrorFilePath">
            <summary>
            Gets or sets error file path.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Server.ServerEnqueue.#ctor">
            <summary>
            Constractor default.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Server.ServerEnqueue.#ctor(MControl.Messaging.Remote.PipeQueueSettings)">
            <summary>
            Constractor with settings
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:MControl.Messaging.Server.ServerDequeue.#ctor">
            <summary>
            Constractor default.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Server.ServerDequeue.#ctor(MControl.Messaging.Remote.PipeQueueSettings)">
            <summary>
            Constractor with settings
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:MControl.Messaging.Server.ServerQueueManager.#ctor">
            <summary>
            Constractor default.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Server.ServerQueueManager.#ctor(MControl.Messaging.Remote.PipeQueueSettings)">
            <summary>
            Constractor with settings
            </summary>
            <param name="settings"></param>
        </member>
        <member name="T:MControl.Messaging.Server.MQueue">
            <summary>
            Provides access to a queue on a McMessage Queuing
            </summary>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.OnMessageArraived(MControl.Messaging.QueueItemEventArgs)">
            <summary>
            OnMessageArraived
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.OnMessageReceived(MControl.Messaging.QueueItemEventArgs)">
            <summary>
            OnMessageReceived
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.#ctor(MControl.Messaging.QProperties)">
            <summary>
            MQueue Ctor
            </summary>
            <param name="mqp"></param>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.#ctor(System.String)">
            <summary>
            MQueue Ctor
            </summary>
            <param name="queueName"></param>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.AbortTrans(System.Guid)">
            <summary>
            Abort Transaction
            </summary>
            <param name="ItemId"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.CommitTrans(System.Guid)">
            <summary>
            Commit Transaction
            </summary>
            <param name="ItemId"></param>
            <param name="hasAttach"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.ClearQueueItems(MControl.Messaging.QueueItemType)">
            <summary>
            ClearQueueItems
            </summary>
            <param name="type"></param>
        </member>
        <member name="F:MControl.Messaging.Server.MQueue.DefaultMaxTimeout">
            <summary>
            DefaultMaxTimeout
            </summary>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.OnReceiveCompleted(MControl.Messaging.ReceiveCompletedEventArgs)">
            <summary>
            OnReceiveCompleted
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.AsyncReceive">
            <summary>
            AsyncReceive
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.BeginReceive(System.Object)">
            <summary>Initiates an asynchronous receive operation that has a specified time-out and a specified state object. The state object provides associated information throughout the lifetime of the operation. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.BeginReceive(System.TimeSpan,System.Object)">
            <summary>Initiates an asynchronous receive operation that has a specified time-out and a specified state object. The state object provides associated information throughout the lifetime of the operation. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.BeginReceive(System.TimeSpan,System.Object,System.AsyncCallback)">
            <summary>Initiates an asynchronous receive operation that has a specified time-out and a specified state object. The state object provides associated information throughout the lifetime of the operation. This overload receives notification, through a callback, of the identity of the event handler for the operation. The operation is not complete until either a message becomes available in the queue or the time-out occurs.</summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"></see> that receives the notification of the asynchronous operation completion. </param>
            <param name="state">A state object, specified by the application, that contains information associated with the asynchronous operation. </param>
            <param name="timeout">A <see cref="T:System.TimeSpan"></see> that indicates the interval of time to wait for a message to become available. </param>
            <returns>The <see cref="T:System.IAsyncResult"></see> that identifies the posted asynchronous request.</returns>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.EndReceive(System.IAsyncResult)">
            <summary>Completes the specified asynchronous receive operation.</summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.Peek">
            <summary>
            Peek Message
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.Peek(MControl.Messaging.Priority)">
            <summary>
            Peek Message
            </summary>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.Peek(System.Guid)">
            <summary>
            Peek Message
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.Dequeue">
            <summary>
            Dequeue Message
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.Dequeue(MControl.Messaging.Priority)">
            <summary>
            Dequeue Message
            </summary>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.Dequeue(System.Guid)">
            <summary>
            Dequeue Message
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.Enqueue(MControl.Messaging.IQueueItem)">
            <summary>
            Enqueue Message
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.ReEnqueue(MControl.Messaging.IQueueItem)">
            <summary>
            ReEnqueueMessage
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.GetQueueItems">
            <summary>
            GetQueueItems
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.ValidateCapacity">
            <summary>
            ValidateCapacity
            </summary>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.SetProperty(System.String,System.Object)">
            <summary>
            SetProperty
            </summary>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="M:MControl.Messaging.Server.MQueue.GetProperty(System.String)">
            <summary>
            GetProperty
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="E:MControl.Messaging.Server.MQueue.MessageReceived">
            <summary>
            Message Received
            </summary>
        </member>
        <member name="E:MControl.Messaging.Server.MQueue.MessageArraived">
            <summary>
            Message Arraived
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.MQueue.Initilaized">
            <summary>
            Get if Queue Initilaized.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.MQueue.Count">
            <summary>
            Get Count of items in Queue.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.MQueue.CapacityReEnqueue">
            <summary>
            Get the capacity for auto re enqueue hold items
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.MQueue.EnqueueHoldItems">
            <summary>
            Get a value indicating whether the Queue in EnqueueHoldItems Proccess.
            </summary>
        </member>
        <member name="E:MControl.Messaging.Server.MQueue.ReceiveCompleted">
            <summary>
            Receive Completed event
            </summary>
        </member>
        <member name="T:MControl.Net.MessagingNet">
            <summary>
            netDal
            </summary>
        </member>
        <member name="M:MControl.Net.MessagingNet.NetFram(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="method"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Remote.PipeClientQueue`2.#ctor(System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="name"></param>
            <param name="direction"></param>
            <param name="options"></param>
        </member>
        <member name="M:MControl.Messaging.Remote.PipeClientQueue`2.#ctor(System.String,System.Boolean)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="name"></param>
            <param name="loadFromSettings"></param>
        </member>
        <member name="M:MControl.Messaging.Remote.PipeClientQueue`2.#ctor(MControl.Messaging.Remote.PipeQueueSettings)">
            <summary>
            Constractor with settings parameters
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:MControl.Messaging.Remote.PipeClientQueue`2.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Constractor with arguments
            </summary>
            <param name="pipeName"></param>
            <param name="inBufferSize"></param>
            <param name="outBufferSize"></param>
            <param name="isDuplex"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:MControl.Messaging.Remote.PipeClientQueue`2.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constractor with arguments
            </summary>
            <param name="pipeName"></param>
            <param name="isDuplex"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:MControl.Messaging.Remote.PipeClientQueue`2.Execute(`0,MControl.Messaging.Remote.QueueCmd)">
            <summary>
            connect to the named pipe and execute request.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Remote.QueueClient.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constractor with arguments
            </summary>
            <param name="pipeName"></param>
            <param name="isDuplex"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:MControl.Messaging.Remote.QueueClient.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Constractor with arguments
            </summary>
            <param name="pipeName"></param>
            <param name="inBufferSize"></param>
            <param name="outBufferSize"></param>
            <param name="isDuplex"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:MControl.Messaging.Remote.QueueClient.#ctor(System.String,System.IO.Pipes.PipeOptions)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="name"></param>
            <param name="options"></param>
        </member>
        <member name="M:MControl.Messaging.Remote.QueueClient.#ctor(System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="name"></param>
            <param name="direction"></param>
            <param name="options"></param>
        </member>
        <member name="M:MControl.Messaging.Remote.QueueClient.#ctor(System.String,System.Boolean)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="name"></param>
            <param name="loadFromSettings"></param>
        </member>
        <member name="M:MControl.Messaging.Remote.QueueClient.#ctor(MControl.Messaging.Remote.PipeQueueSettings)">
            <summary>
            Constractor with settings parameters
            </summary>
            <param name="settings"></param>
        </member>
        <member name="T:MControl.Messaging.Remote.ChannelQ">
            <summary>
            AsyncQueueHandlerBase
            </summary>
        </member>
        <member name="M:MControl.Messaging.Remote.ChannelQ.#ctor(MControl.Messaging.Remote.ChannelProperties,System.Boolean)">
            <summary>
            ChannelQ ctor
            </summary>
            <param name="settings"></param>
            <param name="mqp"></param>
        </member>
        <member name="M:MControl.Messaging.Remote.ChannelQ.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:MControl.Messaging.Remote.ChannelQ.StartAsyncQueue">
            <summary>
            Start AsyncQueue Background multi thread Listner 
            </summary>
        </member>
        <member name="M:MControl.Messaging.Remote.ChannelQ.StopAsyncQueue">
            <summary>
            Stop AsyncQueue Background multi thread Listner 
            </summary>
        </member>
        <member name="M:MControl.Messaging.Remote.ChannelQ.AfterReceiveCompleted">
            <summary>
            After Receive Completed Start Begin Receive Automaticly
            </summary>
        </member>
        <member name="M:MControl.Messaging.Remote.ChannelQ.MessageQueueListner">
            <summary>
            Message Queue Listner worker thread
            </summary>
        </member>
        <member name="M:MControl.Messaging.Remote.ChannelQ.OnReceiveCompleted(MControl.Messaging.QueueItemEventArgs)">
            <summary>
            OnReceiveCompleted
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MControl.Messaging.Remote.ChannelQ.Enqueue(MControl.Messaging.IQueueItem)">
            <summary>
            EnqueueMessage
            </summary>
            <param name="item"></param>
        </member>
        <member name="E:MControl.Messaging.Remote.ChannelQ.MessageReceived">
            <summary>
            MessageHandler
            </summary>
        </member>
        <member name="E:MControl.Messaging.Remote.ChannelQ.ErrorOcurred">
            <summary>
            ErrorOcurred
            </summary>
        </member>
        <member name="P:MControl.Messaging.Remote.ChannelQ.IsRemote">
            <summary>
            IsRemote
            </summary>
        </member>
        <member name="P:MControl.Messaging.Remote.ChannelQ.Initilize">
            <summary>
            Initilize
            </summary>
        </member>
        <member name="P:MControl.Messaging.Remote.ChannelQ.QueueName">
            <summary>
            Get Queue name
            </summary>
        </member>
        <member name="P:MControl.Messaging.Remote.ChannelQ.MaxThread">
            <summary>
            Get MaxThread
            </summary>
        </member>
        <member name="P:MControl.Messaging.Remote.ChannelQ.Count">
            <summary>
            Get Count
            </summary>
        </member>
        <member name="P:MControl.Messaging.Remote.ChannelQ.DequeueWait">
            <summary>
            Dequeue Wait interval
            </summary>
        </member>
        <member name="P:MControl.Messaging.Remote.ChannelQ.UseMessageQueueListner">
            <summary>
            Get or Set wether the queue Use Background MessageQueue Listner
            </summary>
        </member>
        <member name="M:MControl.Messaging.QueueEntityStream.GetEntityStream(System.Boolean)">
            <summary>
            Get entity as stream.
            </summary>
            <param name="writeContextType"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.QueueEntityStream.SetEntityStream(MControl.IO.NetStream,System.Boolean)">
            <summary>
            Set entity from stream.
            </summary>
            <param name="stream"></param>
            <param name="writeContextType"></param>
            <returns></returns>
        </member>
        <member name="P:MControl.Messaging.QueueEntityStream.BodyStream">
            <summary>
            Get or Set body as stream
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueEntityStream.Sender">
            <summary>
            Get or Set Sender
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueEntityStream.Host">
            <summary>
            Get or Set Host/Queue name
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueEntityStream.Command">
            <summary>
            Get or Set Command name
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueEntityStream.Modified">
            <summary>
            Get or Set the last modified time.
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueEntityStream.Priority">
            <summary>
            Get Priority
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueEntityStream.MessageId">
            <summary>
            Get MessageId
            </summary>
        </member>
        <member name="M:MControl.Messaging.Proxies.MailerHost.#ctor(System.Xml.XmlNode)">
            <summary>
            McQueueProperties ctor
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:MControl.Messaging.Proxies.MailerHostContext">
            <summary>
            MailerHost
            </summary>
        </member>
        <member name="T:MControl.Messaging.Server.QueueDefaults">
            <summary>
            Represent Queue Defaults Settings
            </summary>
        </member>
        <member name="F:MControl.Messaging.Server.QueueDefaults.EnqueuePipeName">
            <summary>
            Enqueue PipeName
            </summary>
        </member>
        <member name="F:MControl.Messaging.Server.QueueDefaults.DequeuePipeName">
            <summary>
            Dequeue PipeName
            </summary>
        </member>
        <member name="F:MControl.Messaging.Server.QueueDefaults.QueueManagerPipeName">
            <summary>
            Queue Manager PipeName
            </summary>
        </member>
        <member name="F:MControl.Messaging.Server.QueueDefaults.MailerPipeName">
            <summary>
            Mailer PipeName
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueDefaults.DefaultFormatter">
            <summary>
            Get Default Formatter
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueDefaults.DefaultExpiration">
            <summary>
            Get Default Expiration in minutes
            </summary>
        </member>
        <member name="P:MControl.Messaging.Server.QueueDefaults.EnableLog">
            <summary>
            Get if Enable Logging
            </summary>
        </member>
        <member name="T:MControl.Messaging.ReceiveItemCallback">
            <summary>
            Receive Item Callback delegate
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="P:MControl.Messaging.QueueItemEventArgs.Item">
            <summary>
            Get QueueItem
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItemEventArgs.State">
            <summary>
            Get Queue item state
            </summary>
        </member>
        <member name="P:MControl.Messaging.TransItemEventArgs.Item">
            <summary>
            Get QueueItem
            </summary>
        </member>
        <member name="P:MControl.Messaging.PtrItemEventArgs.Item">
            <summary>
            Get QueueItem
            </summary>
        </member>
        <member name="P:MControl.Messaging.PtrItemEventArgs.State">
            <summary>
            Get Queue item state
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.EventArgs`1">
            <summary>
            This class universal event arguments for transporting single value.
            </summary>
            <typeparam name="T">Event data.</typeparam>
        </member>
        <member name="M:MControl.Messaging.Net.EventArgs`1.#ctor(`0)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Event data.</param>
        </member>
        <member name="P:MControl.Messaging.Net.EventArgs`1.Value">
            <summary>
            Gets event data.
            </summary>
        </member>
        <member name="M:MControl.Messaging.PriorityQueue.QueueCount(MControl.Messaging.Priority)">
            <summary>
            Get the item count in queue by priority
            </summary>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.PriorityQueue.CommitTrans(System.Guid)">
            <summary>
            Commit Transaction
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.PriorityQueue.AbortTrans(System.Guid)">
            <summary>
            Abort Transaction
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.PriorityQueue.AbortTrans(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Abort Transaction
            </summary>
            <param name="item"></param>
            <param name="hasAttach"></param>
            <param name="rollback"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.PriorityQueue.RemoveAsync(System.Guid)">
            <summary>
            RemoveAsync
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.PriorityQueue.Peek(System.Guid)">
            <summary>
            Peek Message
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.PriorityQueue.Peek(MControl.Messaging.Priority)">
            <summary>
            Peek Message
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.PriorityQueue.Peek">
            <summary>
            Dequeue Message
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.PriorityQueue.Dequeue(System.Guid)">
            <summary>
            Dequeue Message
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.PriorityQueue.Dequeue(MControl.Messaging.Priority)">
            <summary>
            Dequeue Message
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.PriorityQueue.Dequeue">
            <summary>
            Dequeue Message
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.PriorityQueue.Enqueue(MControl.Messaging.IQueueItem)">
            <summary>
            Enqueue Message
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MControl.Messaging.PriorityQueue.RemoveItem(System.Guid)">
            <summary>
            Remove Item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MControl.Messaging.PriorityQueue.Clone">
            <summary>
            Queue items Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.PriorityQueue.Find(System.Guid)">
            <summary>
            Find IQueueItem
            </summary>
            <param name="itemId"></param>
            <param name="messageId"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.PriorityQueue.Find(System.Int32)">
            <summary>
            Find IQueueItems
            </summary>
            <param name="messageId"></param>
            <returns></returns>
        </member>
        <member name="P:MControl.Messaging.PriorityQueue.TotalCount">
            <summary>
            Get the total number of items in queue
            </summary>
        </member>
        <member name="P:MControl.Messaging.PriorityQueue.IsTrans">
            <summary>
            Get if the queue is transactional
            </summary>
        </member>
        <member name="P:MControl.Messaging.PriorityQueue.Items">
            <summary>
            Queue items
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.QManager.Create(System.String)">
            <summary>Creates a non-transactional Message Queuing queue at the specified path.</summary>
            <returns>A <see cref="T:MControl.Messaging.MQueue"></see> that represents the new queue.</returns>
            <param name="queueName">The path of the queue to create. </param>
        </member>
        <member name="M:MControl.Messaging.Server.QManager.Create(System.String,System.Boolean)">
            <summary>Creates a transactional or non-transactional Message Queuing queue at the specified path.</summary>
            <returns>A <see cref="T:MControl.Messaging.MQueue"></see> that represents the new queue.</returns>
            <param name="isTrans">true to create a transactional queue; false to create a non-transactional queue. </param>
            <param name="queueName">The path of the queue to create. </param>
        </member>
        <member name="M:MControl.Messaging.Server.QManager.Create(MControl.Messaging.QProperties)">
            <summary>Creates Message Queuing queue by specified properties.</summary>
            <param name="prop">The queue properties. </param>
            <returns>A <see cref="T:MControl.Messaging.MQueue"></see> that represents the new queue.</returns>
        </member>
        <member name="M:MControl.Messaging.Server.QManager.Remove(System.String)">
            <summary>Deletes a queue on a Message Queuing server.</summary>
            <param name="queueName">The location of the queue to be deleted. </param>
        </member>
        <member name="M:MControl.Messaging.Server.QManager.Exists(System.String)">
            <summary>Determines whether a Message Queuing queue exists at the specified path.</summary>
            <returns>true if a queue with the specified path exists; otherwise, false.</returns>
            <param name="path">The location of the queue to find. </param>
        </member>
        <member name="P:MControl.Messaging.Server.QManager.Items">
            <summary>
            Queues
            </summary>
            <returns></returns>
        </member>
        <member name="T:MControl.Messaging.Server.QueueConfigClient">
            <summary>
            Represent queue config for client.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Server.QueueConfigClient.GetConfig">
            <summary>
            Get <see cref="T:MControl.Messaging.Server.QueueConfigClient"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.QueueConfigClient.FindPipeClient(System.String)">
            <summary>
            Find <see cref="T:MControl.Messaging.Server.PipeConfigItem"/> item.
            </summary>
            <param name="pipeName"></param>
            <returns></returns>
        </member>
        <member name="P:MControl.Messaging.Server.QueueConfigClient.PipeClientSettings">
            <summary>
            Get <see cref="T:MControl.Messaging.Server.PipeClientConfigItems"/> collection.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Server.PipeClientConfigItems">
            <summary>
            Represent pipe client configuration element collection.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Server.PipeClientConfigItems.CreateNewElement">
            <summary>
            Create New Element
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Server.PipeClientConfigItems.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Get Element Key
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:MControl.Messaging.Server.PipeClientConfigItems.Item(System.Int32)">
            <summary>
            Get or Set <see cref="T:MControl.Messaging.Server.PipeConfigItem"/> item by index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:MControl.Messaging.Server.PipeClientConfigItems.Item(System.String)">
            <summary>
            Get or Set <see cref="T:MControl.Messaging.Server.PipeConfigItem"/> item by key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:MControl.Messaging.Remote.ChannelProperties">
            <summary>
            ChannelProperties
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.BindInfoProtocol">
            <summary>
            Specifies BindInfo protocol.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.BindInfoProtocol.Tcp">
            <summary>
            Tcp protocol.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.BindInfoProtocol.Udp">
            <summary>
            Udp protocol.
            </summary>
        </member>
        <member name="M:MControl.Messaging.GenericPtrQueue.#ctor">
            <summary>
            GenericPtrQueue Ctor
            </summary>
        </member>
        <member name="M:MControl.Messaging.GenericPtrQueue.#ctor(System.String)">
            <summary>
            GenericPtrQueue Ctor with queue name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MControl.Messaging.GenericPtrQueue.Peek">
            <summary>
            Peek IQueueItem from queue
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.GenericPtrQueue.Dequeue">
            <summary>
            Dequeue IQueueItem from queue
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.GenericPtrQueue.Enqueue(System.Guid)">
            <summary>
            Enqueue IQueueItem in queue
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MControl.Messaging.GenericPtrQueue.ReEnqueue(System.Guid)">
            <summary>
            ReEnqueue IQueueItem in queue
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MControl.Messaging.GenericPtrQueue.OnDequeueMessage(MControl.Messaging.PtrItemEventArgs)">
            <summary>
            OnDequeueMessage
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MControl.Messaging.GenericPtrQueue.OnEnqueueMessage(MControl.Messaging.PtrItemEventArgs)">
            <summary>
            OnEnqueueMessage
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MControl.Messaging.GenericPtrQueue.Clone">
            <summary>
            Queue items Clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.GenericPtrQueue.Find(System.Guid)">
            <summary>
            Find IQueueItem
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="P:MControl.Messaging.GenericPtrQueue.SyncCount">
            <summary>
            Get items count in the queue
            </summary>
        </member>
        <member name="P:MControl.Messaging.GenericPtrQueue.QueueName">
            <summary>
            Get QueueName
            </summary>
        </member>
        <member name="M:MControl.Messaging.QueueItem.AddAttachment(MControl.Messaging.QueueAttachment)">
            <summary>
            AddAttachment
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MControl.Messaging.QueueItem.GetEntityStream(System.Boolean)">
            <summary>
            Get entity as stream.
            </summary>
            <param name="writeContextType"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.QueueItem.SetEntityStream(MControl.IO.NetStream,System.Boolean)">
            <summary>
            Set entity from stream.
            </summary>
            <param name="stream"></param>
            <param name="writeContextType"></param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.QueueItem.Copy">
            <summary>
             Get Copy of Queue item
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.QueueItem.ToString">
            <summary>
            Serialize QueueItem to xml string
            </summary>
            <returns></returns>
        </member>
        <member name="P:MControl.Messaging.QueueItem.Body">
            <summary>
            Get or Set Body
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItem.Subject">
            <summary>
            Get or Set Subject
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItem.Sender">
            <summary>
            Get or Set Sender
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItem.Destination">
            <summary>
            Get or Set Destination
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItem.Status">
            <summary>
            Get or Set Status
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItem.SenderId">
            <summary>
            Get or Set SenderId
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItem.OperationId">
            <summary>
            Get or Set OperationId
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItem.HasAttach">
            <summary>
            Get  HasAttach
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItem.Notify">
            <summary>
            Get or Set Notify
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItem.Price">
            <summary>
            Get or Set Price
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItem.Identifer">
            <summary>
            Get or Set Identifer
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItem.Label">
            <summary>
            Get or Set Label
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItem.TransactionId">
            <summary>
            Get or Set TransactionId
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItem.AppSpecific">
            <summary>
            Get or Set AppSpecific
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItem.Segments">
            <summary>
            Get or Set Segments
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItem.ClientContext">
            <summary>
            Get or Set ClientContext
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItem.Server">
            <summary>
            Get or Set Server
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItem.Format">
            <summary>
            Get or Set Format
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItem.Host">
            <summary>
            Get or Set Host/Queue name
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItem.Command">
            <summary>
            Get or Set Command name
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueItem.Attachments">
            <summary>
            Get AttachItems Read only List
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.SslMode">
            <summary>
            This enum holds SSL modes.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.SslMode.None">
            <summary>
            No SSL is used.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.SslMode.SSL">
            <summary>
            Connection is SSL.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.SslMode.TLS">
            <summary>
            Connection will be switched to SSL with start TLS.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Remote.PipeQueueSettings">
             <summary>
            Pipe Settings.
             </summary>
             <example>
             pipeClientSettings
             <pipeClientSettings>
                 <pipe PipeName="myPipe" 
                 PipeDirection="In|Out|InOut" 
                 PipeOptions="None|WriteThrough|Asynchronous" 
                 VerifyPipe="myPipe" 
                 ConnectTimeout="5000" 
                 InBufferSize="1024" 
                 OutBufferSize="1024"/>
             </pipeClientSettings>
             pipeServerSettings
             <pipeServerSettings>
                 <pipe PipeName="myPipe" 
                 PipeDirection="In|Out|InOut" 
                 PipeOptions="None|WriteThrough|Asynchronous" 
                 VerifyPipe="myPipe" 
                 ConnectTimeout="5000" 
                 InBufferSize="1024" 
                 OutBufferSize="1024" 
                 MaxServerConnections="5" 
                 MaxAllowedServerInstances="255"/>
             </pipeServerSettings>
             </example>
        </member>
        <member name="F:MControl.Messaging.Remote.PipeQueueSettings.PIPE_UNLIMITED_INSTANCES">
            <summary>
            Unlimited server pipe instances.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Remote.PipeQueueSettings.DefaultInBufferSize">
            <summary>
            DefaultInBufferSize
            </summary>
        </member>
        <member name="F:MControl.Messaging.Remote.PipeQueueSettings.DefaultOutBufferSize">
            <summary>
            DefaultOutBufferSize
            </summary>
        </member>
        <member name="F:MControl.Messaging.Remote.PipeQueueSettings.DefaultConnectTimeout">
            <summary>
            DefaultConnectTimeout
            </summary>
        </member>
        <member name="F:MControl.Messaging.Remote.PipeQueueSettings.ServerName">
            <summary>
            ServerName constant.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Remote.PipeQueueSettings.#ctor">
            <summary>
            Default constractor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Remote.PipeQueueSettings.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="name"></param>
            <param name="isServer"></param>
            <param name="loadFromSettings"></param>
        </member>
        <member name="M:MControl.Messaging.Remote.PipeQueueSettings.#ctor(System.Xml.XmlNode,System.Boolean)">
            <summary>
            PipeQueueSettings
            </summary>
            <param name="node"></param>
            <param name="isServer"></param>
        </member>
        <member name="M:MControl.Messaging.Remote.PipeQueueSettings.LoadPipeServerSttings(System.String)">
            <summary>
            Load pipe server settings from appConfig using PipeName attribute.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MControl.Messaging.Remote.PipeQueueSettings.LoadPipeClientSttings(System.String)">
            <summary>
            Load pipe client settings from appConfig using PipeName attribute.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:MControl.Messaging.Remote.PipeQueueSettings.PipeName">
            <summary>
             Get or Set PipeName.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Remote.PipeQueueSettings.PipeDirection">
            <summary>
            Get or Set PipeDirection (Default=InOut).
            </summary>
        </member>
        <member name="P:MControl.Messaging.Remote.PipeQueueSettings.PipeOptions">
            <summary>
            Get or Set PipeOptions (Default=None).
            </summary>
        </member>
        <member name="P:MControl.Messaging.Remote.PipeQueueSettings.MaxServerConnections">
            <summary>
            Get or Set MaxServerConnections (Only for server side) (Default=1).
            </summary>
        </member>
        <member name="P:MControl.Messaging.Remote.PipeQueueSettings.MaxAllowedServerInstances">
            <summary>
            Get or Set MaxAllowedServerInstances (Only for server side) (Default=255).
            </summary>
        </member>
        <member name="P:MControl.Messaging.Remote.PipeQueueSettings.VerifyPipe">
            <summary>
            Get or Set VerifyPipe.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Remote.PipeQueueSettings.ConnectTimeout">
            <summary>
            Get or Set ConnectTimeout (Default=5000).
            </summary>
        </member>
        <member name="P:MControl.Messaging.Remote.PipeQueueSettings.InBufferSize">
            <summary>
            Get or Set InBufferSize (Default=8192).
            </summary>
        </member>
        <member name="P:MControl.Messaging.Remote.PipeQueueSettings.OutBufferSize">
            <summary>
            Get or Set OutBufferSize (Default=8192).
            </summary>
        </member>
        <member name="P:MControl.Messaging.Remote.PipeQueueSettings.FullPipeName">
            <summary>
            Get Full Pipe Name.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Remote.PipeQueueSettings.IsApi">
            <summary>
            Get or Set IsApi (Only for server side) (Default=false).
            </summary>
        </member>
        <member name="M:MControl.Messaging.TransItem.Deserialize(System.String)">
            <summary>
            Deserialize TransItem from Base64 string
            </summary>
        </member>
        <member name="M:MControl.Messaging.TransItem.Serialize">
            <summary>
            Serialize Trans Item ToBase64 string
            </summary>
            <returns></returns>
        </member>
        <member name="P:MControl.Messaging.QueueHost.HostName">
            <summary>
            Get or Set HostName
            </summary>
        </member>
        <member name="P:MControl.Messaging.QueueHost.HostAddress">
            <summary>
            Get or Set HostAddress
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_QType">
            <summary>
            This enum holds DNS query type. Defined in RFC 1035.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_QType.A">
            <summary>
            IPv4 host address
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_QType.NS">
            <summary>
            An authoritative name server.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_QType.CNAME">
            <summary>
            The canonical name for an alias.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_QType.SOA">
            <summary>
            Marks the start of a zone of authority.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_QType.PTR">
            <summary>
            A domain name pointer.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_QType.HINFO">
            <summary>
            Host information.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_QType.MX">
            <summary>
            Mail exchange.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_QType.TXT">
            <summary>
            Text strings.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_QType.AAAA">
            <summary>
            IPv6 host address.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_QType.SRV">
            <summary>
            SRV record specifies the location of services.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_QType.NAPTR">
            <summary>
            NAPTR(Naming Authority Pointer) record.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_QType.SPF">
            <summary>
            SPF(Sender Policy Framework) record.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_QType.ANY">
            <summary>
            All records what server returns.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_Query">
            <summary>
            This class represent DSN server query. Defined in RFC 1035.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Query.#ctor(MControl.Messaging.Net.Dns.Dns_QType,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="qtype">Query type.</param>
            <param name="qname">Query text. It depends on query type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>qname</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Query.#ctor(MControl.Messaging.Net.Dns.Dns_QClass,MControl.Messaging.Net.Dns.Dns_QType,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="qclass">Query class.</param>
            <param name="qtype">Query type.</param>
            <param name="qname">Query text. It depends on query type.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>qname</b> is null reference.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Query.QueryClass">
            <summary>
            Gets DNS query class.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Query.QueryType">
            <summary>
            Gets DNS query type.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Query.QueryName">
            <summary>
            Gets query text.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_QClass">
            <summary>
            This enum holds DNS QCLASS value. Defined in RFC 1035 3.2.4.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_QClass.IN">
            <summary>
            Internet class.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_QClass.Any">
            <summary>
            Any class.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.HostEntry">
            <summary>
            This class represent DNS host entry.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.HostEntry.#ctor(System.String,System.Net.IPAddress[],System.String[])">
            <summary>
            Default constructor.
            </summary>
            <param name="hostName">DNS host name.</param>
            <param name="ipAddresses">Host IP addresses.</param>
            <param name="aliases">Host aliases(CNAME).</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hostName</b> or <b>ipAddresses</b> is null reference.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.HostEntry.HostName">
            <summary>
            Gets DNS host name.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.HostEntry.Addresses">
            <summary>
            Gets list of IP addresses that are associated with a host.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.HostEntry.Aliases">
            <summary>
            Gets list of aliases(CNAME) that are associated with a host.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_Record">
            <summary>
            This is base class for DNS records.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Record.#ctor(System.String,MControl.Messaging.Net.Dns.Dns_QType,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="recordType">Record type (A,MX, ...).</param>
            <param name="ttl">TTL (time to live) value in seconds.</param>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Record.Name">
            <summary>
            Gets DNS domain name that owns a resource record.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Record.RecordType">
            <summary>
            Gets record type (A,MX,...).
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Record.TTL">
            <summary>
            Gets TTL (time to live) value in seconds.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_A">
            <summary>
            A record class.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_A.#ctor(System.String,System.Net.IPAddress,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="ip">IP address.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_A.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_A.IP">
            <summary>
            Gets host IP address.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_AAAA">
            <summary>
            DNS AAAA resource record.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_AAAA.#ctor(System.String,System.Net.IPAddress,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="ip">IP address.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_AAAA.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_AAAA.IP">
            <summary>
            Gets host IP address.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_CNAME">
            <summary>
            CNAME record class.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_CNAME.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="alias">Alias.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_CNAME.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_CNAME.Alias">
            <summary>
            Gets alias.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_HINFO">
            <summary>
            HINFO record.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_HINFO.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="cpu">Host CPU.</param>
            <param name="os">Host OS.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_HINFO.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_HINFO.CPU">
            <summary>
            Gets host's CPU.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_HINFO.OS">
            <summary>
            Gets host's OS.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_MX">
            <summary>
            MX record class.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_MX.#ctor(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="preference">MX record preference.</param>
            <param name="host">Mail host dns name.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_MX.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_MX.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type. 
            </summary>
            <param name="obj">An object to compare with this instance. </param>
            <returns>Returns 0 if two objects are equal, returns negative value if this object is less,
            returns positive value if this object is grater.</returns>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_MX.Preference">
            <summary>
            Gets MX record preference. The lower number is the higher priority server.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_MX.Host">
            <summary>
            Gets mail host dns name.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_NAPTR">
            <summary>
            NAPRT(Naming Authority Pointer) resource record. Defined in RFC 3403.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_NAPTR.#ctor(System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="order">Oorder in which the NAPTR records MUST be processed.</param>
            <param name="preference">Order in which NAPTR records with equal Order values SHOULD be processed.</param>
            <param name="flags">Flags which control the rewriting and interpretation of the fields in the record.</param>
            <param name="services">Services related to this record.</param>
            <param name="regexp">Regular expression that is applied to the original string.</param>
            <param name="replacement">Regular expressions replacement value.</param>
            <param name="ttl">Time to live value in seconds.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_NAPTR.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_NAPTR.Order">
            <summary>
            Gets order in which the NAPTR records MUST be processed in order to accurately 
            represent the ordered list of Rules.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_NAPTR.Preference">
            <summary>
            Gets the order in which NAPTR records with equal Order values SHOULD be processed, 
            low numbers being processed before high numbers.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_NAPTR.Flags">
            <summary>
            Gets flags which control the rewriting and interpretation of the fields in the record.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_NAPTR.Services">
            <summary>
            Gets services related to this record. Known values can be get from: http://www.iana.org/assignments/enum-services.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_NAPTR.Regexp">
            <summary>
            Gets regular expression that is applied to the original string held by the client in order to 
            construct the next domain name to lookup.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_NAPTR.Replacement">
            <summary>
            Gets regular expressions replacement value.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_NS">
            <summary>
            NS record class.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_NS.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="nameServer">Name server name.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_NS.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_NS.NameServer">
            <summary>
            Gets name server name.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_PTR">
            <summary>
            PTR record class.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_PTR.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="domainName">DomainName.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_PTR.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_PTR.DomainName">
            <summary>
            Gets domain name.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_SOA">
            <summary>
            SOA record class.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_SOA.#ctor(System.String,System.String,System.String,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="nameServer">Name server.</param>
            <param name="adminEmail">Zone administrator email.</param>
            <param name="serial">Version number of the original copy of the zone.</param>
            <param name="refresh">Time interval(in seconds) before the zone should be refreshed.</param>
            <param name="retry">Time interval(in seconds) that should elapse before a failed refresh should be retried.</param>
            <param name="expire">Time value(in seconds) that specifies the upper limit on the time interval that can elapse before the zone is no longer authoritative.</param>
            <param name="minimum">Minimum TTL(in seconds) field that should be exported with any RR from this zone.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_SOA.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_SOA.NameServer">
            <summary>
            Gets name server.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_SOA.AdminEmail">
            <summary>
            Gets zone administrator email.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_SOA.Serial">
            <summary>
            Gets version number of the original copy of the zone.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_SOA.Refresh">
            <summary>
            Gets time interval(in seconds) before the zone should be refreshed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_SOA.Retry">
            <summary>
            Gets time interval(in seconds) that should elapse before a failed refresh should be retried.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_SOA.Expire">
            <summary>
            Gets time value(in seconds) that specifies the upper limit on the time interval that can elapse before the zone is no longer authoritative.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_SOA.Minimum">
            <summary>
            Gets minimum TTL(in seconds) field that should be exported with any RR from this zone. 
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_SRV">
            <summary>
            DNS SRV record. SRV record specifies the location of services. Defined in RFC 2782.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_SRV.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="priority">Service priority.</param>
            <param name="weight">Weight value.</param>
            <param name="port">Service port.</param>
            <param name="target">Service provider host name or IP address.</param>
            <param name="ttl">Time to live value in seconds.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_SRV.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_SRV.Priority">
            <summary>
            Gets service priority. Lowest value means greater priority.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_SRV.Weight">
            <summary>
            Gets weight. The weight field specifies a relative weight for entries with the same priority. 
            Larger weights SHOULD be given a proportionately higher probability of being selected.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_SRV.Port">
            <summary>
            Port where service runs.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_SRV.Target">
            <summary>
            Service provider host name or IP address.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_SPF">
            <summary>
            This class represent SPF resource record. Defined in RFC 4408.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_SPF.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="text">SPF text.</param>
            <param name="ttl">TTL (time to live) value in seconds.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_SPF.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_SPF.Text">
            <summary>
            Gets text.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_TXT">
            <summary>
            TXT record class.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_TXT.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="text">Text.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_TXT.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_TXT.Text">
            <summary>
            Gets text.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.ParseException">
            <summary>
            This exception is thrown when parse errors are encountered.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.ParseException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:MControl.Messaging.Net.IO.MultiStream">
            <summary>
            This class combines multiple stream into one stream for reading.
            The most common usage for that stream is when you need to insert some data to the beginning of some stream.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.MultiStream.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.MultiStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.MultiStream.AppendStream(System.IO.Stream)">
            <summary>
            Appends this stream to read queue.
            </summary>
            <param name="stream">Stream to add.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.MultiStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.MultiStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.MultiStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="M:MControl.Messaging.Net.IO.MultiStream.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.MultiStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.MultiStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.MultiStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.MultiStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.MultiStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.MultiStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when one of the source streams won't support <b>Length</b> property.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.MultiStream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="T:MControl.Messaging.Net.IO.PartialStream">
            <summary>
            Implements read-only stream what operates on specified range of source stream
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.PartialStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="start">Zero based start positon in source stream.</param>
            <param name="length">Length of stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.PartialStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.PartialStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.PartialStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.PartialStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.PartialStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.PartialStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.PartialStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.PartialStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.PartialStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.PartialStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="M:MControl.Messaging.Net.IO.PartialStream.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.PartialStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:MControl.Messaging.Net.TextUtils">
            <summary>
            This class provides usefull text methods.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.TextUtils.QuoteString(System.String)">
            <summary>
            Qoutes string and escapes fishy('\',"') chars.
            </summary>
            <param name="text">Text to quote.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.TextUtils.UnQuoteString(System.String)">
            <summary>
            Unquotes and unescapes escaped chars specified text. For example "xxx" will become to 'xxx', "escaped quote \"", will become to escaped 'quote "'.
            </summary>
            <param name="text">Text to unquote.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.TextUtils.EscapeString(System.String,System.Char[])">
            <summary>
            Escapes specified chars in the specified string.
            </summary>
            <param name="text">Text to escape.</param>
            <param name="charsToEscape">Chars to escape.</param>
        </member>
        <member name="M:MControl.Messaging.Net.TextUtils.UnEscapeString(System.String)">
            <summary>
            Unescapes all escaped chars.
            </summary>
            <param name="text">Text to unescape.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.TextUtils.SplitQuotedString(System.String,System.Char)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.TextUtils.SplitQuotedString(System.String,System.Char,System.Boolean)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <param name="unquote">If true, splitted parst will be unqouted if they are qouted.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.TextUtils.SplitQuotedString(System.String,System.Char,System.Boolean,System.Int32)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <param name="unquote">If true, splitted parst will be unqouted if they are qouted.</param>
            <param name="count">Maximum number of substrings to return.</param>
            <returns>Returns splitted string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.TextUtils.QuotedIndexOf(System.String,System.Char)">
            <summary>
            Gets first index of specified char. The specified char in quoted string is skipped.
            Returns -1 if specified char doesn't exist.
            </summary>
            <param name="text">Text in what to check.</param>
            <param name="indexChar">Char what index to get.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.TextUtils.SplitString(System.String,System.Char)">
            <summary>
            Splits string into string arrays.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char Char that splits text.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.TextUtils.IsToken(System.String)">
            <summary>
            Gets if specified string is valid "token" value.
            </summary>
            <param name="value">String value to check.</param>
            <returns>Returns true if specified string value is valid "token" value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised if <b>value</b> is null.</exception>
        </member>
        <member name="T:MControl.Messaging.Net.StringReader">
            <summary>
            String reader.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.StringReader.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="source">Source string.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>source</b> is null.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.StringReader.AppendString(System.String)">
            <summary>
            Appends specified string to SourceString.
            </summary>
            <param name="value">String value to append.</param>
        </member>
        <member name="M:MControl.Messaging.Net.StringReader.ReadToFirstChar">
            <summary>
            Reads to first char, skips white-space(SP,VTAB,HTAB,CR,LF) from the beginning of source string.
            </summary>
            <returns>Returns white-space chars which was readed.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.StringReader.ReadSpecifiedLength(System.Int32)">
            <summary>
            Reads string with specified length. Throws exception if read length is bigger than source string length.
            </summary>
            <param name="length">Number of chars to read.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.StringReader.QuotedReadToDelimiter(System.Char)">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiter in quoted string is skipped.
            Delimiter is removed by default.
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiter">Data delimiter.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.StringReader.QuotedReadToDelimiter(System.Char[])">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiters in quoted string is skipped.
            Delimiter is removed by default.
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.StringReader.QuotedReadToDelimiter(System.Char[],System.Boolean)">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiters in quoted string is skipped. 
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <param name="removeDelimiter">Specifies if delimiter is removed from underlying string.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.StringReader.ReadWord">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.StringReader.ReadWord(System.Boolean)">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <param name="unQuote">Specifies if quoted string word is unquoted.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.StringReader.ReadWord(System.Boolean,System.Char[],System.Boolean)">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <param name="unQuote">Specifies if quoted string word is unquoted.</param>
            <param name="wordTerminatorChars">Specifies chars what terminate word.</param>
            <param name="removeWordTerminator">Specifies if work terminator is removed.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.StringReader.ReadParenthesized">
            <summary>
            Reads parenthesized value. Supports {},(),[],&lt;&gt; parenthesis. 
            Throws exception if there isn't parenthesized value or closing parenthesize is missing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.StringReader.ReadToEnd">
            <summary>
            Reads all remaining string, returns null if no chars left to read.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.StringReader.RemoveFromEnd(System.Int32)">
            <summary>
            Removes specified count of chars from the end of the source string.
            </summary>
            <param name="count">Char count.</param>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.StringReader.StartsWith(System.String)">
            <summary>
            Gets if source string starts with specified value. Compare is case-sensitive.
            </summary>
            <param name="value">Start string value.</param>
            <returns>Returns true if source string starts with specified value.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.StringReader.StartsWith(System.String,System.Boolean)">
            <summary>
            Gets if source string starts with specified value.
            </summary>
            <param name="value">Start string value.</param>
            <param name="case_sensitive">Specifies if compare is case-sensitive.</param>
            <returns>Returns true if source string starts with specified value.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.StringReader.EndsWith(System.String)">
            <summary>
            Gets if source string ends with specified value. Compare is case-sensitive.
            </summary>
            <param name="value">Start string value.</param>
            <returns>Returns true if source string ends with specified value.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.StringReader.EndsWith(System.String,System.Boolean)">
            <summary>
            Gets if source string ends with specified value.
            </summary>
            <param name="value">Start string value.</param>
            <param name="case_sensitive">Specifies if compare is case-sensitive.</param>
            <returns>Returns true if source string ends with specified value.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.StringReader.StartsWithWord">
            <summary>
            Gets if current source string starts with word. For example if source string starts with
            whiter space or parenthesize, this method returns false.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MControl.Messaging.Net.StringReader.Available">
            <summary>
            Gets how many chars are available for reading.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.StringReader.OriginalString">
            <summary>
            Gets original string passed to class constructor.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.StringReader.SourceString">
            <summary>
            Gets currently remaining string.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.StringReader.Position">
            <summary>
            Gets position in original string.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_ResponseCode">
            <summary>
            This class holds DNS server responce code. Defined in RFC 1035.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_ResponseCode.NO_ERROR">
            <summary>
            No error condition.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_ResponseCode.FORMAT_ERRROR">
            <summary>
            Format error - The name server was unable to interpret the query.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_ResponseCode.SERVER_FAILURE">
            <summary>
            Server failure - The name server was unable to process this query due to a problem with the name server.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_ResponseCode.NAME_ERROR">
            <summary>
            Name Error - Meaningful only for responses from an authoritative name server, this code signifies that the
            domain name referenced in the query does not exist.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_ResponseCode.NOT_IMPLEMENTED">
            <summary>
            Not Implemented - The name server does not support the requested kind of query.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_ResponseCode.REFUSED">
            <summary>
            Refused - The name server refuses to perform the specified operation for policy reasons.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_Client">
            <summary>
            DNS client.
            </summary>
            <example>
            <code>
            // Optionally set dns servers, by default DNS client uses defaultt NIC DNS servers.
            Dns_Client.DnsServers = new string[]{"194.126.115.18"};
            
            Dns_Client dns = Dns_Client.Static;
            
            // Get MX records.
            DnsServerResponse resp = dns.Query("netmail.com",QTYPE.MX);
            if(resp.ConnectionOk &amp;&amp; resp.ResponseCode == RCODE.NO_ERROR){
            	MX_Record[] mxRecords = resp.GetMXRecords();
            	
            	// Do your stuff
            }
            else{
            	// Handle error there, for more exact error info see RCODE 
            }	 
            
            </code>
            </example>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.CreateTransaction(MControl.Messaging.Net.Dns.Dns_QType,System.String,System.Int32)">
            <summary>
            Creates new DNS client transaction.
            </summary>
            <param name="queryType">Query type.</param>
            <param name="queryText">Query text. It depends on queryType.</param>
            <param name="timeout">Transaction timeout in milliseconds. DNS default value is 2000, value 0 means no timeout - this is not suggested.</param>
            <returns>Returns DNS client transaction.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>queryText</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <remarks>Creates asynchronous(non-blocking) DNS transaction. Call <see cref="M:MControl.Messaging.Net.Dns.Dns_ClientTransaction.Start"/> to start transaction.
            It is allowd to create multiple conccurent transactions.</remarks>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.Query(System.String,MControl.Messaging.Net.Dns.Dns_QType)">
            <summary>
            Queries server with specified query.
            </summary>
            <param name="queryText">Query text. It depends on queryType.</param>
            <param name="queryType">Query type.</param>
            <returns>Returns DSN server response.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>queryText</b> is null.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.Query(System.String,MControl.Messaging.Net.Dns.Dns_QType,System.Int32)">
            <summary>
            Queries server with specified query.
            </summary>
            <param name="queryText">Query text. It depends on queryType.</param>
            <param name="queryType">Query type.</param>
            <param name="timeout">Query timeout in milli seconds.</param>
            <returns>Returns DSN server response.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>queryText</b> is null.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetHostAddresses(System.String)">
            <summary>
            Gets host IPv4 and IPv6 addresses.
            </summary>
            <param name="hostNameOrIP">Host name or IP address.</param>
            <returns>Returns host IPv4 and IPv6 addresses.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hostNameOrIP</b> is null reference.</exception>
            <exception cref="T:MControl.Messaging.Net.Dns.Dns_ClientException">Is raised when DNS server returns error.</exception>
            <exception cref="T:System.IO.IOException">Is raised when IO reletaed error happens.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetHostAddressesAsync(MControl.Messaging.Net.Dns.Dns_Client.GetHostAddressesAsyncOperation)">
            <summary>
            Starts resolving host IPv4 and IPv6 addresses.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:MControl.Messaging.Net.Dns.Dns_Client.GetHostAddressesAsyncOperation.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddress(System.String)">
            <summary>
            Resolving host IPv4 and IPv6 address.
            </summary>
            <param name="hostName">Host name to resolve.</param>
            <returns>Returns host entries.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hostNames</b> is null reference.</exception>
            <exception cref="T:MControl.Messaging.Net.Dns.Dns_ClientException">Is raised when DNS server returns error.</exception>
            <exception cref="T:System.IO.IOException">Is raised when IO reletaed error happens.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddresses(System.String[])">
            <summary>
            Resolving multiple host IPv4 and IPv6 addresses.
            </summary>
            <param name="hostNames">Host names to resolve.</param>
            <returns>Returns host entries.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hostNames</b> is null reference.</exception>
            <exception cref="T:MControl.Messaging.Net.Dns.Dns_ClientException">Is raised when DNS server returns error.</exception>
            <exception cref="T:System.IO.IOException">Is raised when IO reletaed error happens.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddresses(System.String[],System.Boolean)">
            <summary>
            Resolving multiple host IPv4 and IPv6 addresses.
            </summary>
            <param name="hostNames">Host names to resolve.</param>
            <param name="resolveAny">If true, as long as one host name is resolved, no error returned.</param>
            <returns>Returns host entries.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hostNames</b> is null reference.</exception>
            <exception cref="T:MControl.Messaging.Net.Dns.Dns_ClientException">Is raised when DNS server returns error.</exception>
            <exception cref="T:System.IO.IOException">Is raised when IO reletaed error happens.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddressesAsync(MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddressesAsyncOperation)">
            <summary>
            Starts resolving multiple host IPv4 and IPv6 addresses.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddressesAsyncOperation.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetEmailHosts(System.String)">
            <summary>
            Gets email hosts.
            </summary>
            <param name="domain">Email domain. For example: 'domain.com'.</param>
            <returns>Returns email hosts in priority order.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>domain</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:MControl.Messaging.Net.Dns.Dns_ClientException">Is raised when DNS server returns error.</exception>
            <exception cref="T:System.IO.IOException">Is raised when IO reletaed error happens.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetEmailHostsAsync(MControl.Messaging.Net.Dns.Dns_Client.GetEmailHostsAsyncOperation)">
            <summary>
            Starts getting email hosts.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:MControl.Messaging.Net.Dns.Dns_Client.GetEmailHostsAsyncOperation.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.Send(System.Net.IPAddress,System.Byte[],System.Int32)">
            <summary>
            Sends specified packet to the specified target IP end point.
            </summary>
            <param name="target">Target end point.</param>
            <param name="packet">Packet to send.</param>
            <param name="count">Number of bytes to send from <b>packet</b>.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>target</b> or <b>packet</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.ProcessUdpPacket(MControl.Messaging.Net.Udp.UdpPacketReceivedEventArgs)">
            <summary>
            Processes received Udp packet.
            </summary>
            <param name="e">Udp packet.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.ParseQuery(System.Byte[])">
            <summary>
            Parses query.
            </summary>
            <param name="reply">Dns server reply.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.ParseAnswers(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Parses specified count of answers from query.
            </summary>
            <param name="reply">Server returned query.</param>
            <param name="answerCount">Number of answers to parse.</param>
            <param name="offset">Position from where to start parsing answers.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.ReadCharacterString(System.Byte[],System.Int32@)">
            <summary>
            Reads character-string from spefcified data and offset.
            </summary>
            <param name="data">Data from where to read.</param>
            <param name="offset">Offset from where to start reading.</param>
            <returns>Returns readed string.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.Resolve(System.String[])">
            <summary>
            Resolves host names to IP addresses.
            </summary>
            <param name="hosts">Host names to resolve.</param>
            <returns>Returns specified hosts IP addresses.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hosts</b> is null.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.Resolve(System.String)">
            <summary>
            Resolves host name to IP addresses.
            </summary>
            <param name="host">Host name or IP address.</param>
            <returns>Return specified host IP addresses.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>host</b> is null.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Client.Static">
            <summary>
            Gets static DNS client.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Client.DnsServers">
            <summary>
            Gets or sets dns servers.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Client.UseDnsCache">
            <summary>
            Gets or sets if to use dns caching.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Client.Cache">
            <summary>
            Gets DNS cache.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_Client.GetHostAddressesAsyncOperation">
            <summary>
            This class represents <see cref="M:MControl.Messaging.Net.Dns.Dns_Client.GetHostAddressesAsync(MControl.Messaging.Net.Dns.Dns_Client.GetHostAddressesAsyncOperation)"/> asynchronous operation.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.IAsyncOperation">
            <summary>
            Represents asynchronous operation.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IAsyncOperation.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IAsyncOperation.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetHostAddressesAsyncOperation.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="hostNameOrIP">Host name or IP address.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hostNameOrIP</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetHostAddressesAsyncOperation.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetHostAddressesAsyncOperation.Start(MControl.Messaging.Net.Dns.Dns_Client)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="dnsClient">DNS client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>dnsClient</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetHostAddressesAsyncOperation.SetState(MControl.Messaging.Net.AsyncOperationState)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetHostAddressesAsyncOperation.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Client.GetHostAddressesAsyncOperation.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Client.GetHostAddressesAsyncOperation.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Client.GetHostAddressesAsyncOperation.HostNameOrIP">
            <summary>
            Gets argument <b>hostNameOrIP</b> value.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Client.GetHostAddressesAsyncOperation.Addresses">
            <summary>
            Gets host IP addresses.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.Dns.Dns_Client.GetHostAddressesAsyncOperation.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddressesAsyncOperation">
            <summary>
            This class represents <see cref="M:MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddressesAsync(MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddressesAsyncOperation)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddressesAsyncOperation.#ctor(System.String[])">
            <summary>
            Default constructor.
            </summary>
            <param name="hostNames">Host names to resolve.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hostNames</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddressesAsyncOperation.#ctor(System.String[],System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="hostNames">Host names to resolve.</param>
            <param name="resolveAny">If true, as long as one host name is resolved, no error returned.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hostNames</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddressesAsyncOperation.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddressesAsyncOperation.Start(MControl.Messaging.Net.Dns.Dns_Client)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="dnsClient">DNS client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>dnsClient</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddressesAsyncOperation.SetState(MControl.Messaging.Net.AsyncOperationState)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddressesAsyncOperation.GetHostAddressesCompleted(MControl.Messaging.Net.Dns.Dns_Client.GetHostAddressesAsyncOperation,System.Int32)">
            <summary>
            This method is called when GetHostAddresses operation has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <param name="index">Index in 'm_HostEntries' where to store lookup result.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddressesAsyncOperation.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddressesAsyncOperation.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddressesAsyncOperation.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddressesAsyncOperation.HostNames">
            <summary>
            Gets argument <b>hostNames</b> value.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddressesAsyncOperation.HostEntries">
            <summary>
            Gets host entries.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddressesAsyncOperation.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_Client.GetEmailHostsAsyncOperation">
            <summary>
            This class represents <see cref="M:MControl.Messaging.Net.Dns.Dns_Client.GetEmailHostsAsync(MControl.Messaging.Net.Dns.Dns_Client.GetEmailHostsAsyncOperation)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetEmailHostsAsyncOperation.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="domain">Email domain. For example: 'domain.com'.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>domain</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetEmailHostsAsyncOperation.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetEmailHostsAsyncOperation.Start(MControl.Messaging.Net.Dns.Dns_Client)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="dnsClient">DNS client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>dnsClient</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetEmailHostsAsyncOperation.SetState(MControl.Messaging.Net.AsyncOperationState)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetEmailHostsAsyncOperation.LookupMX(MControl.Messaging.Net.Dns.Dns_Client,System.String,System.Boolean)">
            <summary>
            Starts looking up MX records for specified domain.
            </summary>
            <param name="dnsClient">DNS client.</param>
            <param name="domain">Domain name.</param>
            <param name="domainIsCName">If true domain name is CNAME(alias).</param>
            <exception cref="T:System.ArgumentNullException">Is riased when <b>dnsClient</b> or <b>domain</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetEmailHostsAsyncOperation.Get_A_or_AAAA_FromResponse(System.String,MControl.Messaging.Net.Dns.DnsServerResponse)">
            <summary>
            Gets A and AAAA records from DNS server additional responses section.
            </summary>
            <param name="name">Host name.</param>
            <param name="response">DNS server response.</param>
            <returns>Returns A and AAAA records from DNS server additional responses section.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> or <b>response</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetEmailHostsAsyncOperation.LookupCompleted(MControl.Messaging.Net.Dns.Dns_Client.GetHostsAddressesAsyncOperation,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            This method is called when A/AAAA lookup has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <param name="name_to_index">Dns name to index lookup table.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> or <b>name_to_index</b> is null reference value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_Client.GetEmailHostsAsyncOperation.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Client.GetEmailHostsAsyncOperation.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Client.GetEmailHostsAsyncOperation.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Client.GetEmailHostsAsyncOperation.EmailDomain">
            <summary>
            Gets email domain.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_Client.GetEmailHostsAsyncOperation.Hosts">
            <summary>
            Gets email hosts. Hosts are in priority order.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.Dns.Dns_Client.GetEmailHostsAsyncOperation.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_ClientCache">
            <summary>
            This class implements DNS client cache.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_ClientCache.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_ClientCache.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_ClientCache.m_TimerTimeout_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is called when cache expired entries check timer triggers.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_ClientCache.GetFromCache(System.String,System.Int32)">
            <summary>
            Gets DNS server cached response or null if no cached result.
            </summary>
            <param name="qname">Query name.</param>
            <param name="qtype">Query type.</param>
            <returns>Returns DNS server cached response or null if no cached result.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>qname</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_ClientCache.AddToCache(System.String,System.Int32,MControl.Messaging.Net.Dns.DnsServerResponse)">
            <summary>
            Adds dns records to cache. If old entry exists, it is replaced.
            </summary>
            <param name="qname">Query name.</param>
            <param name="qtype">Query type.</param>
            <param name="response">DNS server response.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>qname</b> or <b>response</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_ClientCache.ClearCache">
            <summary>
            Clears DNS cache.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_ClientCache.MaxCacheTtl">
            <summary>
            Gets or sets maximum number of seconds to cache positive DNS responses.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_ClientCache.MaxNegativeCacheTtl">
            <summary>
            Gets or sets maximum number of seconds to cache negative DNS responses.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_ClientCache.Count">
            <summary>
            Gets number of DNS queries cached.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_ClientCache.CacheEntry">
            <summary>
            This class represents DNS cache entry.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_ClientCache.CacheEntry.#ctor(MControl.Messaging.Net.Dns.DnsServerResponse,System.DateTime)">
            <summary>
            Default constructor.
            </summary>
            <param name="response">DNS server response.</param>
            <param name="expires">Time when cache entry expires.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>response</b> is null reference.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_ClientCache.CacheEntry.Response">
            <summary>
            Gets DNS server response.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_ClientCache.CacheEntry.Expires">
            <summary>
            Gets time when cache entry expires.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.DnsServerResponse">
            <summary>
            This class represents dns server response.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.DnsServerResponse.GetARecords">
            <summary>
            Gets IPv4 host addess records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.DnsServerResponse.GetNSRecords">
            <summary>
            Gets name server records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.DnsServerResponse.GetCNAMERecords">
            <summary>
            Gets CNAME records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.DnsServerResponse.GetSOARecords">
            <summary>
            Gets SOA records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.DnsServerResponse.GetPTRRecords">
            <summary>
            Gets PTR records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.DnsServerResponse.GetHINFORecords">
            <summary>
            Gets HINFO records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.DnsServerResponse.GetMXRecords">
            <summary>
            Gets MX records.(MX records are sorted by preference, lower array element is prefered)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.DnsServerResponse.GetTXTRecords">
            <summary>
            Gets text records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.DnsServerResponse.GetAAAARecords">
            <summary>
            Gets IPv6 host addess records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.DnsServerResponse.GetSRVRecords">
            <summary>
            Gets SRV resource records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.DnsServerResponse.GetNAPTRRecords">
            <summary>
            Gets NAPTR resource records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.DnsServerResponse.GetSPFRecords">
            <summary>
            Gets SPF resource records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.DnsServerResponse.FilterRecordsX(System.Collections.Generic.List{MControl.Messaging.Net.Dns.Dns_Record},MControl.Messaging.Net.Dns.Dns_QType)">
            <summary>
            Filters out specified type of records from answer.
            </summary>
            <param name="answers"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.DnsServerResponse.ConnectionOk">
            <summary>
            Gets if connection to dns server was successful.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.DnsServerResponse.ID">
            <summary>
            Gets DNS transaction ID.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.DnsServerResponse.ResponseCode">
            <summary>
            Gets dns server response code.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.DnsServerResponse.AllAnswers">
            <summary>
            Gets all resource records returned by server (answer records section + authority records section + additional records section). 
            NOTE: Before using this property ensure that ConnectionOk=true and ResponseCode=RCODE.NO_ERROR.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.DnsServerResponse.Answers">
            <summary>
            Gets dns server returned answers. NOTE: Before using this property ensure that ConnectionOk=true and ResponseCode=RCODE.NO_ERROR.
            </summary>
            <code>
            // NOTE: DNS server may return diffrent record types even if you query MX.
            //       For example you query netmail.com MX and server may response:	
            //		 1) MX - mail.netmail.com
            //		 2) A  -netmail.com
            // 
            //       Before casting to right record type, see what type record is !
            			
            
            foreach(DnsRecordBase record in Answers){
            	// MX record, cast it to MX_Record
            	if(record.RecordType == QTYPE.MX){
            		MX_Record mx = (MX_Record)record;
            	}
            }
            </code>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.DnsServerResponse.AuthoritiveAnswers">
            <summary>
            Gets name server resource records in the authority records section. NOTE: Before using this property ensure that ConnectionOk=true and ResponseCode=RCODE.NO_ERROR.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.DnsServerResponse.AdditionalAnswers">
            <summary>
            Gets resource records in the additional records section. NOTE: Before using this property ensure that ConnectionOk=true and ResponseCode=RCODE.NO_ERROR.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_ReplyCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_ReplyCode.QUERY">
            <summary>
            A standard query.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_ReplyCode.IQUERY">
            <summary>
            An inverse query. Obsoleted by RFC 3425.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_ReplyCode.STATUS">
            <summary>
            A server status request.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_ClientTransactionState">
            <summary>
            This class represents DNS client state.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_ClientTransactionState.WaitingForStart">
            <summary>
            Transaction waits for start.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_ClientTransactionState.Active">
            <summary>
            Transaction is progress.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_ClientTransactionState.Completed">
            <summary>
            Transaction is completed(has got response from DNS server).
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.Dns.Dns_ClientTransactionState.Disposed">
            <summary>
            Transaction is disposed.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_ClientTransaction">
            <summary>
            This class represents DNS client transaction.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_ClientTransaction.#ctor(MControl.Messaging.Net.Dns.Dns_Client,System.Int32,MControl.Messaging.Net.Dns.Dns_QType,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner DNS client.</param>
            <param name="id">Transaction ID.</param>
            <param name="qtype">QTYPE value.</param>
            <param name="qname">QNAME value.</param>
            <param name="timeout">Timeout in milliseconds.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> or <b>qname</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_ClientTransaction.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_ClientTransaction.m_TimeoutTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is called when DNS transaction timeout timer triggers.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_ClientTransaction.Start">
            <summary>
            Starts DNS transaction processing.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called in invalid transaction state.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_ClientTransaction.ProcessResponse(MControl.Messaging.Net.Dns.DnsServerResponse)">
            <summary>
            Processes DNS server response through this transaction.
            </summary>
            <param name="response">DNS server response.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>response</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_ClientTransaction.SetState(MControl.Messaging.Net.Dns.Dns_ClientTransactionState)">
            <summary>
            Sets transaction state.
            </summary>
            <param name="state">New transaction state.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_ClientTransaction.CreateQuery(System.Byte[],System.Int32,System.String,MControl.Messaging.Net.Dns.Dns_QType,System.Int32)">
            <summary>
            Creates binary query.
            </summary>
            <param name="buffer">Buffer where to store query.</param>
            <param name="ID">Query ID.</param>
            <param name="qname">Query text.</param>
            <param name="qtype">Query type.</param>
            <param name="qclass">Query class.</param>
            <returns>Returns number of bytes stored to <b>buffer</b>.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_ClientTransaction.OnStateChanged">
            <summary>
            Raises <b>StateChanged</b> event.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_ClientTransaction.OnTimeout">
            <summary>
            Raises <b>Timeout</b> event.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_ClientTransaction.State">
            <summary>
            Get DNS transaction state.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_ClientTransaction.CreateTime">
            <summary>
            Gets transaction create time.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_ClientTransaction.ID">
            <summary>
            Gets DNS transaction ID.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_ClientTransaction.QName">
            <summary>
            Gets QNAME value.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_ClientTransaction.QType">
            <summary>
            Gets QTYPE value.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_ClientTransaction.Response">
            <summary>
            Gets DNS server response. Value null means no response received yet.
            </summary>
        </member>
        <member name="E:MControl.Messaging.Net.Dns.Dns_ClientTransaction.StateChanged">
            <summary>
            This event is raised when DNS transaction state has changed.
            </summary>
        </member>
        <member name="E:MControl.Messaging.Net.Dns.Dns_ClientTransaction.Timeout">
            <summary>
            This event is raised when DNS transaction times out.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Dns.Dns_ClientException">
            <summary>
            DNS client exception.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Dns.Dns_ClientException.#ctor(MControl.Messaging.Net.Dns.Dns_ResponseCode)">
            <summary>
            Default constructor.
            </summary>
            <param name="rcode">DNS server returned error code.</param>
        </member>
        <member name="P:MControl.Messaging.Net.Dns.Dns_ClientException.ErrorCode">
            <summary>
            Gets DNS server returned error code.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthAuthenticateEventArgs">
            <summary>
            This class provides data for server userName/password authentications.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthAuthenticateEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="authorizationID">Authorization ID.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the argumnets has invalid value.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthAuthenticateEventArgs.IsAuthenticated">
            <summary>
            Gets or sets if specified user is authenticated.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthAuthenticateEventArgs.AuthorizationID">
            <summary>
            Gets authorization ID.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthAuthenticateEventArgs.UserName">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthAuthenticateEventArgs.Password">
            <summary>
            Gets password.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthGmailOAuth1">
            <summary>
            This class implements Google Gmail OAUTH version 1.0.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthGmailOAuth1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthGmailOAuth1.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="consumerKey">OAuth consumer key.</param>
            <param name="consumerSecret">OAuth consumer secret.</param>
            <exception cref="T:System.ArgumentNullException">Is riased when <b>consumerKey</b> or <b>consumerSecret</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is riased when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthGmailOAuth1.GetRequestToken">
            <summary>
            Gets Gmail request Token.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called in invalid state.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthGmailOAuth1.GetRequestToken(System.String)">
            <summary>
            Gets Gmail request Token.
            </summary>
            <param name="callback">OAuth callback Url.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>callback</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called in invalid state.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthGmailOAuth1.GetAuthorizationUrl">
            <summary>
            Gets Gmail authorization Url.
            </summary>
            <returns>Returns Gmail authorization Url.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthGmailOAuth1.GetAccessToken(System.String)">
            <summary>
            Gets Gmail access token.
            </summary>
            <param name="verificationCode">Google provided verfification code on authorization Url.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>verificationCode</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called in invalid state.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthGmailOAuth1.GetXOAuthStringForSmtp">
            <summary>
            Gets Gmail XOAUTH authentication string.
            </summary>
            <returns>Returns Gmail XOAUTH authentication string.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called in invalid state.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthGmailOAuth1.GetXOAuthStringForSmtp(System.String)">
            <summary>
            Gets Gmail XOAUTH authentication string.
            </summary>
            <param name="email">Gmail email address.</param>
            <returns>Returns Gmail XOAUTH authentication string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>email</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called in invalid state.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthGmailOAuth1.GetXOAuthStringForImap">
            <summary>
            Gets Gmail XOAUTH authentication string.
            </summary>
            <returns>Returns Gmail XOAUTH authentication string.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called in invalid state.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthGmailOAuth1.GetXOAuthStringForImap(System.String)">
            <summary>
            Gets Gmail XOAUTH authentication string.
            </summary>
            <param name="email">Gmail email address.</param>
            <returns>Returns Gmail XOAUTH authentication string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>email</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called in invalid state.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthGmailOAuth1.GetUserEmail">
            <summary>
            Gets user Gmail email address. 
            </summary>
            <returns>Returns user Gmail email address.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called in invalid state.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthGmailOAuth1.GenerateTimeStamp">
            <summary>
            Creates the timestamp for the signature.        
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthGmailOAuth1.GenerateNonce">
            <summary>
            Creates a nonce for the signature.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthGmailOAuth1.Email">
            <summary>
            Gets user Gmail email address. Returns null if no GetUserEmail method ever called.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthHttpDigest">
            <summary>
            Implements http digest access authentication. Defined in RFC 2617.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigest.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="digestResponse">Server/Client returned digest response.</param>
            <param name="requestMethod">Request method.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigest.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Client constructor. This is used to build valid Authorization response to server.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <param name="cnonce">Client nonce value.</param>
            <param name="uri">Request URI.</param>
            <param name="digestResponse">Server authenticate resposne.</param>
            <param name="requestMethod">Request method.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigest.#ctor(System.String,System.String,System.String)">
            <summary>
            Server constructor. This is used to build valid Authenticate response to client.
            </summary>
            <param name="realm">Realm(domain).</param>
            <param name="nonce">Nonce value.</param>
            <param name="opaque">Opaque value.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigest.Authenticate(System.String,System.String)">
            <summary>
            Authenticates specified user and password using this class parameters.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns true if authenticated, otherwise false.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigest.Parse(System.String)">
            <summary>
            Parses authetication info from client digest response.
            </summary>
            <param name="digestResponse">Client returned digest response.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigest.CalculateRspAuth(System.String,System.String)">
            <summary>
            Calculates 'rspauth' value.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns 'rspauth' value.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigest.CalculateResponse(System.String,System.String)">
            <summary>
            Calculates response value.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">User password.</param>
            <returns>Returns calculated rsponse value.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigest.ToString">
            <summary>
            Converts this to valid digest string.
            </summary>
            <returns>Returns digest string.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigest.ToChallange">
            <summary>
            Creates 'Challange' data using this class info. 
            </summary>
            <returns>Returns Challange data.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigest.ToChallange(System.Boolean)">
            <summary>
            Creates 'Challange' data using this class info. 
            </summary>
            <param name="addAuthMethod">Specifies if 'digest ' authe method string constant is added.</param>
            <returns>Returns Challange data.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigest.ToAuthorization">
            <summary>
            Creates 'Authorization' data using this class info.
            </summary>
            <returns>Return Authorization data.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigest.ToAuthorization(System.Boolean)">
            <summary>
            Creates 'Authorization' data using this class info.
            </summary>
            <param name="addAuthMethod">Specifies if 'digest ' authe method string constant is added.</param>
            <returns>Return Authorization data.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigest.CreateNonce">
            <summary>
            Creates valid nonce value.
            </summary>
            <returns>Returns nonce value.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigest.CreateOpaque">
            <summary>
            Creates valid opaque value.
            </summary>
            <returns>Renturn opaque value.</returns>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthHttpDigest.RequestMethod">
            <summary>
            Gets or sets request method.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthHttpDigest.Realm">
            <summary>
            Gets or sets a string to be displayed to users so they know which username and password 
            to use. This string should contain at least the name of the host performing the 
            authentication and might additionally indicate the collection of users who might have access.
            An example might be "registered_users@gotham.news.com".
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthHttpDigest.Nonce">
            <summary>
            Gets or sets a server-specified unique data string. It is recommended that this 
            string be base64 or hexadecimal data. 
            Suggested value: base64(time-stamp hex(time-stamp ":" ETag ":" private-key)).
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is specified.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthHttpDigest.Opaque">
            <summary>
            Gets or sets string of data, specified by the server, which should be returned by the client unchanged.
            It is recommended that this string be base64 or hexadecimal data.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is specified.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthHttpDigest.Algorithm">
            <summary>
            Gets or sets algorithm to use to produce the digest and a checksum.
            This is normally MD5 or MD5-sess.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthHttpDigest.Response">
            <summary>
            Gets a string of 32 hex digits computed by HTTP digest algorithm, 
            which proves that the user knows a password.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthHttpDigest.UserName">
            <summary>
            Gets or sets user name.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthHttpDigest.Password">
            <summary>
            Gets or sets password.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthHttpDigest.Uri">
            <summary>
            Gets the URI from Request-URI.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthHttpDigest.Qop">
            <summary>
            Gets or sets value what indicates "quality of protection" the client has applied to
            the message. If present, its value MUST be one of the alternatives the server indicated
            it supports in the WWW-Authenticate header. This directive is optional in order to preserve 
            backward compatibility.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthHttpDigest.CNonce">
            <summary>
            Gets or sets Client nonce value. This MUST be specified if a qop directive is sent (see above), and
            MUST NOT be specified if the server did not send a qop directive in the WWW-Authenticate header field.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthHttpDigest.NonceCount">
            <summary>
            Gets or stets nonce count. This MUST be specified if a qop directive is sent (see above), and
            MUST NOT be specified if the server did not send a qop directive in the WWW-Authenticate 
            header field.  The nc-value is the hexadecimal count of the number of requests.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthHttpDigestNonceManager">
            <summary>
            HTTP digest authentication nonce manager.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigestNonceManager.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigestNonceManager.Dispose">
            <summary>
            Cleans up nay resource being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigestNonceManager.CreateNonce">
            <summary>
            Creates new nonce and adds it to active nonces collection.
            </summary>
            <returns>Returns new created nonce.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigestNonceManager.NonceExists(System.String)">
            <summary>
            Checks if specified nonce exists in active nonces collection.
            </summary>
            <param name="nonce">Nonce to check.</param>
            <returns>Returns true if nonce exists in active nonces collection, otherwise returns false.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigestNonceManager.RemoveNonce(System.String)">
            <summary>
            Removes specified nonce from active nonces collection.
            </summary>
            <param name="nonce">Nonce to remove.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigestNonceManager.RemoveExpiredNonces">
            <summary>
            Removes not used nonces what has expired.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthHttpDigestNonceManager.ExpireTime">
            <summary>
            Gets or sets nonce expire time in seconds.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthHttpDigestNonceManager.NonceEntry">
            <summary>
            This class represents nonce entry in active nonces collection.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthHttpDigestNonceManager.NonceEntry.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="nonce"></param>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthHttpDigestNonceManager.NonceEntry.Nonce">
            <summary>
            Gets nonce value.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthHttpDigestNonceManager.NonceEntry.CreateTime">
            <summary>
            Gets time when this nonce entry was created.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthSaslClient">
            <summary>
            This base class for client SASL authentication mechanisms. Defined in RFC 4422.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClient.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClient.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="serverResponse">Server sent SASL response.</param>
            <returns>Returns challange request what must be sent to server or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>serverResponse</b> is null reference.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClient.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClient.Name">
            <summary>
            Gets IANA-registered SASL authentication mechanism name.
            </summary>
            <remarks>The registered list is available from: http://www.iana.org/assignments/sasl-mechanisms .</remarks>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClient.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClient.SupportsInitialResponse">
            <summary>
            Gets if the authentication method supports SASL client "inital response".
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthSaslClientCramMd5">
            <summary>
            Implements "CRAM-MD5" authenticaiton.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClientCramMd5.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="userName">User login name.</param>
            <param name="password">User password.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> or <b>password</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClientCramMd5.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="serverResponse">Server sent SASL response.</param>
            <returns>Returns challange request what must be sent to server or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>serverResponse</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called when authentication is completed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientCramMd5.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientCramMd5.Name">
            <summary>
            Returns always "LOGIN".
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientCramMd5.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthSaslClientDigestMd5">
            <summary>
            Implements "DIGEST-MD5" authenticaiton.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClientDigestMd5.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="protocol">Protocol name. For example: Smtp.</param>
            <param name="server">Remote server name or IP address.</param>
            <param name="userName">User login name.</param>
            <param name="password">User password.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>protocol</b>,<b>server</b>,<b>userName</b> or <b>password</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClientDigestMd5.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="serverResponse">Server sent SASL response.</param>
            <returns>Returns challange request what must be sent to server or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>serverResponse</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called when authentication is completed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientDigestMd5.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientDigestMd5.Name">
            <summary>
            Returns always "DIGEST-MD5".
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientDigestMd5.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthSaslClientLogin">
            <summary>
            Implements "LOGIN" authenticaiton.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClientLogin.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="userName">User login name.</param>
            <param name="password">User password.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> or <b>password</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClientLogin.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="serverResponse">Server sent SASL response.</param>
            <returns>Returns challange request what must be sent to server or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>serverResponse</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called when authentication is completed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientLogin.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientLogin.Name">
            <summary>
            Returns always "LOGIN".
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientLogin.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthSaslClientNtlm">
            <summary>
            Implements NTLM authentication.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClientNtlm.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="domain">Domain name.</param>
            <param name="userName">User login name.</param>
            <param name="password">Password.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>domain</b>,<b>userName</b> or <b>passowrd</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClientNtlm.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="serverResponse">Server sent SASL response.</param>
            <returns>Returns challange request what must be sent to server or null if authentication has completed.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called when authentication is completed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientNtlm.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientNtlm.Name">
            <summary>
            Returns always "NTLM".
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientNtlm.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientNtlm.SupportsInitialResponse">
            <summary>
            Gets if the authentication method supports SASL client "inital response".
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthSaslClientNtlm.MessageType1">
            <summary>
            This class represents NTLM type 1 message.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClientNtlm.MessageType1.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="domain">Domain name.</param>
            <param name="host">Host name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>domain</b> or <b>host</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClientNtlm.MessageType1.ToByte">
            <summary>
            Converts this to binary NTML type 1 message.
            </summary>
            <returns>Returns this as binary NTML type 1 message.</returns>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthSaslClientNtlm.MessageType2">
            <summary>
            This class represents NTLM type 2 message.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClientNtlm.MessageType2.#ctor(System.Byte[])">
            <summary>
            Default constructor.
            </summary>
            <param name="nonce">NTLM 8 byte nonce.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>nonce</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClientNtlm.MessageType2.Parse(System.Byte[])">
            <summary>
            Parses NTLM type 2 message.
            </summary>
            <param name="data">NTLM type 2 message.</param>
            <returns>Returns parsed NTLM type 2 message.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientNtlm.MessageType2.Nonce">
            <summary>
            Gets nonce.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthSaslClientNtlm.MessageType3">
            <summary>
            This class represents NTLM type 3 message.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClientNtlm.MessageType3.#ctor(System.String,System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            Default constructor.
            </summary>
            <param name="domain">Domain name.</param>
            <param name="user">User name.</param>
            <param name="host">Host name.</param>
            <param name="lm">Lan Manager response.</param>
            <param name="nt">NT response.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>domain</b>,<b>user</b>,<b>host</b>,<b>lm</b> or <b>nt</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClientNtlm.MessageType3.ToByte">
            <summary>
            Converts this to binary NTML type 3 message.
            </summary>
            <returns>Returns this as binary NTML type 3 message.</returns>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthSaslClientNtlm.NTLM_Utils">
            <summary>
            This class provides NTLM related utility methods.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClientNtlm.NTLM_Utils.CalculateLM(System.Byte[],System.String)">
            <summary>
            Calculates NTLM NT response.
            </summary>
            <param name="nonce">Server nonce.</param>
            <param name="password">Password.</param>
            <returns>Returns NTLM NT response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>nonce</b> or <b>password</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClientNtlm.NTLM_Utils.CalculateNT(System.Byte[],System.String)">
            <summary>
            Calculates NTLM LM response.
            </summary>
            <param name="nonce">Server nonce.</param>
            <param name="password">Password.</param>
            <returns>Returns NTLM LM response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>nonce</b> or <b>password</b> is null reference.</exception>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthSaslClientPlain">
            <summary>
            Implements "PLAIN" authenticaiton.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClientPlain.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="userName">User login name.</param>
            <param name="password">User password.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> or <b>password</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClientPlain.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="serverResponse">Server sent SASL response.</param>
            <returns>Returns challange request what must be sent to server or null if authentication has completed.</returns>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called when authentication is completed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientPlain.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientPlain.Name">
            <summary>
            Returns always "PLAIN".
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientPlain.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientPlain.SupportsInitialResponse">
            <summary>
            Gets if the authentication method supports SASL client "inital response".
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthSaslClientXOAuth">
            <summary>
            This class implements <b>XOAUTH</b> authentication.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClientXOAuth.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="userName">User login name.</param>
            <param name="authString">OAUTH authentication string. For example you can use <see cref="M:MControl.Messaging.Net.Auth.AuthGmailOAuth1.GetXOAuthStringForImap"/> to get valid string.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> or <b>authString</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is riased when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslClientXOAuth.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="serverResponse">Server sent SASL response.</param>
            <returns>Returns challange request what must be sent to server or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>serverResponse</b> is null reference.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called when authentication is completed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientXOAuth.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientXOAuth.Name">
            <summary>
            Returns always "LOGIN".
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientXOAuth.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslClientXOAuth.SupportsInitialResponse">
            <summary>
            Returns always true, because XOAUTH authentication method supports SASL client "inital response".
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Challenge">
            <summary>
            This class represents SASL DIGEST-MD5 authentication <b>digest-challenge</b>. Defined in RFC 2831.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Challenge.#ctor(System.String[],System.String,System.String[],System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="realm">Realm value.</param>
            <param name="nonce">Nonce value.</param>
            <param name="qopOptions">Quality of protections supported. Normally this is "auth".</param>
            <param name="stale">Stale value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>realm</b>,<b>nonce</b> or <b>qopOptions</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Challenge.#ctor">
            <summary>
            Internal parse constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Challenge.Parse(System.String)">
            <summary>
            Parses DIGEST-MD5 challenge from challenge-string.
            </summary>
            <param name="challenge">Challenge string.</param>
            <returns>Returns DIGEST-MD5 challenge.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>challenge</b> is null reference.</exception>
            <exception cref="T:MControl.Messaging.Net.ParseException">Is raised when challenge parsing + validation fails.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Challenge.ToChallenge">
            <summary>
            Returns DIGEST-MD5 "digest-challenge" string.
            </summary>
            <returns>Returns DIGEST-MD5 "digest-challenge" string.</returns>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Challenge.Realm">
            <summary>
            Gets realm value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Challenge.Nonce">
            <summary>
            Gets nonce value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Challenge.QopOptions">
            <summary>
            Gets qop-options value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Challenge.Stale">
            <summary>
            Gets if stale value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Challenge.Maxbuf">
            <summary>
            Gets maxbuf value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Challenge.Charset">
            <summary>
            Gets charset value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Challenge.Algorithm">
            <summary>
            Gets algorithm value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Challenge.CipherOpts">
            <summary>
            Gets cipher-opts value. For more info see RFC 2831.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response">
            <summary>
            This class represents SASL DIGEST-MD5 authentication <b>digest-response</b>. Defined in RFC 2831.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.#ctor(MControl.Messaging.Net.Auth.AuthSaslDigestMD5Challenge,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="challenge">Client challenge.</param>
            <param name="realm">Realm value. This must be one value of the challenge Realm.</param>
            <param name="userName">User name.</param>
            <param name="password">User password.</param>
            <param name="cnonce">Client nonce value.</param>
            <param name="nonceCount">Nonce count. One-based client authentication attempt number. Normally this value is 1.</param>
            <param name="qop">Indicates what "quality of protection" the client accepted. This must be one value of the challenge QopOptions.</param>
            <param name="digestUri">Digest URI.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>challenge</b>,<b>realm</b>,<b>password</b>,<b>nonce</b>,<b>qop</b> or <b>digestUri</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.#ctor">
            <summary>
            Internal parse constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.Parse(System.String)">
            <summary>
            Parses DIGEST-MD5 response from response-string.
            </summary>
            <param name="digestResponse">Response string.</param>
            <returns>Returns DIGEST-MD5 response.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>digestResponse</b> isnull reference.</exception>
            <exception cref="T:MControl.Messaging.Net.ParseException">Is raised when response parsing + validation fails.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.Authenticate(System.String,System.String)">
            <summary>
            Authenticates user.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns true if user authenticated, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> or <b>password</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.ToResponse">
            <summary>
            Creates digest response for challenge.
            </summary>
            <returns>Returns digest response.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.ToRspauthResponse(System.String,System.String)">
            <summary>
            Creates <b>response-auth</b> response for client.
            </summary>
            <returns>Returns <b>response-auth</b> response.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.CalculateResponse(System.String,System.String)">
            <summary>
            Calculates digest response.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns digest response.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.a1(System.String,System.String)">
            <summary>
            Calculates A1 value.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns A1 value.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.a2">
            <summary>
            Calculates A2 value.
            </summary>
            <returns>Returns A2 value.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.h(System.Byte[])">
            <summary>
            Computes MD5 hash.
            </summary>
            <param name="value">Value to process.</param>
            <returns>Return MD5 hash.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.hex(System.Byte[])">
            <summary>
            Converts value to hex string.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Returns hex string.</returns>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.UserName">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.Realm">
            <summary>
            Gets realm(domain) name.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.Nonce">
            <summary>
            Gets nonce value.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.Cnonce">
            <summary>
            Gets cnonce value.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.NonceCount">
            <summary>
            Gets nonce count.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.Qop">
            <summary>
            Gets "quality of protection" value.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.DigestUri">
            <summary>
            Gets digest URI value.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.Response">
            <summary>
            Gets response value.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.Charset">
            <summary>
            Gets charset value.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.Cipher">
            <summary>
            Gets cipher value.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslDigestMD5Response.Authzid">
            <summary>
            Gets authorization ID.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthSaslServer">
            <summary>
            This base class for server SASL authentication mechanisms.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslServer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslServer.Reset">
            <summary>
            Resets any authentication state data.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslServer.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientRespone</b> is null reference.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServer.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServer.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServer.Name">
            <summary>
            Gets IANA-registered SASL authentication mechanism name.
            </summary>
            <remarks>The registered list is available from: http://www.iana.org/assignments/sasl-mechanisms .</remarks>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServer.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServer.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServer.Tags">
            <summary>
            Gets user data items collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthSaslServerCramMd5">
            <summary>
            Implements "CRAM-MD5" authenticaiton. Defined in RFC 2195.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslServerCramMd5.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="requireSSL">Specifies if this mechanism is available to SSL connections only.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslServerCramMd5.Reset">
            <summary>
            Resets any authentication state data.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslServerCramMd5.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientResponse</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslServerCramMd5.HmacMd5(System.String,System.String)">
            <summary>
            Calculates keyed md5 hash from specifieed text and with specified hash key.
            </summary>
            <param name="hashKey">MD5 key.</param>
            <param name="text">Text to hash.</param>
            <returns>Returns MD5 hash.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslServerCramMd5.OnGetUserInfo(System.String)">
            <summary>
            Raises <b>GetUserInfo</b> event.
            </summary>
            <param name="userName">User name.</param>
            <returns>Returns specified user info.</returns>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerCramMd5.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerCramMd5.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerCramMd5.Name">
            <summary>
            Returns always "CRAM-MD5".
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerCramMd5.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerCramMd5.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="E:MControl.Messaging.Net.Auth.AuthSaslServerCramMd5.GetUserInfo">
            <summary>
            Is called when authentication mechanism needs to get user info to complete atuhentication.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthSaslServerDigestMd5">
            <summary>
            Implements "DIGEST-MD5" authenticaiton. Defined in RFC 2831.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslServerDigestMd5.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="requireSSL">Specifies if this mechanism is available to SSL connections only.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslServerDigestMd5.Reset">
            <summary>
            Resets any authentication state data.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslServerDigestMd5.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientResponse</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslServerDigestMd5.OnGetUserInfo(System.String)">
            <summary>
            Raises <b>GetUserInfo</b> event.
            </summary>
            <param name="userName">User name.</param>
            <returns>Returns specified user info.</returns>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerDigestMd5.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerDigestMd5.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerDigestMd5.Name">
            <summary>
            Returns always "DIGEST-MD5".
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerDigestMd5.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerDigestMd5.Realm">
            <summary>
            Gets or sets realm value.
            </summary>
            <remarks>Normally this is host or domain name.</remarks>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerDigestMd5.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="E:MControl.Messaging.Net.Auth.AuthSaslServerDigestMd5.GetUserInfo">
            <summary>
            Is called when authentication mechanism needs to get user info to complete atuhentication.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthSaslServerLogin">
            <summary>
            Implements "LOGIN" authenticaiton.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslServerLogin.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="requireSSL">Specifies if this mechanism is available to SSL connections only.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslServerLogin.Reset">
            <summary>
            Resets any authentication state data.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslServerLogin.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientResponse</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslServerLogin.OnAuthenticate(System.String,System.String,System.String)">
            <summary>
            Raises <b>Authenticate</b> event.
            </summary>
            <param name="authorizationID">Authorization ID.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns authentication result.</returns>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerLogin.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerLogin.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerLogin.Name">
            <summary>
            Returns always "LOGIN".
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerLogin.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerLogin.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="E:MControl.Messaging.Net.Auth.AuthSaslServerLogin.Authenticate">
            <summary>
            Is called when authentication mechanism needs to authenticate specified user.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthSaslServerPlain">
            <summary>
            Implements "PLAIN" authenticaiton. Defined in RFC 4616.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslServerPlain.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="requireSSL">Specifies if this mechanism is available to SSL connections only.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslServerPlain.Reset">
            <summary>
            Resets any authentication state data.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslServerPlain.Continue(System.Byte[])">
            <summary>
            Continues authentication process.
            </summary>
            <param name="clientResponse">Client sent SASL response.</param>
            <returns>Retunrns challange response what must be sent to client or null if authentication has completed.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>clientResponse</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthSaslServerPlain.OnAuthenticate(System.String,System.String,System.String)">
            <summary>
            Raises <b>Authenticate</b> event.
            </summary>
            <param name="authorizationID">Authorization ID.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns authentication result.</returns>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerPlain.IsCompleted">
            <summary>
            Gets if the authentication exchange has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerPlain.IsAuthenticated">
            <summary>
            Gets if user has authenticated sucessfully.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerPlain.Name">
            <summary>
            Returns always "PLAIN".
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerPlain.RequireSSL">
            <summary>
            Gets if specified SASL mechanism is available only to SSL connection.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthSaslServerPlain.UserName">
            <summary>
            Gets user login name.
            </summary>
        </member>
        <member name="E:MControl.Messaging.Net.Auth.AuthSaslServerPlain.Authenticate">
            <summary>
            Is called when authentication mechanism needs to authenticate specified user.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Auth.AuthUserInfoEventArgs">
            <summary>
            This class provides data for server authentication mechanisms <b>GetUserInfo</b> event.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Auth.AuthUserInfoEventArgs.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="userName">User name.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthUserInfoEventArgs.UserExists">
            <summary>
            Gets or sets if specified user exists.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthUserInfoEventArgs.UserName">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Auth.AuthUserInfoEventArgs.Password">
            <summary>
            Gets or sets user password.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.MQ.MqClient">
            <summary>
            This class implements MQ client. Defined in RFC 5321.
            </summary>
            <example>
            Simple way:
            <code>
            /*
             To make this code to work, you need to import following namespaces:
             using MControl.Messaging.Net.MQ.Client; 
            */
            
            // You can send any valid MQ message here, from disk,memory, ... or
            // you can use MControl.Messaging.Net.Mail classes to compose valid MQ mail message.
            
            // MqClient.QuickSendSmartHost(...
            or
            // MqClient.QuickSend(...
            </code>
            
            Advanced way:
            <code> 
            /*
             To make this code to work, you need to import following namespaces:
             using MControl.Messaging.Net.MQ.Client; 
            */
            
            using(MqClient smtp = new MqClient()){      
                // You can use Dns_Client.GetEmailHosts(... to get target recipient MQ hosts for Connect method.
            	smtp.Connect("hostName",WellKnownPorts.MQ); 
            	smtp.EhloHelo("mail.domain.com");
                // Authenticate if target server requires.
                // smtp.Auth(smtp.AuthGetStrongestMethod("user","password"));
                smtp.MailFrom("sender@domain.com");
                // Repeat this for all recipients.
                smtp.RcptTo("to@domain.com");
            
                // Send message to server.
                // You can send any valid MQ message here, from disk,memory, ... or
                // you can use MControl.Messaging.Net.Mail classes to compose valid MQ mail message.
                // smtp.SendMessage(.... .
                
                smtp.Disconnect();
            }
            </code>
            </example>
        </member>
        <member name="T:MControl.Messaging.Net.Tcp.TcpClient">
            <summary>
            This class implements generic Tcp client.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Tcp.TcpTask">
            <summary>
            This is base class for TcpClient and TcpServerTask.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpTask.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpTask.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpTask.Disconnect">
            <summary>
            Disconnects task.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpTask.IsConnected">
            <summary>
            Gets if task is connected.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpTask.ID">
            <summary>
            Gets task ID.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpTask.ConnectTime">
            <summary>
            Gets the time when task was connected.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpTask.LastActivity">
            <summary>
            Gets the last time when data was sent or received.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpTask.LocalEndPoint">
            <summary>
            Gets task local IP end point.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpTask.RemoteEndPoint">
            <summary>
            Gets task remote IP end point.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpTask.IsSecureConnection">
            <summary>
            Gets if this task Tcp connection is secure connection.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpTask.IsAuthenticated">
            <summary>
            Gets if this task is authenticated.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpTask.AuthenticatedUserIdentity">
            <summary>
            Gets task authenticated user identity , returns null if not authenticated.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpTask.TcpStream">
            <summary>
            Gets Tcp stream which must be used to send/receive data through this task.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.#ctor(System.Boolean,System.String)">
            <summary>
            ctor
            </summary>
            <param name="enablePool"></param>
            <param name="host"></param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.Dispose">
            <summary>
            Cleans up any resources being used. This method is thread-safe.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.Connect(System.String,System.Int32)">
            <summary>
            Connects to the specified host. If the hostname resolves to more than one IP address, 
            all IP addresses will be tried for connection, until one of them connects.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when Tcp client is already connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.Connect(System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to the specified host. If the hostname resolves to more than one IP address, 
            all IP addresses will be tried for connection, until one of them connects.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when Tcp client is already connected.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.Connect(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Connects to the specified remote end point.
            </summary>
            <param name="remoteEP">Remote IP end point where to connect.</param>
            <param name="ssl">Specifies if connects to SSL end point.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when Tcp client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.Connect(System.Net.IPEndPoint,System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Connects to the specified remote end point.
            </summary>
            <param name="localEP">Local IP end point to use. Value null means that system will allocate it.</param>
            <param name="remoteEP">Remote IP end point to connect.</param>
            <param name="ssl">Specifies if connection switches to SSL affter connect.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when Tcp client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.Connect(System.Net.IPEndPoint,System.Net.IPEndPoint,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Connects to the specified remote end point.
            </summary>
            <param name="localEP">Local IP end point to use. Value null means that system will allocate it.</param>
            <param name="remoteEP">Remote IP end point to connect.</param>
            <param name="ssl">Specifies if connection switches to SSL affter connect.</param>
            <param name="certCallback">SSL server certificate validation callback. Value null means any certificate is accepted.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when Tcp client is already connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.ConnectAsync(MControl.Messaging.Net.Tcp.TcpClient.ConnectAsyncOperation)">
            <summary>
            Starts connecting to remote end point.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:MControl.Messaging.Net.Tcp.TcpClient.ConnectAsyncOperation.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.Disconnect">
            <summary>
            Disconnects connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when Tcp client is not connected.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.BeginDisconnect(System.AsyncCallback,System.Object)">
            <summary>
            Starts disconnecting connection.
            </summary>
            <param name="callback">Callback to call when the asynchronous operation is complete.</param>
            <param name="state">User data.</param>
            <returns>An IAsyncResult that references the asynchronous disconnect.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when Tcp client is not connected.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.EndDisconnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous disconnect request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when argument <b>asyncResult</b> was not returned by a call to the <b>BeginDisconnect</b> method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndDisconnect</b> was previously called for the asynchronous connection.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.SwitchToSecure">
            <summary>
            Switches task to secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when Tcp client is not connected or is already secure.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.SwitchToSecureAsync(MControl.Messaging.Net.Tcp.TcpClient.SwitchToSecureAsyncOperation)">
            <summary>
            Starts switching connection to secure.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:MControl.Messaging.Net.Tcp.TcpClient.SwitchToSecureAsyncOperation.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when Tcp client is not connected or connection is already secure.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.OnConnected">
            <summary>
            This method is called after Tcp client has sucessfully connected.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.OnConnected(MControl.Messaging.Net.Tcp.TcpClient.CompleteConnectCallback)">
            <summary>
            This method is called when Tcp client has sucessfully connected.
            </summary>
            <param name="callback">Callback to be called to complete connect operation.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.ReadLine">
            <summary>
            Reads and logs specified line from connected host.
            </summary>
            <returns>Returns readed line.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.WriteLine(System.String)">
            <summary>
            Sends and logs specified line to connected host.
            </summary>
            <param name="line">Line to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>line</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.LogAddRead(System.Int64,System.String)">
            <summary>
            Logs read operation.
            </summary>
            <param name="size">Number of bytes readed.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.LogAddWrite(System.Int64,System.String)">
            <summary>
            Logs write operation.
            </summary>
            <param name="size">Number of bytes written.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.LogAddText(System.String)">
            <summary>
            Logs free text entry.
            </summary>
            <param name="text">Log text.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.LogAddException(System.String,System.Exception)">
            <summary>
            Logs exception.
            </summary>
            <param name="text">Log text.</param>
            <param name="x">Exception happened.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.IsSocketInPool">
            <summary>
            Get indicate if socket ConnctedByPool
            </summary>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.Reconnect">
            <summary>
            Reconnect
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpClient.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpClient.IsConnected">
            <summary>
            Gets if Tcp client is connected.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpClient.ID">
            <summary>
            Gets task ID.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when Tcp client is not connected.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpClient.ConnectTime">
            <summary>
            Gets the time when task was connected.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when Tcp client is not connected.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpClient.LastActivity">
            <summary>
            Gets the last time when data was sent or received.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when Tcp client is not connected.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpClient.LocalEndPoint">
            <summary>
            Gets task local IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when Tcp client is not connected.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpClient.RemoteEndPoint">
            <summary>
            Gets task remote IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when Tcp client is not connected.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpClient.IsSecureConnection">
            <summary>
            Gets if this task Tcp connection is secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when Tcp client is not connected.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpClient.TcpStream">
            <summary>
            Gets Tcp stream which must be used to send/receive data through this task.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when Tcp client is not connected.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpClient.ValidateCertificateCallback">
            <summary>
            Gets or stes remote callback which is called when remote server certificate needs to be validated.
            Value null means not sepcified.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpClient.Timeout">
            <summary>
            Gets or sets default Tcp read/write timeout.
            </summary>
            <remarks>This timeout applies only synchronous Tcp read/write operations.</remarks>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpClient.ConnctedByPool">
            <summary>
            Get indicate if socket ConnctedByPool
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpClient.TcpSocket">
            <summary>
            Get TcpSocket
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Tcp.TcpClient.ConnectAsyncOperation">
            <summary>
            This class represents <see cref="M:MControl.Messaging.Net.Tcp.TcpClient.ConnectAsync(MControl.Messaging.Net.Tcp.TcpClient.ConnectAsyncOperation)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.ConnectAsyncOperation.#ctor(System.Net.IPEndPoint,System.Net.IPEndPoint,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Default constructor.
            </summary>
            <param name="localEP">Local IP end point to use. Value null means that system will allocate it.</param>
            <param name="remoteEP">Remote IP end point to connect.</param>
            <param name="ssl">Specifies if connection switches to SSL affter connect.</param>
            <param name="certCallback">SSL server certificate validation callback. Value null means any certificate is accepted.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>remoteEP</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.ConnectAsyncOperation.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.ConnectAsyncOperation.Start(MControl.Messaging.Net.Tcp.TcpClient)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner Tcp client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.ConnectAsyncOperation.SetState(MControl.Messaging.Net.AsyncOperationState)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.ConnectAsyncOperation.BeginConnectCompleted(System.IAsyncResult)">
            <summary>
            This method is called when "BeginConnect" has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.ConnectAsyncOperation.BeginAuthenticateAsClientCompleted(System.IAsyncResult)">
            <summary>
            This method is called when "BeginAuthenticateAsClient" has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.ConnectAsyncOperation.RemoteCertificateValidationCallback(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            This method is called when we need to validate remote server certificate.
            </summary>
            <param name="sender">Sender.</param>
            <param name="certificate">Certificate.</param>
            <param name="chain">Certificate chain.</param>
            <param name="sslPolicyErrors">SSL policy errors.</param>
            <returns>Returns true if certificate validated, otherwise false.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.ConnectAsyncOperation.CleanupSocketRelated">
            <summary>
            Cleans up any socket related resources.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.ConnectAsyncOperation.InternalConnectCompleted">
            <summary>
            Is called when when connecting has finished.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.ConnectAsyncOperation.CompleteConnectCallback(System.Exception)">
            <summary>
            This method is called when this derrived class OnConnected processing has completed.
            </summary>
            <param name="error">Exception happened or null if no errors.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.ConnectAsyncOperation.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpClient.ConnectAsyncOperation.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpClient.ConnectAsyncOperation.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpClient.ConnectAsyncOperation.Socket">
            <summary>
            Gets connected socket.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpClient.ConnectAsyncOperation.Stream">
            <summary>
            Gets connected Tcp stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.Tcp.TcpClient.ConnectAsyncOperation.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Tcp.TcpClient.DisconnectDelegate">
            <summary>
            Internal helper method for asynchronous Disconnect method.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Tcp.TcpClient.SwitchToSecureAsyncOperation">
            <summary>
            This class represents <see cref="M:MControl.Messaging.Net.Tcp.TcpClient.SwitchToSecureAsync(MControl.Messaging.Net.Tcp.TcpClient.SwitchToSecureAsyncOperation)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.SwitchToSecureAsyncOperation.#ctor(System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Default constructor.
            </summary>
            <param name="certCallback">SSL server certificate validation callback. Value null means any certificate is accepted.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.SwitchToSecureAsyncOperation.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.SwitchToSecureAsyncOperation.Start(MControl.Messaging.Net.Tcp.TcpClient)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner Tcp client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.SwitchToSecureAsyncOperation.SetState(MControl.Messaging.Net.AsyncOperationState)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.SwitchToSecureAsyncOperation.RemoteCertificateValidationCallback(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            This method is called when we need to validate remote server certificate.
            </summary>
            <param name="sender">Sender.</param>
            <param name="certificate">Certificate.</param>
            <param name="chain">Certificate chain.</param>
            <param name="sslPolicyErrors">SSL policy errors.</param>
            <returns>Returns true if certificate validated, otherwise false.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.SwitchToSecureAsyncOperation.BeginAuthenticateAsClientCompleted(System.IAsyncResult)">
            <summary>
            This method is called when "BeginAuthenticateAsClient" has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpClient.SwitchToSecureAsyncOperation.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpClient.SwitchToSecureAsyncOperation.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpClient.SwitchToSecureAsyncOperation.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.Tcp.TcpClient.SwitchToSecureAsyncOperation.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Tcp.TcpClient.CompleteConnectCallback">
            <summary>
            Represents callback to be called when to complete connect operation.
            </summary>
            <param name="error">Exception happened or null if no errors.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.#ctor(System.Boolean,System.String)">
            <summary>
            ctor
            </summary>
            <param name="enablePool"></param>
            <param name="host"></param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.Disconnect">
            <summary>
            Closes connection to MQ server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when MQ client is not connected.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.Disconnect(System.Boolean)">
            <summary>
            Closes connection to MQ server.
            </summary>
            <param name="sendQuit">If true QUIT command is sent to MQ server.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when MQ client is not connected.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.AuthGetStrongestMethod(System.String,System.String)">
            <summary>
            Gets strongest authentication method which we can support from MQ server.
            Preference order DIGEST-MD5 -&gt; CRAM-MD5 -&gt; LOGIN -&gt; PLAIN.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">User password.</param>
            <returns>Returns authentication method.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when MQ client is not connected .</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>userName</b> or <b>password</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when MQ server won't support authentication or we 
            don't support any of the server authentication mechanisms.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.Auth(MControl.Messaging.Net.Auth.AuthSaslClient)">
            <summary>
            Sends AUTH command to MQ server.
            </summary>
            <param name="sasl">SASL authentication. You can use method <see cref="M:MControl.Messaging.Net.MQ.MqClient.AuthGetStrongestMethod(System.String,System.String)"/> to get strongest supported authentication.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when MQ client is not connected or is already authenticated.</exception>
            <exception cref="T:MControl.Messaging.Net.MQ.MqClientException">Is raised when MQ server returns error.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.AuthAsync(MControl.Messaging.Net.MQ.MqClient.AuthAsyncOperation)">
            <summary>
            Starts sending AUTH command to MQ server.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:MControl.Messaging.Net.MQ.MqClient.AuthAsyncOperation.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when MQ client is not connected or connection is already authenticated.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.SendMessage(System.IO.Stream)">
            <summary>
            Sends raw message to MQ server.
            </summary>
            <param name="stream">Message stream. Sending starts from stream current position.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when MQ client is not connected.</exception>
            <exception cref="T:MControl.Messaging.Net.MQ.MqClientException">Is raised when MQ server returns error.</exception>
            <remarks>The stream must contain data in MIME format, other formats normally are rejected by MQ server.</remarks>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.SendMessage(System.IO.Stream,System.Boolean)">
            <summary>
            Sends raw message to MQ server.
            </summary>
            <param name="stream">Message stream. Sending starts from stream current position.</param>
            <param name="useBdatIfPossibe">Specifies if BDAT command is used to send message, if remote server supports it.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when MQ client is not connected.</exception>
            <exception cref="T:MControl.Messaging.Net.MQ.MqClientException">Is raised when MQ server returns error.</exception>
            <remarks>The stream must contain data in MIME format, other formats normally are rejected by MQ server.</remarks>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.SendMessageAsync(MControl.Messaging.Net.MQ.MqClient.SendMessageAsyncOperation)">
            <summary>
            Starts sending message to MQ server.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:MControl.Messaging.Net.MQ.MqClient.SendMessageAsyncOperation.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when MQ client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.Rset">
            <summary>
            Send RSET command to server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when MQ client is not connected.</exception>
            <exception cref="T:MControl.Messaging.Net.MQ.MqClientException">Is raised when MQ server returns error.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.RsetAsync(MControl.Messaging.Net.MQ.MqClient.RsetAsyncOperation)">
            <summary>
            Starts sending RSET command to MQ server.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:MControl.Messaging.Net.MQ.MqClient.RsetAsyncOperation.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when MQ client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.Noop">
            <summary>
            Send NOOP command to server. This method can be used for keeping connection alive(not timing out).
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when MQ client is not connected.</exception>
            <exception cref="T:MControl.Messaging.Net.MQ.MqClientException">Is raised when MQ server returns error.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.NoopAsync(MControl.Messaging.Net.MQ.MqClient.NoopAsyncOperation)">
            <summary>
            Starts sending NOOP command to MQ server. This method can be used for keeping connection alive(not timing out).
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:MControl.Messaging.Net.MQ.MqClient.NoopAsyncOperation.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when MQ client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.OnConnected(MControl.Messaging.Net.Tcp.TcpClient.CompleteConnectCallback)">
            <summary>
            This method is called when Tcp client has sucessfully connected.
            </summary>
            <param name="callback">Callback to be called to complete connect operation.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.ReadResponseAsync(MControl.Messaging.Net.MQ.MqClient.ReadResponseAsyncOperation)">
            <summary>
            Reads MQ server single or multiline response.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:MControl.Messaging.Net.MQ.MqClient.ReadResponseAsyncOperation.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.QuickSend(MControl.Messaging.QueueMessage)">
            <summary>
            Sends specified mime message.
            </summary>
            <param name="message">Message to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>message</b> is null.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.QuickSend(System.String,System.String,System.IO.Stream)">
            <summary>
            Sends message directly to email domain. Domain email sever resolve order: MX recordds -&gt; A reords if no MX.
            </summary>
            <param name="from">Sender email what is reported to MQ server.</param>
            <param name="to">Recipient email.</param>
            <param name="message">Raw message to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>from</b>,<b>to</b> or <b>message</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:MControl.Messaging.Net.MQ.MqClientException">Is raised when MQ server returns error.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.QuickSend(System.String,System.String,System.String,System.IO.Stream)">
            <summary>
            Sends message directly to email domain. Domain email sever resolve order: MX recordds -&gt; A reords if no MX.
            </summary>
            <param name="localHost">Host name which is reported to MQ server.</param>
            <param name="from">Sender email what is reported to MQ server.</param>
            <param name="to">Recipient email.</param>
            <param name="message">Raw message to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>from</b>,<b>to</b> or <b>message</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:MControl.Messaging.Net.MQ.MqClientException">Is raised when MQ server returns error.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.QuickSendSmartHost(System.String,System.Int32,System.Boolean,MControl.Messaging.QueueMessage)">
            <summary>
            Sends message by using specified smart host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Host port.</param>
            <param name="ssl">Specifies if connected via SSL.</param>
            <param name="message">Mail message to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>host</b> or <b>message</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the method arguments has invalid value.</exception>
            <exception cref="T:MControl.Messaging.Net.MQ.MqClientException">Is raised when MQ server returns error.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.QuickSendSmartHost(System.String,System.Int32,System.String,System.String[],System.IO.Stream)">
            <summary>
            Sends message by using specified smart host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Host port.</param>
            <param name="from">Sender email what is reported to MQ server.</param>
            <param name="to">Recipients email addresses.</param>
            <param name="message">Raw message to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>host</b>,<b>from</b>,<b>to</b> or <b>message</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the method arguments has invalid value.</exception>
            <exception cref="T:MControl.Messaging.Net.MQ.MqClientException">Is raised when MQ server returns error.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.QuickSendSmartHost(System.String,System.Int32,System.Boolean,System.String,System.String[],System.IO.Stream)">
            <summary>
            Sends message by using specified smart host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Host port.</param>
            <param name="ssl">Specifies if connected via SSL.</param>
            <param name="from">Sender email what is reported to MQ server.</param>
            <param name="to">Recipients email addresses.</param>
            <param name="message">Raw message to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>host</b>,<b>from</b>,<b>to</b> or <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the method arguments has invalid value.</exception>
            <exception cref="T:MControl.Messaging.Net.MQ.MqClientException">Is raised when MQ server returns error.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.QuickSendSmartHost(System.String,System.String,System.Int32,System.Boolean,System.String,System.String[],System.IO.Stream)">
            <summary>
            Sends message by using specified smart host.
            </summary>
            <param name="localHost">Host name which is reported to MQ server.</param>
            <param name="host">Host name or IP address.</param>
            <param name="port">Host port.</param>
            <param name="ssl">Specifies if connected via SSL.</param>
            <param name="from">Sender email what is reported to MQ server.</param>
            <param name="to">Recipients email addresses.</param>
            <param name="message">Raw message to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>host</b>,<b>from</b>,<b>to</b> or <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the method arguments has invalid value.</exception>
            <exception cref="T:MControl.Messaging.Net.MQ.MqClientException">Is raised when MQ server returns error.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.QuickSendSmartHost(System.String,System.String,System.Int32,System.Boolean,System.String,System.String,System.String,System.String[],System.IO.Stream)">
            <summary>
            Sends message by using specified smart host.
            </summary>
            <param name="localHost">Host name which is reported to MQ server.</param>
            <param name="host">Host name or IP address.</param>
            <param name="port">Host port.</param>
            <param name="ssl">Specifies if connected via SSL.</param>
            <param name="userName">MQ server user name. This value may be null, then authentication not used.</param>
            <param name="password">MQ server password.</param>
            <param name="from">Sender email what is reported to MQ server.</param>
            <param name="to">Recipients email addresses.</param>
            <param name="message">Raw message to send.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>host</b>,<b>from</b>,<b>to</b> or <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the method arguments has invalid value.</exception>
            <exception cref="T:MControl.Messaging.Net.MQ.MqClientException">Is raised when MQ server returns error.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqClient.LocalHostName">
            <summary>
            Gets or sets host name which is reported to MQ server. If value null, then local computer name is used.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and MQ client is connected.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqClient.RemoteHostName">
            <summary>
            Gets MQ server host name which it reported to us.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and MQ client is not connected.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqClient.SaslAuthMethods">
            <summary>
            Gets MQ server supported SASL authentication method.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and MQ client is not connected.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqClient.MaxAllowedMessageSize">
            <summary>
            Gets maximum message size in bytes what MQ server accepts. Value null means not known.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqClient.AuthenticatedUserIdentity">
            <summary>
            Gets task authenticated user identity, returns null if not authenticated.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed and MQ client is not connected.</exception>
        </member>
        <member name="T:MControl.Messaging.Net.MQ.MqClient.AuthAsyncOperation">
            <summary>
            This class represents <see cref="M:MControl.Messaging.Net.MQ.MqClient.AuthAsync(MControl.Messaging.Net.MQ.MqClient.AuthAsyncOperation)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.AuthAsyncOperation.#ctor(MControl.Messaging.Net.Auth.AuthSaslClient)">
            <summary>
            Default constructor.
            </summary>
            <param name="sasl">SASL authentication. You can use method <see cref="M:MControl.Messaging.Net.MQ.MqClient.AuthGetStrongestMethod(System.String,System.String)"/> to get strongest supported authentication.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>sasl</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.AuthAsyncOperation.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.AuthAsyncOperation.Start(MControl.Messaging.Net.MQ.MqClient)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner MQ client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.AuthAsyncOperation.SetState(MControl.Messaging.Net.AsyncOperationState)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.AuthAsyncOperation.AuthCommandSendingCompleted(System.IAsyncResult)">
            <summary>
            Is called when AUTH command sending has finished.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.AuthAsyncOperation.AuthReadResponseCompleted(MControl.Messaging.Net.MQ.MqClient.ReadResponseAsyncOperation)">
            <summary>
            Is called when MQ server response reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.AuthAsyncOperation.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqClient.AuthAsyncOperation.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqClient.AuthAsyncOperation.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.MQ.MqClient.AuthAsyncOperation.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.MQ.MqClient.SendMessageAsyncOperation">
            <summary>
            This class represents <see cref="M:MControl.Messaging.Net.MQ.MqClient.SendMessageAsync(MControl.Messaging.Net.MQ.MqClient.SendMessageAsyncOperation)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.SendMessageAsyncOperation.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Message stream. Message sending starts from <b>stream</b> current position and all stream data will be sent.</param>
            <param name="useBdatIfPossibe">Specifies if BDAT command is used to send message, if remote server supports it.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.SendMessageAsyncOperation.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.SendMessageAsyncOperation.Start(MControl.Messaging.Net.MQ.MqClient)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner MQ client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.SendMessageAsyncOperation.SetState(MControl.Messaging.Net.AsyncOperationState)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.SendMessageAsyncOperation.BdatChunkReadingCompleted(System.IAsyncResult)">
            <summary>
            Is called when message data block for BDAT reading has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.SendMessageAsyncOperation.BdatCommandSendingCompleted(System.IAsyncResult)">
            <summary>
            Is called when BDAT command sending has finished.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.SendMessageAsyncOperation.BdatReadResponseCompleted(MControl.Messaging.Net.MQ.MqClient.ReadResponseAsyncOperation)">
            <summary>
            Is called when MQ server BDAT command response reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.SendMessageAsyncOperation.DataCommandSendingCompleted(System.IAsyncResult)">
            <summary>
            Is called when DATA command sending has finished.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.SendMessageAsyncOperation.DataReadResponseCompleted(MControl.Messaging.Net.MQ.MqClient.ReadResponseAsyncOperation)">
            <summary>
            Is called when MQ server DATA command initial response reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.SendMessageAsyncOperation.DataMsgSendingCompleted(MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminatedAsyncOperation)">
            <summary>
            Is called when DATA command message sending has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.SendMessageAsyncOperation.DataReadFinalResponseCompleted(MControl.Messaging.Net.MQ.MqClient.ReadResponseAsyncOperation)">
            <summary>
            Is called when MQ server DATA command final response reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.SendMessageAsyncOperation.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqClient.SendMessageAsyncOperation.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqClient.SendMessageAsyncOperation.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.MQ.MqClient.SendMessageAsyncOperation.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.MQ.MqClient.RsetAsyncOperation">
            <summary>
            This class represents <see cref="M:MControl.Messaging.Net.MQ.MqClient.RsetAsync(MControl.Messaging.Net.MQ.MqClient.RsetAsyncOperation)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.RsetAsyncOperation.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.RsetAsyncOperation.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.RsetAsyncOperation.Start(MControl.Messaging.Net.MQ.MqClient)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner MQ client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.RsetAsyncOperation.SetState(MControl.Messaging.Net.AsyncOperationState)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.RsetAsyncOperation.RsetCommandSendingCompleted(System.IAsyncResult)">
            <summary>
            Is called when RSET command sending has finished.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.RsetAsyncOperation.RsetReadResponseCompleted(MControl.Messaging.Net.MQ.MqClient.ReadResponseAsyncOperation)">
            <summary>
            Is called when MQ server RSET command response reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.RsetAsyncOperation.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqClient.RsetAsyncOperation.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqClient.RsetAsyncOperation.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.MQ.MqClient.RsetAsyncOperation.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.MQ.MqClient.NoopAsyncOperation">
            <summary>
            This class represents <see cref="M:MControl.Messaging.Net.MQ.MqClient.NoopAsync(MControl.Messaging.Net.MQ.MqClient.NoopAsyncOperation)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.NoopAsyncOperation.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.NoopAsyncOperation.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.NoopAsyncOperation.Start(MControl.Messaging.Net.MQ.MqClient)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner MQ client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.NoopAsyncOperation.SetState(MControl.Messaging.Net.AsyncOperationState)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.NoopAsyncOperation.NoopCommandSendingCompleted(System.IAsyncResult)">
            <summary>
            Is called when NOOP command sending has finished.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.NoopAsyncOperation.NoopReadResponseCompleted(MControl.Messaging.Net.MQ.MqClient.ReadResponseAsyncOperation)">
            <summary>
            Is called when NOOP command response reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.NoopAsyncOperation.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqClient.NoopAsyncOperation.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqClient.NoopAsyncOperation.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.MQ.MqClient.NoopAsyncOperation.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.MQ.MqClient.ReadResponseAsyncOperation">
            <summary>
            This class represents <see cref="M:MControl.Messaging.Net.MQ.MqClient.ReadResponseAsync(MControl.Messaging.Net.MQ.MqClient.ReadResponseAsyncOperation)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.ReadResponseAsyncOperation.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.ReadResponseAsyncOperation.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.ReadResponseAsyncOperation.Start(MControl.Messaging.Net.MQ.MqClient)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner MQ client.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.ReadResponseAsyncOperation.SetState(MControl.Messaging.Net.AsyncOperationState)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.ReadResponseAsyncOperation.ReadLineCompleted(MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation)">
            <summary>
            Is called when read line has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if multiline response has more response lines.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClient.ReadResponseAsyncOperation.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqClient.ReadResponseAsyncOperation.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqClient.ReadResponseAsyncOperation.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqClient.ReadResponseAsyncOperation.ReplyLines">
            <summary>
            Gets MQ server reply-lines.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.MQ.MqClient.ReadResponseAsyncOperation.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.MQ.MqClientException">
            <summary>
            MQ client exception.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClientException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="responseLine">MQ server response line.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>responseLine</b> is null.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqClientException.#ctor(MControl.Messaging.Net.MQ.MqReplyLine[])">
            <summary>
            Default constructor.
            </summary>
            <param name="replyLines">MQ server error reply lines.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>replyLines</b> is null reference.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqClientException.ReplyLines">
            <summary>
            Gets MQ server error reply lines.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqClientException.IsPermanentError">
            <summary>
            Gets if it is permanent MQ(5xx) error.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqClientException.StatusCode">
            <summary>
            StatusCode
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqClientException.ResponseText">
            <summary>
            ResponseText
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.MQ.MqMessageEventArgs">
            <summary>
            This class provided data for <b cref="E:MControl.Messaging.Net.MQ.MqTask.GetMessageStream">MqTask.GetMessageStream</b> event.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqMessageEventArgs.#ctor(MControl.Messaging.Net.MQ.MqTask)">
            <summary>
            Default constructor.
            </summary>
            <param name="task">Owner MQ server task.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>task</b> is null reference.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqMessageEventArgs.Session">
            <summary>
            Gets owner MQ task.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqMessageEventArgs.Stream">
            <summary>
            Gets or stes stream where to store incoming message.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference is passed.</exception>
        </member>
        <member name="T:MControl.Messaging.Net.MQ.MqMessageStoredEventArgs">
            <summary>
            This class provided data for <b cref="E:MControl.Messaging.Net.MQ.MqTask.MessageStoringCompleted">MqTask.MessageStoringCompleted</b> event.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqMessageStoredEventArgs.#ctor(MControl.Messaging.Net.MQ.MqTask,System.IO.Stream,MControl.Messaging.Net.MQ.MqReply)">
            <summary>
            Default constructor.
            </summary>
            <param name="task">Owner MQ server task.</param>
            <param name="stream">Message stream.</param>
            <param name="reply">MQ server reply.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>task</b>, <b>stream</b> or <b>reply</b> is null reference.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqMessageStoredEventArgs.Session">
            <summary>
            Gets owner MQ task.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqMessageStoredEventArgs.Stream">
            <summary>
            Gets message stream where message has stored.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqMessageStoredEventArgs.Reply">
            <summary>
            Gets or sets MQ server reply.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
        </member>
        <member name="T:MControl.Messaging.Net.MQ.MqStartedEventArgs">
            <summary>
            This class provides data for <b cref="E:MControl.Messaging.Net.MQ.MqTask.Started">MqTask.Started</b> event.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqStartedEventArgs.#ctor(MControl.Messaging.Net.MQ.MqTask,MControl.Messaging.Net.MQ.MqReply)">
            <summary>
            Default constructor.
            </summary>
            <param name="task">Owner MQ server task.</param>
            <param name="reply">MQ server reply.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>task</b> or <b>reply</b> is null reference.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqStartedEventArgs.Session">
            <summary>
            Gets owner MQ task.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqStartedEventArgs.Reply">
            <summary>
            Gets or sets MQ server reply.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null reference passed.</exception>
        </member>
        <member name="T:MControl.Messaging.Net.MQ.MqReply">
            <summary>
            This class implements MQ server reply.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqReply.#ctor(System.Int32,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="replyCode">MQ server reply code.</param>
            <param name="replyLine">MQ server reply line.</param>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>replyLine</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqReply.#ctor(System.Int32,System.String[])">
            <summary>
            Default constructor.
            </summary>
            <param name="replyCode">MQ server reply code.</param>
            <param name="replyLines">MQ server reply line(s).</param>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>replyLines</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqReply.ToString">
            <summary>
            Returns MQ server reply as string.
            </summary>
            <returns>Returns MQ server reply as string.</returns>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqReply.ReplyCode">
            <summary>
            Gets MQ server reply code.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqReply.ReplyLines">
            <summary>
            Gets MQ server reply lines.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.MQ.MqServer">
            <summary>
            This class implements MQ server. Defined RFC 5321.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Tcp.TcpServer`1">
            <summary>
            This class implements generic Tcp task based server.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.m_Timer_IdleTimeout_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is called when task idle check timer triggered.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.Start">
            <summary>
            Starts Tcp server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.Stop">
            <summary>
            Stops Tcp server, all active connections will be terminated.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.Restart">
            <summary>
            Restarts Tcp server.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.OnMaxConnectionsExceeded(`0)">
            <summary>
            Is called when new incoming task and server maximum allowed connections exceeded.
            </summary>
            <param name="task">Incoming task.</param>
            <remarks>This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.OnMaxConnectionsPerIPExceeded(`0)">
            <summary>
            Is called when new incoming task and server maximum allowed connections per connected IP exceeded.
            </summary>
            <param name="task">Incoming task.</param>
            <remarks>This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.StartListen">
            <summary>
            Starts listening incoming connections. NOTE: All active listening points will be disposed.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.ProcessConnection(System.Net.Sockets.Socket,MControl.Messaging.Net.IPBindInfo)">
            <summary>
            Processes specified connection.
            </summary>
            <param name="socket">Accpeted socket.</param>
            <param name="bindInfo">Local bind info what accpeted connection.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>socket</b> or <b>bindInfo</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.OnStarted">
            <summary>
            Raises <b>Started</b> event.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.OnStopped">
            <summary>
            Raises <b>Stopped</b> event.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.OnDisposed">
            <summary>
            Raises <b>Disposed</b> event.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.OnSessionCreated(`0)">
            <summary>
            Raises <b>SessionCreated</b> event.
            </summary>
            <param name="task">Tcp server task that was created.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.OnError(System.Exception)">
            <summary>
            Raises <b>Error</b> event.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServer`1.IsDisposed">
            <summary>
            Gets if server is disposed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServer`1.IsRunning">
            <summary>
            Gets if server is running.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServer`1.Bindings">
            <summary>
            Gets or sets Tcp server IP bindings.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServer`1.LocalEndPoints">
            <summary>
            Gets local listening IP end points.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServer`1.MaxConnections">
            <summary>
            Gets or sets maximum allowed concurent connections. Value 0 means unlimited.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when negative value is passed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServer`1.MaxConnectionsPerIP">
            <summary>
            Gets or sets maximum allowed connections for 1 IP address. Value 0 means unlimited.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServer`1.SessionIdleTimeout">
            <summary>
            Gets or sets maximum allowed task idle time in seconds, after what task will be terminated. Value 0 means unlimited,
            but this is strongly not recommened.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when negative value is passed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServer`1.StartTime">
            <summary>
            Gets the time when server was started.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when Tcp server is not running and this property is accesed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServer`1.ConnectionsProcessed">
            <summary>
            Gets how many connections this Tcp server has processed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when Tcp server is not running and this property is accesed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServer`1.Sessions">
            <summary>
            Gets Tcp server active sessions.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when Tcp server is not running and this property is accesed.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.Tcp.TcpServer`1.Started">
            <summary>
            This event is raised when Tcp server has started.
            </summary>
        </member>
        <member name="E:MControl.Messaging.Net.Tcp.TcpServer`1.Stopped">
            <summary>
            This event is raised when Tcp server has stopped.
            </summary>
        </member>
        <member name="E:MControl.Messaging.Net.Tcp.TcpServer`1.Disposed">
            <summary>
            This event is raised when Tcp server has disposed.
            </summary>
        </member>
        <member name="E:MControl.Messaging.Net.Tcp.TcpServer`1.SessionCreated">
            <summary>
            This event is raised when Tcp server creates new task.
            </summary>
        </member>
        <member name="E:MControl.Messaging.Net.Tcp.TcpServer`1.Error">
            <summary>
            This event is raised when Tcp server has unknown unhandled error.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Tcp.TcpServer`1.ListeningPoint">
            <summary>
            This class holds listening point info.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.ListeningPoint.#ctor(System.Net.Sockets.Socket,MControl.Messaging.Net.IPBindInfo)">
            <summary>
            Default constructor.
            </summary>
            <param name="socket">Listening socket.</param>
            <param name="bind">Bind info what acceped socket.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>socket</b> or <b>bind</b> is null reference.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServer`1.ListeningPoint.Socket">
            <summary>
            Gets socket.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServer`1.ListeningPoint.BindInfo">
            <summary>
            Gets bind info.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Tcp.TcpServer`1.TcpAcceptor">
            <summary>
            Implements single Tcp connection acceptor.
            </summary>
            <remarks>For higher performance, mutiple acceptors per socket must be created.</remarks>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.TcpAcceptor.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Default constructor.
            </summary>
            <param name="socket">Socket.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>socket</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.TcpAcceptor.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.TcpAcceptor.Start">
            <summary>
            Starts accpeting connections.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this calss is disposed and this method is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.TcpAcceptor.IOCompletionAccept">
            <summary>
            Accpets connection synchornously(if connection(s) available now) or starts waiting Tcp connection asynchronously if no connections at moment.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.TcpAcceptor.AsyncSocketAccept(System.IAsyncResult)">
            <summary>
            Is called BeginAccept has completed.
            </summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.TcpAcceptor.OnConnectionAccepted(System.Net.Sockets.Socket)">
            <summary>
            Raises <b>ConnectionAccepted</b> event.
            </summary>
            <param name="socket">Accepted socket.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServer`1.TcpAcceptor.OnError(System.Exception)">
            <summary>
            Raises <b>Error</b> event.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServer`1.TcpAcceptor.Tags">
            <summary>
            Gets user data items.
            </summary>
        </member>
        <member name="E:MControl.Messaging.Net.Tcp.TcpServer`1.TcpAcceptor.ConnectionAccepted">
            <summary>
            Is raised when new Tcp connection was accepted.
            </summary>
        </member>
        <member name="E:MControl.Messaging.Net.Tcp.TcpServer`1.TcpAcceptor.Error">
            <summary>
            Is raised when unhandled error happens.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqServer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqServer.OnMaxConnectionsExceeded(MControl.Messaging.Net.MQ.MqTask)">
            <summary>
            Is called when new incoming task and server maximum allowed connections exceeded.
            </summary>
            <param name="task">Incoming task.</param>
            <remarks>This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqServer.OnMaxConnectionsPerIPExceeded(MControl.Messaging.Net.MQ.MqTask)">
            <summary>
            Is called when new incoming task and server maximum allowed connections per connected IP exceeded.
            </summary>
            <param name="task">Incoming task.</param>
            <remarks>This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqServer.MaxBadCommands">
            <summary>
            Gets or sets how many bad commands task can have before it's terminated. Value 0 means unlimited.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqServer.MaxTransactions">
            <summary>
            Gets or sets maximum mail transactions per task. Value 0 means unlimited.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqServer.MaxMessageSize">
            <summary>
            Gets or sets maximum message size in bytes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqServer.MaxRecipients">
            <summary>
            Gets or sets maximum allowed recipients per MQ transaction.
            </summary>
            <remarks>According RFC 5321 this value SHOULD NOT be less than 100.</remarks>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is passed.</exception>
        </member>
        <member name="T:MControl.Messaging.Net.MQ.MqReplyLine">
            <summary>
            This class represent s MQ server reply-line. Defined in RFC 5321 4.2.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqReplyLine.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="replyCode">MQ server reply code.</param>
            <param name="text">MQ server reply text.</param>
            <param name="isLastLine">Specifies if this line is last line in response.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqReplyLine.Parse(System.String)">
            <summary>
            Parses MQ reply-line from 
            </summary>
            <param name="line">MQ server reply-line.</param>
            <returns>Returns parsed MQ server reply-line.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>line</b> is null reference.</exception>
            <exception cref="T:MControl.Messaging.Net.ParseException">Is raised when reply-line parsing fails.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqReplyLine.ToString">
            <summary>
            Returns this as MQ server <b>reply-line</b>.
            </summary>
            <returns>Returns this as MQ server <b>reply-line</b>.</returns>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqReplyLine.ReplyCode">
            <summary>
            Gets MQ server reply code.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqReplyLine.Text">
            <summary>
            Gets MQ server relpy text.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqReplyLine.IsLastLine">
            <summary>
            Gets if this is last reply line.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Udp.UdpDataReceiver">
            <summary>
            This class implements high performance Udp data receiver.
            </summary>
            <remarks>NOTE: High performance server applications should create multiple instances of this class per one socket.</remarks>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpDataReceiver.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Default constructor.
            </summary>
            <param name="socket">Udp socket.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>socket</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpDataReceiver.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpDataReceiver.Start">
            <summary>
            Starts receiving data.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this calss is disposed and this method is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpDataReceiver.IOCompletionReceive">
            <summary>
            Receives synchornously(if packet(s) available now) or starts waiting Udp packet asynchronously if no packets at moment.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpDataReceiver.AsyncSocketReceive(System.IAsyncResult)">
            <summary>
            Is called BeginReceiveFrom has completed.
            </summary>
            <param name="ar">The result of the asynchronous operation.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpDataReceiver.OnPacketReceived(System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary>
            Raises <b>PacketReceived</b> event.
            </summary>
            <param name="buffer">Data buffer.</param>
            <param name="count">Number of bytes stored in <b>buffer</b></param>
            <param name="remoteEP">Remote IP end point from where data was received.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpDataReceiver.OnError(System.Exception)">
            <summary>
            Raises <b>Error</b> event.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="E:MControl.Messaging.Net.Udp.UdpDataReceiver.PacketReceived">
            <summary>
            Is raised when when new Udp packet is available.
            </summary>
        </member>
        <member name="E:MControl.Messaging.Net.Udp.UdpDataReceiver.Error">
            <summary>
            Is raised when unhandled error happens.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Udp.UdpPacketReceivedEventArgs">
            <summary>
            This class provides data for the <see cref="E:MControl.Messaging.Net.Udp.UdpDataReceiver.PacketReceived"/> event.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpPacketReceivedEventArgs.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpPacketReceivedEventArgs.Reuse(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Net.IPEndPoint)">
            <summary>
            Reuses this class.
            </summary>
            <param name="socket">Socket which received data.</param>
            <param name="buffer">Data buffer.</param>
            <param name="count">Number of bytes stored in <b>buffer</b></param>
            <param name="remoteEP">Remote IP end point from where data was received.</param>
        </member>
        <member name="P:MControl.Messaging.Net.Udp.UdpPacketReceivedEventArgs.Socket">
            <summary>
            Gets socket which received data.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Udp.UdpPacketReceivedEventArgs.Buffer">
            <summary>
            Gets data buffer.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Udp.UdpPacketReceivedEventArgs.Count">
            <summary>
            Gets number of bytes stored to <b>Buffer</b>.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Udp.UdpPacketReceivedEventArgs.RemoteEP">
            <summary>
            Gets remote host from where data was received.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Udp.UdpServer">
            <summary>
            This class implements generic Udp server.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpServer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpServer.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpServer.Start">
            <summary>
            Starts Udp server.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpServer.Stop">
            <summary>
            Stops Udp server.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpServer.Restart">
            <summary>
            Restarts running server. If server is not running, this methods has no efffect.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpServer.SendPacket(System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint)">
            <summary>
            Sends specified Udp packet to the specified remote end point.
            </summary>
            <param name="packet">Udp packet to send.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to send.</param>
            <param name="remoteEP">Remote end point.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan Udp server is not running and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when any of the arumnets is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpServer.SendPacket(System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint,System.Net.IPEndPoint@)">
            <summary>
            Sends specified Udp packet to the specified remote end point.
            </summary>
            <param name="packet">Udp packet to send.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to send.</param>
            <param name="remoteEP">Remote end point.</param>
            <param name="localEP">Returns local IP end point which was used to send Udp packet.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan Udp server is not running and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when any of the arumnets is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpServer.SendPacket(System.Net.IPEndPoint,System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint)">
            <summary>
            Sends specified Udp packet to the specified remote end point.
            </summary>
            <param name="localEP">Local end point to use for sending.</param>
            <param name="packet">Udp packet to send.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to send.</param>
            <param name="remoteEP">Remote end point.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan Udp server is not running and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when any of the arumnets is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpServer.SendPacket(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint,System.Net.IPEndPoint@)">
            <summary>
            Sends specified Udp packet to the specified remote end point.
            </summary>
            <param name="socket">Udp socket to use for data sending.</param>
            <param name="packet">Udp packet to send.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes to send.</param>
            <param name="remoteEP">Remote end point.</param>
            <param name="localEP">Returns local IP end point which was used to send Udp packet.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan Udp server is not running and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when any of the arumnets is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpServer.GetLocalEndPoint(System.Net.IPEndPoint)">
            <summary>
            Gets suitable local IP end point for the specified remote endpoint.
            If there are multiple sending local end points, they will be load-balanched with round-robin.
            </summary>
            <param name="remoteEP">Remote end point.</param>
            <returns>Returns local IP end point.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when argument <b>remoteEP</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when argument <b>remoteEP</b> has invalid value.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when no suitable IPv4 or IPv6 socket for <b>remoteEP</b>.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpServer.ProcessUdpPacket(MControl.Messaging.Net.Udp.UdpPacketReceivedEventArgs)">
            <summary>
            Processes specified incoming Udp packet.
            </summary>
            <param name="e">Packet event data.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>e</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpServer.OnUdpPacketReceived(MControl.Messaging.Net.Udp.UdpPacketReceivedEventArgs)">
            <summary>
            Raises PacketReceived event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Udp.UdpServer.OnError(System.Exception)">
            <summary>
            Raises Error event.
            </summary>
            <param name="x">Exception occured.</param>
        </member>
        <member name="P:MControl.Messaging.Net.Udp.UdpServer.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Udp.UdpServer.IsRunning">
            <summary>
            Gets if Udp server is running.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Udp.UdpServer.MTU">
            <summary>
            Gets or sets maximum network transmission unit.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when server is running and this property value is tried to set.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Udp.UdpServer.Bindings">
            <summary>
            Gets or sets IP end point where Udp server is binded.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Udp.UdpServer.StartTime">
            <summary>
            Gets time when server was started.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan Udp server is not running and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Udp.UdpServer.BytesReceived">
            <summary>
            Gets how many bytes this Udp server has received since start.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan Udp server is not running and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Udp.UdpServer.PacketsReceived">
            <summary>
            Gets how many Udp packets this Udp server has received since start.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan Udp server is not running and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Udp.UdpServer.BytesSent">
            <summary>
            Gets how many bytes this Udp server has sent since start.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan Udp server is not running and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Udp.UdpServer.PacketsSent">
            <summary>
            Gets how many Udp packets this Udp server has sent since start.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised whan Udp server is not running and this property is accessed.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.Udp.UdpServer.PacketReceived">
            <summary>
            This event is raised when new Udp packet received.
            </summary>
        </member>
        <member name="E:MControl.Messaging.Net.Udp.UdpServer.Error">
            <summary>
            This event is raised when unexpected error happens.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.AsyncResultState">
            <summary>
            (For internal use only). This class provides holder for IAsyncResult interface and extends it's features.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.AsyncResultState.#ctor(System.Object,System.Delegate,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="asyncObject">Caller's async object.</param>
            <param name="asyncDelegate">Delegate which is called asynchronously.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
        </member>
        <member name="M:MControl.Messaging.Net.AsyncResultState.SetAsyncResult(System.IAsyncResult)">
            <summary>
            Sets AsyncResult value.
            </summary>
            <param name="asyncResult">Asycnhronous result to wrap.</param>
        </member>
        <member name="M:MControl.Messaging.Net.AsyncResultState.CompletedCallback(System.IAsyncResult)">
            <summary>
            This method is called by AsyncDelegate when asynchronous operation completes. 
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="P:MControl.Messaging.Net.AsyncResultState.AsyncObject">
            <summary>
            Gets or sets caller's async object.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.AsyncResultState.AsyncDelegate">
            <summary>
            Gets delegate which is called asynchronously.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.AsyncResultState.AsyncResult">
            <summary>
            Gets source asynchronous result what we wrap.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.AsyncResultState.IsEndCalled">
            <summary>
            Gets if the user called the End*() method.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.AsyncResultState.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.AsyncResultState.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.AsyncResultState.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.AsyncResultState.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.AsyncOperation">
            <summary>
            This is base class for asynchronous operation.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.AsyncOperation.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.AsyncOperation.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.AsyncOperation.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.AsyncOperation.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.AsyncOperationState">
            <summary>
            Specifies asynchronous operation state.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.AsyncOperationState.WaitingForStart">
            <summary>
            Operation waits for start.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.AsyncOperationState.Active">
            <summary>
            Operation processing is in progress.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.AsyncOperationState.Completed">
            <summary>
            Operations is completed.
            </summary>
        </member>
        <member name="F:MControl.Messaging.Net.AsyncOperationState.Disposed">
            <summary>
            Operation is disposed.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.ErrorEventArgs">
            <summary>
            Provides data for the SysError event for servers.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.ErrorEventArgs.#ctor(System.Exception,System.Diagnostics.StackTrace)">
            <summary>
            Default constructor.
            </summary>
            <param name="x"></param>
            <param name="stackTrace"></param>
        </member>
        <member name="P:MControl.Messaging.Net.ErrorEventArgs.Exception">
            <summary>
            Occured error's exception.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.ErrorEventArgs.StackTrace">
            <summary>
            Occured error's stacktrace.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.ErrorEventArgs.Text">
            <summary>
            Gets comment text.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.MQ.MqTask">
            <summary>
            This class implements MQ task. Defined RFC 5321.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Tcp.TcpServerTask">
            <summary>
            This class implements generic Tcp server task.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.Init(System.Object,System.Net.Sockets.Socket,System.String,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Initializes task. This method is called from TcpServer when new task created.
            </summary>
            <param name="server">Owner Tcp server.</param>
            <param name="socket">Connected socket.</param>
            <param name="hostName">Local host name.</param>
            <param name="ssl">Specifies if task should switch to SSL.</param>
            <param name="certificate">SSL certificate.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.StartI">
            <summary>
            This method is called from Tcp server when task should start processing incoming connection.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.Start">
            <summary>
            This method is called from Tcp server when task should start processing incoming connection.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.SwitchToSecure">
            <summary>
            Switches task to secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when connection is already secure or when SSL certificate is not specified.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.SwitchToSecureAsync(MControl.Messaging.Net.Tcp.TcpServerTask.SwitchToSecureAsyncOperation)">
            <summary>
            Starts switching connection to secure.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:MControl.Messaging.Net.Tcp.TcpServerTask.SwitchToSecureAsyncOperation.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when connection is already secure or when SSL certificate is not specified.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.Disconnect">
            <summary>
            Disconnects task.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.Disconnect(System.String)">
            <summary>
            Disconnects task.
            </summary>
            <param name="text">Text what is sent to connected host before disconnecting.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.OnTimeout">
            <summary>
            This method is called when specified task times out.
            </summary>
            <remarks>
            This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.OnTimeoutI">
            <summary>
            Just calls <b>OnTimeout</b> method.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.LogAddText(System.String)">
            <summary>
            Logs specified text.
            </summary>
            <param name="text">text to log.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.LogAddException(System.Exception)">
            <summary>
            Logs specified exception.
            </summary>
            <param name="exception">Exception to log.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>exception</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.OnIdleTimeout">
            <summary>
            Raises <b>IdleTimeout</b> event.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.OnDisonnected">
            <summary>
            Raises <b>Disonnected</b> event.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.OnDisposed">
            <summary>
            Raises <b>Disposed</b> event.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.OnError(System.Exception)">
            <summary>
            Raises <b>Error</b> event.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServerTask.IsDisposed">
            <summary>
            Gets if Tcp server task is disposed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServerTask.Server">
            <summary>
            Gets owner Tcp server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServerTask.LocalHostName">
            <summary>
            Gets local host name.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServerTask.Certificate">
            <summary>
            Gets task certificate.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServerTask.Tag">
            <summary>
            Gets or sets user data.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServerTask.Tags">
            <summary>
            Gets user data items collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServerTask.IsConnected">
            <summary>
            Gets if task is connected.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServerTask.ID">
            <summary>
            Gets task ID.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServerTask.ConnectTime">
            <summary>
            Gets the time when task was connected.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServerTask.LastActivity">
            <summary>
            Gets the last time when data was sent or received.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServerTask.LocalEndPoint">
            <summary>
            Gets task local IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServerTask.RemoteEndPoint">
            <summary>
            Gets task remote IP end point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServerTask.IsSecureConnection">
            <summary>
            Gets if this task Tcp connection is secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServerTask.TcpStream">
            <summary>
            Gets Tcp stream which must be used to send/receive data through this task.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.Tcp.TcpServerTask.IdleTimeout">
            <summary>
            This event is raised when task idle(no activity) timeout reached.
            </summary>
        </member>
        <member name="E:MControl.Messaging.Net.Tcp.TcpServerTask.Disonnected">
            <summary>
            This event is raised when task has disconnected and will be disposed soon.
            </summary>
        </member>
        <member name="E:MControl.Messaging.Net.Tcp.TcpServerTask.Disposed">
            <summary>
            This event is raised when task has disposed.
            </summary>
        </member>
        <member name="E:MControl.Messaging.Net.Tcp.TcpServerTask.Error">
            <summary>
            This event is raised when Tcp server task has unknown unhandled error.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Tcp.TcpServerTask.SwitchToSecureAsyncOperation">
            <summary>
            This class represents <see cref="M:MControl.Messaging.Net.Tcp.TcpServerTask.SwitchToSecureAsync(MControl.Messaging.Net.Tcp.TcpServerTask.SwitchToSecureAsyncOperation)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.SwitchToSecureAsyncOperation.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.SwitchToSecureAsyncOperation.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.SwitchToSecureAsyncOperation.Start(MControl.Messaging.Net.Tcp.TcpServerTask)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner Tcp task.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.SwitchToSecureAsyncOperation.SetState(MControl.Messaging.Net.AsyncOperationState)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.SwitchToSecureAsyncOperation.BeginAuthenticateAsServerCompleted(System.IAsyncResult)">
            <summary>
            This method is called when "BeginAuthenticateAsServer" has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTask.SwitchToSecureAsyncOperation.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServerTask.SwitchToSecureAsyncOperation.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServerTask.SwitchToSecureAsyncOperation.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.Tcp.TcpServerTask.SwitchToSecureAsyncOperation.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.Start">
            <summary>
            Starts task processing.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.OnError(System.Exception)">
            <summary>
            Is called when task has processing error.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.OnTimeout">
            <summary>
            This method is called when specified task times out.
            </summary>
            <remarks>
            This method allows inhereted classes to report error message to connected client.
            Session will be disconnected after this method completes.
            </remarks>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.BeginReadCmd">
            <summary>
            Starts reading incoming command from the connected client.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.ProcessCmd(MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation)">
            <summary>
            Completes command reading operation.
            </summary>
            <param name="op">Operation.</param>
            <returns>Returns true if server should start reading next command.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.ReadCommandAsync(MControl.Messaging.Net.MQ.MqTask.ReadCommandAsyncOperation)">
            <summary>
            Reads next MQ command.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.ReadCommandCompleted(MControl.Messaging.Net.MQ.MqTask.ReadCommandAsyncOperation)">
            <summary>
            Is called when MQ command reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.SendResponseAsync(MControl.Messaging.Net.MQ.MqTask.SendResponseAsyncOperation)">
            <summary>
            Sends MQ server response.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:MControl.Messaging.Net.MQ.MqTask.SendResponseAsyncOperation.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.DATA_End(System.DateTime,MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation)">
            <summary>
            Completes DATA command.
            </summary>
            <param name="startTime">Time DATA command started.</param>
            <param name="op">Read period-terminated opeartion.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.Reset">
            <summary>
            Does reset as specified in RFC 5321.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.CreateReceivedHeader">
            <summary>
            Creates "Received:" header field. For more info see RFC 5321.4.4.
            </summary>
            <returns>Returns "Received:" header field.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.WriteLine(System.String)">
            <summary>
            Sends and logs specified line to connected host.
            </summary>
            <param name="line">Line to send.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.LogAddRead(System.Int64,System.String)">
            <summary>
            Logs read operation.
            </summary>
            <param name="size">Number of bytes readed.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.LogAddWrite(System.Int64,System.String)">
            <summary>
            Logs write operation.
            </summary>
            <param name="size">Number of bytes written.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.LogAddText(System.String)">
            <summary>
            Logs free text entry.
            </summary>
            <param name="text">Log text.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.LogAddException(System.String,System.Exception)">
            <summary>
            Logs exception.
            </summary>
            <param name="text">Log text.</param>
            <param name="x">Exception happened.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.OnStarted(MControl.Messaging.Net.MQ.MqReply)">
            <summary>
            Raises <b>Started</b> event.
            </summary>
            <param name="reply">Default MQ server reply.</param>
            <returns>Returns MQ server reply what must be sent to the connected client.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.OnGetMessageStream">
            <summary>
            Raises <b>GetMessageStream</b> event.
            </summary>
            <returns>Returns message store stream.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.OnMessageStoringCanceled">
            <summary>
            Raises <b>MessageStoringCanceled</b> event.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.OnMessageStoringCompleted(MControl.Messaging.Net.MQ.MqReply)">
            <summary>
            Raises <b>MessageStoringCompleted</b> event.
            </summary>
            <param name="reply">Default MQ server reply.</param>
            <returns>Returns MQ server reply what must be sent to the connected client.</returns>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqTask.Server">
            <summary>
            Gets task owner MQ server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqTask.Authentications">
            <summary>
            Gets supported SASL authentication methods collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqTask.BadCommands">
            <summary>
            Gets number of bad commands happened on MQ task.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqTask.Transactions">
            <summary>
            Gets number of mail transactions processed by this MQ task.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqTask.EhloHost">
            <summary>
            Gets client reported EHLO host name. Returns null if EHLO/HELO is not issued yet.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqTask.AuthenticatedUserIdentity">
            <summary>
            Gets authenticated user identity or null if user has not authenticated.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqTask.From">
            <summary>
            Gets MAIL FROM: value. Returns null if MAIL FROM: is not issued yet.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqTask.To">
            <summary>
            Gets RCPT TO: values. Returns null if RCPT TO: is not issued yet.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.MQ.MqTask.Started">
            <summary>
            Is raised when task has started processing and needs to send 220 greeting or 554 error resposne to the connected client.
            </summary>
        </member>
        <member name="E:MControl.Messaging.Net.MQ.MqTask.GetMessageStream">
            <summary>
            Is raised when MQ server needs to get stream where to store incoming message.
            </summary>
        </member>
        <member name="E:MControl.Messaging.Net.MQ.MqTask.MessageStoringCanceled">
            <summary>
            Is raised when MQ server has canceled message storing.
            </summary>
            <remarks>This can happen on 2 cases: on task timeout and if between BDAT chunks RSET issued.</remarks>
        </member>
        <member name="E:MControl.Messaging.Net.MQ.MqTask.MessageStoringCompleted">
            <summary>
            Is raised when MQ server has completed message storing.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.MQ.MqTask.ReadCommandAsyncOperation">
            <summary>
            
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.ReadCommandAsyncOperation.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.MQ.MqTask.SendResponseAsyncOperation">
            <summary>
            This class represents <see cref="M:MControl.Messaging.Net.MQ.MqTask.SendResponseAsync(MControl.Messaging.Net.MQ.MqTask.SendResponseAsyncOperation)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.SendResponseAsyncOperation.#ctor(MControl.Messaging.Net.MQ.MqReplyLine)">
            <summary>
            Default constructor.
            </summary>
            <param name="reply">MQ server reply line.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>reply</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.SendResponseAsyncOperation.#ctor(MControl.Messaging.Net.MQ.MqReplyLine[])">
            <summary>
            Default constructor.
            </summary>
            <param name="replyLines">MQ server reply lines.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>replyLines</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid values.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.SendResponseAsyncOperation.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.SendResponseAsyncOperation.Start(MControl.Messaging.Net.MQ.MqTask)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner MQ task.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.SendResponseAsyncOperation.SetState(MControl.Messaging.Net.AsyncOperationState)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.SendResponseAsyncOperation.ResponseSendingCompleted(System.IAsyncResult)">
            <summary>
            Is called when response sending has finished.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.SendResponseAsyncOperation.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqTask.SendResponseAsyncOperation.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqTask.SendResponseAsyncOperation.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.MQ.MqTask.SendResponseAsyncOperation.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.MQ.MqTask.Cmd_DATA">
            <summary>
            Implements MQ DATA command. Defined in RFC 5321 4.1.1.4.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.Cmd_DATA.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.Cmd_DATA.Dispose">
            <summary>
            Cleans up any resource being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.Cmd_DATA.Start(MControl.Messaging.Net.MQ.MqTask,System.String)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner MQ task.</param>
            <param name="cmdText">MQ client command text.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.Cmd_DATA.SetState(MControl.Messaging.Net.AsyncOperationState)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.Cmd_DATA.SendFinalResponse(MControl.Messaging.Net.MQ.MqReplyLine)">
            <summary>
            Sends specified final response to client.
            </summary>
            <param name="reply">MQ reply.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.Cmd_DATA.SendFinalResponseCompleted(MControl.Messaging.Net.MQ.MqTask.SendResponseAsyncOperation)">
            <summary>
            Is called when MQ server "final" response sending has completed.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.Cmd_DATA.Send354ResponseCompleted(MControl.Messaging.Net.MQ.MqTask.SendResponseAsyncOperation)">
            <summary>
            Is called when MQ server 354 response sending has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.Cmd_DATA.MessageReadingCompleted(MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation)">
            <summary>
            Is called when incoming MQ message reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
        </member>
        <member name="M:MControl.Messaging.Net.MQ.MqTask.Cmd_DATA.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqTask.Cmd_DATA.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.MQ.MqTask.Cmd_DATA.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.MQ.MqTask.Cmd_DATA.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Tcp.TcpServerTaskEventArgs`1">
            <summary>
            This class provides data to .... .
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpServerTaskEventArgs`1.#ctor(MControl.Messaging.Net.Tcp.TcpServer{`0},`0)">
            <summary>
            Default constructor.
            </summary>
            <param name="server">Tcp server.</param>
            <param name="task">Tcp server task.</param>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServerTaskEventArgs`1.Server">
            <summary>
            Gets Tcp server.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpServerTaskEventArgs`1.Session">
            <summary>
            Gets Tcp server task.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.Tcp.TcpTaskCollection`1">
            <summary>
            This class implements Tcp task collection.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpTaskCollection`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpTaskCollection`1.Add(`0)">
            <summary>
            Adds specified Tcp task to the colletion.
            </summary>
            <param name="task">Tcp server task to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>task</b> is null.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpTaskCollection`1.Reload">
            <summary>
            Reload
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpTaskCollection`1.Remove(`0)">
            <summary>
            Removes specified Tcp server task from the collection.
            </summary>
            <param name="task">Tcp server task to remove.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>task</b> is null.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpTaskCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpTaskCollection`1.ToArray">
            <summary>
            Copies all Tcp server task to new array. This method is thread-safe.
            </summary>
            <returns>Returns Tcp sessions array.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.Tcp.TcpTaskCollection`1.GetConnectionsPerIP(System.Net.IPAddress)">
            <summary>
            Gets number of connections per specified IP.
            </summary>
            <param name="ip">IP address.</param>
            <returns>Returns current number of connections of the specified IP.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpTaskCollection`1.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.Tcp.TcpTaskCollection`1.Item(System.String)">
            <summary>
            Gets Tcp task with the specified ID.
            </summary>
            <param name="id">Session ID.</param>
            <returns>Returns Tcp task with the specified ID.</returns>
        </member>
        <member name="T:MControl.Messaging.Net.IO.MemoryFileStream">
            <summary>
            This class represents auto switching memory/temp-file stream.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.MemoryFileStream.#ctor(System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="memSize">Maximum bytes store to memory, before switching over temporary file.</param>
        </member>
        <member name="M:MControl.Messaging.Net.IO.MemoryFileStream.Finalize">
            <summary>
            Destructor - Just incase user won't call dispose.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.MemoryFileStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.MemoryFileStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.MemoryFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.MemoryFileStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.MemoryFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.MemoryFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.MemoryFileStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.MemoryFileStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.MemoryFileStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.MemoryFileStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="M:MControl.Messaging.Net.IO.MemoryFileStream.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.MemoryFileStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:MControl.Messaging.Net.IO.ExtendedStream">
            <summary>
            This class is extended stream, provides most needed stream methods which are missing from normal stream.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream to wrap.</param>
            <param name="owner">Specifies if ExtendedStream is owner of <b>stream</b>.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadLine(MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation,System.Boolean)">
            <summary>
            Begins line reading.
            </summary>
            <param name="op">Read line opeartion.</param>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.BeginReadHeader(System.IO.Stream,System.Int32,MControl.Messaging.Net.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous header reading from the source stream.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies action what is done if <b>maxCount</b> number of bytes has exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.EndReadHeader(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous header reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <returns>Returns number of bytes stored to <b>storeStream</b>.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadLine</b> has already been called for specified <b>asyncResult</b>.</exception>
            <exception cref="T:MControl.Messaging.Net.IO.LineExceededException">Is raised when source stream has too big line.</exception>
            <exception cref="T:MControl.Messaging.Net.IO.SizeExceededException">Is raised when reading exceeds <b>maxCount</b> specified value.</exception>
            <exception cref="T:MControl.Messaging.Net.IO.IncompletedException">Is raised when source stream closed before header-terminator reached.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadHeader(System.IO.Stream,System.Int32,MControl.Messaging.Net.IO.SizeExceededAction)">
            <summary>
            Reads header from stream and stores to the specified <b>storeStream</b>.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies action what is done if <b>maxCount</b> number of bytes has exceeded.</param>
            <returns>Returns how many bytes readed from source stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:MControl.Messaging.Net.IO.LineExceededException">Is raised when source stream has too big line.</exception>
            <exception cref="T:MControl.Messaging.Net.IO.SizeExceededException">Is raised when reading exceeds <b>maxCount</b> specified value.</exception>
            <exception cref="T:MControl.Messaging.Net.IO.IncompletedException">Is raised when source stream closed before header-terminator reached.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminated(MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation,System.Boolean)">
            <summary>
            Begins period-terminated data reading.
            </summary>
            <param name="op">Read period terminated opeartion.</param>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.BeginReadFixedCount(System.IO.Stream,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous data reading from the source stream.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="count">Number of bytes to read.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.EndReadFixedCount(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous data reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadToStream</b> has already been called for specified <b>asyncResult</b>.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadFixedCount(System.IO.Stream,System.Int64)">
            <summary>
            Reads specified number of bytes from source stream and writes to the specified stream.
            </summary>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="count">Number of bytes to read.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadFixedCountString(System.Int32)">
            <summary>
            Reads specified number of bytes from source stream and converts it to string with current encoding.
            </summary>
            <param name="count">Number of bytes to read.</param>
            <returns>Returns readed data as string.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadAll(System.IO.Stream)">
            <summary>
            Reads all data from source stream and stores to the specified stream.
            </summary>
            <param name="stream">Stream where to store readed data.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.Peek">
            <summary>
            Returns the next available character but does not consume it.
            </summary>
            <returns>An integer representing the next character to be read, or -1 if no more characters are available.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.Write(System.String)">
            <summary>
            Writes specified string data to stream.
            </summary>
            <param name="data">Data to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WriteLine(System.String)">
            <summary>
            Writes specified line to stream. If CRLF is missing, it will be added automatically to line data.
            </summary>
            <param name="line">Line to send.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>line</b> is null.</exception>
            <returns>Returns number of raw bytes written.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WriteStream(System.IO.Stream)">
            <summary>
            Writes all source <b>stream</b> data to stream.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WriteStream(System.IO.Stream,System.Int64)">
            <summary>
            Writes specified number of bytes from source <b>stream</b> to stream.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <param name="count">Number of bytes to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when <b>count</b> argument has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WriteStreamAsync(MControl.Messaging.Net.IO.ExtendedStream.WriteStreamAsyncOperation)">
            <summary>
            Starts writing stream data to this stream.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:MControl.Messaging.Net.IO.ExtendedStream.WriteStreamAsyncOperation.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminated(System.IO.Stream)">
            <summary>
            Writes period handled and terminated data to this stream.
            </summary>
            <param name="stream">Source stream. Reading starts from stream current location.</param>
            <returns>Returns number of bytes written to stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:MControl.Messaging.Net.IO.LineExceededException">Is raised when <b>stream</b> has too big line.</exception>        
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminatedAsync(MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminatedAsyncOperation)">
            <summary>
            Starts writing period handled and terminated data to this stream.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminatedAsyncOperation.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WriteHeader(System.IO.Stream)">
            <summary>
            Reads header from source <b>stream</b> and writes it to stream.
            </summary>
            <param name="stream">Stream from where to read header.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation.
            </summary>
            <param name="buffer">The buffer to read the data into.</param>
            <param name="offset">The byte offset in buffer at which to begin writing data read from the stream.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An IAsyncResult that represents the asynchronous read, which could still be pending.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.EndRead(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous data reading.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>The total number of bytes read into the <b>buffer</b>. This can be less than the number of bytes requested 
            if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The byte offset in buffer from which to begin writing.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <param name="callback">An optional asynchronous callback, to be called when the write is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <returns>An IAsyncResult that represents the asynchronous write, which could still be pending.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation.
            </summary>
            <param name="asyncResult">A reference to the outstanding asynchronous I/O request.</param>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.BufferRead(System.Boolean,MControl.Messaging.Net.IO.ExtendedStream.BufferCallback)">
            <summary>
            Begins buffering read-buffer.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="asyncCallback">The callback that is executed when asynchronous operation completes. 
            If operation completes synchronously, no callback called.</param>
            <returns>
            Returns true if the I/O operation is pending. The BufferReadAsyncEventArgs.Completed event on the context parameter will be raised upon completion of the operation. 
            Returns false if the I/O operation completed synchronously. The BufferReadAsyncEventArgs.Completed event on the context parameter will not be raised and the context object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation. 
            </returns>
            <exception cref="T:System.InvalidOperationException">Is raised when there is data in read buffer and this method is called.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.BeginReadLine(System.Byte[],System.Int32,System.Int32,MControl.Messaging.Net.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous line reading from the source stream.
            </summary>
            <param name="buffer">Buffer where to store readed line data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxCount">Maximum number of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.EndReadLine(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous line reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <returns>Returns number of bytes stored to <b>buffer</b>. Returns -1 if no more data, end of stream reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadLine</b> has already been called for specified <b>asyncResult</b>.</exception>
            <exception cref="T:MControl.Messaging.Net.IO.LineExceededException">Is raised when <b>maxCount</b> value is exceeded.</exception>        
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminated(System.IO.Stream,System.Int32)">
            <summary>
            Reads all data from the source <b>stream</b> and writes it to stream. Period handling and period terminator is added as required.
            </summary>
            <param name="stream">Source stream which data to write to stream.</param>
            <param name="chunkSize">internal chunk buffer Size</param>
            <returns>Returns number of bytes written to source stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:MControl.Messaging.Net.IO.LineExceededException">Is raised when <b>stream</b> has too big line.</exception>        
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.BeginWritePeriodTerminated(System.IO.Stream,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Reads all data from the source <b>stream</b> and writes it to stream. Period handling and period terminator is added as required.
            </summary>
            <param name="stream">Source stream which data to write to stream.</param>
            <param name="chunkSize">internal chunk buffer Size</param>
            <param name="callBack"></param>
            <param name="state"></param>
            <returns>Returns number of bytes written to source stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:MControl.Messaging.Net.IO.LineExceededException">Is raised when <b>stream</b> has too big line.</exception>        
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.EndWritePeriodTerminated(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous WritePeriodTerminatedAsync request.
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when argument <b>asyncResult</b> was not returned by a call to the <b>BeginConnect</b> method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndConnect</b> was previously called for the asynchronous connection.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.StreamCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies all data from source stream to destination stream.
            Copy starts from source stream current position and will be copied to the end of source stream.
            </summary>
            <param name="source">Source stream.</param>
            <param name="destination">Destination stream.</param>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.SourceStream">
            <summary>
            Gets this stream underlying stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.IsOwner">
            <summary>
            Gets if ExtendedStream is owner of source stream. This property affects like closing this stream will close SourceStream if IsOwner true.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.LastActivity">
            <summary>
            Gets the last time when data was read or written.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.BytesReaded">
            <summary>
            Gets how many bytes are readed through this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.BytesWritten">
            <summary>
            Gets how many bytes are written through this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.BytesInReadBuffer">
            <summary>
            Gets number of bytes in read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.Encoding">
            <summary>
            Gets or sets string related methods default encoding.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation">
            <summary>
            This class implements read line operation.
            </summary>
            <remarks>This class can be reused on multiple calls of <see cref="M:MControl.Messaging.Net.IO.ExtendedStream.ReadLine(MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation,System.Boolean)">ExtendedStream.ReadLine</see> method.</remarks>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation.#ctor(System.Byte[],MControl.Messaging.Net.IO.SizeExceededAction)">
            <summary>
            Default constructor.
            </summary>
            <param name="buffer">Line buffer.</param>
            <param name="exceededAction">Specifies how line-reader behaves when maximum line size exceeded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation.Start(System.Boolean,MControl.Messaging.Net.IO.ExtendedStream)">
            <summary>
            Starts reading line.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="stream">Owner ExtendedStream.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation.DoLineReading(System.Boolean)">
            <summary>
            Starts/continues line reading.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if line reading completed.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation.SetInfo(System.Int32,System.Exception)">
            <summary>
            Sets specified field values.
            </summary>
            <param name="bytesInBuffer">Number of bytes in buffer.</param>
            <param name="exception">Exception.</param>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation.SizeExceededAction">
            <summary>
            Gets line size exceeded action.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation.Buffer">
            <summary>
            Gets line buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation.BytesInBuffer">
            <summary>
            Gets number of bytes stored in the buffer. Ending line-feed characters included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation.LineBytesInBuffer">
            <summary>
            Gets number of line data bytes stored in the buffer. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation.LineAscii">
            <summary>
            Gets line as ASCII string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation.LineUtf8">
            <summary>
            Gets line as UTF-8 string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation.LineUtf32">
            <summary>
            Gets line as UTF-32 string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation">
            <summary>
            This class implements read period-terminated operation.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation.#ctor(System.IO.Stream,System.Int64,MControl.Messaging.Net.IO.SizeExceededAction)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream wehre to sore readed data.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies how period-terminated reader behaves when <b>maxCount</b> exceeded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation.Start(MControl.Messaging.Net.IO.ExtendedStream)">
            <summary>
            Starts period-terminated data reading.
            </summary>
            <param name="stream">Owner ExtendedStream.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation.m_ReadLineOP_Completed(System.Object,MControl.Messaging.Net.EventArgs{MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation})">
            <summary>
            Is called when asynchronous line reading has completed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation.DoRead">
            <summary>
            Continues period-terminated reading.
            </summary>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation.ProcessReadedLine">
            <summary>
            Processes readed line.
            </summary>
            <returns>Returns true if read period-terminated operation has completed.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation.Stream">
            <summary>
            Gets stream where period terminated data has stored.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored to <see cref="P:MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation.Stream">Stream</see> stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation.LinesStored">
            <summary>
            Gets number of lines stored to <see cref="P:MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation.Stream">Stream</see> stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.IO.ExtendedStream.ReadPeriodTerminatedAsyncOperation.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.IO.ExtendedStream.BufferReadAsyncOperation">
            <summary>
            This class implements asynchronous read buffering.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.BufferReadAsyncOperation.#ctor(MControl.Messaging.Net.IO.ExtendedStream)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.BufferReadAsyncOperation.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.BufferReadAsyncOperation.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.BufferReadAsyncOperation.Start(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Starts asynchronous operation.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="buffer">Buffer where to store readed data.</param>
            <param name="count">Maximum number of bytes to read.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <returns>Returns true if operation completed synchronously, false if asynchronous operation pending.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.BufferReadAsyncOperation.ReleaseEvents">
            <summary>
            Releases all events attached to this class.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.BufferReadAsyncOperation.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.BufferReadAsyncOperation.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.BufferReadAsyncOperation.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.BufferReadAsyncOperation.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.BufferReadAsyncOperation.Buffer">
            <summary>
            Gets read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.BufferReadAsyncOperation.BytesInBuffer">
            <summary>
            Gets number of bytes stored in read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.BufferReadAsyncOperation.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.IO.ExtendedStream.BufferReadAsyncOperation.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.IO.ExtendedStream.WriteStreamAsyncOperation">
            <summary>
            This class represents <see cref="M:MControl.Messaging.Net.IO.ExtendedStream.WriteStreamAsync(MControl.Messaging.Net.IO.ExtendedStream.WriteStreamAsyncOperation)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WriteStreamAsyncOperation.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <param name="count">Number of bytes to write. Value -1 means all stream data will be written.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WriteStreamAsyncOperation.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WriteStreamAsyncOperation.Start(MControl.Messaging.Net.IO.ExtendedStream)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner ExtendedStream.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WriteStreamAsyncOperation.SetState(MControl.Messaging.Net.AsyncOperationState)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WriteStreamAsyncOperation.BeginReadData">
            <summary>
            Starts reading data.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WriteStreamAsyncOperation.ProcessReadDataResult(System.IAsyncResult)">
            <summary>
            Processes read data result.
            </summary>
            <param name="readResult">Asynchronous result.</param>
            <returns>Retruns true if this method completed asynchronously, otherwise false.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WriteStreamAsyncOperation.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.WriteStreamAsyncOperation.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.WriteStreamAsyncOperation.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.WriteStreamAsyncOperation.BytesWritten">
            <summary>
            Gets number of bytes written.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.IO.ExtendedStream.WriteStreamAsyncOperation.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminatedAsyncOperation">
            <summary>
            This class represents <see cref="M:MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminatedAsync(MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminatedAsyncOperation)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminatedAsyncOperation.#ctor(System.IO.Stream)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream. Reading starts from stream current location.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminatedAsyncOperation.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminatedAsyncOperation.Start(MControl.Messaging.Net.IO.ExtendedStream)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner ExtendedStream.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminatedAsyncOperation.SetState(MControl.Messaging.Net.AsyncOperationState)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminatedAsyncOperation.ReadLineCompleted(MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperation)">
            <summary>
            Is called when source stream read line reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminatedAsyncOperation.SendLineCompleted(System.IAsyncResult)">
            <summary>
            Is called when line sending has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminatedAsyncOperation.SendTerminatorCompleted(System.IAsyncResult)">
            <summary>
            Is called when ".CRLF" or "CRLF.CRLF" terminator sending has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminatedAsyncOperation.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminatedAsyncOperation.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminatedAsyncOperation.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminatedAsyncOperation.BytesWritten">
            <summary>
            Gets number of bytes written.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOperationState.Completed</b> state.</exception>
        </member>
        <member name="E:MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminatedAsyncOperation.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperationB">
            <summary>
            This class implements asynchronous line reading.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperationB.#ctor(MControl.Messaging.Net.IO.ExtendedStream,System.Byte[],System.Int32,System.Int32,MControl.Messaging.Net.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxCount">Maximum number of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b>,<b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperationB.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperationB.DoLineReading">
            <summary>
            Does line reading.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperationB.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperationB.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperationB.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperationB.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperationB.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperationB.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperationB.Buffer">
            <summary>
            Gets store buffer.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperationB.BytesReaded">
            <summary>
            Gets number of bytes readed from source stream.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadLineAsyncOperationB.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>Buffer</b>.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.IO.ExtendedStream.ReadToTerminatorAsyncOperation">
            <summary>
            This class implements asynchronous line-based terminated data reader, where terminator is on line itself.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadToTerminatorAsyncOperation.#ctor(MControl.Messaging.Net.IO.ExtendedStream,System.String,System.IO.Stream,System.Int64,MControl.Messaging.Net.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="terminator">Data terminator.</param>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b>,<b>terminator</b> or <b>storeStream</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadToTerminatorAsyncOperation.ReadLine_Completed(System.IAsyncResult)">
            <summary>
            This method is called when asyynchronous line reading has completed.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadToTerminatorAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadToTerminatorAsyncOperation.Terminator">
            <summary>
            Gets terminator.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadToTerminatorAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadToTerminatorAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadToTerminatorAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadToTerminatorAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadToTerminatorAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadToTerminatorAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>storeStream</b>.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadToTerminatorAsyncOperation.Exception">
            <summary>
            Gets exception happened on asynchronous operation. Returns null if operation was successfull.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.IO.ExtendedStream.ReadToStreamAsyncOperation">
            <summary>
            This class implements asynchronous read to stream data reader.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadToStreamAsyncOperation.#ctor(MControl.Messaging.Net.IO.ExtendedStream,System.IO.Stream,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="count">Number of bytes to read from source stream.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> or <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadToStreamAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadToStreamAsyncOperation.DoDataReading">
            <summary>
            Does data reading.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadToStreamAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadToStreamAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadToStreamAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadToStreamAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadToStreamAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadToStreamAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadToStreamAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>storeStream</b>.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadToStreamAsyncOperation.Exception">
            <summary>
            Gets exception happened on asynchronous operation. Returns null if operation was successfull.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.IO.ExtendedStream.ReadAsyncOperation">
            <summary>
            This class implements asynchronous data reader.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadAsyncOperation.#ctor(MControl.Messaging.Net.IO.ExtendedStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxSize">Maximum number of bytes to read.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadAsyncOperation.DoRead">
            <summary>
            Does asynchronous data reading.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ExtendedStream.ReadAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadAsyncOperation.Buffer">
            <summary>
            Gets store buffer.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ExtendedStream.ReadAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>Buffer</b>.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.IO.ExtendedStream.WritePeriodTerminatedOp">
            <summary>
            Reads all data from the source <b>stream</b> and writes it to stream. Period handling and period terminator is added as required.
            </summary>
            <param name="stream"></param>
            <param name="chunkSize"></param>
            <returns></returns>
        </member>
        <member name="T:MControl.Messaging.Net.NetUtils">
            <summary>
            Common utility methods.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.GetLocalHostName(System.String)">
            <summary>
            Gets local host name or argument <b>hostName</b> value if it's specified.
            </summary>
            <param name="hostName">Host name or null.</param>
            <returns>Returns local host name or argument <b>hostName</b> value if it's specified.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.CompareArray(System.Array,System.Array)">
            <summary>
            Compares if specified array itmes equals.
            </summary>
            <param name="array1">Array 1.</param>
            <param name="array2">Array 2</param>
            <returns>Returns true if both arrays are equal.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.CompareArray(System.Array,System.Array,System.Int32)">
            <summary>
            Compares if specified array itmes equals.
            </summary>
            <param name="array1">Array 1.</param>
            <param name="array2">Array 2</param>
            <param name="array2Count">Number of bytes in array 2 used for compare.</param>
            <returns>Returns true if both arrays are equal.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.ReverseArray(System.Array)">
            <summary>
            Reverses the specified array elements.
            </summary>
            <param name="array">Array elements to reverse.</param>
            <returns>Returns array with reversed items.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>array</b> is null.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.ArrayToString(System.String[],System.String)">
            <summary>
            Convert array elements to string.
            </summary>
            <param name="values">String values.</param>
            <param name="delimiter">Values delimiter.</param>
            <returns>Returns array elements as string.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.StreamCopy(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies <b>source</b> stream data to <b>target</b> stream.
            </summary>
            <param name="source">Source stream. Reading starts from stream current position.</param>
            <param name="target">Target stream. Writing starts from stream current position.</param>
            <param name="blockSize">Specifies transfer block size in bytes.</param>
            <returns>Returns number of bytes copied.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.CompareIP(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Compares 2 IP addresses. Returns 0 if IPs are equal, 
            returns positive value if destination IP is bigger than source IP,
            returns negative value if destination IP is smaller than source IP.
            </summary>
            <param name="source">Source IP address.</param>
            <param name="destination">Destination IP address.</param>
            <returns>Returns 0 if IPs are equal, 
            returns positive value if destination IP is bigger than source IP,
            returns negative value if destination IP is smaller than source IP.
            </returns>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.IsIPAddress(System.String)">
            <summary>
            Gets if the specified string value is IP address.
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if specified value is IP address.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.IsMulticastAddress(System.Net.IPAddress)">
            <summary>
            Gets if the specified IP address is multicast address.
            </summary>
            <param name="ip">IP address.</param>
            <returns>Returns true if <b>ip</b> is muticast address, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> s null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.IsPrivateIP(System.String)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
            <returns>Returns true if IP is private IP.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.IsPrivateIP(System.Net.IPAddress)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <returns>Returns true if IP is private IP.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.ParseIPEndPoint(System.String)">
            <summary>
            Parses IPEndPoint from the specified string value.
            </summary>
            <param name="value">IPEndPoint string value.</param>
            <returns>Returns parsed IPEndPoint.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.IsInteger(System.String)">
            <summary>
            Checks if specified string is integer(int/long).
            </summary>
            <param name="value"></param>
            <returns>Returns true if specified string is integer.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.IsAscii(System.String)">
            <summary>
            Gets if the specified string is ASCII string.
            </summary>
            <param name="value">String value.</param>
            <returns>Returns true if specified string is ASCII string, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.IsSocketAsyncSupported">
            <summary>
            Gets if socket async methods supported by OS.
            </summary>
            <returns>returns ture if supported, otherwise false.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.CreateSocket(System.Net.IPEndPoint,System.Net.Sockets.ProtocolType)">
            <summary>
            Creates new socket for the specified end point.
            </summary>
            <param name="localEP">Local end point.</param>
            <param name="protocolType">Protocol type.</param>
            <returns>Retruns newly created socket.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>localEP</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.ToHex(System.Byte[])">
            <summary>
            Converts specified data to HEX string.
            </summary>
            <param name="data">Data to convert.</param>
            <returns>Returns hex string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.ToHex(System.String)">
            <summary>
            Converts specified string to HEX string.
            </summary>
            <param name="text">String to convert.</param>
            <returns>Returns hex string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.FromHex(System.Byte[])">
            <summary>
            Converts hex byte data to normal byte data. Hex data must be in two bytes pairs, for example: 0F,FF,A3,... .
            </summary>
            <param name="hexData">Hex data.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hexData</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.Base64Encode(System.Byte[])">
            <summary>
            Encodes specified data with base64 encoding.
            </summary>
            <param name="data">Data to encode.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.Base64EncodeEx(System.Byte[],System.Char[],System.Boolean)">
            <summary>
            Encodes specified data with bas64 encoding.
            </summary>
            <param name="data">Data to to encode.</param>
            <param name="base64Chars">Custom base64 chars (64 chars) or null if default chars used.</param>
            <param name="padd">Padd missing block chars. Normal base64 must be 4 bytes blocks, if not 4 bytes in block, 
            missing bytes must be padded with '='. Modified base64 just skips missing bytes.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.Base64DecodeEx(System.Byte[],System.Char[])">
            <summary>
            Decodes base64 data. Defined in RFC 2045 6.8.  Base64 Content-Transfer-Encoding.
            </summary>
            <param name="base64Data">Base64 decoded data.</param>
            <param name="base64Chars">Custom base64 chars (64 chars) or null if default chars used.</param>
            <returns></returns>
        </member>
        <member name="M:MControl.Messaging.Net.NetUtils.ComputeMd5(System.String,System.Boolean)">
            <summary>
            Computes md5 hash.
            </summary>
            <param name="text">Text to hash.</param>
            <param name="hex">Specifies if md5 value is returned as hex string.</param>
            <returns>Returns md5 value or md5 hex value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="T:MControl.Messaging.Net.HostPoint">
            <summary>
            Represents a network endpoint as an host(name or IP address) and a port number.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.HostPoint.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">The port number associated with the host. Value -1 means port not specified.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>host</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.HostPoint.#ctor(System.Net.IPEndPoint)">
            <summary>
            Default constructor.
            </summary>
            <param name="endPoint">Host IP end point.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>endPoint</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.HostPoint.Parse(System.String)">
            <summary>
            Parses HostPoint from the specified string.
            </summary>
            <param name="value">HostPoint value.</param>
            <returns>Returns parsed HostPoint value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.HostPoint.Parse(System.String,System.Int32)">
            <summary>
            Parses HostPoint from the specified string.
            </summary>
            <param name="value">HostPoint value.</param>
            <param name="defaultPort">If port isn't specified in value, specified port will be used.</param>
            <returns>Returns parsed HostPoint value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.HostPoint.ToString">
            <summary>
            Returns HostPoint as string.
            </summary>
            <returns>Returns HostPoint as string.</returns>
        </member>
        <member name="P:MControl.Messaging.Net.HostPoint.IsIPAddress">
            <summary>
            Gets if <b>Host</b> is IP address.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.HostPoint.Host">
            <summary>
            Gets host name or IP address.
            </summary>
        </member>
        <member name="P:MControl.Messaging.Net.HostPoint.Port">
            <summary>
            Gets the port number of the endpoint. Value -1 means port not specified.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.IO.SizeExceededException">
            <summary>
            The exception that is thrown when maximum allowed size has exceeded.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.SizeExceededException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.IO.IncompletedException">
            <summary>
            The exception that is thrown when incomplete data received.
            For example for ReadPeriodTerminated() method reaches end of stream before getting period terminator.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.IncompletedException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.IncompletedException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="T:MControl.Messaging.Net.IO.LineExceededException">
            <summary>
            The exception that is thrown when maximum allowed line size has exceeded.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.LineExceededException.#ctor">
            <summary>
            Default coonstructor.
            </summary>
        </member>
        <member name="T:MControl.Messaging.Net.IO.ControllerStream">
            <summary>
            This class implements read,write or read-write access stream.
            </summary>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ControllerStream.#ctor(System.IO.Stream,System.IO.FileAccess)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="access">This stream access mode.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ControllerStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ControllerStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ControllerStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ControllerStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:MControl.Messaging.Net.IO.ControllerStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ControllerStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ControllerStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ControllerStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ControllerStream.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:MControl.Messaging.Net.IO.ControllerStream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
    </members>
</doc>
