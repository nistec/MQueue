<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nistec.Data</name>
    </assembly>
    <members>
        <member name="T:Nistec.Data.Ado.ConnectionProvider">
            <summary>
            DataSource 
            </summary>
        </member>
        <member name="P:Nistec.Data.Ado.ConnectionProvider.Empty">
            <summary>
            DataSource empty
            </summary>
        </member>
        <member name="P:Nistec.Data.Ado.ConnectionProvider.IsEmpty">
            <summary>
            IsEmpty
            </summary>
        </member>
        <member name="P:Nistec.Data.Ado.ConnectionProvider.Item(System.String)">
            <summary>
            Get or Set Item
            </summary>
            <param name="properyName"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Ado.ConnectionProvider.GetAsynchronousProcessing">
            <summary>
            GetAsynchronousProcessing
            </summary>
        </member>
        <member name="M:Nistec.Data.Ado.ConnectionProvider.CreateConnectionString">
            <summary>
            CreateConnectionString
            </summary>
        </member>
        <member name="M:Nistec.Data.Ado.ConnectionProvider.GetValidConnectionString">
            <summary>
            Get _ConnectionString
            </summary>
        </member>
        <member name="T:Nistec.Data.Advanced.LookupView">
            <summary>
            LookupView
            </summary>
        </member>
        <member name="M:Nistec.Data.Advanced.LookupView.#ctor(System.Data.DataTable,System.String,System.String)">
            <summary>
            LookupView ctor
            </summary>
            <param name="dt"></param>
            <param name="keyMember"></param>
            <param name="valueMember"></param>
        </member>
        <member name="M:Nistec.Data.Advanced.LookupView.#ctor(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            LookupView ctor
            </summary>
            <param name="dt"></param>
            <param name="keyMember"></param>
            <param name="valueMember"></param>
            <param name="valueSorted"></param>
        </member>
        <member name="M:Nistec.Data.Advanced.LookupView.#ctor(System.String[])">
            <summary>
            LookupView ctor
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Nistec.Data.Advanced.LookupView.#ctor(System.Object[0:,0:])">
            <summary>
            LookupView ctor
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Nistec.Data.Advanced.LookupView.#ctor(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            LookupView ctor
            </summary>
            <param name="list"></param>
        </member>
        <member name="T:Nistec.Data.Advanced.LookupView.KeysView">
            <summary>
            KeysView
            </summary>
        </member>
        <member name="M:Nistec.Data.Advanced.LookupView.KeysView.#ctor(System.Data.DataTable,Nistec.Data.Advanced.LookupView)">
            <summary>
            KeysView
            </summary>
            <param name="dt"></param>
            <param name="lv"></param>
        </member>
        <member name="M:Nistec.Data.Advanced.LookupView.KeysView.Find(System.Object)">
            <summary>
            Find
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Advanced.LookupView.KeysView.Item(System.Object)">
            <summary>
            Get Item
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Advanced.LookupView.KeysView.GetValue(System.Object)">
            <summary>
            GetValue
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Advanced.LookupView.KeysView.GetDataRow(System.Object)">
            <summary>
            GetDataRow
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Advanced.LookupView.KeysView.Sorted">
            <summary>
            Get or Set if is Sorted
            </summary>
        </member>
        <member name="T:Nistec.Data.Advanced.LookupView.ValuesView">
            <summary>
            ValuesView
            </summary>
        </member>
        <member name="M:Nistec.Data.Advanced.LookupView.ValuesView.#ctor(System.Data.DataTable,Nistec.Data.Advanced.LookupView,System.Boolean)">
            <summary>
            ValuesView
            </summary>
            <param name="dt"></param>
            <param name="lv"></param>
            <param name="sorted"></param>
        </member>
        <member name="M:Nistec.Data.Advanced.LookupView.ValuesView.Find(System.Object)">
            <summary>
            Find
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Advanced.LookupView.ValuesView.Item(System.Object)">
            <summary>
            Get Item
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Advanced.LookupView.ValuesView.GetKey(System.Object)">
            <summary>
            GetKey
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Advanced.LookupView.ValuesView.GetDataRow(System.Object)">
            <summary>
            GetDataRow
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Advanced.LookupView.ValuesView.Sorted">
            <summary>
            Get or Set if is Sorted
            </summary>
        </member>
        <member name="P:Nistec.Data.Advanced.LookupView.Values">
            <summary>
            Get Values
            </summary>
        </member>
        <member name="P:Nistec.Data.Advanced.LookupView.Keys">
            <summary>
            Get Keys
            </summary>
        </member>
        <member name="P:Nistec.Data.Advanced.LookupView.View">
            <summary>
            Get DataView by key
            </summary>
        </member>
        <member name="P:Nistec.Data.Advanced.LookupView.Count">
            <summary>
            Get Count
            </summary>
        </member>
        <member name="P:Nistec.Data.Advanced.LookupView.Initilaized">
            <summary>
            Get Initilaized
            </summary>
        </member>
        <member name="P:Nistec.Data.Advanced.LookupView.ValueMember">
            <summary>
            Get ValueMember
            </summary>
        </member>
        <member name="P:Nistec.Data.Advanced.LookupView.KeyMember">
            <summary>
            Get KeyMember
            </summary>
        </member>
        <member name="P:Nistec.Data.Advanced.LookupView.ReadOnly">
            <summary>
            Get or Set ReadOnly
            </summary>
        </member>
        <member name="M:Nistec.Data.Advanced.LookupView.LookupSearch(System.String)">
            <summary>
            LookupSearch
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Advanced.SortSyncronized">
            <summary>
            SortSyncronized
            </summary>
        </member>
        <member name="T:Nistec.Data.Advanced.AsyncSort">
            <summary>
            AsyncSort
            </summary>
        </member>
        <member name="M:Nistec.Data.Advanced.AsyncSort.Start(System.Data.DataView,System.String)">
            <summary>
            
            </summary>
            <param name="dv"></param>
            <param name="colView"></param>
        </member>
        <member name="T:Nistec.Data.Advanced.AutoCache`1">
            <summary>
            Used to create a cache object of type Value with a string key.
            </summary>
            <typeparam name="Value">Type of object to hold in the cache.</typeparam>
        </member>
        <member name="T:Nistec.Data.Advanced.AutoCache`2">
            <summary>
            A cache object used to store key value pairs until a timeout has expired.
            </summary>
            <typeparam name="Key">Type of the key for the class.</typeparam>
            <typeparam name="Value">Type of the value for the class.</typeparam>
        </member>
        <member name="M:Nistec.Data.Advanced.AutoCache`2.#ctor(System.Int32)">
            <summary>
            Constructs the cache clearing key value pairs after the timeout period 
            specified in minutes.
            </summary>
            <param name="timeout">Number of minutes to hold items in the cache for.</param>
        </member>
        <member name="M:Nistec.Data.Advanced.AutoCache`2.Remove(`0)">
            <summary>
            Removes the specified key from the cache.
            </summary>
            <param name="key">Key to be removed.</param>
        </member>
        <member name="P:Nistec.Data.Advanced.AutoCache`2.Item(`0)">
            <summary>
            Returns the value associated with the key.
            </summary>
            <param name="key">Key of the value being requested.</param>
            <returns>Value or null if not found.</returns>
        </member>
        <member name="M:Nistec.Data.Advanced.AutoCache`2.GetTryParse(`0,`1@)">
            <summary>
            If the key exists in the cache then provide the value in the
            value parameter.
            </summary>
            <param name="key">Key of the value to be retrieved.</param>
            <param name="value">Set to the associated value if found.</param>
            <returns>True if the key was found in the list, otherwise false.</returns>
        </member>
        <member name="M:Nistec.Data.Advanced.AutoCache`2.Contains(`0)">
            <summary>
            Determines if the key is available in the cache.
            </summary>
            <param name="key">Key to be checked.</param>
            <returns>True if the key is found, otherwise false.</returns>
        </member>
        <member name="M:Nistec.Data.Advanced.AutoCache`2.CheckIfServiceRequired">
            <summary>
            If the time has passed the point another check of the cache is needed 
            start a thread to check the cache.
            </summary>
        </member>
        <member name="M:Nistec.Data.Advanced.AutoCache`2.ServiceCache(System.Object)">
            <summary>
            The main method of the thread to service the cache. Checks for old items
            and removes them.
            </summary>
            <param name="purgeDate">The date before which items should be removed.</param>
        </member>
        <member name="T:Nistec.Data.Advanced.AsyncReader">
             <example>
                public void RunCmd(){
                mControl.Data.AsyncCommand acmd1 = new mControl.Data.AsyncCommand(connectionString, mControl.Data.DBProvider.SqlServer);
                acmd1.AsyncProgressLevel = mControl.Data.AsyncProgressLevel.All;
                acmd1.ExecutingResultEvent += new mControl.Data.ExecutingResultEventHandler(acmd1_ExecutingResultEvent);
                acmd1.ExecutingTraceEvent +=new mControl.Data.ExecutingTraceEventHandler(acmd1_ExecutingTraceEvent);
                acmd1.RunCmdScript("select * from Accounts", "Accounts");
                }
                void acmd1_ExecutingTraceEvent(object sender, mControl.Data.ExecutingTraceEventArgs e)
                {
                    string s = e.Message;
                }
            
                void acmd1_ExecutingResultEvent(object sender, mControl.Data.ExecutingResultEventArgs e)
                {
                    DataTable d = e.Table;
               }          
             </example>
            <summary>
            AsyncCommand
            </summary>
        </member>
        <member name="M:Nistec.Data.Advanced.AsyncReader.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Nistec.Data.Advanced.DataSetUtil.DataSetToByteCount(System.Data.DataSet,System.Boolean)">
            <summary>
            Get the DataSet sise in bytes 
            </summary>
            <param name="ds"></param>
            <param name="readSchema"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Advanced.DataSetUtil.DataSetToByteCount(System.Data.DataTable,System.Boolean)">
            <summary>
            Get the DataTable sise in bytes 
            </summary>
            <param name="dt"></param>
            <param name="readSchema"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Advanced.GroupByHelper.DoSelectGroupByInto(Nistec.Data.Aggregate,System.Data.DataTable,System.String,System.String[],System.String[],System.String[],System.String)">
            <summary>
            SelectGroupByInto
            </summary>
            <param name="aggregateMode"></param>
            <param name="dt"></param>
            <param name="tableName"></param>
            <param name="groupByFields"></param>
            <param name="sumFields"></param>
            <param name="aliasFields"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Advanced.GroupByHelper.DoSelectGroupByInto(Nistec.Data.Aggregate,System.Data.DataTable,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            SelectGroupByInto
            </summary>
            <param name="mode"></param>
            <param name="dt"></param>
            <param name="tableName"></param>
            <param name="groupByField"></param>
            <param name="sumField"></param>
            <param name="aliasField"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Advanced.GroupByHelper.DoCreateGroupByTable(System.String,System.Data.DataTable,System.String)">
            <summary>
            CreateGroupByTable
            </summary>
            <param name="TableName"></param>
            <param name="TableSource"></param>
            <param name="FieldList"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Advanced.GroupByHelper.DoInsertGroupByInto(System.Data.DataTable,System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            InsertGroupByInto
            </summary>
            <param name="DestTable"></param>
            <param name="SourceTable"></param>
            <param name="FieldList"></param>
            <param name="RowFilter"></param>
            <param name="GroupBy"></param>
        </member>
        <member name="M:Nistec.Data.Advanced.GroupByHelper.DoSelectGroupByInto(System.String,System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            SelectGroupByInto
            </summary>
            <param name="TableName"></param>
            <param name="SourceTable"></param>
            <param name="FieldList"></param>
            <param name="RowFilter"></param>
            <param name="GroupBy"></param>
            <returns></returns>
        </member>
        <member name="F:Nistec.Data.Advanced.GroupByHelper.ds">
            <summary>
            DataSet
            </summary>
        </member>
        <member name="M:Nistec.Data.Advanced.GroupByHelper.#ctor(System.Data.DataSet@)">
            <summary>
            GroupByHelper ctor
            </summary>
            <param name="DataSet"></param>
        </member>
        <member name="M:Nistec.Data.Advanced.GroupByHelper.#ctor">
            <summary>
            GroupByHelper ctor
            </summary>
        </member>
        <member name="M:Nistec.Data.Advanced.GroupByHelper.CreateJoinTable(System.String,System.Data.DataTable,System.String)">
            <summary>
            CreateJoinTable
            </summary>
            <param name="TableName"></param>
            <param name="SourceTable"></param>
            <param name="FieldList"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Advanced.GroupByHelper.InsertJoinInto(System.Data.DataTable,System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            InsertJoinInto
            </summary>
            <param name="DestTable"></param>
            <param name="SourceTable"></param>
            <param name="FieldList"></param>
            <param name="RowFilter"></param>
            <param name="Sort"></param>
        </member>
        <member name="M:Nistec.Data.Advanced.GroupByHelper.SelectJoinInto(System.String,System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            SelectJoinInto
            </summary>
            <param name="TableName"></param>
            <param name="SourceTable"></param>
            <param name="FieldList"></param>
            <param name="RowFilter"></param>
            <param name="Sort"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Advanced.GroupByHelper.CreateGroupByTable(System.String,System.Data.DataTable,System.String)">
             <summary>
             CreateGroupByTable
             The following is the calling convention for the CreateGroupByTable method: 
             dt = dsHelper.CreateGroupByTable("OrderSummary", ds.Tables["Orders"], "EmployeeID,sum(Amount) Total,min(Amount) Min,max(Amount) Max");
            This call sample creates a new DataTable with a TableName of OrderSummary and four fields (EmployeeID, Total, Min, and Max). The four fields have the same data type as the EmployeeID and the Amount fields in the Orders table.
             </summary>
             <param name="TableName"></param>
             <param name="SourceTable"></param>
             <param name="FieldList"></param>
             <returns></returns>
        </member>
        <member name="M:Nistec.Data.Advanced.GroupByHelper.InsertGroupByInto(System.Data.DataTable,System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            InsertGroupByInto
            The results are sorted on the fields that are listed in the GroupBy argument. The GroupBy argument must comply with a valid Sort field list (minus ASC and DESC modifiers). If the GroupBy argument is blank, the target DataTable contains only a single record that aggregates all the input. When you call the ParseGroupByFieldList and the ParseFieldList properties, you can parse lists that were previously parsed, if these lists are available. If the field list is blank, an exception is thrown. 
            </summary>
            <param name="DestTable"></param>
            <param name="SourceTable"></param>
            <param name="FieldList"></param>
            <param name="RowFilter"></param>
            <param name="GroupBy"></param>
        </member>
        <member name="M:Nistec.Data.Advanced.GroupByHelper.SelectGroupByInto(System.String,System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            SelectGroupByInto 
            This method is a combination of the CreateGroupByTable and the InsertGroupByInto methods. The SelectGroupByInto method creates a new DataTable based on existing DataTable objects, and copies the records that are sorted and filtered to the new DataTable. 
            </summary>
            <param name="TableName"></param>
            <param name="SourceTable"></param>
            <param name="FieldList"></param>
            <param name="RowFilter"></param>
            <param name="GroupBy"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Advanced.Relation">
            <summary>
            Relation
            </summary>
        </member>
        <member name="M:Nistec.Data.Advanced.Relation.#ctor(System.String,System.String)">
            <summary>
            Initilaized new Relation instance
            </summary>
            <param name="parentColumnName"></param>
            <param name="childColumnName"></param>
        </member>
        <member name="M:Nistec.Data.Advanced.Relation.#ctor(System.String[],System.String[])">
            <summary>
            Initilaized new Relation instance
            </summary>
            <param name="parentColumnsName"></param>
            <param name="childColumnsName"></param>
        </member>
        <member name="M:Nistec.Data.Advanced.Relation.#ctor(System.String[],System.String[],System.String)">
            <summary>
            Initilaized new Relation instance
            </summary>
            <param name="parentColumnsName"></param>
            <param name="childColumnsName"></param>
            <param name="foreignKey"></param>
        </member>
        <member name="M:Nistec.Data.Advanced.Relation.#ctor(System.String[],System.String[],System.String,System.Data.ITableMapping)">
            <summary>
            Initilaized new Relation instance
            </summary>
            <param name="parentColumnsName"></param>
            <param name="childColumnsName"></param>
            <param name="foreignKey"></param>
            <param name="tbleMapping"></param>
        </member>
        <member name="M:Nistec.Data.Advanced.Relation.DataRelationConvert(System.Data.DataSet)">
            <summary>
            Convert Data Relation
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Advanced.Relation.ParentColumnsName">
            <summary>
            Get Parent Columns Name
            </summary>
        </member>
        <member name="P:Nistec.Data.Advanced.Relation.ChildColumnsName">
            <summary>
            Get Child Columns Name
            </summary>
        </member>
        <member name="P:Nistec.Data.Advanced.Relation.RelationName">
            <summary>
            Get or Set Relation Name
            </summary>
        </member>
        <member name="P:Nistec.Data.Advanced.Relation.ForiegnKey">
            <summary>
            Get Relation Foriegn Key
            </summary>
        </member>
        <member name="P:Nistec.Data.Advanced.Relation.CommandSelect">
            <summary>
            Get or Set Command Select
            </summary>
        </member>
        <member name="P:Nistec.Data.Advanced.Relation.TableMapping">
            <summary>
            Get Relation Table Mapping
            </summary>
        </member>
        <member name="T:Nistec.Data.Advanced.RelationCollection">
            <summary>
            Represent Relation Collection
            </summary>
        </member>
        <member name="M:Nistec.Data.Advanced.RelationCollection.Add(Nistec.Data.Advanced.Relation)">
            <summary>
            Add item to Relation Collection
            </summary>
            <param name="rl"></param>
        </member>
        <member name="M:Nistec.Data.Advanced.RelationCollection.Remove(Nistec.Data.Advanced.Relation)">
            <summary>
            Remove Relation from collection
            </summary>
            <param name="rl"></param>
        </member>
        <member name="P:Nistec.Data.Advanced.RelationCollection.Item(System.Int32)">
            <summary>
            Get item Relation
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Advanced.RelationCollection.Item(System.String)">
            <summary>
            Get item Relation
            </summary>
            <param name="relationName"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.CommandContext.ConnectionKey">
            <summary>
            Get or Set connection key.
            </summary>
        </member>
        <member name="P:Nistec.Data.CommandContext.CommandText">
            <summary>
            Get or Set command text.
            </summary>
        </member>
        <member name="P:Nistec.Data.CommandContext.CommandType">
            <summary>
            Get or Set command type.
            </summary>
        </member>
        <member name="P:Nistec.Data.CommandContext.CommandTimeout">
            <summary>
            Get or Set command timeout.
            </summary>
        </member>
        <member name="P:Nistec.Data.CommandContext.TypeName">
            <summary>
            Get or Set type name.
            </summary>
        </member>
        <member name="P:Nistec.Data.CommandContext.Parameters">
            <summary>
            Get or Set command parameters.
            </summary>
        </member>
        <member name="M:Nistec.Data.CommandContext.EntityWrite(System.IO.Stream,Nistec.Serialization.IBinaryStreamer)">
            <summary>
            Write entity properties to stream using <see cref="T:Nistec.Serialization.IBinaryStreamer"/> streamer.
            </summary>
            <param name="stream"></param>
            <param name="streamer"></param>
        </member>
        <member name="M:Nistec.Data.CommandContext.EntityRead(System.IO.Stream,Nistec.Serialization.IBinaryStreamer)">
            <summary>
            Read entity properties from stream using <see cref="T:Nistec.Serialization.IBinaryStreamer"/> streamer.
            </summary>
            <param name="stream"></param>
            <param name="streamer"></param>
        </member>
        <member name="T:Nistec.Data.DataExtension">
            <summary>
            Data Extension
            </summary>
        </member>
        <member name="M:Nistec.Data.DataFilter.CreateParameters(System.Object[])">
            <summary>
            Create KeyValueParameters
            </summary>
            <param name="keyValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.DataFilter.CreateSqlParameters(System.Object[])">
            <summary>
            Create KeyValueParameters
            </summary>
            <param name="keyValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.DataFilter.CreateParameters(System.Object[],System.String@)">
            <summary>
            Create KeyValueParameters
            </summary>
            <param name="keyValueParameters"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.DataFilter.CreateParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.String@)">
            <summary>
            Create KeyValueParameters
            </summary>
            <param name="dic"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.DataUtil">
            <summary>
            Data Util.
            </summary>
        </member>
        <member name="M:Nistec.Data.DataUtil.CreateTableSchema(System.String,System.String[])">
            <summary>
            CreateTableSchema
            </summary>
            <param name="tableName"></param>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.DataUtil.CreateTableSchema(System.String,System.Data.DataColumn[])">
            <summary>
            CreateTableSchema
            </summary>
            <param name="tableName"></param>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.DataUtil.CreateTableSchema(System.String,System.Collections.Generic.Dictionary{System.String,System.Type})">
            <summary>
            CreateTableSchema
            </summary>
            <param name="tableName"></param>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.DataUtil.EqualsSchema(System.Data.DataTable,System.Data.DataTable,System.Boolean)">
            <summary>
            Equals Schema
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="forceColumnName"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.DataUtil.FillDataTable(System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.Object}[])">
            <summary>
            FillDataTable
            </summary>
            <param name="dt">DataTable to fill</param>
            <param name="rows">columnName,Value</param>
        </member>
        <member name="M:Nistec.Data.DataUtil.FillDataTable(System.Data.DataTable,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            FillDataTable
            </summary>
            <param name="dt"></param>
            <param name="rows"></param>
        </member>
        <member name="M:Nistec.Data.DataUtil.FillDataTable(System.Data.DataTable,System.Collections.Generic.List{System.Object}[])">
            <summary>
            FillDataTable
            </summary>
            <param name="dt"></param>
            <param name="rows"></param>
        </member>
        <member name="M:Nistec.Data.DataUtil.FillDataTable(System.Data.DataTable,System.Object[])">
            <summary>
            FillDataTable
            </summary>
            <param name="dt"></param>
            <param name="rows"></param>
        </member>
        <member name="M:Nistec.Data.DataUtil.FillDataTable(System.Data.DataTable,System.Object[0:,0:])">
            <summary>
            FillDataTable
            </summary>
            <param name="dt"></param>
            <param name="rows"></param>
        </member>
        <member name="T:Nistec.Data.AsyncCommand">
             <example>
                public void RunCmd(){
                mControl.Data.AsyncCommand acmd1 = new mControl.Data.AsyncCommand(connectionString, mControl.Data.DBProvider.SqlServer);
                acmd1.AsyncProgressLevel = mControl.Data.AsyncProgressLevel.All;
                acmd1.ExecutingResultEvent += new mControl.Data.ExecutingResultEventHandler(acmd1_ExecutingResultEvent);
                acmd1.ExecutingTraceEvent +=new mControl.Data.ExecutingTraceEventHandler(acmd1_ExecutingTraceEvent);
                acmd1.RunCmdScript("select * from Accounts", "Accounts");
                }
                void acmd1_ExecutingTraceEvent(object sender, mControl.Data.ExecutingTraceEventArgs e)
                {
                    string s = e.Message;
                }
            
                void acmd1_ExecutingResultEvent(object sender, mControl.Data.ExecutingResultEventArgs e)
                {
                    DataTable d = e.Table;
               }          
             </example>
            <summary>
            AsyncCommand
            </summary>
        </member>
        <member name="M:Nistec.Data.AsyncCommand.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Nistec.Data.DataParameter">
            <summary>
            Represents a parameter to a DbCommand and optionally,its mapping to a System.Data.DataSet column.
            </summary>
        </member>
        <member name="M:Nistec.Data.DataParameter.#ctor(System.String,System.Object)">
            <summary>
            ctor
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nistec.Data.DataParameter.#ctor(System.String,System.Object,Nistec.Data.DalParamType,System.Data.DbType)">
            <summary>
            ctor
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="paramType"></param>
            <param name="dbType"></param>
        </member>
        <member name="M:Nistec.Data.DataParameter.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            ctor
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="isNullAble"></param>
        </member>
        <member name="M:Nistec.Data.DataParameter.Get(System.Data.IDbCommand,System.Object[])">
            <summary>
            Create KeyValueParameters
            </summary>
            <param name="command"></param>
            <param name="keyValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.DataParameter.Get(System.Data.IDbConnection,System.Object[])">
            <summary>
            Create KeyValueParameters
            </summary>
            <param name="connection"></param>
            <param name="keyValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.DataParameter.Get``1(System.Object[])">
            <summary>
            Create KeyValueParameters
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.DataParameter.GetSqlParameters(Nistec.Generic.GenericRecord,System.Boolean)">
            <summary>
            Create sql parameter from <see cref="T:Nistec.Generic.GenericRecord"/>
            </summary>
            <param name="keyValueParameters"></param>
            <param name="sortedByKey"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.DBCommandAttribute">
             <summary>
             This attribute defines properties of generated methods.
             </summary>
             <remarks>
             If this attribute is not defined for a method to be generated then
             <see cref="F:System.Data.CommandType.StoredProcedure">CommandType.StoredProcedure</see> value is applied for underlying 
             <see cref="T:System.Data.SqlClient.SqlCommand"/> object.
             </remarks>
             <example>Sample of get DataTable by command sql
             <code >
            [DBCommand("SELECT * FROM Banks")]
            public abstract DataTable Banks();
            
             Sample of run Update sql
            [DBCommand("UPDATE [Attribute] SET [Value]=@Value WHERE [AttribID]=@AttribID")]
            public abstract void UpdateAttribute (string Value,int AttribID);
            
            	Sample of run Update sql with parameters
            [DBCommand(DBCommandType.Update, "Attribute")]
            public abstract void AttributeUpdate
            (
            [Nistec.Data.OleDb.DBParameter(50)]string Value,
            [Nistec.Data.OleDb.DBParameter]int AttribID
            );
             </code>
             </example> 
        </member>
        <member name="M:Nistec.Data.DBCommandAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.DBCommandAttribute"/> class with the specified
            <see cref="P:Nistec.Data.DBCommandAttribute.CommandText"/> value
            </summary>
            <param name="commandText">Is a value of <see cref="P:Nistec.Data.DBCommandAttribute.CommandText"/> property</param>
        </member>
        <member name="M:Nistec.Data.DBCommandAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.DBCommandAttribute"/> class with the specified
            <see cref="P:Nistec.Data.DBCommandAttribute.CommandText"/> and <see cref="P:Nistec.Data.DBCommandAttribute.ReturnIfNull"/> values
            </summary>
            <param name="commandText">Is a value of <see cref="P:Nistec.Data.DBCommandAttribute.CommandText"/> property</param>
            <param name="returnIfNull"></param>
        </member>
        <member name="M:Nistec.Data.DBCommandAttribute.#ctor(Nistec.Data.DBCommandType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.DBCommandAttribute"/> class with the specified
            <see cref="P:Nistec.Data.DBCommandAttribute.CommandType"/> and <see cref="P:Nistec.Data.DBCommandAttribute.CommandText"/> values
            </summary>
            <param name="commandType"></param>
            <param name="commandText">Is a value of <see cref="P:Nistec.Data.DBCommandAttribute.CommandText"/> property</param>
        </member>
        <member name="M:Nistec.Data.DBCommandAttribute.#ctor(Nistec.Data.DBCommandType,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.DBCommandAttribute"/> class with the specified
            <see cref="P:Nistec.Data.DBCommandAttribute.CommandType"/>, <see cref="P:Nistec.Data.DBCommandAttribute.CommandText"/>
            and <see cref="P:Nistec.Data.DBCommandAttribute.ReturnIfNull"/> values
            </summary>
            <param name="commandType">Is a value of <see cref="P:Nistec.Data.DBCommandAttribute.CommandType"/> property</param>
            <param name="commandText">Is a value of <see cref="P:Nistec.Data.DBCommandAttribute.CommandText"/> property</param>
            <param name="returnIfNull">Is a value of <see cref="P:Nistec.Data.DBCommandAttribute.ReturnIfNull"/> property</param>
        </member>
        <member name="M:Nistec.Data.DBCommandAttribute.#ctor(Nistec.Data.DBCommandType,System.String,System.Object,System.Data.MissingSchemaAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.DBCommandAttribute"/> class with the specified
            <see cref="P:Nistec.Data.DBCommandAttribute.CommandType"/>, <see cref="P:Nistec.Data.DBCommandAttribute.CommandText"/>
            and <see cref="P:Nistec.Data.DBCommandAttribute.ReturnIfNull"/> values
            </summary>
            <param name="commandType">Is a value of <see cref="P:Nistec.Data.DBCommandAttribute.CommandType"/> property</param>
            <param name="commandText">Is a value of <see cref="P:Nistec.Data.DBCommandAttribute.CommandText"/> property</param>
            <param name="returnIfNull">Is a value of <see cref="P:Nistec.Data.DBCommandAttribute.ReturnIfNull"/> property</param>
            <param name="missingSchemaAction">Is a value of <see cref="P:Nistec.Data.DBCommandAttribute.MissingSchemaAction"/> property</param>
        </member>
        <member name="M:Nistec.Data.DBCommandAttribute.#ctor(Nistec.Data.DBCommandType,System.String,System.Object,System.Data.MissingSchemaAction,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.DBCommandAttribute"/> class with the specified
            <see cref="P:Nistec.Data.DBCommandAttribute.CommandType"/>, <see cref="P:Nistec.Data.DBCommandAttribute.CommandText"/>
            and <see cref="P:Nistec.Data.DBCommandAttribute.ReturnIfNull"/> values
            </summary>
            <param name="commandType">Is a value of <see cref="P:Nistec.Data.DBCommandAttribute.CommandType"/> property</param>
            <param name="commandText">Is a value of <see cref="P:Nistec.Data.DBCommandAttribute.CommandText"/> property</param>
            <param name="returnIfNull">Is a value of <see cref="P:Nistec.Data.DBCommandAttribute.ReturnIfNull"/> property</param>
            <param name="missingSchemaAction">Is a value of <see cref="P:Nistec.Data.DBCommandAttribute.MissingSchemaAction"/> property</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
        </member>
        <member name="M:Nistec.Data.DBCommandAttribute.GetAttributeBuilder(Nistec.Data.DBCommandAttribute)">
            <summary>
            An attribute builder method
            </summary>
            <param name="attr"></param>
            <returns>CustomAttributeBuilder</returns>
        </member>
        <member name="P:Nistec.Data.DBCommandAttribute.CommandType">
            <summary>
            Defines the meaning of a CommandText property.
            </summary>
            <remarks>
            The meaning of a CommandText property depending of a CommendType property:
            <list type="table">
            <listheader>
            <term>CommandType value</term><description>CommandText meaning</description>
            </listheader>
            <item><term><see cref="F:Nistec.Data.DBCommandType.Text"/></term><description>An SQL expression</description></item>
            <item><term><see cref="F:Nistec.Data.DBCommandType.StoredProcedure"/> (default value)</term><description>A name of a stored procedure</description></item>
            <item><term><see cref="F:Nistec.Data.DBCommandType.Insert"/></term><description>A name of a table or a view</description></item>
            <item><term><see cref="F:Nistec.Data.DBCommandType.Update"/></term><description>A name of a table or a view</description></item>
            </list>
            If this property is not defined then <see cref="F:Nistec.Data.DBCommandType.StoredProcedure"/> as a default value.
            </remarks>
        </member>
        <member name="P:Nistec.Data.DBCommandAttribute.CommandText">
            <summary>
            This is a text of a command and is interpreted 
            according to a value of <see cref="P:Nistec.Data.DBCommandAttribute.CommandType"/> property.
            </summary>
            <remarks>
            The meaning of a CommandText property depending of a CommendType property:
            <list type="table">
            <listheader>
            <term>CommandType value</term><description>CommandText meaning</description>
            </listheader>
            <item><term><see cref="F:Nistec.Data.DBCommandType.Text"/></term><description>An SQL expression</description></item>
            <item><term><see cref="F:Nistec.Data.DBCommandType.StoredProcedure"/></term><description>A name of a stored procedure</description></item>
            <item><term><see cref="F:Nistec.Data.DBCommandType.Insert"/></term><description>A name of a table or a view</description></item>
            <item><term><see cref="F:Nistec.Data.DBCommandType.Update"/></term><description>A name of a table or a view</description></item>
            </list>
            If this value is not defined then the name of the method is used as a command text.
            </remarks>
        </member>
        <member name="P:Nistec.Data.DBCommandAttribute.ReturnIfNull">
            <summary>
            A value that will be returned if the command returns null. 
            This property should be defined if your generated method returns 
            a value type value and you expect that re result of the method execution 
            can be null. In this case the value of this property will be returned.
            </summary>
        </member>
        <member name="P:Nistec.Data.DBCommandAttribute.MissingSchemaAction">
            <summary>
            Missing Schema Action property
            </summary>
        </member>
        <member name="P:Nistec.Data.DBCommandAttribute.Timeout">
            <summary>
            command time out, default =0
            </summary>
        </member>
        <member name="T:Nistec.Data.DalReturnType">
            <summary>
            Return type list by excute command
            </summary>
        </member>
        <member name="F:Nistec.Data.DalReturnType.Int">
            <summary>
            int use for ExecuteNonQuey
            </summary>
        </member>
        <member name="F:Nistec.Data.DalReturnType.DalSchema">
            <summary>
            DalSchema as System.Data.DataSet
            </summary>
        </member>
        <member name="F:Nistec.Data.DalReturnType.DataSet">
            <summary>
            System.Data.DataSet
            </summary>
        </member>
        <member name="F:Nistec.Data.DalReturnType.DataTable">
            <summary>
            System.Data.DataTable
            </summary>
        </member>
        <member name="F:Nistec.Data.DalReturnType.DataRows">
            <summary>
            System.Data.DataRow[]  array
            </summary>
        </member>
        <member name="F:Nistec.Data.DalReturnType.DataRow">
            <summary>
            System.Data.DataRow  Single row
            </summary>
        </member>
        <member name="F:Nistec.Data.DalReturnType.DataReader">
            <summary>
            System.Data.SqlClient.SqlDataReader/System.Data.OleDb.OleDbDataReader
            </summary>
        </member>
        <member name="F:Nistec.Data.DalReturnType.DataAdapter">
            <summary>
            System.Data.SqlClient.SqlDataAdapter/System.Data.OleDb.OleDbDataAdapter
            </summary>
        </member>
        <member name="F:Nistec.Data.DalReturnType.Command">
            <summary>
            System.Data.SqlClient.SqlCommand/System.Data.OleDb.OleDbCommand
            </summary>
        </member>
        <member name="F:Nistec.Data.DalReturnType.Object">
            <summary>
            System.Object use for scalar command
            </summary>
        </member>
        <member name="F:Nistec.Data.DalReturnType.Default">
            <summary>
            return none use for ExecuteNonQuey
            </summary>
        </member>
        <member name="T:Nistec.Data.DBCommandType">
            <summary>
            Command type enumeration for <see cref="P:Nistec.Data.DBCommandAttribute.CommandType"/> property
            of <see cref="T:Nistec.Data.DBCommandAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:Nistec.Data.DBCommandType.Text">
            <summary>
            Equals to <b>CommandType.Text</b> value. If <see cref="T:Nistec.Data.DBCommandAttribute"/> is defined 
            then it is a default value of <see cref="P:Nistec.Data.DBCommandAttribute.CommandType"/> property.
            </summary>
        </member>
        <member name="F:Nistec.Data.DBCommandType.StoredProcedure">
            <summary>
            Equals to <b>CommandType.StoredProcedure</b> value. 
            </summary>
        </member>
        <member name="F:Nistec.Data.DBCommandType.Insert">
            <summary>
            The command implements insert operation for a table specified.
            </summary>
        </member>
        <member name="F:Nistec.Data.DBCommandType.Update">
            <summary>
            The command implements update operation for a table specified.
            </summary>
        </member>
        <member name="F:Nistec.Data.DBCommandType.Delete">
            <summary>
            The command implements Delete operation for a table specified.
            </summary>
        </member>
        <member name="F:Nistec.Data.DBCommandType.Lookup">
            <summary>
            The command implements Lookup sclar function.
            </summary>
        </member>
        <member name="F:Nistec.Data.DBCommandType.InsertOrUpdate">
            <summary>
            The command implements if not exists, insert operation else update for a table specified.
            </summary>
        </member>
        <member name="F:Nistec.Data.DBCommandType.InsertNotExists">
            <summary>
            The command implements insert operation if not exists for a table specified.
            </summary>
        </member>
        <member name="T:Nistec.Data.UpdateCommandType">
            <summary>
            Command type enumeration for ActiveCommandBuilder property
            </summary>
        </member>
        <member name="F:Nistec.Data.UpdateCommandType.Upsert">
            <summary>
            The command implements if not exists, insert operation else update for a table specified.
            </summary>
        </member>
        <member name="F:Nistec.Data.UpdateCommandType.Insert">
            <summary>
            The command implements insert operation for a table specified.
            </summary>
        </member>
        <member name="F:Nistec.Data.UpdateCommandType.Update">
            <summary>
            The command implements update operation for a table specified.
            </summary>
        </member>
        <member name="F:Nistec.Data.UpdateCommandType.Delete">
            <summary>
            The command implements Delete operation for a table specified.
            </summary>
        </member>
        <member name="F:Nistec.Data.UpdateCommandType.StoredProcedure">
            <summary>
            Equals to <b>CommandType.StoredProcedure</b> value. 
            </summary>
        </member>
        <member name="T:Nistec.Data.ProcedureType">
            <summary>
            Command type enumeration for ProcedureTypes property
            </summary>
        </member>
        <member name="F:Nistec.Data.ProcedureType.Upsert">
            <summary>
            The command implements if not exists, insert operation else update for a table specified.
            </summary>
        </member>
        <member name="F:Nistec.Data.ProcedureType.Insert">
            <summary>
            The command implements insert operation for a table specified.
            </summary>
        </member>
        <member name="F:Nistec.Data.ProcedureType.Update">
            <summary>
            The command implements update operation for a table specified.
            </summary>
        </member>
        <member name="F:Nistec.Data.ProcedureType.Delete">
            <summary>
            The command implements Delete operation for a table specified.
            </summary>
        </member>
        <member name="F:Nistec.Data.ProcedureType.GetList">
            <summary>
            Equals to <b>CommandType.StoredProcedure return records set</b> value. 
            </summary>
        </member>
        <member name="F:Nistec.Data.ProcedureType.GetRecord">
            <summary>
            Equals to <b>CommandType.StoredProcedure return single record</b> value. 
            </summary>
        </member>
        <member name="T:Nistec.Data.UpsertType">
            <summary>
            Command type enumeration for ActiveCommandBuilder property
            </summary>
        </member>
        <member name="F:Nistec.Data.UpsertType.Upsert">
            <summary>
            The command implements if not exists, insert operation else update for a table specified.
            </summary>
        </member>
        <member name="F:Nistec.Data.UpsertType.Insert">
            <summary>
            The command implements insert operation for a table specified.
            </summary>
        </member>
        <member name="F:Nistec.Data.UpsertType.Update">
            <summary>
            The command implements update operation for a table specified.
            </summary>
        </member>
        <member name="T:Nistec.Data.DalParamType">
            <summary>
            Parameter type enumeration for <see cref="!:Sql.DbFieldAttribute.ParameterType"/> property
            of <see cref="!:Sql.DbFieldAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:Nistec.Data.DalParamType.Default">
            <summary>
            The parameter is defaul and has not special role.
            </summary>
        </member>
        <member name="F:Nistec.Data.DalParamType.SPReturnValue">
            <summary>
            The parameter is a return value from a stored procedure.
            </summary>
        </member>
        <member name="F:Nistec.Data.DalParamType.Key">
            <summary>
            This parameter is a part of a table key 
            and is applicable only 
            for <see cref="F:Nistec.Data.DBCommandType.Insert">DBCommandType.Insert </see> or <see cref="F:Nistec.Data.DBCommandType.Update">DBCommandType.Update</see> value 
            of method's <see cref="P:Nistec.Data.DBCommandAttribute.CommandType">DBCommandAttribute.CommandType</see> property.
            </summary>
        </member>
        <member name="F:Nistec.Data.DalParamType.Identity">
            <summary>
            This parameter is a part of a table autoincremental field 
            and is applicable only 
            for <see cref="F:Nistec.Data.DBCommandType.Insert">DBCommandType.Insert </see> or <see cref="F:Nistec.Data.DBCommandType.Update">DBCommandType.Update</see> value 
            of method's <see cref="P:Nistec.Data.DBCommandAttribute.CommandType">DBCommandAttribute.CommandType</see> property.
            This parameter requires to be only passed by refference.
            </summary>
        </member>
        <member name="F:Nistec.Data.DalParamType.Array">
            <summary>
            This parameter is a Array of  
            and is applicable only 
            for <see cref="F:Nistec.Data.DBCommandType.Text">DBCommandType.Text </see> value 
            of method's <see cref="P:Nistec.Data.DBCommandAttribute.CommandType">DBCommandAttribute.CommandType</see> property.
            This parameter requires for Where X In() operation.
            </summary>
        </member>
        <member name="T:Nistec.Data.ParamDir">
            <summary>
            Parameter type info for Parameter property
            </summary>
        </member>
        <member name="F:Nistec.Data.ParamDir.ByValue">
            <summary>
            The parameter is defaul and has not special role.
            </summary>
        </member>
        <member name="F:Nistec.Data.ParamDir.ByRef">
            <summary>
            The parameter is by ref.
            </summary>
        </member>
        <member name="F:Nistec.Data.ParamDir.ByOut">
            <summary>
            The parameter is by out.
            </summary>
        </member>
        <member name="T:Nistec.Data.AggregationMode">
            <summary>
            Parameter type enumeration for <see cref="T:Nistec.Data.AggregationMode"/> property
            </summary>
        </member>
        <member name="F:Nistec.Data.AggregationMode.Count">
            <summary>
            Count Aggregation mode.
            </summary>
        </member>
        <member name="F:Nistec.Data.AggregationMode.Sum">
            <summary>
            Sum Aggregation mode.
            </summary>
        </member>
        <member name="F:Nistec.Data.AggregationMode.Min">
            <summary>
            Minimum Aggregation mode.
            </summary>
        </member>
        <member name="F:Nistec.Data.AggregationMode.Max">
            <summary>
            Maximum Aggregation mode.
            </summary>
        </member>
        <member name="F:Nistec.Data.AggregationMode.Avg">
            <summary>
            Avg Aggregation mode.
            </summary>
        </member>
        <member name="F:Nistec.Data.DBProvider.OleDb">
            <summary>
            OleDb
            </summary>
        </member>
        <member name="F:Nistec.Data.DBProvider.SqlServer">
            <summary>
            SqlServer
            </summary>
        </member>
        <member name="F:Nistec.Data.DBProvider.Oracle">
            <summary>
            OracleOleDb
            </summary>
        </member>
        <member name="F:Nistec.Data.DBProvider.MySQL">
            <summary>
            MySQL
            </summary>
        </member>
        <member name="F:Nistec.Data.DBProvider.SybaseASE">
            <summary>
            SybaseASE
            </summary>
        </member>
        <member name="F:Nistec.Data.DBProvider.Firebird">
            <summary>
            Firebird
            </summary>
        </member>
        <member name="F:Nistec.Data.DBProvider.DB2">
            <summary>
            DB2
            </summary>
        </member>
        <member name="F:Nistec.Data.DBProvider.SQLite">
            <summary>
            SQLite
            </summary>
        </member>
        <member name="F:Nistec.Data.DBProvider.SqlCe">
            <summary>
            SqlCe
            </summary>
        </member>
        <member name="T:Nistec.Data.DalException">
            <summary>
            Exception that DBLayer can raise
            </summary>
        </member>
        <member name="M:Nistec.Data.DalException.#ctor">
            <summary>
            A constructor without parameters
            </summary>
        </member>
        <member name="M:Nistec.Data.DalException.#ctor(System.String)">
            <summary>
            A constructor with a message parameter
            </summary>
            <param name="msg">Message parameter</param>
        </member>
        <member name="M:Nistec.Data.DalException.#ctor(System.String,System.Exception)">
            <summary>
            A constructor with message and inner exception parameters
            </summary>
            <param name="msg">Message parameter</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:Nistec.Data.DalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            A constructor for Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Nistec.Data.IAutoBase">
            <summary>
            IAutoBase interface
            </summary>
        </member>
        <member name="P:Nistec.Data.IAutoBase.DBProvider">
            <summary>
            DBProvider
            </summary>
        </member>
        <member name="P:Nistec.Data.IAutoBase.Initilaized">
            <summary>
            Get Initilaized
            </summary>
        </member>
        <member name="P:Nistec.Data.IAutoBase.OwnsConnection">
            <summary>
            It true then the object owns its connection
            and disposes it on its own disposal.
            </summary>
        </member>
        <member name="P:Nistec.Data.IAutoBase.AutoCloseConnection">
            <summary>
            If true then the object's connection is closed each time 
            after sql command execution.
            </summary>
        </member>
        <member name="P:Nistec.Data.IAutoBase.Connection">
            <summary>
            Sql connection property.
            </summary>
        </member>
        <member name="P:Nistec.Data.IAutoBase.Transaction">
            <summary>
            Sql transaction property.
            </summary>
        </member>
        <member name="M:Nistec.Data.IAutoBase.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins sql transaction with a specified isolation level.
            </summary>
            <param name="iso"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.IAutoBase.RollbackTransaction">
            <summary>
            Rolls back the current transaction.
            </summary>
        </member>
        <member name="M:Nistec.Data.IAutoBase.CommitTransaction">
            <summary>
            Commits the current transaction.
            </summary>
        </member>
        <member name="T:Nistec.Data.IAutoDb">
            <summary>
            Interface that every dal class must inherit. When DBLayer creates 
            a dal class it uses <see cref="!:Common.DalDB">DalDB</see> class as its base class
            </summary>
        </member>
        <member name="P:Nistec.Data.IAutoDb.Connection">
            <summary>
            Connection property
            </summary>
        </member>
        <member name="P:Nistec.Data.IAutoDb.Transaction">
            <summary>
            Transaction property
            </summary>
        </member>
        <member name="P:Nistec.Data.IAutoDb.AutoCloseConnection">
            <summary>
            AutoCloseConnection property
            </summary>
        </member>
        <member name="T:Nistec.Data.ICommandAsync">
            <summary>
            ICommandAsync is inertace of CommandAsync to invoke Asynchronous Processing
            </summary>
        </member>
        <member name="E:Nistec.Data.ICommandAsync.AsyncCompleted">
            <summary>
            AsyncCompleted event occured when executing complited
            </summary>
        </member>
        <member name="E:Nistec.Data.ICommandAsync.AsyncStatusChanged">
            <summary>
            AsyncStatusChanged event occured when status is changed
            </summary>
        </member>
        <member name="P:Nistec.Data.ICommandAsync.AsyncIsExecuting">
            <summary>
            This flag ensures that the user does not attempt
            to restart the command or close the form while the 
            asynchronous command is executing.
            </summary>
        </member>
        <member name="P:Nistec.Data.ICommandAsync.AsyncDisplayStatus">
            <summary>
            Get Async Display Status
            </summary>
        </member>
        <member name="P:Nistec.Data.ICommandAsync.AsyncStatus">
            <summary>
            Get Async Status struct
            </summary>
        </member>
        <member name="P:Nistec.Data.ICommandAsync.AsyncResult_DataTable">
            <summary>
            Get AsyncResult as DataTable
            </summary>
        </member>
        <member name="P:Nistec.Data.ICommandAsync.AsyncResult_DataRows">
            <summary>
            Get AsyncResult as DataRows array
            </summary>
        </member>
        <member name="P:Nistec.Data.ICommandAsync.AsyncResult_SingleRow">
            <summary>
            Get AsyncResult as SingleRow,if multi rows affected return the first row
            </summary>
        </member>
        <member name="M:Nistec.Data.ICommandAsync.SetAsyncStatus(System.String,Nistec.Data.StatusPriority)">
            <summary>
            SetAsyncStatus
            </summary>
            <param name="Text"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Nistec.Data.ICommandAsync.AsyncFillDataSource(System.Data.IDataReader)">
            <summary>
            AsyncFillDataSource
            You must Use this method as a target of invokation delegate
            to complit AsyncExecution ,
            fill the data source you need
            and close the IDaqtaReader as well.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Nistec.Data.ICommandAsync.AsyncExecute(System.String,System.Data.IDataParameter[],System.Int32,System.Int32,System.Int32)">
            <summary>
            AsyncExecute , use this method to invoke 
            Async procedure call until is IsCompleted 
            </summary>
            <param name="sql"></param>
            <param name="parameters">parameters </param>
            <param name="timeOut">Set time out, default =0</param>
            <param name="interval">Waiting time for async thread, default =0</param>
            <param name="WaitForDelay">a few seconds before retrieving the real data use for a long-running query, default =0</param>
        </member>
        <member name="M:Nistec.Data.ICommandAsync.Execute(System.String,System.Data.IDataParameter[],System.Int32,System.Int32)">
            <summary>
            AsyncExecute , use this method to invoke 
            Async procedure call until is IsCompleted 
            </summary>
            <param name="sql"></param>
            <param name="parameters">parameters </param>
            <param name="timeOut">Set time out, default =0</param>
            <param name="interval">Waiting time for async thread, default =0</param>
        </member>
        <member name="M:Nistec.Data.ICommandAsync.GetParameters(System.String[],System.Object[])">
            <summary>
            GetParameters factory
            </summary>
            <param name="names"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.ICommandAsync.AsyncExecuteBegin(System.AsyncCallback,System.String,System.Data.IDataParameter[],System.Int32,System.Int32)">
            <summary>
            AsyncExecuteBegin , use this method to begin invoke 
            Async procedure call, doing so makes it easier
            to call AsyncExecuteEnd in the callback procedure.
            </summary>
            <param name="callback">AsyncCallback</param>
            <param name="sql"></param>
            <param name="parameters">parameters </param>
            <param name="timeOut">Set time out, default =0</param>
            <param name="WaitForDelay">a few seconds before retrieving the real data use for a long-running query, default =0</param>
        </member>
        <member name="M:Nistec.Data.ICommandAsync.AsyncExecuteEnd(System.IAsyncResult)">
            <summary>
            AsyncHandleCallback
            Retrieve the original command object, passed
            to this procedure in the AsyncState property
            of the IAsyncResult parameter.
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:Nistec.Data.KeyValueList">
            <summary>
            List of KeyValuePair{string, object}
            </summary>
        </member>
        <member name="T:Nistec.Data.KeyValueRecord">
            <summary>
            List of KeyValuePair{string, object}
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nistec.Data.KeyValueRecord.Sorted" -->
        <member name="M:Nistec.Data.SqlFormatter.SelectCommand(System.Data.DataTable,System.String,System.String)">
            <summary>
            Get Select Command
            </summary>
            <param name="dataTable"></param>
            <param name="From"></param>
            <param name="Where"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.SqlFormatter.IntegratedConnection(System.String,System.String)">
            <summary>
            GetSql Integrated Connection text.
            </summary>
            <param name="serverName"></param>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.SqlFormatter.ValidateSql(System.String,System.String)">
            <summary>
            Validate Sql, not allowed (drop|create|alter).
            </summary>
            <param name="commandText"></param>
            <param name="excludeWords">drop|create|alter</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Data.SyntaxErrorException"></exception>
        </member>
        <member name="M:Nistec.Data.SqlFormatter.ValidateSqlSelect(System.String)">
            <summary>
            Validate Sql, not allowed (drop|create|alter|delete|insert|update).
            </summary>
            <param name="commandText"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Data.SyntaxErrorException"></exception>
        </member>
        <member name="M:Nistec.Data.SqlFormatter.BuildSqlString(System.String,System.String,System.String,System.Object[])">
            <summary>
            Create Sql String for command
            </summary>
            <param name="Select">Fields for select cluse</param>
            <param name="From">from string cluse</param>
            <param name="Where">where string cluse</param>
            <param name="InValues">Array Values of parameter for IN() Operation </param>
            <remarks>To use InValues you should write in Where Predicat 
            for string values IN('') , 
            for numbers values IN() , 
            for nvarchar values IN(N''),
            for DateTime in jet IN(##)</remarks>
            <returns>String</returns>
        </member>
        <member name="M:Nistec.Data.SqlFormatter.BuildSqlWhereString(System.String,System.Object[])">
            <summary>
            Create Where Predicat for Sql String command
            </summary>
            <param name="Where">where string cluse</param>
            <param name="InValues">Array Values of parameter for IN() Operation </param>
            <remarks>To use InValues you should write in Where Predicat 
            for string values IN('') , 
            for numbers values IN() , 
            for nvarchar values IN(N''),
            for DateTime in jet IN(##)</remarks>
            <returns>String</returns>
        </member>
        <member name="M:Nistec.Data.SqlFormatter.GetSqlString(System.String,System.String,System.String,System.Data.DataRow[],System.String)">
            <summary>
            Create Sql String for command
            </summary>
            <param name="Select">Fields for select cluse</param>
            <param name="From">from string cluse</param>
            <param name="Where">where string cluse</param>
            <param name="InValues">DataRow Array Values of parameter for IN() Operation </param>
            <param name="columnName">columnName in dataRow</param>
            <remarks>To use InValues you should write in Where Predicat 
            for string values IN('') , 
            for numbers values IN() , 
            for nvarchar values IN(N''),
            for DateTime in jet IN(##)</remarks>
            <returns>String</returns>
        </member>
        <member name="M:Nistec.Data.SqlFormatter.GetSqlString(System.String,System.String,System.String,System.Object[])">
            <summary>
            Create Sql String for command
            </summary>
            <param name="Select">Fields for select cluse</param>
            <param name="From">from string cluse</param>
            <param name="Where">where string cluse</param>
            <param name="InValues">Array Values of parameter for IN() Operation </param>
            <remarks>To use InValues you should write in Where Predicat 
            for string values IN('') , 
            for numbers values IN() , 
            for nvarchar values IN(N''),
            for DateTime in jet IN(##)</remarks>
            <returns>String</returns>
        </member>
        <member name="M:Nistec.Data.SqlFormatter.GetSqlString(System.String,System.Object[])">
            <summary>
            Create Where Predicat for Sql String command
            </summary>
            <param name="Where">where string cluse</param>
            <param name="InValues">Array Values of parameter for IN() Operation </param>
            <remarks>To use InValues you should write in Where Predicat 
            for string values IN('') , 
            for numbers values IN() , 
            for nvarchar values IN(N''),
            for DateTime in jet IN(##)</remarks>
            <returns>String</returns>
        </member>
        <member name="T:Nistec.Data.StatusPriority">
            <summary>
            Enum Status Priority
            </summary>
        </member>
        <member name="F:Nistec.Data.StatusPriority.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Nistec.Data.StatusPriority.Warnning">
            <summary>
            Warnning
            </summary>
        </member>
        <member name="F:Nistec.Data.StatusPriority.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:Nistec.Data.STATUS">
            <summary>
            STATUS
            </summary>
        </member>
        <member name="F:Nistec.Data.STATUS.displayStatus">
            <summary>
            displayStatus string
            </summary>
        </member>
        <member name="F:Nistec.Data.STATUS.statusPriority">
            <summary>
            statusPriority
            </summary>
        </member>
        <member name="M:Nistec.Data.STATUS.#ctor(System.String,Nistec.Data.StatusPriority)">
            <summary>
            STATUS ctor
            </summary>
            <param name="status"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Nistec.Data.STATUS.#ctor(System.String)">
            <summary>
            STATUS ctor
            </summary>
            <param name="status"></param>
        </member>
        <member name="P:Nistec.Data.STATUS.Display">
            <summary>
            Status string
            </summary>
        </member>
        <member name="P:Nistec.Data.STATUS.Priority">
            <summary>
            StatusPriority
            </summary>
        </member>
        <member name="T:Nistec.Data.MAPPING">
            <summary>
            MAPPING
            </summary>
        </member>
        <member name="F:Nistec.Data.MAPPING.SourceColumnName">
            <summary>
            SourceColumnName
            </summary>
        </member>
        <member name="F:Nistec.Data.MAPPING.DestColumnName">
            <summary>
            DestColumnName
            </summary>
        </member>
        <member name="M:Nistec.Data.MAPPING.#ctor(System.String,System.String)">
            <summary>
            MAPPING ctor
            </summary>
            <param name="SourceColumnName"></param>
            <param name="DestColumnName"></param>
        </member>
        <member name="M:Nistec.Data.MAPPING.#ctor(System.String)">
            <summary>
            MAPPING ctor with same name for source and dest
            </summary>
            <param name="ColumnName"></param>
        </member>
        <member name="M:Nistec.Data.MAPPING.Create(System.String[])">
            <summary>
            Create MAPPING array list
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.CONSTRAINT">
            <summary>
            CONSTRAINT
            </summary>
        </member>
        <member name="F:Nistec.Data.CONSTRAINT.Name">
            <summary>
            Constraint Name
            </summary>
        </member>
        <member name="F:Nistec.Data.CONSTRAINT.ColumnsName">
            <summary>
            Constraint Columns Name
            </summary>
        </member>
        <member name="F:Nistec.Data.CONSTRAINT.PrimeryKey">
            <summary>
            Is PrimeryKey
            </summary>
        </member>
        <member name="M:Nistec.Data.CONSTRAINT.#ctor(System.String,System.String[],System.Boolean)">
            <summary>
            CONSTRAINT Ctor
            </summary>
            <param name="name"></param>
            <param name="columns"></param>
            <param name="isPriery"></param>
        </member>
        <member name="M:Nistec.Data.CONSTRAINT.SetConstraint(System.Data.DataTable,Nistec.Data.CONSTRAINT[])">
            <summary>
            SetConstraint
            </summary>
            <param name="dt"></param>
            <param name="constraint"></param>
        </member>
        <member name="T:Nistec.Data.Entities.ActiveEntity">
            <summary>
            Represents ActiveEntity which implements <see cref="T:Nistec.Data.Entities.IDataEntity"/> 
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.#ctor">
            <summary>
            Initialize a new instance of ActiveEntity
            You can bind this entity to DB by using Entity attribute or by EntityBind method
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initialize a new instance of ActiveEntity with specified culture
            You can bind this entity to DB by using Entity attribute or by EntityBind method
            </summary>
            <param name="culture"></param>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.#ctor(System.Object[])">
            <summary>
            Initialize a new instance of ActiveEntity using array of entity keys
            You can bind this entity to DB by using Entity attribute or by EntityBind method
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.#ctor(Nistec.Data.Entities.EntityMode,System.Object[])">
            <summary>
            Initialize a new instance of ActiveEntity with specified EntityMode
            You can bind this entity to DB by using Entity attribute or by EntityBind method
            </summary>
            <param name="mode"></param>
            <param name="keys"></param>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.#ctor(System.Data.DataRow)">
            <summary>
            Initialize a new instance of ActiveEntity with specified DataRow
            Usefull for dynamic entity
            </summary>
            <param name="dr"></param>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.#ctor(System.Data.DataTable,System.String[],System.String)">
            <summary>
            Initialize a new instance of ActiveEntity 
            Create Vertical GenericRecord (key value dictionary) by fetching keys and values from DataTable using array of fields as row key and value field
            Usefull for Vertical combination of data and also for dynamic entity
            </summary>
            <param name="dt"></param>
            <param name="fieldKeys"></param>
            <param name="fieldValue"></param>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.#ctor(System.Data.DataTable)">
            <summary>
            Initialize a new instance of ActiveEntity and create array of entities with specified DataTable
            usefull to create array of entities and also for dynamic entity
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.CreateEntityDb``1(System.String,System.String,Nistec.Data.Entities.EntitySourceType,Nistec.Data.Entities.EntityKeys)">
            <summary>
            Create a new instance of EntityDb.
            </summary>
            <typeparam name="Dbc"></typeparam>
            <param name="entityName"></param>
            <param name="mappingName"></param>
            <param name="sourceType"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.EntityBind">
            <summary>
            Bind to EntityDbContext, Occured on constrauctor
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.InitEntity(Nistec.Data.Entities.EntityMode,System.Object[])">
            <summary>
            Init
            </summary>
            <param name="mode"></param>
            <param name="keys"></param>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.Init(System.Data.DataRow)">
            <summary>
            Init
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.Init(System.Data.DataRow,System.Boolean)">
            <summary>
            Init
            </summary>
            <param name="row"></param>
            <param name="readOnly"></param>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.Init(System.Boolean,System.String,System.Data.IDbDataParameter[],System.Data.CommandType)">
            <summary>
            Init
            </summary>
            <param name="isMulti"></param>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="cmdType">Specifies how a command string is interpreted.</param>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.Init(System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            Init
            </summary>
            <param name="isMulti"></param>
            <param name="parameters">SqlParameter array key value.</param>
        </member>
        <member name="P:Nistec.Data.Entities.ActiveEntity.EntityRecord">
            <summary>
            Get or Set properties values as IDictionary
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.GetValue``1(System.String)">
            <summary>
            GetValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <returns>T</returns>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.GetValue``1(System.String,``0)">
            <summary>
            GetValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <param name="defaultValue">if null or error return defaultValue will return</param>
            <returns>if null or error return defaultValue</returns>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.TryGetValue``1(System.String,``0@)">
             <summary>
              Gets the value associated with the specified key.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="field">>The key whose value to get.</param>
             <param name="value">
                 When this method returns, the value associated with the specified key, if
                 the key is found; otherwise, the default value for the type of the value
                 parameter. This parameter is passed uninitialized.
            </param>
             <returns>
                 true if the object that implements System.Collections.Generic.IDictionary
                 contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.SetValue``1(System.String,``0)">
            <summary>
            Set Value in specified field
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <param name="value">the T value to insert</param>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.SetValue(System.String,System.Object)">
            <summary>
            Set Value in specified field
            </summary>
            <param name="field">the column name in data row</param>
            <param name="value">the value to insert</param>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.Load(System.Object[])">
            <summary>
            Load a new entity that contains the specified primary key values.
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.GoTo(System.Object[])">
            <summary>
            Find and load entity record from DataSource that contains the specified primary key values.
            </summary>
            <param name="keys"></param>
            <returns>true if found else false</returns>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.Get(System.Int32)">
            <summary>
            Get Current item by index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.ClearChanges">
            <summary>
            Clear all changes
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.CommitChanges">
            <summary>
            End edit and save all changes localy
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.IsDirty">
            <summary>
            Get indicate if data source has changes
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.SaveChanges">
            <summary>
            Save all Changes to DB and return number of AffectedRecords
            If not <see cref="M:Nistec.Data.Entities.ActiveEntity.IsDirty"/> which mean no changed has been made return 0
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.SaveChanges(Nistec.Data.UpdateCommandType)">
            <summary>
            Save all Changes by <see cref="T:Nistec.Data.UpdateCommandType"/> specific command to DB and return number of AffectedRecords
            If not <see cref="M:Nistec.Data.Entities.ActiveEntity.IsDirty"/> which mean no changed has been made return 0
            </summary>
            <param name="commandType"></param>
            <returns></returns>
            <exception cref="T:Nistec.Data.Entities.EntityException"></exception>
            <exception cref="T:Nistec.Data.DalException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveEntity.ExecuteQuery(System.String)">
            <summary>
            Set entity values by Executing a Query with commandText argument.
            Return number of AffectedRecords
            </summary>
            <param name="commandText">StoredProcedure name</param>
            <returns></returns>
            <exception cref="T:Nistec.Data.Entities.EntityException"></exception>
            <exception cref="T:Nistec.Data.DalException"></exception>
        </member>
        <member name="T:Nistec.Data.Entities.Cache.EntityItemsBag`2">
            <summary>
            EntityItem Bag
            </summary>
            <typeparam name="Dbe"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Nistec.Data.Entities.Cache.EntityItemsBag`1">
            <summary>
            EntityItem Bag
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.EntityItemsBag`1.Load``1">
            <summary>
            Load Entity items from DB.
            </summary>
            <typeparam name="Dbe"></typeparam>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.EntityItemsBag`1.Load``1(System.Object[])">
            <summary>
            Load Entity items from DB.
            </summary>
            <param name="keyValueParameters">Optional parameters</param>
            <typeparam name="Dbe"></typeparam>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.EntityDbCache.Get(System.String,System.String,Nistec.Data.Entities.EntitySourceType,Nistec.Data.Entities.EntityKeys,System.Boolean)">
            <summary>
            Get or Create <see cref="T:Nistec.Data.Entities.EntityDbContext"/>
            </summary>
            <param name="entityName"></param>
            <param name="mappingName"></param>
            <param name="sourceType"></param>
            <param name="entityKeys"></param>
            <param name="enableCache"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.EntityDbCache.Get(System.String,Nistec.Data.Entities.EntityKeys,System.Boolean)">
            <summary>
            Get or Create <see cref="T:Nistec.Data.Entities.EntityDbContext"/> using EntitySourceType.Table
            </summary>
            <param name="mappingName"></param>
            <param name="entityKeys"></param>
            <param name="enableCache"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.EntityDbCache.Set``1">
            <summary>
            Set Entity using <see cref="T:Nistec.Data.Entities.EntityAttribute"/>
            </summary>
            <typeparam name="Dbe"></typeparam>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.EntityDbCache.Set(System.String,System.String,Nistec.Data.Entities.EntitySourceType,Nistec.Data.Entities.EntityKeys)">
            <summary>
            Set EntityDbContext
            </summary>
            <param name="tableName"></param>
            <param name="mappingName"></param>
            <param name="sourseType"></param>
            <param name="keys"></param>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.EntityDbCache.Set(System.String,System.String,Nistec.Data.Entities.EntityKeys)">
            <summary>
            Set EntityDbContext with EntitySourceType.Table
            </summary>
            <param name="tableName"></param>
            <param name="mappingName"></param>
            <param name="keys"></param>
        </member>
        <member name="T:Nistec.Data.Entities.Cache.EntityCache`1">
            <summary>
            EntityCache
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.Cache.EntityCache`1.DataKeys">
            <summary>
            Get Keys items
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.EntityCache`1.InitCache">
            <summary>
            InitCache 
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.EntityCache`1.GetKey(System.Int32,System.String[])">
            <summary>
            GetKey with number of options
            </summary>
            <param name="option"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.EntityCache`1.GetKey(System.String[])">
            <summary>
            Get Key default
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.EntityCache`1.Reset">
            <summary>
            Reset cache
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.EntityCache`1.Refresh">
            <summary>
            Refresh cache
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.EntityCache`1.CreateKey(`0)">
            <summary>
            CreateKey
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.EntityCache`1.CreateCacheItem(System.Object)">
            <summary>
            CreateCacheItem 
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.EntityCache`1.CreateCache(System.Data.DataTable)">
            <summary>
            CreateCache from data table
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.EntityCache`1.CreateCache(System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Create cache from IDictionary
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.EntityCache`1.CreateCache(`0[])">
            <summary>
            Create cache from IEntity
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.EntityCache`1.GetItem(System.String[])">
            <summary>
            Get Item by key with number of options
            </summary>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.EntityCache`1.FindItem(System.String[])">
            <summary>
            Get Item by key with number of options
            </summary>
            <param name="key"></param>
            <returns>return null or empty if not exists</returns>
        </member>
        <member name="T:Nistec.Data.Entities.Cache.EntityContextCache`1">
            <summary>
            Represent Entity Context Cache wrapper that contains fast search mechanizem.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.Cache.IEntityCache.DataKeys">
            <summary>
            Get Keys items
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.IEntityCache.Reset">
            <summary>
            Reset cache
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.IEntityCache.Refresh">
            <summary>
            Refresh cache
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.IEntityCache`1.GetItem(System.String[])">
            <summary>
            Get Item by key with number of options
            </summary>
            <param name="options"></param>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.Cache.IEntityCache`1.FindItem(System.String[])">
            <summary>
            Get Item by key with number of options
            </summary>
            <param name="options"></param>
            <param name="key"></param>
            <returns>return null or empty if not exists</returns>
        </member>
        <member name="F:Nistec.Data.Entities.DbContextCommand.DefaultConnectionTimeout">
            <summary>
            The time (in seconds) to wait for a connection to open. The default value is 15 seconds.
            </summary>
        </member>
        <member name="F:Nistec.Data.Entities.DbContextCommand.DefaultCommandTimeout">
            <summary>
            The time (in seconds) to wait for a connection to open. The default value is 30 seconds.
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.#ctor(System.Data.IDbConnection)">
            <summary>
            ctor
            </summary>
            <param name="cnn"></param>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.#ctor(System.String,System.Boolean)">
            <summary>
            ctor DbContextCommand
            </summary>
            <param name="connectionKey"></param>
            <param name="createFromProvider"></param>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.#ctor(System.String,Nistec.Data.DBProvider)">
            <summary>
            ctor DbContextCommand
            </summary>
            <param name="connectionString"></param>
            <param name="provider"></param>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.CreateConnection">
            <summary>
            Create Connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.GetProvider(System.Data.IDbConnection)">
            <summary>
            Get Provider
            </summary>
            <param name="cnn"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.Init(Nistec.Data.IAutoBase)">
            <summary>
            DB Constructor with IAutoBase
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.Init``1">
            <summary>
            DB Constructor with IDbContext
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.CreateCommand(System.String)">
            <summary>
            Create Command
            </summary>
            <param name="cmdText"></param>
            <param name="cnn"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.CreateCommand(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Create Command
            </summary>
            <param name="cmdText"></param>
            <param name="parameters">SqlParameter array key value.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.CreateCommand(System.String,System.Data.IDbDataParameter[],System.Data.CommandType,System.Int32)">
            <summary>
            Create Command
            </summary>
            <param name="cmdText"></param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="commandType"></param>
            <param name="commandTimeOut"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ValidateConnectionSettings">
            <summary>
            Validate if entity has connection properties
            </summary>
            <exception cref="T:Nistec.Data.Entities.EntityException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ConnectionOpen">
            <summary>
            ConnectionOpen
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ConnectionAutoClose(System.Boolean)">
            <summary>
            ConnectionAutoClose
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ConnectionClose">
            <summary>
            ConnectionClose
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.DbContextCommand.HasConnection">
            <summary>
            Get indicate if entity has connection properties
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.DbContextCommand.IsValidConnection">
            <summary>
            Get indicate if the connection is valid
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.DbContextCommand.ConnectionTimeout">
            <summary>
            Get or Set the time to wait while trying to establish a connection before terminating the attempt and generating an error.
            The time (in seconds) to wait for a connection to open. The default value is 15 seconds.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.DbContextCommand.CommandTimeout">
            <summary>
            Get or Set the time to wait while trying to establish a connection before terminating the attempt and generating an error.
            The time (in seconds) to wait for a connection to open. The default value is 30 seconds.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.DbContextCommand.AddWithKey">
            <summary>
                Adds the necessary columns and primary key information to complete the schema.
                For more information about how primary key information is added to a System.Data.DataTable,
                see System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType).To
                function properly with the .NET Framework Data Provider for OLE DB, AddWithKey
                requires that the native OLE DB provider obtains necessary primary key information
                by setting the DBPROP_UNIQUEROWS property, and then determines which columns
                are primary key columns by examining DBCOLUMN_KEYCOLUMN in the IColumnsRowset.
                As an alternative, the user may explicitly set the primary key constraints on
                each System.Data.DataTable. This ensures that incoming records that match existing
                records are updated instead of appended. When using AddWithKey, the .NET Framework
                Data Provider for SQL Server appends a FOR BROWSE clause to the statement being
                executed. The user should be aware of potential side effects, such as interference
                with the use of SET FMTONLY ON statements. See SQL Server Books Online for more
                information.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.DbContextCommand.OwnsConnection">
            <summary>
            Get or Set if <see cref="T:Nistec.Data.Entities.DbContextCommand"/> own the Connection, Default is false
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.DbContextCommand.ConnectionName">
            <summary>
            Get or Set ConnectionName
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.DbContextCommand.ConnectionString">
            <summary>
            Get or Set ConnectionString
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.DbContextCommand.Database">
            <summary>
            Get or Set Database
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.DbContextCommand.Provider">
            <summary>
            Get or Set DBProvider
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteCommandNonQuery(System.String)">
            <summary>
            Executes a command NonQuery and returns the number of rows affected.
            </summary>
            <param name="cmdText">Sql command.</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteCommandNonQuery(System.String,System.Data.IDbDataParameter[],System.Data.CommandType,System.Int32)">
            <summary>
            Executes a command NonQuery and returns the number of rows affected.
            </summary>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteCommandOutput(System.String,System.Data.IDbDataParameter[],System.Data.CommandType,System.Int32)">
            <summary>
            Executes a command NonQuery and returns <see cref="T:Nistec.Data.Entities.EntityCommandResult"/> OutptResults and the number of rows affected.
            </summary>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteCommandReturnValue(System.String,System.Data.IDbDataParameter[],System.Int32,System.Int32)">
            <summary>
            Executes a command NonQuery and returns the ReturnValue from StoredProcedure.
            </summary>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="returnIfNull">Specifies default value to return if null.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.Commit(System.Data.IDbTransaction)">
            <summary>
            Commit transactin, return 1 for commit, -1 if rollback succefully, -2 if rolback failed  
            </summary>
            <returns>return 1 for commit, -1 if rollback succefully, -2 if rolback failed</returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteTransCommandNonQuery(System.String,System.Func{System.Int32,System.Boolean})">
            <summary>
            Executes a command NonQuery and returns the number of rows affected.
            </summary>
            <param name="cmdText">Sql command.</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteTransCommandNonQuery(System.String,System.Data.IDbDataParameter[],System.Func{System.Int32,System.Boolean},System.Data.CommandType,System.Int32,System.Data.IsolationLevel)">
            <summary>
            Executes a command NonQuery and returns the number of rows affected.
            </summary>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="transAction">trnsaction function.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteTransCommandOutput(System.String,System.Data.IDbDataParameter[],System.Action{System.Int32,System.Data.IDbTransaction},System.Data.CommandType,System.Int32,System.Data.IsolationLevel)">
            <summary>
            Executes a command NonQuery and returns <see cref="T:Nistec.Data.Entities.EntityCommandResult"/> OutptResults and the number of rows affected.
            </summary>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteTransCommandReturnValue(System.String,System.Data.IDbDataParameter[],System.Action{System.Int32,System.Data.IDbTransaction},System.Int32,System.Int32,System.Data.IsolationLevel)">
            <summary>
            Executes a command NonQuery and returns the ReturnValue from StoredProcedure.
            </summary>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="returnIfNull">Specifies default value to return if null.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteCommandScalar``1(System.String,System.Data.IDbDataParameter[],``0,System.Data.CommandType,System.Int32)">
            <summary>
            Executes Command and returns T value as scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="returnIfNull">The value will return if result is null.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteCommand``1(System.String,System.Boolean)">
            <summary>
            Executes Command and returns T value (DataSet|DataTable|DataRow).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteCommand``2(System.String,System.Data.IDbDataParameter[],System.Data.CommandType,System.Int32,System.Boolean)">
            <summary>
            Executes Command and returns T value (DataSet|DataTable|DataRow) .
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteCommand``1(System.String,System.Data.IDbDataParameter[],System.Data.CommandType,System.Int32,System.Boolean)">
            <summary>
            Executes Command and returns T value (DataSet|DataTable|DataRow) .
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteCommand``1(System.String,System.Data.IDbDataParameter[],System.String,System.Data.CommandType,System.Int32,System.Boolean)">
            <summary>
            Executes Command and returns T value (DataSet|DataTable|DataRow) .
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="cacheKey">Get or Set data from/to cache.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteDataTable(System.String)">
            <summary>
            Executes Adapter and returns DataTable.
            </summary>
            <param name="mappingName"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteDataTable(System.String,System.Boolean)">
            <summary>
            Executes Adapter and returns DataTable.
            </summary>
            <param name="mappingName"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteDataTable(System.String,System.String,System.Boolean)">
            <summary>
            Executes Adapter and returns DataTable.
            </summary>
            <param name="tableName"></param>
            <param name="cmdText"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteDataTable(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Executes Adapter and returns DataTable.
            </summary>
            <param name="tableName"></param>
            <param name="cmdText"></param>
            <param name="commandTimeout">Timeout in seconds</param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.CreateIDataAdapter(System.Data.IDbCommand)">
            <summary>
            CreateIDataAdapter
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteDataTable(System.Data.IDbCommand,System.String,System.Boolean)">
            <summary>
            Fill DataTable using DbDataAdapter
            </summary>
            <param name="cmd"></param>
            <param name="mappingName"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteDataSet(System.Data.IDbCommand,System.String,System.Boolean)">
            <summary>
            Fill DataTable using DbDataAdapter
            </summary>
            <param name="cmd"></param>
            <param name="mappingName"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteDataOrScalar``1(System.Data.IDbCommand,System.String,System.Boolean)">
            <summary>
            Executes command and returns T value (DataSet|DataTable|DataRow|IEntityItem) or any type for scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd"></param>
            <param name="mappingName"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteDataList``2(System.Data.IDbCommand,System.String,System.Boolean)">
            <summary>
            Executes command and returns T value (DataSet|DataTable|DataRow|IEntityItem|List of IEntityItem) or any type for scalar.
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="cmd"></param>
            <param name="mappingName"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.GetCommand(System.String)">
            <summary>
            GetCommand
            </summary>
            <param name="cmdText"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteReader(System.String,System.Data.CommandBehavior)">
            <summary>
            Execute Reader
            </summary>
            <param name="cmdText">Sql command.</param>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.ExecuteReader(System.String,System.Data.CommandBehavior,System.Data.IDbDataParameter[])">
            <summary>
            Execute Reader
            </summary>
            <param name="cmdText"></param>
            <param name="behavior"></param>
            <param name="parameters">SqlParameter array key value.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextCommand.CreateCommand(System.String,System.Data.IDbConnection,System.Data.IDbDataParameter[])">
            <summary>
            Create Command
            </summary>
            <param name="cmdText"></param>
            <param name="cnn"></param>
            <param name="parameters">SqlParameter array key value.</param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Entities.EntityDbArgs">
            <summary>
            Represent db context for entities.
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbArgs.#ctor">
            <summary>
            Crate a new instance of <see cref="T:Nistec.Data.Entities.EntityDbArgs"/>
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbArgs.#ctor(Nistec.Data.Entities.EntityAttribute)">
            <summary>
             Crate a new instance of <see cref="T:Nistec.Data.Entities.EntityDbArgs"/>
            </summary>
            <param name="attr"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbArgs.#ctor(System.String,System.String,System.String)">
            <summary>
             Crate a new instance of <see cref="T:Nistec.Data.Entities.EntityDbArgs"/>
            </summary>
            <param name="mappingName"></param>
            <param name="connectionKey"></param>
            <param name="columns"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbArgs.#ctor(System.String,System.String,System.String,Nistec.Data.Entities.EntitySourceType,Nistec.Data.Entities.EntityKeys,System.String)">
            <summary>
             Crate a new instance of <see cref="T:Nistec.Data.Entities.EntityDbArgs"/>
            </summary>
            <param name="entityName"></param>
            <param name="mappingName"></param>
            <param name="connectionKey"></param>
            <param name="sourceType"></param>
            <param name="keys"></param>
            <param name="columns"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbArgs.#ctor(Nistec.Data.Entities.IDbContext,System.String,System.String,Nistec.Data.Entities.EntitySourceType,Nistec.Data.Entities.EntityKeys,System.String)">
            <summary>
             Crate a new instance of <see cref="T:Nistec.Data.Entities.EntityDbArgs"/>
            </summary>
            <param name="db"></param>
            <param name="entityName"></param>
            <param name="mappingName"></param>
            <param name="sourceType"></param>
            <param name="keys"></param>
            <param name="columns"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbArgs.#ctor(Nistec.Data.Entities.IDbContext,System.String,Nistec.Data.Entities.EntityKeys,System.String)">
            <summary>
             Crate a new instance of <see cref="T:Nistec.Data.Entities.EntityDbArgs"/>
            </summary>
            <param name="db"></param>
            <param name="mappingName"></param>
            <param name="keys"></param>
            <param name="columns"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbArgs.#ctor(Nistec.Data.Entities.IDbContext,System.String,Nistec.Generic.KeySet,System.String)">
            <summary>
             Crate a new instance of <see cref="T:Nistec.Data.Entities.EntityDbArgs"/>
            </summary>
            <param name="db"></param>
            <param name="mappingName"></param>
            <param name="keys"></param>
            <param name="columns"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbArgs.Dispose">
            <summary>
            This object will be cleaned up by the Dispose method. 
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbArgs.Context">
            <summary>
            Get <see cref="T:Nistec.Data.Entities.IDbContext"/> Context.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Entities.EntityDbArgs.EntityName">
            <summary>
            Get or Set entity name.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityDbArgs.MappingName">
            <summary>
            Get or Set mapping name.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityDbArgs.Columns">
            <summary>
            Get or Set columns names.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityDbArgs.ConnectionKey">
            <summary>
            Get or Set connection key.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityDbArgs.Keys">
            <summary>
            Get or Set entity keys.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityDbArgs.SourceType">
            <summary>
            Get or Set <see cref="T:Nistec.Data.Entities.EntitySourceType"/> source type.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityDbArgs.EntityCulture">
            <summary>
            Get or Set current culture
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityDbArgs.EntityKeys">
            <summary>
            Get <see cref="P:Nistec.Data.Entities.EntityDbArgs.EntityKeys"/>.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityDbArgs.HasConnection">
            <summary>
            Get indicate if entity has connection properties
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityDbArgs.Args">
            <summary>
            Get or Set entity args.
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbArgs.EntityWrite(System.IO.Stream,Nistec.Serialization.IBinaryStreamer)">
            <summary>
            Write the current object include the body and properties to stream using <see cref="T:Nistec.Serialization.IBinaryStreamer"/>, This method is a part of <see cref="T:Nistec.Serialization.ISerialEntity"/> implementation.
            </summary>
            <param name="stream"></param>
            <param name="streamer"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbArgs.EntityRead(System.IO.Stream,Nistec.Serialization.IBinaryStreamer)">
            <summary>
            Read stream to the current object include the body and properties using <see cref="T:Nistec.Serialization.IBinaryStreamer"/>, This method is a part of <see cref="T:Nistec.Serialization.ISerialEntity"/> implementation.
            </summary>
            <param name="stream"></param>
            <param name="streamer"></param>
        </member>
        <member name="T:Nistec.Data.Entities.EntityRecord">
            <summary>
             The class represent dynamic entity
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityRecord.Count">
            <summary>
            Get the number of elements
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityRecord.Get(System.String)">
            <summary>
            GetValue
            </summary>
            <param name="field">the column name in data row</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityRecord.Get``1(System.String)">
            <summary>
            GetValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <returns>T</returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityRecord.Get``1(System.String,``0)">
            <summary>
            GetValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <returns>if null or error return defaultValue</returns>
            <returns>T</returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityRecord.TryGetValue``1(System.String,``0@)">
             <summary>
                 Gets the value associated with the specified key.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="field">The key whose value to get.</param>
             <param name="value">
                 When this method returns, the value associated with the specified key, if
                 the key is found; otherwise, the default value for the type of the value
                 parameter. This parameter is passed uninitialized.
            </param>
             <returns>
                 true if the object that implements System.Collections.Generic.IDictionary
                 contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityRecord.TryGetValue(System.String,System.Object@)">
             <summary>
                 Gets the value associated with the specified key.
             </summary>
             <param name="field">The key whose value to get.</param>
             <param name="value">
                 When this method returns, the value associated with the specified key, if
                 the key is found; otherwise, the default value for the type of the value
                 parameter. This parameter is passed uninitialized.
            </param>
             <returns>
                 true if the object that implements System.Collections.Generic.IDictionary
                 contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityRecord.TryGetValue(System.String,System.Type,System.Object@)">
             <summary>
              Gets the value associated with the specified key.
             </summary>
             <param name="field">The key whose value to get.</param>
             <param name="type"></param>
             <param name="value">
                 When this method returns, the value associated with the specified key, if
                 the key is found; otherwise, the default value for the type of the value
                 parameter. This parameter is passed uninitialized.
            </param>
             <returns>
                 true if the object that implements System.Collections.Generic.IDictionary
                 contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityRecord.Set``1(System.String,``0)">
            <summary>
            SetValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <param name="value">the T value to insert</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityRecord.Set(System.String,System.Object)">
            <summary>
            SetValue
            </summary>
            <param name="field">the column name in data row</param>
            <param name="value">the value to insert</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityRecord.Set(System.Object,System.Object)">
            <summary>
            SetValue
            </summary>
            <param name="field">the column name in data row</param>
            <param name="value">the value to insert</param>
        </member>
        <member name="T:Nistec.Data.Entities.EntityMappingAttribute">
            <summary>
            This attribute defines properties of DbContext Attribute
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityMappingAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityMappingAttribute"/> class
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityMappingAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityMappingAttribute"/> class
            </summary>
            <param name="mappingName"></param>
            <param name="viewName"></param>
            <param name="connectionName"></param>
            <param name="entityName"></param>
            <param name="lang"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityMappingAttribute.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityMappingAttribute"/> class with default cache ttl
            </summary>
            <param name="mappingName"></param>
            <param name="viewName"></param>
            <param name="entityName"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityMappingAttribute.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityMappingAttribute"/> class
            </summary>
            <param name="mappingName"></param>
            <param name="viewName"></param>
            <param name="cacheTtl"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityMappingAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityMappingAttribute"/> class
            </summary>
            <param name="mappingName"></param>
        </member>
        <member name="P:Nistec.Data.Entities.EntityMappingAttribute.ConnectionKey">
            <summary>
            Property ConnectionKey. 
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityMappingAttribute.MappingName">
            <summary>
            Parameter MappingName represent the DB entity (Table|View).
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityMappingAttribute.ViewName">
            <summary>
            Parameter ViewName represent the DB entity (View).
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityMappingAttribute.EntityName">
            <summary>
            Get or Set EntityName
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityMappingAttribute.Lang">
            <summary>
            Get or Set EntityName
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityMappingAttribute.PrimaryFields">
            <summary>
            Get or Set Entity Primary Fields
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityMappingAttribute.ProcGet">
            <summary>
            Get or Set get procedure
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityMappingAttribute.ProcDelete">
            <summary>
            Get or Set delete procedure
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityMappingAttribute.ProcUpdate">
            <summary>
            Get or Set update procedure
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityMappingAttribute.ProcInsert">
            <summary>
            Get or Set insert procedure
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityMappingAttribute.ProcUpsert">
            <summary>
            Get or Set insert or update procedure
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityMappingAttribute.ProcListView">
            <summary>
            Get or Set list view procedure
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityMappingAttribute.IsViewNameDefined">
            <summary>
            Is MappingName Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityMappingAttribute.IsMappingNameDefined">
            <summary>
            Is MappingName Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityMappingAttribute.IsConnectionKeyDefined">
            <summary>
            Is ConnectionKey Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityMappingAttribute.IsValid">
            <summary>
            Is Property has valid Definition
            </summary>
        </member>
        <member name="T:Nistec.Data.Entities.EntityDbContext">
            <summary>
            Represent db context for entities.
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbContext.Get``1(System.String,System.String,Nistec.Data.Entities.EntitySourceType,Nistec.Data.Entities.EntityKeys)">
            <summary>
            Create EntityDbContext using new instance of  <see cref="T:Nistec.Data.Entities.DbContext"/>
            </summary>
            <typeparam name="Dbc"></typeparam>
            <param name="entityName"></param>
            <param name="mappingName"></param>
            <param name="sourceType"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbContext.Get``1(System.String,Nistec.Data.Entities.EntityKeys)">
            <summary>
            Create EntityDbContext using new instance of  <see cref="T:Nistec.Data.Entities.DbContext"/>
            </summary>
            <typeparam name="Dbc"></typeparam>
            <param name="mappingName"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbContext.Get(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Create EntityDbContext using entity object and culture.
            </summary>
            <param name="ientity"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbContext.#ctor">
            <summary>
            Crate a new instance of <see cref="T:Nistec.Data.Entities.EntityDbContext"/>
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbContext.#ctor(Nistec.Data.Entities.EntityAttribute)">
            <summary>
             Crate a new instance of <see cref="T:Nistec.Data.Entities.EntityDbContext"/>
            </summary>
            <param name="attr"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbContext.#ctor(System.String,System.String,System.String)">
            <summary>
             Crate a new instance of <see cref="T:Nistec.Data.Entities.EntityDbContext"/>
            </summary>
            <param name="mappingName"></param>
            <param name="connectionKey"></param>
            <param name="columns"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbContext.#ctor(System.String,System.String,System.String,Nistec.Data.Entities.EntitySourceType,Nistec.Data.Entities.EntityKeys,System.String)">
            <summary>
             Crate a new instance of <see cref="T:Nistec.Data.Entities.EntityDbContext"/>
            </summary>
            <param name="entityName"></param>
            <param name="mappingName"></param>
            <param name="connectionKey"></param>
            <param name="sourceType"></param>
            <param name="keys"></param>
            <param name="columns"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbContext.#ctor(Nistec.Data.Entities.IDbContext,System.String,System.String,Nistec.Data.Entities.EntitySourceType,Nistec.Data.Entities.EntityKeys,System.String)">
            <summary>
             Crate a new instance of <see cref="T:Nistec.Data.Entities.EntityDbContext"/>
            </summary>
            <param name="db"></param>
            <param name="entityName"></param>
            <param name="mappingName"></param>
            <param name="sourceType"></param>
            <param name="keys"></param>
            <param name="columns"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbContext.#ctor(Nistec.Data.Entities.IDbContext,System.String,Nistec.Data.Entities.EntityKeys,System.String)">
            <summary>
             Crate a new instance of <see cref="T:Nistec.Data.Entities.EntityDbContext"/>
            </summary>
            <param name="db"></param>
            <param name="mappingName"></param>
            <param name="keys"></param>
            <param name="columns"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbContext.#ctor(Nistec.Data.Entities.IDbContext,System.String,Nistec.Generic.KeySet,System.String)">
            <summary>
             Crate a new instance of <see cref="T:Nistec.Data.Entities.EntityDbContext"/>
            </summary>
            <param name="db"></param>
            <param name="mappingName"></param>
            <param name="keys"></param>
            <param name="columns"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbContext.Dispose">
            <summary>
            This object will be cleaned up by the Dispose method. 
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbContext.Context">
            <summary>
            Get <see cref="T:Nistec.Data.Entities.IDbContext"/> Context.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Entities.EntityDbContext.EntityName">
            <summary>
            Get or Set entity name.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityDbContext.MappingName">
            <summary>
            Get or Set mapping name.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityDbContext.Columns">
            <summary>
            Get or Set columns names.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityDbContext.ConnectionKey">
            <summary>
            Get or Set connection key.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityDbContext.Keys">
            <summary>
            Get or Set entity keys.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityDbContext.SourceType">
            <summary>
            Get or Set <see cref="T:Nistec.Data.Entities.EntitySourceType"/> source type.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityDbContext.EntityCulture">
            <summary>
            Get or Set current culture
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityDbContext.EntityKeys">
            <summary>
            Get <see cref="P:Nistec.Data.Entities.EntityDbContext.EntityKeys"/>.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityDbContext.HasConnection">
            <summary>
            Get indicate if entity has connection properties
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityDbContext.Localization">
            <summary>
            Get <see cref="T:Nistec.Generic.ILocalizer"/> from <see cref="T:Nistec.Data.Entities.DbContext"/> which usful for multi language,
            if  EntityDbContext not define or DbContext not define return null
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbContext.GetLocalizer``1">
            <summary>
            Get <see cref="T:Nistec.Generic.ILocalizer"/> from <see cref="T:Nistec.Data.Entities.DbContext"/> which usful for multi language,
            if  EntityDbContext not define or DbContext not define return null
            </summary>
            <typeparam name="Erm"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDbContext.ValidateContext">
            <summary>
            Validate if entity has connection properties
            </summary>
            <exception cref="T:Nistec.Data.Entities.EntityException"></exception>
        </member>
        <member name="T:Nistec.Data.Entities.Config.EntityConfig">
             <summary>
             Entities configuration
             </summary>
             <example>
            <section name="EntitySettings" type="Nistec.Data.Entities.Config.EntityConfig, Nistec.Data, Version=4.0.2.0, Culture=neutral, PublicKeyToken=734a739868a76423" requirePermission="false"/>
            <EntitySettings>
               <Entities>
                 <Entity Name="UserProfile" MappingName="UserProfile" ConnectionKey="Default" Mode="Config" SourceType="Table" EntityKey="UserId" LangResources=""/>
                 <Entity Name="UserAuth" MappingName="sp_User_Auth" ConnectionKey="Default" Mode="Config" SourceType="Procedure" EntityKey="UserId" LangResources=""/>
              </Entities>
            </EntitySettings>
             </example>    
        </member>
        <member name="P:Nistec.Data.Entities.Config.EntityConfig.Settings">
            <summary>
            Get the <see cref="T:Nistec.Data.Entities.Config.EntityConfig"/>
            </summary>
        </member>
        <member name="T:Nistec.Data.Entities.Config.EntityConfigItems">
            <summary>
            Represents a configuration element containing a collection of child elements.
            </summary>
        </member>
        <member name="T:Nistec.Data.Entities.Config.EntityConfigItem">
             <summary>
             Represents a entity section  settings within a configuration file.
             </summary>
             <example>
            <section name="EntitySettings" type="Nistec.Data.Entities.Config.EntityConfig, Nistec.Data, Version=4.0.2.0, Culture=neutral, PublicKeyToken=734a739868a76423" requirePermission="false"/>
            <EntitySettings>
               <Entities>
                 <Entity Name="UserProfile" MappingName="UserProfile" ConnectionKey="Default" Mode="Config" SourceType="Table" EntityKey="UserId" LangResources=""/>
                 <Entity Name="UserAuth" MappingName="sp_User_Auth" ConnectionKey="Default" Mode="Config" SourceType="Procedure" EntityKey="UserId" LangResources=""/>
              </Entities>
            </EntitySettings>
             </example>
        </member>
        <member name="P:Nistec.Data.Entities.Config.EntityConfigItem.EntityName">
            <summary>Get the entity name</summary>
        </member>
        <member name="P:Nistec.Data.Entities.Config.EntityConfigItem.ConnectionKey">
            <summary>Get connection key</summary>
        </member>
        <member name="P:Nistec.Data.Entities.Config.EntityConfigItem.MappingName">
            <summary>Get the mapping name</summary>
        </member>
        <member name="P:Nistec.Data.Entities.Config.EntityConfigItem.LangResources">
            <summary>Parameter LangResources. usefull for multi lang</summary>
        </member>
        <member name="P:Nistec.Data.Entities.Config.EntityConfigItem.Mode">
            <summary>Parameter EntityMode represent the entity mode.</summary>
        </member>
        <member name="P:Nistec.Data.Entities.Config.EntityConfigItem.SourceType">
            <summary>Parameter EntitySourceType represent the entity source type.</summary>
        </member>
        <member name="P:Nistec.Data.Entities.Config.EntityConfigItem.EntityKey">
            <summary>Get entity keys</summary>
            <example>{"ID","Category"}</example>
        </member>
        <member name="T:Nistec.Data.Entities.Config.EntityConfigCacheItem">
            <summary>
            Represents a entity cache section  settings within a configuration file.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.Config.EntityConfigCacheItem.Enable">
            <summary>Get the indicate if entity cache enabled</summary>
        </member>
        <member name="P:Nistec.Data.Entities.Config.EntityConfigCacheItem.Timeout">
            <summary>Get cache timeout in minutes</summary>
        </member>
        <member name="P:Nistec.Data.Entities.Config.EntityConfigCacheItem.Protocol">
            <summary>Get the remote cache network protocol</summary>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextExtension.ToEntity``1(Nistec.Generic.GenericRecord)">
            <summary>
            Create Entity from <see cref="T:Nistec.Generic.GenericRecord"/>
            </summary>
            <param name="record"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextExtension.ToEntity(Nistec.Generic.GenericRecord,System.Type)">
            <summary>
            Create Entity from <see cref="T:Nistec.Generic.GenericRecord"/>
            </summary>
            <param name="record"></param>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextExtension.ToEntity``1(System.Data.DataRow)">
            <summary>
            Create Entity from <see cref="T:System.Data.DataRow"/>
            </summary>
            <param name="dr"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextExtension.EntityList``1(System.Data.DataTable)">
            <summary>
            Create Entity collection from <see cref="T:System.Data.DataTable"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextExtension.ToSimpleList``1(System.Data.DataTable,System.String)">
            <summary>
            Create Entity collection from <see cref="T:System.Data.DataTable"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dt"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextExtension.ToEntity(System.Data.DataRow,System.Type)">
            <summary>
            Create Entity from <see cref="T:System.Data.DataRow"/>
            </summary>
            <param name="dr"></param>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextExtension.ToDictionary(System.Data.DataRow)">
            <summary>
            Convert data row to dictionary
            </summary>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextExtension.EntityList(System.Data.DataTable,System.Type)">
            <summary>
            Create Entity collection from <see cref="T:System.Data.DataTable"/>
            </summary>
            <param name="dt"></param>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextExtension.ToEntity``1(Nistec.Data.Entities.EntityAttribute,Nistec.Data.DataFilter)">
            <summary>
            Get Entity using <see cref="T:Nistec.Data.Entities.EntityAttribute"/> attribute and <see cref="T:Nistec.Data.DataFilter"/> filter. 
            </summary>
            <param name="attribute"></param>
            <param name="filter"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Reflection.CustomAttributeFormatException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextExtension.ToEntity``1(Nistec.Data.Entities.EntityAttribute,System.Object[])">
            <summary>
            Get Entity using <see cref="T:Nistec.Data.Entities.EntityAttribute"/> attribute and keys. 
            </summary>
            <param name="attribute"></param>
            <param name="keys"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Reflection.CustomAttributeFormatException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextExtension.ToEntity``1(Nistec.Data.Entities.EntityAttribute,Nistec.Generic.KeySet)">
            <summary>
            Get Entity using <see cref="T:Nistec.Data.Entities.EntityAttribute"/> attribute and keys. 
            </summary>
            <param name="attribute"></param>
            <param name="keys"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Reflection.CustomAttributeFormatException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextExtension.EntityList``1(Nistec.Data.Entities.EntityDbContext,System.Int32)">
            <summary>
            Create Entity collection using Entity Keys
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="top"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextExtension.EntityList``1(Nistec.Data.Entities.EntityDbContext,Nistec.Data.DataFilter)">
            <summary>
            Create Entity collection using <see cref="T:Nistec.Data.DataFilter"/> filter with parameters
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="filter"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextExtension.EntityList``1(Nistec.Data.Entities.EntityDbContext,System.String,System.Data.IDbDataParameter[],System.Data.CommandType)">
            <summary>
            Create Entity collection using command
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="commandText"></param>
            <param name="parameters"></param>
            <param name="cmdType"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextExtension.EntityList``1(Nistec.Data.Entities.EntityDbContext,System.Data.DataTable)">
            <summary>
            Create Entity collection using DataTable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="db"></param>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`2.SaveChanges(System.Boolean)">
            <summary>
            Save entity changes to update or insert if not exists.(EntitySaveChanges)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Entities.EntityContext`1">
            <summary>
            Represent Entity Context generic class 
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.#ctor(Nistec.Data.Entities.EntityDbContext,`0)">
            <summary>
            Initialize a new instance of EntityContext with specified <see cref="T:Nistec.Data.Entities.EntityDbContext"/>
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:Nistec.Data.Entities.EntityContext"/> using array of entity keys
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.#ctor(System.Object[])">
            <summary>
            Initialize a new instance of <see cref="T:Nistec.Data.Entities.EntityContext"/> using array of entity keys
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.#ctor(Nistec.Data.Entities.GenericEntity)">
            <summary>
            Initialize a new instance of <see cref="T:Nistec.Data.Entities.EntityContext"/> using <see cref="T:Nistec.Data.Entities.GenericEntity"/>.
            </summary>
            <param name="ge"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.#ctor(`0)">
            <summary>
            Initialize a new instance of <see cref="T:Nistec.Data.Entities.EntityContext"/> using entity instance
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.SetChanged">
            <summary>
            Set the current instance of <see cref="T:Nistec.Data.Entities.EntityContext"/>
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.Set(`0)">
            <summary>
            Set the current instance of <see cref="T:Nistec.Data.Entities.EntityContext"/>
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.SetChanged(`0,System.Boolean)">
            <summary>
            Set the current instance of <see cref="T:Nistec.Data.Entities.EntityContext"/>
            </summary>
            <param name="instance"></param>
            <param name="setChanges"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.SetByParam(System.Object[])">
            <summary>
            Set the current instance of <see cref="T:Nistec.Data.Entities.EntityContext"/> using EntityMap and EntityKeys attributes.
            </summary>
            <param name="keyValueParameters">keys Parameters.</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.SetEntity(System.Object[])">
            <summary>
            Set the current instance of <see cref="T:Nistec.Data.Entities.EntityContext"/> using EntityMap and EntityKeys attributes.
            </summary>
            <param name="keys">keys Parameters.</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.Set(Nistec.Data.DataFilter)">
            <summary>
            Set the current instance of <see cref="T:Nistec.Data.Entities.EntityContext"/> using <see cref="T:Nistec.Data.DataFilter"/> filter.
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.Set(System.String,System.Data.IDbDataParameter[],System.Data.CommandType)">
            <summary>
            Set the current instance of <see cref="T:Nistec.Data.Entities.EntityContext"/> using command with a <see cref="T:Nistec.Data.DataParameter"/> key Value Parameters.
            </summary>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">Array of key value.</param>
            <param name="cmdType">Sql command.</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.Set(Nistec.Generic.GenericRecord)">
            <summary>
            Set the current instance of <see cref="T:Nistec.Data.Entities.EntityContext"/> using <see cref="T:Nistec.Generic.GenericRecord"/> source.
            </summary>
            <param name="gr"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.Create(Nistec.Data.DataFilter)">
            <summary>
             Set the current instance of <see cref="T:Nistec.Data.Entities.EntityContext"/> using EntityMap and <see cref="T:Nistec.Data.DataFilter"/> filter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.SaveChanges(`0,Nistec.Data.UpdateCommandType)">
            <summary>
            Save all Changes to DB and return number of AffectedRecords
            If not <see cref="!:IsDirty"/> which mean no changed has been made return 0
            </summary>
            <param name="instance"></param>
            <param name="cmdType"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.SaveChanges(Nistec.Data.UpdateCommandType)">
            <summary>
            Save all Changes by <see cref="T:Nistec.Data.UpdateCommandType"/> specific command to DB and return number of AffectedRecords
            If not <see cref="!:IsDirty"/> which mean no changed has been made return 0
            </summary>
            <param name="commandType"></param>
            <returns></returns>
            <exception cref="T:Nistec.Data.Entities.EntityException"></exception>
            <exception cref="T:Nistec.Data.DalException"></exception>
        </member>
        <member name="P:Nistec.Data.Entities.EntityContext`1.Entity">
            <summary>
            Get the current entity
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.EntityList">
            <summary>
            Create Entity collection using Entity Keys
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.EntityList(System.Object[])">
            <summary>
            Create Entity collection using Entity Keys
            </summary>
            <param name="keyValueParameters"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.EntityList(Nistec.Data.DataFilter)">
            <summary>
            Create Entity collection using <see cref="T:Nistec.Data.DataFilter"/> filter
            </summary>
            <param name="filter"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.EntityListToJson(Nistec.Data.DataFilter)">
            <summary>
            Create Entity collection as json using <see cref="T:Nistec.Data.DataFilter"/> filter
            </summary>
            <param name="filter"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.CreateEntityAttributes">
            <summary>
            Create new instance off <see cref="T:Nistec.Data.Entities.EntityProperties"/>
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.CreateFieldsChanges(System.Boolean)">
            <summary>
            Create new instance of <see cref="T:Nistec.Data.Entities.EntityFieldsChanges"/>
            </summary>
            <param name="initChanges"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext`1.ActiveProperties">
            <summary>
            Get ActiveProperties that implement <see cref="T:Nistec.Data.Entities.EntityPropertyAttribute"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Entities.EntityContext">
            <summary>
            Represent Entity class 
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.Get``1(Nistec.Data.Entities.EntityAttribute,Nistec.Data.DataFilter)">
            <summary>
            Get Entity using <see cref="T:Nistec.Data.Entities.EntityAttribute"/> attribute and <see cref="T:Nistec.Data.DataFilter"/> filter. 
            </summary>
            <param name="attribute"></param>
            <param name="filter"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Reflection.CustomAttributeFormatException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.Get``1(Nistec.Data.Entities.EntityAttribute,System.Object[])">
            <summary>
            Get Entity using <see cref="T:Nistec.Data.Entities.EntityAttribute"/> attribute and keys. 
            </summary>
            <param name="attribute"></param>
            <param name="keys"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Reflection.CustomAttributeFormatException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.Get``1(Nistec.Data.Entities.EntityAttribute,Nistec.Generic.KeySet)">
            <summary>
            Get Entity using <see cref="T:Nistec.Data.Entities.EntityAttribute"/> attribute and keys. 
            </summary>
            <param name="attribute"></param>
            <param name="keys"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Reflection.CustomAttributeFormatException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.Get``1(Nistec.Generic.GenericRecord)">
            <summary>
            Create Entity from <see cref="T:Nistec.Generic.GenericRecord"/>
            </summary>
            <param name="record"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.Dispose">
            <summary>
            This object will be cleaned up by the Dispose method. 
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.#ctor(Nistec.Data.Entities.EntityDbContext)">
            <summary>
            Initialize a new instance of EntityContext with specified <see cref="T:Nistec.Data.Entities.EntityDbContext"/>
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.#ctor">
            <summary>
            ctor for serialization
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initialize a new instance of EntityContext with specified culture
            </summary>
            <param name="culture"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.#ctor(System.Object[])">
            <summary>
            Initialize a new instance of ActiveEntity using array of entity keys
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.#ctor(System.Data.DataRow)">
            <summary>
            Initialize a new instance of ActiveEntity with specified DataRow
            </summary>
            <param name="dr"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.#ctor(System.Collections.IDictionary)">
            <summary>
            Initialize a new instance of ActiveEntity with specified IDictionary
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.EntityBind">
            <summary>
            Bind to EntityDbContext, Occured on constrauctor
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.Init(Nistec.Data.DataFilter)">
            <summary>
            Init entity using command with a <see cref="T:Nistec.Data.DataFilter"/> key Value Parameters.
            </summary>
            <param name="filter">Array of key value.</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.Init(System.String,System.Data.IDbDataParameter[],System.Data.CommandType)">
            <summary>
            Init entity using command and <see cref="T:System.Data.IDbDataParameter"/> Parameters.
            </summary>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="cmdType">Specifies how a command string is interpreted.</param>
        </member>
        <member name="P:Nistec.Data.Entities.EntityContext.EntityRecord">
            <summary>
            Get or Set properties values as IDictionary
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.SetDb``1(System.String,System.String,Nistec.Data.Entities.EntitySourceType,Nistec.Data.Entities.EntityKeys)">
            <summary>
            Init EntityDbContext using current instance of <see cref="T:Nistec.Data.Entities.DbContext"/>
            </summary>
            <typeparam name="Dbc"></typeparam>
            <param name="entityName"></param>
            <param name="mappingName"></param>
            <param name="sourceType"></param>
            <param name="keys"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.SetDb``1(System.String,Nistec.Data.Entities.EntitySourceType,Nistec.Data.Entities.EntityKeys)">
            <summary>
            Set the current of <see cref="T:Nistec.Data.Entities.EntityDbContext"/> using current instance of <see cref="T:Nistec.Data.Entities.DbContext"/>
            </summary>
            <typeparam name="Dbc"></typeparam>
            <param name="mappingName"></param>
            <param name="sourceType"></param>
            <param name="entityKeys"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.SetDb``1(System.String,Nistec.Data.Entities.EntityKeys)">
            <summary>
            Set the current of <see cref="T:Nistec.Data.Entities.EntityDbContext"/> using current instance of <see cref="T:Nistec.Data.Entities.DbContext"/>
            </summary>
            <typeparam name="Dbc"></typeparam>
            <param name="mappingName"></param>
            <param name="entityKeys"></param>
        </member>
        <member name="P:Nistec.Data.Entities.EntityContext.EntityDb">
            <summary>
            Get EntityDbContext
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.ValidateEntityDb">
            <summary>
            Validate if entity has connection properties
            </summary>
            <exception cref="T:Nistec.Data.Entities.EntityException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.HasConnection">
            <summary>
            Get indicate if entity has connection properties
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.CreateEntityAttributes">
            <summary>
            Create new instance off <see cref="P:Nistec.Data.Entities.EntityContext.EntityProperties"/>
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityContext.EntityProperties">
            <summary>
            Get EntityProperties
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.ActiveProperties">
            <summary>
            Get ActiveProperties that implement <see cref="T:Nistec.Data.Entities.EntityPropertyAttribute"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.Refresh">
            <summary>
            Refresh
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.ExecuteCommand``1(System.String,System.Data.IDbDataParameter[],System.Data.CommandType)">
            <summary>
            Executes Command and returns T value (DataSet|DataTable|DataRow) or scalar value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.ExecuteNonQuery(System.String,System.Data.IDbDataParameter[],System.Data.CommandType)">
            <summary>
            Executes a command NonQuery and returns the number of rows affected.
            </summary>
            <param name="commandText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.GetFieldsChanged">
            <summary>
            Get Fields Changes
            </summary>
            <param name="isInsert"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.SaveChanges">
            <summary>
            Save all Changes to DB and return number of AffectedRecords
            If not <see cref="!:IsDirty"/> which mean no changed has been made return 0
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.CreateFieldsChanges(System.Boolean)">
            <summary>
            Create new instance of <see cref="T:Nistec.Data.Entities.EntityFieldsChanges"/>
            </summary>
            <param name="initChanges"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityContext.SaveChanges(Nistec.Data.UpdateCommandType)">
            <summary>
            Save all Changes by <see cref="T:Nistec.Data.UpdateCommandType"/> specific command to DB and return number of AffectedRecords
            If not <see cref="!:IsDirty"/> which mean no changed has been made return 0
            </summary>
            <param name="commandType"></param>
            <returns></returns>
            <exception cref="T:Nistec.Data.Entities.EntityException"></exception>
            <exception cref="T:Nistec.Data.DalException"></exception>
        </member>
        <member name="T:Nistec.Data.Entities.ValidatorAttribute">
            <summary>
            This attribute defines properties of method's properties
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.ValidatorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.ValidatorAttribute"/> class
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.ValidatorAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.ValidatorAttribute"/> class
            </summary>
            <param name="name">Is a value of <see cref="P:Nistec.Data.Entities.ValidatorAttribute.Name"/> property</param>
            <param name="required">Is required property</param>
        </member>
        <member name="M:Nistec.Data.Entities.ValidatorAttribute.#ctor(System.String,System.Boolean,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.ValidatorAttribute"/> class with the specified arguments.
            </summary>
            <param name="name">Is a value of <see cref="P:Nistec.Data.Entities.ValidatorAttribute.Name"/> property</param>
            <param name="required">Is required property</param>
            <param name="minValue">min value property</param>
            <param name="maxValue">max value property</param>
        </member>
        <member name="M:Nistec.Data.Entities.ValidatorAttribute.GetAttributeBuilder(Nistec.Data.Entities.ValidatorAttribute)">
            <summary>
            An attribute builder method
            </summary>
            <param name="attr"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Entities.ValidatorAttribute.Name">
            <summary>
            Parameter name.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.ValidatorAttribute.Langs">
            <summary>
            Parameter langs.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.ValidatorAttribute.DefaultLang">
            <summary>
            Parameter default lang.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.ValidatorAttribute.RegexPattern">
            <summary>
            Parameter RegexPattern.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.ValidatorAttribute.Required">
            <summary>
            Indicate if parameter is required.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.ValidatorAttribute.RequiredOperation">
            <summary>
            Indicate if parameter is required by operation.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.ValidatorAttribute.RequiredVar">
            <summary>
            Indicate if parameter required is vari.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.ValidatorAttribute.MinValue">
            <summary>
            Indicate the parameter min value.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.ValidatorAttribute.MaxValue">
            <summary>
            Indicate the parameter max value.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.ValidatorAttribute.IsNameDefined">
            <summary>
            Is Name Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.ValidatorAttribute.IsLangsDefined">
            <summary>
            Is Langs Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.ValidatorAttribute.IsMinValueDefined">
            <summary>
            Is MinValue Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.ValidatorAttribute.IsMaxValueDefined">
            <summary>
            Is MaxValue Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.ValidatorAttribute.IsRangeDefined">
            <summary>
            Is MaxValue Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.ValidatorAttribute.IsRegexDefined">
            <summary>
            Is Regex Defined
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityValidator.Validate(System.Object,System.String,System.String,System.Object[])">
            <summary>
            Validate entity.
            </summary>
            <param name="Entity"></param>
            <param name="title"></param>
            <param name="lang"></param>
            <exception cref="T:Nistec.Data.Entities.EntityException"></exception>
        </member>
        <member name="T:Nistec.Data.Entities.EntityProperties">
            <summary>
            EntityProperties Properties collection
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityProperties.ToDataTable(System.String)">
            <summary>
            Display EntityFields as DataTable with rows 
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityProperties.ToHtmlTable(System.String,System.String)">
            <summary>
            Display EntityFields as Html Table, 
            class styles :styledTable,styledTableHeader,styledRowKey,styledRowValue
            </summary>
            <param name="headerName"></param>
            <param name="headerValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityProperties.ToHtmlTable``1(``0,System.String,System.String,System.Boolean)">
            <summary>
            Display EntityFields as Html Table, 
            class styles :styledTable,styledTableHeader,styledRowKey,styledRowValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="headerName"></param>
            <param name="headerValue"></param>
            <param name="hasCaptionOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityProperties.ToXml(System.String)">
            <summary>
            Display EntityFields as Xml string, 
            </summary>
            <param name="rootName"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityProperties.ToXmlDocument(System.String)">
            <summary>
            Display EntityFields as Xml document, 
            </summary>
            <param name="entityName"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityProperties.ToDictionary(System.Boolean)">
            <summary>
            Display EntityFields as IDictionary 
            </summary>
            <param name="valueAsString"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityProperties.ToTableSchema(System.String)">
            <summary>
            Display EntityFields as DataTable schema 
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityProperties.ToVerticalView(System.String,System.String)">
            <summary>
            Display EntityFields as Vertical view, 
            </summary>
            <param name="headerName"></param>
            <param name="headerValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDataExtension.DataRowToEntity``1(System.Data.DataRow)">
            <summary>
            Create Entity from <see cref="T:System.Data.DataRow"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dr"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityDataExtension.EntityToTableSchema(Nistec.Data.Entities.IEntityItem,System.String,System.Boolean,System.Boolean)">
            <summary>
            Display EntityFields as DataTable schema 
            </summary>
            <param name="entity"></param>
            <param name="tableName"></param>
            <param name="writeAbleOnly"></param>
            <param name="disableIdentity"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Entities.GenericEntity">
            <summary>
            Represent Generic serializable entity that implement <see cref="T:Nistec.Data.Entities.IGenericEntity"/>, <see cref="T:Nistec.Serialization.ISerialEntity"/> and <see cref="T:Nistec.Serialization.IEntityDictionary"/>.
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.Get``1(System.Object[])">
            <summary>
            Initialize a new instance of GenericEntity
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.Create(Nistec.Data.Entities.EntityDbContext,System.Object[])">
            <summary>
            Initialize a new instance of GenericEntity
            </summary>
            <param name="db"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.Create(Nistec.Data.Entities.EntityDbContext,System.Data.IDbDataParameter[])">
            <summary>
            Initialize a new instance of GenericEntity
            </summary>
            <param name="db"></param>
            <param name="parameters">SqlParameter array key value.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.Create``1(System.String,System.Data.IDbDataParameter[],System.Data.CommandType)">
            <summary>
            Initialize a new instance of GenericEntity
            </summary>
            <typeparam name="Dbc"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="cmdType">Specifies how a command string is interpreted.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.CreateEntities(System.Data.DataTable,System.Boolean)">
            <summary>
            Create Array of <see cref="T:Nistec.Data.Entities.GenericEntity"/>
            </summary>
            <param name="dt"></param>
            <param name="enablePrimaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.CreateEntitiesList(System.Data.DataTable,System.Boolean)">
            <summary>
            Create Array of <see cref="T:Nistec.Data.Entities.GenericEntity"/>
            </summary>
            <param name="dt"></param>
            <param name="enablePrimaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.GetValue(System.String)">
            <summary>
            GetValue
            </summary>
            <param name="field">the column name in data row</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.GetValue``1(System.String)">
            <summary>
            GetValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <returns>T</returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.GetValue``1(System.String,``0)">
            <summary>
            GetValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <returns>if null or error return defaultValue</returns>
            <returns>T</returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.TryGetValue``1(System.String,``0@)">
             <summary>
                 Gets the value associated with the specified key.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="field">The key whose value to get.</param>
             <param name="value">
                 When this method returns, the value associated with the specified key, if
                 the key is found; otherwise, the default value for the type of the value
                 parameter. This parameter is passed uninitialized.
            </param>
             <returns>
                 true if the object that implements System.Collections.Generic.IDictionary
                 contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.SetValue``1(System.String,``0)">
            <summary>
            SetValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <param name="value">the T value to insert</param>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.SetValue(System.String,System.Object)">
            <summary>
            SetValue
            </summary>
            <param name="field">the column name in data row</param>
            <param name="value">the value to insert</param>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.SetValue(System.Object,System.Object)">
            <summary>
            SetValue
            </summary>
            <param name="field">the column name in data row</param>
            <param name="value">the value to insert</param>
        </member>
        <member name="P:Nistec.Data.Entities.GenericEntity.PrimaryKey">
            <summary>
            Get PrimaryKey as EntityKeys
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.GenericEntity.Modified">
            <summary>
            Get PrimaryKey as EntityKeys
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.GenericEntity.Count">
            <summary>
            Gets the number of key/value pairs contained in the System.Collections.Hashtable.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.GenericEntity.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified field.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.ContainsKey(System.String)">
            <summary>
             Determines whether the System.Collections.Hashtable contains a specific key.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.ContainsValue(System.Object)">
            <summary>
             Determines whether the System.Collections.Hashtable contains a specific value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.Add(System.String,System.Object,System.Boolean)">
            <summary>
            Adds an element with the specified key and value into the System.Collections.Hashtable.
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <param name="allowOverride"></param>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.Clear">
            <summary>
             Removes all elements from the System.Collections.Hashtable.
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.ClearChanges">
            <summary>
            Clear all changes
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.CommitChanges">
            <summary>
            End edit and save all changes localy
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.GenericEntity.IsDirty">
            <summary>
            Get indicate if data source has changes
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.SaveChanges``1(Nistec.Data.UpdateCommandType,Nistec.Data.Entities.EntityDbContext)">
            <summary>
            Save all Changes by <see cref="T:Nistec.Data.UpdateCommandType"/> specific command to DB and return number of AffectedRecords
            If not <see cref="P:Nistec.Data.Entities.GenericEntity.IsDirty"/> which mean no changed has been made return 0
            </summary>
            <param name="commandType"></param>
            <param name="db"></param>
            <returns></returns>
            <exception cref="T:Nistec.Data.Entities.EntityException"></exception>
            <exception cref="T:Nistec.Data.DalException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.SaveChanges(Nistec.Data.UpdateCommandType,Nistec.Data.Entities.EntityDbContext)">
            <summary>
            Save all Changes by <see cref="T:Nistec.Data.UpdateCommandType"/> specific command to DB and return number of AffectedRecords
            If not <see cref="P:Nistec.Data.Entities.GenericEntity.IsDirty"/> which mean no changed has been made return 0
            </summary>
            <param name="commandType"></param>
            <param name="db"></param>
            <returns></returns>
            <exception cref="T:Nistec.Data.Entities.EntityException"></exception>
            <exception cref="T:Nistec.Data.DalException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.CompareValues``1(System.String,``0)">
            <summary>
            Compare Values between current field value and valueToComparee
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <param name="valueToCompare">the T value to Compare</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.CompareValues(System.String,System.Object)">
            <summary>
            Compare Values between current field value and valueToComparee
            </summary>
            <param name="field">the column name in data row</param>
            <param name="valueToCompare">the value to Compare</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.Compare``1(``0,``0)">
            <summary>
             Compare  Values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.Compare(Nistec.Data.Entities.GenericEntity)">
            <summary>
            Compare between 2 GenericRecords
            </summary>
            <param name="gr"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.CreateRecords(System.Data.DataTable)">
            <summary>
            Create Array of <see cref="T:Nistec.Data.Entities.GenericEntity"/>
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.CreateRecordsList(System.Data.DataTable)">
            <summary>
            Create Array of <see cref="T:Nistec.Data.Entities.GenericEntity"/>
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.CreateEntityList(System.Data.DataTable)">
            <summary>
            Create Array of <see cref="T:Nistec.Data.Entities.GenericEntity"/>
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.DataTableToDictionary(System.Data.DataTable,System.String[],System.String)">
            <summary>
            Create Vertical GenericEntity (key value dictionary) by fetching keys and values from DataTable using array of fields as row key and value field
            </summary>
            <param name="dt"></param>
            <param name="fieldKeys"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Entities.GenericEntity.IsEmpty">
            <summary>
            Get Indicate if GenericEntity is Empty
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.ToDataRow">
            <summary>
            Convert GenericEntity to DataRow
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.AddTo(System.Data.DataTable,System.Boolean)">
            <summary>
            Add current record to specified DataTable using fields list
            </summary>
            <param name="table"></param>
            <param name="enableIdentity"></param>
        </member>
        <member name="M:Nistec.Data.Entities.GenericEntity.Print(System.String,System.String)">
            <summary>
            Display data as Vertical view, 
            </summary>
            <param name="headerName"></param>
            <param name="headerValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityFieldsChanges.SetChanges(System.String,System.Object)">
            <summary>
            Set Value in specified field
            </summary>
            <param name="field">the column name in data row</param>
            <param name="value">the value to insert</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityFieldsChanges.ClearChanges">
            <summary>
            Clear all changes
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityFieldsChanges.CommitChanges">
            <summary>
            End edit and save all changes localy
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityFieldsChanges.IsDirty">
            <summary>
            Get indicate if data source has changes
            </summary>
        </member>
        <member name="T:Nistec.Data.Entities.GenericData">
            <summary>
            Represent Generic Data Values
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.Dispose">
            <summary>
            This object will be cleaned up by the Dispose method. 
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.ToValues">
            <summary>
            Get values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.Select">
            <summary>
            Select DataRows array from DataSource by filter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.Select(System.String)">
            <summary>
            Select DataRows array from DataSource by filter
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.Select(System.String,System.String)">
            <summary>
            Select DataRows array from DataSource by filter and sort fields
            </summary>
            <param name="filter"></param>
            <param name="sort"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.ImportRow(System.Data.DataRow)">
            <summary>
            Copies a System.Data.DataRow into a System.Data.DataTable, preserving any
            property settings, as well as original and current values.
            </summary>
            <param name="row">The System.Data.DataRow to be imported.</param>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.NewRow">
            <summary>
            Creates a new System.Data.DataRow with the same schema as the ActiveTable.
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.AddRow(System.Object[])">
            <summary>
            Creates a row using specified values and adds it to the ActiveTable RowCollection.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.AddRow(System.Data.DataRow)">
            <summary>
            Adds the specified System.Data.DataRow to the ActiveTable
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.ClearRows">
            <summary>
            Clears the collection of all rows.
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.RemoveRow(System.Int32)">
            <summary>
            Removes the row at the specified index from the collection.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.CancelEdit">
            <summary>
            Canceles the current edit on the row.
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.BeginEdit">
            <summary>
            Starts an edit operation on a System.Data.DataRow object.
            </summary>
            <exception cref="T:System.Data.InRowChangingEventException">The method was called inside the System.Data.DataTable.RowChanging event.</exception>
            <exception cref="T:System.Data.DeletedRowInaccessibleException">The method was called upon a deleted row.</exception>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.ClearErrors">
            <summary>
            Clears the errors for the row. This includes the System.Data.DataRow.RowError
            and errors set with System.Data.DataRow.SetColumnError(System.Int32,System.String).
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.Delete">
             <summary>
             Deletes the System.Data.DataRow.
             </summary>
            <exception cref="T:System.Data.DeletedRowInaccessibleException">The System.Data.DataRow has already been deleted.</exception>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.EndEdit">
            <summary>
            Ends the edit occurring on the row.
            </summary>
            <exception cref="T:System.Data.InRowChangingEventException">The method was called inside the System.Data.DataTable.RowChanging event.</exception>
            <exception cref="T:System.Data.ConstraintException">The edit broke a constraint.</exception>
            <exception cref="T:System.Data.ReadOnlyException">The row belongs to the table and the edit tried to change the value of a
                read-only column.</exception>
            <exception cref="T:System.Data.NoNullAllowedException">The edit tried to put a null value into a column where System.Data.DataColumn.AllowDBNull
                is false.</exception>
        </member>
        <member name="P:Nistec.Data.Entities.GenericData.HasErrors">
            <summary>
            Gets a value that indicates whether there are errors in a row.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.GenericData.RowState">
            <summary>
             Gets the current state of the row with regard to its relationship to the
                System.Data.DataRowCollection.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.GenericData.RowError">
            <summary>
            Gets or sets the custom error description for a row.
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.ValidCurrent(System.Boolean)">
            <summary>
            Validate current index
            </summary>
            <param name="validateEdit"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.ValidateReadOnly">
            <summary>
            Validate if edit is ReadOnly
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.ValidateEdit">
            <summary>
            Validate if edit is enabled
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.ValidateCurrent">
            <summary>
            Validate data and index position
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Nistec.Data.Entities.GenericData.HasPrimaryKey">
            <summary>
            Get inducate if Data has PrimaryKey columns
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.GenericData.PrimaryKeys">
            <summary>
            Get <see cref="T:Nistec.Data.Entities.EntityKeys"/>
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.SetPrimaryKeys(Nistec.Data.Entities.EntityKeys)">
            <summary>
            Set Primary Keys
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.Find``1(``0,System.String,System.Object)">
            <summary>
            Find Record in data and return entity with found record
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="columnName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.Find``1(``0,System.Object[])">
            <summary>
            Find Record in data and return entity with found record
            </summary>
            <param name="entity"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.Find(System.String,System.Object)">
            <summary>
            Find Record in data and return entity with found record
            </summary>
            <param name="columnName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.FindRecord(System.Int32,System.Object)">
            <summary>
            Find Record by column index and field value and return the row index, if not found return -1.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.FindRow(System.Object[])">
            <summary>
            Gets the index of the specified row object.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.Find(System.Object[])">
            <summary>
            Gets the row that contains the specified primary key values.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.GetActiveRow">
            <summary>
            Gets the current row .
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.CompareRecord(System.Int32,System.String,System.Object)">
            <summary>
            Compare Record and return if it's equal
            </summary>
            <param name="index"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Entities.GenericData.ReadOnly">
            <summary>
            Get indicate if is it ReadOnly
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.GenericData.Data">
            <summary>
            Get Data source (When is ReadOnly return a Copy)
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.GenericData.Rows">
            <summary>
            Get Data Row Collection
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.GenericData.Columns">
            <summary>
            Get Data Column Collection
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.GenericData.Count">
            <summary>
            Get the total row count in this data source.
            </summary>
            <returns>int</returns>
        </member>
        <member name="P:Nistec.Data.Entities.GenericData.Item(System.String)">
            <summary>
            Get or Set value by column name.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Entities.GenericData.Item(System.Int32)">
            <summary>
            Get or Set value by column index.
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Entities.GenericData.Item(System.Int32,System.String)">
            <summary>
            Get value by row index and column name.
            </summary>
            <param name="row"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Entities.GenericData.Item(System.Int32,System.Int32)">
            <summary>
            Get value by row index and column index.
            </summary>
            <param name="row"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Entities.GenericData.ItemArray">
            <summary>
            Get or Set ItemArray
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.GenericData.IsEmpty">
            <summary>
            Get the value indicating that data source IsEmpty
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.GenericData.IsDirty">
            <summary>
            Get indicate if data source has changes
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.GenericData.Index">
            <summary>
            Get or Set DataSorce row index.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <exception cref="T:Nistec.Data.Entities.EntityException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.Next">
            <summary>
            Go to next record, if index is out of range do nothing
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.Prev">
            <summary>
            Go to next record, if index is out of range do nothing
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.GoTo(System.Int32)">
            <summary>
            Go To Position safety, if index is out of range do nothing
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.GoTo(System.Object[])">
            <summary>
            Find and load entity record from DataSource that contains the specified primary key values.
            </summary>
            <param name="keys"></param>
            <returns>true if found else false</returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.GetValue``1(System.String)">
            <summary>
            Get value from current row index and field name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.GetValue``1(System.String,``0)">
            <summary>
            Get value from current row index and field name,if not found or error occured return default value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <returns>if null or error return defaultValue</returns>
            <returns>T</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nistec.Data.Entities.GenericData.TryGetValue``1(System.String,``0@)" -->
        <member name="M:Nistec.Data.Entities.GenericData.SetValue``1(System.String,``0)">
            <summary>
            Set Value to current row index and field name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <param name="value">the T value to insert</param>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.SetValue(System.String,System.Object)">
            <summary>
            Set Value to current row index and field name
            </summary>
            <param name="field">the column name in data row</param>
            <param name="value">the T value to insert</param>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.SetValue(System.Int32,System.Object)">
            <summary>
            Set Value to current row index and column Index
            </summary>
            <param name="columnIndex">the column name in data row</param>
            <param name="value">the T value to insert</param>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.CompareValues``1(System.String,``0)">
            <summary>
            Compare Values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <param name="value">the T value to Compare</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.Compare``1(``0,``0)">
            <summary>
             Compare  Values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.Create(Nistec.Data.Entities.EntityDbContext,System.Object[])">
            <summary>
            Initialize a new instance of GenericData
            </summary>
            <param name="db"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.Create(Nistec.Data.Entities.EntityDbContext,System.Data.IDbDataParameter[])">
            <summary>
            Initialize a new instance of GenericData
            </summary>
            <param name="db"></param>
            <param name="parameters">SqlParameter array key value.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericData.Create``1(System.String,System.Data.IDbDataParameter[],System.Data.CommandType)">
            <summary>
            Initialize a new instance of GenericData
            </summary>
            <typeparam name="Dbc"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="cmdType">Specifies how a command string is interpreted.</param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Entities.EntityStream">
            <summary>
            Represent entity as stream, implement <see cref="T:Nistec.Serialization.ISerialEntity"/> and <see cref="T:Nistec.Runtime.IMessageStream"/>.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityStream.BodyStream">
            <summary>
            Get or Set BodyStream.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityStream.Id">
            <summary>
            Get or Set entity key.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityStream.TypeName">
            <summary>
            Get or Set type name of body stream.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityStream.Formatter">
            <summary>
            Get or Set the foramtter of body stream.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityStream.Expiration">
            <summary>
            Get or Set entity expirtaion.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityStream.Modified">
            <summary>
            Get or Set the last time modefied.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityStream.Label">
            <summary>
            Get or Set entity detail.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityStream.GroupId">
            <summary>
            Get or Set entity GroupId.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityStream.TransformType">
            <summary>
            Get or Set The result type name.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityStream.Size">
            <summary>
            Get Body Size in Bytes
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityStream.IsEmpty">
            <summary>
            Get indicate wether the item is empty 
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityStream.BodyType">
            <summary>
            Get Type of body
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityStream.EntityWrite(System.IO.Stream,Nistec.Serialization.IBinaryStreamer)">
            <summary>
            Write entity properties to stream using <see cref="T:Nistec.Serialization.IBinaryStreamer"/> streamer.
            </summary>
            <param name="stream"></param>
            <param name="streamer"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityStream.EntityRead(System.IO.Stream,Nistec.Serialization.IBinaryStreamer)">
            <summary>
            Read entity properties from stream using <see cref="T:Nistec.Serialization.IBinaryStreamer"/> streamer.
            </summary>
            <param name="stream"></param>
            <param name="streamer"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityStream.Copy">
            <summary>
            Get Copy of <see cref="T:Nistec.Data.Entities.EntityStream"/> with body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityStream.Clone">
            <summary>
            Get Copy of <see cref="T:Nistec.Data.Entities.EntityStream"/> structure without body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityStream.CreateConcurrentEntityRecordStream``1(Nistec.Data.Entities.IEntity{``0},Nistec.Data.DataFilter,System.Int64@)">
            <summary>
            Create Dictionary of <see cref="T:Nistec.Data.Entities.EntityStream"/> using <see cref="T:Nistec.Data.Entities.IEntity"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="filter"></param>
            <param name="totalSize"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityStream.CreateEntityRecordStream``1(Nistec.Data.Entities.IEntity{``0},Nistec.Data.DataFilter,System.String[],System.Int64@)">
            <summary>
            Create Dictionary of <see cref="T:Nistec.Data.Entities.EntityStream"/> using <see cref="T:Nistec.Data.Entities.IEntity"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="filter"></param>
            <param name="totalSize"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityStream.CreateEntityRecordStream``1(Nistec.Data.Entities.IEntity{``0},Nistec.Data.DataFilter,System.Int64@,System.String[]@)">
            <summary>
            Create Dictionary of <see cref="T:Nistec.Data.Entities.EntityStream"/> using <see cref="T:Nistec.Data.Entities.IEntity"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="filter"></param>
            <param name="totalSize"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityStream.CreateEntityStream``1(Nistec.Data.Entities.IEntity,System.Data.DataTable)">
            <summary>
            Create Dictionary of <see cref="T:Nistec.Data.Entities.EntityStream"/> from <see cref="T:System.Data.DataTable"/> using <see cref="T:Nistec.Data.Entities.IEntity"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="dt"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityStream.CreateEntityStream``1(Nistec.Data.Entities.IEntity{``0},Nistec.Data.DataFilter,System.Int64@)">
            <summary>
            Create Dictionary of <see cref="T:Nistec.Data.Entities.EntityStream"/> using <see cref="T:Nistec.Data.Entities.IEntity"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="filter"></param>
            <param name="totalSize"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityStream.CreateEntityStream``1(Nistec.Data.Entities.IEntity{``0},Nistec.Data.DataFilter,System.Action{System.Exception},System.Int64@)">
            <summary>
            Create Dictionary of <see cref="T:Nistec.Data.Entities.EntityStream"/> using <see cref="T:Nistec.Data.Entities.IEntity"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="filter"></param>
            <param name="onError"></param>
            <param name="totalSize"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityStream.CreateEntityStream(Nistec.Data.Entities.IEntity,System.Type,Nistec.Data.DataFilter,System.Action{System.Exception},System.Int64@)">
            <summary>
            Create Dictionary of <see cref="T:Nistec.Data.Entities.EntityStream"/> using <see cref="T:Nistec.Data.Entities.IEntity"/>.
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <param name="filter"></param>
            <param name="onError"></param>
            <param name="totalSize"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityStream.ToJson(System.Boolean)">
            <summary>
            Get entity as json
            </summary>
            <param name="pretty"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Entities.EntityKeysExtension">
            <summary>
            Represent EntityKeys collection
            </summary>
        </member>
        <member name="T:Nistec.Data.Entities.EntityKeys">
            <summary>
            Represent EntityKeys collection
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityKeys.SetPrimaryKeys(System.Data.DataTable)">
            <summary>
            Set DataTable primary key 
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityKeys.ToString">
            <summary>
            Get Keys as string 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Entities.EntityAttribute">
            <summary>
            This attribute defines properties of <see cref="T:Nistec.Data.Entities.IEntity"/> field Attribute
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityAttribute"/> class
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityAttribute.#ctor(Nistec.Data.Entities.EntityDbContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityAttribute"/> class from <see cref="T:Nistec.Data.Entities.EntityDbContext"/>
            </summary>
            <param name="db"></param>
            <param name="langResources"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityAttribute.#ctor(System.String,System.String,System.String,Nistec.Data.Entities.EntityMode,Nistec.Data.Entities.EntitySourceType,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityAttribute"/> class
            </summary>
            <param name="entityName"></param>
            <param name="mappingName"></param>
            <param name="connectionKey"></param>
            <param name="mode"></param>
            <param name="sourceType"></param>
            <param name="key">Array as comma separated string of EntityKeys</param>
            <param name="columns"></param>
            <param name="langResource"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityAttribute.#ctor(System.String,System.String,System.String,Nistec.Data.Entities.EntityMode,Nistec.Data.Entities.EntitySourceType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityAttribute"/> class
            </summary>
            <param name="entityName"></param>
            <param name="mappingName"></param>
            <param name="connectionKey"></param>
            <param name="mode"></param>
            <param name="sourceType"></param>
            <param name="key">Array as comma separated string of EntityKeys</param>
            <param name="langResource"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityAttribute.#ctor(System.String,System.String,System.String,Nistec.Data.Entities.EntityMode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityAttribute"/> class
            </summary>
            <param name="entityName"></param>
            <param name="mappingName"></param>
            <param name="connectionKey"></param>
            <param name="mode"></param>
            <param name="key">Array as comma separated string of EntityKeys </param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of entity property
            </summary>
            <param name="entityName"></param>
            <param name="mappingName"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of entity property
            </summary>
            <param name="mappingName"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityAttribute.#ctor(System.String,Nistec.Data.Entities.EntityMode)">
            <summary>
            Initializes a new instance of entity property;
            </summary>
            <param name="entityName"></param>
            <param name="mode"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityAttribute.#ctor(System.String,System.String,System.String,Nistec.Data.Entities.EntitySourceType,System.String)">
            <summary>
            Initializes a new instance of entity property;
            </summary>
            <param name="entityName"></param>
            <param name="mappingName"></param>
            <param name="EntityConfigKey"></param>
            <param name="sourceType"></param>
            <param name="key"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityAttribute.GetAttributeBuilder(Nistec.Data.Entities.EntityAttribute)">
            <summary>
            An attribute builder method
            </summary>
            <param name="attr"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Entities.EntityAttribute.EntityKey">
            <summary>
            Property EntityKey. 
            </summary>
            <example>{"ID","Category"}</example>
        </member>
        <member name="P:Nistec.Data.Entities.EntityAttribute.EntityName">
            <summary>
            Property EntityName. If this property is not defined 
            then a method property MappingName is used.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityAttribute.MappingName">
            <summary>
            Parameter MappingName represent the DB entity (Table|View).
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityAttribute.Columns">
            <summary>
            Parameter columns names represent the DB entity columns.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityAttribute.ConnectionKey">
            <summary>
            Parameter Connection. usefull for connecetion to DB
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityAttribute.LangResources">
            <summary>
            Parameter LangResources. usefull for multi lang
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityAttribute.Mode">
            <summary>
            Parameter EntityMode represent the entity mode.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityAttribute.EntitySourceType">
            <summary>
            Parameter EntitySourceType represent the entity source type.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityAttribute.IsLangResourcesDefined">
            <summary>
            Is ResourceManager Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityAttribute.IsEntityNameDefined">
            <summary>
            Is EntityName Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityAttribute.IsMappingNameDefined">
            <summary>
            Is MappingName Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityAttribute.IsConnectionDefined">
            <summary>
            Is Connection Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityAttribute.IsModeDefined">
            <summary>
            Is EntityMode Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityAttribute.IsValid">
            <summary>
            Is Property has valid Definition
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityAttribute.EnableConnectionProvider">
            <summary>
            Enable Connection Provider
            </summary>
        </member>
        <member name="T:Nistec.Data.Entities.EntityField">
            <summary>
            This class represent the ActiveProperty for each field in active record class
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityField.IsCaptionDefined">
            <summary>
            Is Caption Defined
            </summary>
        </member>
        <member name="T:Nistec.Data.Entities.ActiveScheduler">
            <summary>
            Sync time struct
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveScheduler.#ctor(Nistec.Data.IAutoBase)">
            <summary>
            ActiveScheduler ctor
            </summary>
            <param name="dalBase"></param>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveScheduler.#ctor(System.Data.IDbConnection)">
            <summary>
            ActiveScheduler ctor
            </summary>
            <param name="cnn"></param>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveScheduler.#ctor(Nistec.Data.Entities.IDbContext)">
            <summary>
            ActiveScheduler ctor
            </summary>
            <param name="db"></param>
        </member>
        <member name="P:Nistec.Data.Entities.ActiveScheduler.TimerEnabled">
            <summary>
            Get indicator if sync are enabled 
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveScheduler.Start">
            <summary>
            Start Async config Background multi thread Listner 
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveScheduler.Stop">
            <summary>
            Stop AsyncQueue Background multi thread Listner 
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.ActiveScheduler.OnScheduleElapsed(Nistec.Threading.SchedulerEventArgs)">
            <summary>
            OnTimeElapsed
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Nistec.Data.Entities.IDbContext">
            <summary>
            DbContext interface
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.IDbContext.ConnectionTimeout">
            <summary>
            Get or Set the time to wait while trying to establish a connection before terminating the attempt and generating an error.
            The time (in seconds) to wait for a connection to open. The default value is 15 seconds.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.IDbContext.CommandTimeout">
            <summary>
            Get or Set the time to wait while trying to establish a connection before terminating the attempt and generating an error.
            The time (in seconds) to wait for a connection to open. The default value is 30 seconds.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.IDbContext.AddWithKey">
            <summary>
                Adds the necessary columns and primary key information to complete the schema.
                For more information about how primary key information is added to a System.Data.DataTable,
                see System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType).To
                function properly with the .NET Framework Data Provider for OLE DB, AddWithKey
                requires that the native OLE DB provider obtains necessary primary key information
                by setting the DBPROP_UNIQUEROWS property, and then determines which columns
                are primary key columns by examining DBCOLUMN_KEYCOLUMN in the IColumnsRowset.
                As an alternative, the user may explicitly set the primary key constraints on
                each System.Data.DataTable. This ensures that incoming records that match existing
                records are updated instead of appended. When using AddWithKey, the .NET Framework
                Data Provider for SQL Server appends a FOR BROWSE clause to the statement being
                executed. The user should be aware of potential side effects, such as interference
                with the use of SET FMTONLY ON statements. See SQL Server Books Online for more
                information.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.IDbContext.IsValidConnection">
            <summary>
            Get indicate if the connection is valid
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.EntityGet``1(System.Object[])">
            <summary>
            Get Entity using <see cref="T:Nistec.Data.Entities.EntityMappingAttribute"/> mapping name and keys filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.EntityGetJson``1(System.Object[])">
            <summary>
            Get Entity using <see cref="T:Nistec.Data.Entities.EntityMappingAttribute"/> mapping name and keys filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.EntityJsonResult``1(System.Object[])">
            <summary>
            Get Entity as <see cref="T:Nistec.Serialization.JsonResults"/> using <see cref="T:Nistec.Data.Entities.EntityMappingAttribute"/> mapping name and keys filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyValueParameters"></param>
            <returns><see cref="T:Nistec.Serialization.JsonResults"/></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.EntityList``1(System.Object[])">
            <summary>
            Get Entity using <see cref="T:Nistec.Data.Entities.EntityMappingAttribute"/> mapping name and keys filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.EntityListJson``1(System.Object[])">
            <summary>
            Get Entity using <see cref="T:Nistec.Data.Entities.EntityMappingAttribute"/> mapping name and keys filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.EntityItemGet``1(System.String,System.Object[])">
            <summary>
            Get Entity using <see cref="T:Nistec.Data.Entities.EntityContext"/> with mapping name and keys filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mappingName"></param>
            <param name="keyValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.EntityItemList``1(System.String,System.Object[])">
            <summary>
            Get Entity using <see cref="T:Nistec.Data.Entities.EntityContext"/> with mapping name and keys filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mappingName"></param>
            <param name="keyValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.EntitySave``1(``0)">
            <summary>
            Save entity to db update or insert.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.EntitySaveChanges``1(``0,System.Boolean)">
            <summary>
            Save entity changes to update or insert if not exists.(EntitySaveChanges)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="InsertIfNotExists"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.EntityUpsert(Nistec.Data.Entities.GenericEntity)">
            <summary>
            Save entity to db update or insert.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.EntityInsert``1(``0)">
            <summary>
            Set entity using <see cref="T:Nistec.Data.UpdateCommandType"/> commandType such as update,insert,delete.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.EntityUpdate``1(``0,``0)">
            <summary>
            Set entity using <see cref="T:Nistec.Data.UpdateCommandType"/> commandType such as update,insert,delete.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalEntity"></param>
            <param name="newEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.EntityUpdate``1(``0)">
            <summary>
            Update entity changes by getting the original from db and save changes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.EntityDelete``1(``0)">
            <summary>
            Entity delete command by mapping name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.EntityItemDelete(System.String,System.Object[])">
            <summary>
            Entity delete command by mapping name and name value parameters.
            </summary>
            <param name="mappingName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.EntityDelete``1(System.Object[])">
            <summary>
            Entity delete command by mapping name and name value parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.ExecuteOutput(System.String,System.Object[])">
            <summary>
            Executes a command NonQuery and returns <see cref="T:Nistec.Data.Entities.EntityCommandResult"/> OutptResults and the number of rows affected.
            </summary>
            <param name="procName"></param>
            <param name="keyValueDirectionParameters"></param>
            <returns><see cref="T:Nistec.Data.Entities.EntityCommandResult"/></returns> 
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.ExecuteReturnValue(System.String,System.Int32,System.Object[])">
            <summary>
            Executes StoredProcedure as NonQuery and returns the RetrunValue.
            </summary>
            <param name="procName"></param>
            <param name="returnIfNull"></param>
            <param name="nameValueParameters"></param>
            <returns><see cref="T:System.Int32"/></returns> 
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes StoredProcedure as NonQuery Command and returns effective records..
            </summary>
            <param name="procName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.ExecuteScalar``1(System.String,``0,System.Object[])">
            <summary>
            Executes StoredProcedure and returns T value such as (String|Number|DateTime) or any primitive type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="procName"></param>
            <param name="returnIfNull"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.ExecuteSingle``1(System.String,System.Object[])">
            <summary>
            Executes StoredProcedure and returns T value such as (DataSet|DataTable|DataRow) or any entity class..
            </summary>
            <typeparam name="T"></typeparam>
            <param name="procName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.ExecuteList``1(System.String,System.Object[])">
            <summary>
            Executes StoredProcedure and returns List of T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="procName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.QueryScalar``1(System.String,``0,System.Object[])">
            <summary>
            Executes Command and returns T value such as (String|Number|DateTime) or any primitive type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandText"></param>
            <param name="returnIfNull"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.QuerySingle``1(System.String,System.Object[])">
            <summary>
            Executes Command and returns T value such as (DataSet|DataTable|DataRow) or any entity class..
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandText"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.Query``1(System.String,System.Object[])">
            <summary>
            Executes Command and returns List of T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandText"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.ExecuteCommand``1(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            Executes sql as NonQuery Command and returns T value..
            </summary>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.ExecuteCommand``1(System.String,System.Data.IDbDataParameter[],System.Data.CommandType,System.Int32,System.Boolean)">
            <summary>
            Execute Command and returns T value such as (DataSet|DataTable|DataRow) or any entity class or scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandText"></param>
            <param name="parameters"></param>
            <param name="commandType"></param>
            <param name="commandTimeout"></param>
            <param name="addWithKey"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.ExecuteCommandNonQuery(System.String,System.Data.IDbDataParameter[],System.Data.CommandType,System.Int32)">
            <summary>
            Execute as NonQuery Command  and returns effective records.
            </summary>
            <param name="commandText"></param>
            <param name="parameters"></param>
            <param name="commandType"></param>
            <param name="commandTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.ExecuteCommandOutput(System.String,System.Data.IDbDataParameter[],System.Data.CommandType,System.Int32)">
            <summary>
            Executes a command NonQuery and returns <see cref="T:Nistec.Data.Entities.EntityCommandResult"/> OutptResults and the number of rows affected.
            </summary>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.QueryDictionary(System.String,System.Object[])">
            <summary>
            Executes CommandType.Text and returns Dictionary.
            </summary>
            <param name="commandText"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.ExecuteDictionary(System.String,System.Object[])">
            <summary>
            Executes StoredProcedure and returns Dictionary.
            </summary>
            <param name="mappingName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.QueryJsonResults(System.String,System.Object[])">
            <summary>
            Executes CommandType.Text and returns <see cref="T:Nistec.Serialization.JsonResults"/>.
            </summary>
            <param name="commandText"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.QueryJson(System.String,System.Object[])">
            <summary>
            Executes CommandType.Text and returns Json.
            </summary>
            <param name="commandText"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.ExecuteJson(System.String,System.Object[])">
            <summary>
            Executes StoredProcedure and returns Json.
            </summary>
            <param name="mappingName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.QueryJsonRecord(System.String,System.Object[])">
            <summary>
            Executes CommandType.Text and returns Json.
            </summary>
            <param name="commandText"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.ExecuteJsonRecord(System.String,System.Object[])">
            <summary>
            Executes StoredProcedure and returns Json.
            </summary>
            <param name="mappingName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.QueryDictionaryRecord(System.String,System.Object[])">
            <summary>
            Executes CommandType.Text and returns Dictionary.
            </summary>
            <param name="commandText"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.ExecuteDictionaryRecord(System.String,System.Object[])">
            <summary>
            Executes StoredProcedure and returns Dictionary.
            </summary>
            <param name="mappingName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.QueryDataTable(System.String,System.Object[])">
            <summary>
            Executes CommandType.Text and returns DataTable.
            </summary>
            <param name="commandText"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.ExecuteDataTable(System.String,System.Object[])">
            <summary>
            Executes StoredProcedure and returns DataTable.
            </summary>
            <param name="procName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes StoredProcedure and returns DataSet.
            </summary>
            <param name="procName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IDbContext.QueryReader(System.String,System.Data.CommandBehavior,System.Object[])">
            <summary>
            Executes Command and returns IDataReader.
            </summary>
            <param name="commandText"></param>
            /// <param name="behavior"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Entities.DbContext">
            <summary>
            Represent DbEntities that implement <see cref="T:Nistec.Data.Entities.IDbContext"/>
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntityBind">
            <summary>
            Occured befor DbContext initilaized
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.Get``1">
            <summary>
            Create an instance of DbContext
            </summary>
            <typeparam name="Dbc"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.Get``1(Nistec.Serialization.JsonDateFormat)">
            <summary>
            Create an instance of DbContext with json date format.
            </summary>
            <typeparam name="Dbc"></typeparam>
            <param name="dateFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.Create``1">
            <summary>
            Create an instance of IDbContext
            </summary>
            <typeparam name="Dbc"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.Create(System.String,System.Boolean)">
            <summary>
            Create an instance of IDbContext
            </summary>
            <param name="connectionName"></param>
            <param name="createFromProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.Create(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create an instance of IDbContext
            </summary>
            <param name="connectionName"></param>
            <param name="commandTimeout"></param>
            <param name="addWithKey"></param>
            <param name="createFromProvider"></param>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.Create(System.String,Nistec.Data.DBProvider,System.Int32,System.Boolean)">
            <summary>
            Create an instance of IDbContext
            </summary>
            <param name="connectioString"></param>
            <param name="provider"></param>
            <param name="commandTimeout"></param>
            <param name="addWithKey"></param>
        </member>
        <member name="P:Nistec.Data.Entities.DbContext.Localization">
            <summary>
            Get <see cref="T:Nistec.Generic.ILocalizer"/> from <see cref="T:Nistec.Data.Entities.DbContext"/> which usful for multi language,
            if  EntityDbContext not define or DbContext not define return null
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.GetLocalizer``1">
            <summary>
            Get <see cref="T:Nistec.Generic.ILocalizer"/> from <see cref="T:Nistec.Data.Entities.DbContext"/> which usful for multi language,
            if  EntityDbContext not define or DbContext not define return null
            </summary>
            <typeparam name="Erm"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.#ctor(System.String,System.Boolean)">
            <summary>
            Ctor
            </summary>
            <param name="connectionKey"></param>
            <param name="createFromProvider"></param>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.#ctor(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Ctor
            </summary>
            <param name="connectionKey"></param>
            <param name="commandTimeout"></param>
            <param name="addWithKey"></param>
            <param name="createFromProvider"></param>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.#ctor(System.String,System.Char)">
            <summary>
            Ctor
            </summary>
            <param name="connectionKey"></param>
            <param name="spliter"></param>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.#ctor(System.String,Nistec.Data.DBProvider)">
            <summary>
            Ctor
            </summary>
            <param name="connectionString"></param>
            <param name="provider"></param>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.#ctor(Nistec.Data.Ado.ConnectionProvider)">
            <summary>
            Ctor
            </summary>
            <param name="cp"></param>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.Dispose">
            <summary>
            This object will be cleaned up by the Dispose method. 
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.DbContext.DbEntities">
            <summary>
            Get EntityDbContext Items
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntityGet``1(System.Object[])">
            <summary>
            Get Entity using <see cref="T:Nistec.Data.Entities.EntityMappingAttribute"/> mapping name and keys filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntityGetJson``1(System.Object[])">
            <summary>
            Get Entity using <see cref="T:Nistec.Data.Entities.EntityMappingAttribute"/> mapping name and keys filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntityJsonResult``1(System.Object[])">
            <summary>
            Get Entity as <see cref="T:Nistec.Serialization.JsonResults"/> using <see cref="T:Nistec.Data.Entities.EntityMappingAttribute"/> mapping name and keys filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyValueParameters"></param>
            <returns><see cref="T:Nistec.Serialization.JsonResults"/></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntityList``1(System.Object[])">
            <summary>
            Get Entity using <see cref="T:Nistec.Data.Entities.EntityMappingAttribute"/> mapping name and keys filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntityProcList``1(System.Object[])">
            <summary>
            Exec Entity using <see cref="T:Nistec.Data.Entities.EntityMappingAttribute"/> mapping name and keys filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntityProcGet``1(System.Object[])">
            <summary>
            Exec Entity using <see cref="T:Nistec.Data.Entities.EntityMappingAttribute"/> mapping name and keys filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntityListJson``1(System.Object[])">
            <summary>
            Get Entity using <see cref="T:Nistec.Data.Entities.EntityMappingAttribute"/> mapping name and keys filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntityItemGet``1(System.String,System.Object[])">
            <summary>
            Get Entity using <see cref="T:Nistec.Data.Entities.EntityContext"/> with mapping name and keys filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mappingName"></param>
            <param name="keyValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntityItemList``1(System.String,System.Object[])">
            <summary>
            Get Entity using <see cref="T:Nistec.Data.Entities.EntityContext"/> with mapping name and keys filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mappingName"></param>
            <param name="keyValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntityFilterList``1(System.String,Nistec.Data.DataFilter)">
            <summary>
            Get Entity list using <see cref="T:Nistec.Data.Entities.EntityContext"/> with mapping name and <see cref="T:Nistec.Data.DataFilter"/> filter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mappingName"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntitySaveChanges``1(``0,System.Boolean)">
            <summary>
            Save entity changes to update or insert if not exists.(EntitySaveChanges)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="InsertIfNotExists"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntitySave``1(``0)">
            <summary>
            Save all entity fields to db update or insert.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntityUpsert``1(Nistec.Data.Entities.GenericEntity)">
            <summary>
            Save entity to db update or insert.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntityUpsert(Nistec.Data.Entities.GenericEntity)">
            <summary>
            Save entity to db update or insert using <see cref="T:Nistec.Data.Entities.GenericEntity"/>.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntityInsert``1(``0)">
            <summary>
            Set entity using <see cref="T:Nistec.Data.UpdateCommandType"/> commandType such as update,insert,delete.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntityUpdate``1(``0,``0)">
            <summary>
            Update entity changes from original to new one.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalEntity"></param>
            <param name="newEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntityUpdate``1(``0)">
            <summary>
            Update entity changes by getting the original from db and save changes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntityDelete``1(``0)">
            <summary>
            Entity delete command by mapping name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntityItemDelete(System.String,System.Object[])">
            <summary>
            Entity delete command by mapping name and name value parameters.
            </summary>
            <param name="mappingName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.EntityDelete``1(System.Object[])">
            <summary>
            Entity delete command by mapping name and name value parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.ExecuteOutput(System.String,System.Object[])">
            <summary>
            Executes a command NonQuery and returns <see cref="T:Nistec.Data.Entities.EntityCommandResult"/> OutptResults and the number of rows affected.
            </summary>
            <param name="procName"></param>
            <param name="keyValueDirectionParameters"></param>
            <returns><see cref="T:Nistec.Data.Entities.EntityCommandResult"/></returns> 
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.ExecuteReturnValue(System.String,System.Int32,System.Object[])">
            <summary>
            Executes StoredProcedure as NonQuery and returns the RetrunValue.
            </summary>
            <param name="procName"></param>
            <param name="returnIfNull"></param>
            <param name="nameValueParameters"></param>
            <returns><see cref="T:System.Int32"/></returns> 
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes StoredProcedure as NonQuery Command  and returns effective records..
            </summary>
            <param name="procName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.ExecuteScalar``1(System.String,``0,System.Object[])">
            <summary>
            Executes StoredProcedure and returns T value such as (String|Number|DateTime) or any primitive type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="procName"></param>
            <param name="returnIfNull"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.ExecuteSingle``1(System.String,System.Object[])">
            <summary>
            Executes StoredProcedure and returns T value such as (DataSet|DataTable|DataRow) or any entity class.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="procName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.ExecuteList``1(System.String,System.Object[])">
            <summary>
            Executes StoredProcedure and returns List of T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="procName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.ExecuteKeyValueList(System.String,System.Object[])">
            <summary>
            Executes StoredProcedure and returns KeyValueList.
            </summary>
            <param name="procName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.ExecuteCommand``1(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            Executes sql as NonQuery Command  and returns T value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.ExecuteCommand(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            Executes sql as NonQuery Command  and returns effective records..
            </summary>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.ExecuteCommandUpdate(System.String,System.String,System.String,System.Object[])">
            <summary>
            Executes sql update as NonQuery Command  and returns effective records..
            </summary>
            <param name="mappingName"></param>
            <param name="setCommand"></param>
            <param name="whereCommand"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.ExecuteCommandInsert(System.String,System.Object[])">
            <summary>
            Executes sql insert as NonQuery Command  and returns effective records..
            </summary>
            <param name="mappingName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.QueryScalar``1(System.String,``0,System.Object[])">
            <summary>
            Executes StoredProcedure and returns T value such as (String|Number|DateTime) or any primitive type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandText"></param>
            <param name="returnIfNull"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.QuerySingle``1(System.String,System.Object[])">
            <summary>
            Executes CommandType.Text and returns T value such as (DataSet|DataTable|DataRow) or any entity class..
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandText"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.Query``1(System.String,System.Object[])">
            <summary>
            Executes CommandType.Text and returns List of T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandText"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.QueryKeyValueList(System.String,System.Object[])">
            <summary>
            Executes CommandType.Text and returns KeyValueList.
            </summary>
            <param name="commandText"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.QueryDictionary``1(System.String,System.String,System.String,System.Object[])">
            <summary>
            Executes CommandType.Text and returns Dictionary.
            </summary>
            <param name="keyField"></param>
            <param name="valueField"></param>
            <param name="mappingName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.QueryDictionary(System.String,System.Object[])">
            <summary>
            Executes CommandType.Text and returns Dictionary.
            </summary>
            <param name="commandText"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.ExecuteDictionary(System.String,System.Object[])">
            <summary>
            Executes StoredProcedure and returns Dictionary.
            </summary>
            <param name="procName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.ExecuteDictionary``1(System.String,System.String,System.String,System.Object[])">
            <summary>
            Executes StoredProcedure and returns Dictionary.
            </summary>
            <param name="keyField"></param>
            <param name="valueField"></param>
            <param name="procName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.QueryJsonResults(System.String,System.Object[])">
            <summary>
            Executes CommandType.Text and returns <see cref="T:Nistec.Serialization.JsonResults"/>.
            </summary>
            <param name="commandText">Command text or mapping name</param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.QueryJson(System.String,System.Object[])">
            <summary>
            Executes CommandType.Text and returns Json.
            </summary>
            <param name="commandText">Command text or mapping name</param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.QueryJsonArray(System.String,System.Object[])">
            <summary>
            Executes CommandType.Text and returns Json array.
            </summary>
            <param name="commandText">Command text or mapping name</param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.ExecuteJsonArray(System.String,System.Object[])">
            <summary>
            Executes CommandType.StoredProcedure and returns Json array.
            </summary>
            <param name="procName">Command text or mapping name</param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.ExecuteJson(System.String,System.Object[])">
            <summary>
            Executes StoredProcedure and returns Json.
            </summary>
            <param name="procName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.QueryJsonRecord(System.String,System.Object[])">
            <summary>
            Executes CommandType.Text and returns Json.
            </summary>
            <param name="commandText"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.ExecuteJsonResult(System.String,System.Object[])">
            <summary>
            Executes StoredProcedure and returns JsonResults.
            </summary>
            <param name="procName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.ExecuteJsonRecord(System.String,System.Object[])">
            <summary>
            Executes StoredProcedure and returns Json.
            </summary>
            <param name="procName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.QueryDictionaryRecord(System.String,System.Object[])">
            <summary>
            Executes CommandType.Text and returns Dictionary.
            </summary>
            <param name="commandText"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.ExecuteDictionaryRecord(System.String,System.Object[])">
            <summary>
            Executes StoredProcedure and returns Dictionary.
            </summary>
            <param name="procName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.QueryDataTable(System.String,System.Object[])">
            <summary>
            Executes CommandType.Text and returns DataTable.
            </summary>
            <param name="commandText"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.ExecuteDataTable(System.String,System.Object[])">
            <summary>
            Executes StoredProcedure and returns DataTable.
            </summary>
            <param name="procName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes StoredProcedure and returns DataSet.
            </summary>
            <param name="procName"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.DbContext.QueryReader(System.String,System.Data.CommandBehavior,System.Object[])">
            <summary>
            Executes Command and returns IDataReader.
            </summary>
            <param name="commandText"></param>
            /// <param name="behavior"></param>
            <param name="nameValueParameters"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Entities.DbContextAttribute">
            <summary>
            This attribute defines properties of DbContext Attribute
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.DbContextAttribute"/> class
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextAttribute.#ctor(System.String,System.String,Nistec.Data.DBProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.DbContextAttribute"/> class
            </summary>
            <param name="connectionName"></param>
            <param name="connectionString"></param>
            <param name="provider"></param>
        </member>
        <member name="M:Nistec.Data.Entities.DbContextAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.DbContextAttribute"/> class
            </summary>
            <param name="connectionKey"></param>
        </member>
        <member name="P:Nistec.Data.Entities.DbContextAttribute.ConnectionKey">
            <summary>
            Property ConnectionKey. 
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.DbContextAttribute.ConnectionString">
            <summary>
            Parameter MappingName represent the DB entity (Table|View).
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.DbContextAttribute.Provider">
            <summary>
            Parameter Provider represent the DB provider.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.DbContextAttribute.IsConnectionStringDefined">
            <summary>
            Is ConnectionString Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.DbContextAttribute.IsConnectionKeyDefined">
            <summary>
            Is ConnectionKey Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.DbContextAttribute.IsConnectionDefined">
            <summary>
            Is Connection Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.DbContextAttribute.IsValid">
            <summary>
            Is Property has valid Definition
            </summary>
        </member>
        <member name="T:Nistec.Data.Entities.EntityBase">
             <summary>
            Represent base EntityValue.
             </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.Dispose">
            <summary>
            This object will be cleaned up by the Dispose method. 
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityBase.IsDataSourceEmpty">
            <summary>
            Get the value indicating that data source IsEmpty
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityBase.EntityDataSource">
            <summary>
            Get or Set Data source for mulitple items
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityBase.Count">
            <summary>
            Get items count in DataSource
            </summary>
            <returns>int</returns>
        </member>
        <member name="P:Nistec.Data.Entities.EntityBase.Position">
            <summary>
            Get or set the Current Index position
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.Next">
            <summary>
            Go to next record
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.GoTo(System.Int32)">
            <summary>
            Go To Position safety, if index is out of range do nothing 
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.DataSourceEntities``1">
            <summary>
            Create list of entities form  DataSource that implement IEntity
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:Nistec.Data.Entities.EntityException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.InitEntity``1(System.String,System.String,Nistec.Data.Entities.EntitySourceType,Nistec.Data.Entities.EntityKeys)">
            <summary>
            Init EntityDbContext using current instance of <see cref="T:Nistec.Data.Entities.DbContext"/> 
            </summary>
            <typeparam name="Dbc"></typeparam>
            <param name="entityName"></param>
            <param name="mappingName"></param>
            <param name="sourceType"></param>
            <param name="keys"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.InitEntity(System.String,System.String,System.String,Nistec.Data.Entities.EntitySourceType,Nistec.Data.Entities.EntityKeys)">
            <summary>
            Init Entity for db provider by connection string and entity keys
            </summary>
            <param name="connectionKey"></param>
            <param name="entityName"></param>
            <param name="mappingName"></param>
            <param name="sourceType"></param>
            <param name="keys"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.InitEntity(Nistec.Data.Entities.EntityDbContext)">
            <summary>
            Init Entity by EntityDbContext
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.InitEntity(Nistec.Data.Entities.EntityDbContext,Nistec.Data.DataFilter)">
            <summary>
            Init Entity by EntityDbContext and specified filter for data source
            </summary>
            <param name="db"></param>
            <param name="dataSourceFilter"></param>
        </member>
        <member name="P:Nistec.Data.Entities.EntityBase.EntityDb">
            <summary>
            Get or Set EntityDbContext
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.ValidateEntityDb">
            <summary>
            Validate if entity has connection properties
            </summary>
            <exception cref="T:Nistec.Data.Entities.EntityException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.HasConnection">
            <summary>
            Indicate if entity has connection properties
            </summary>
            <exception cref="T:Nistec.Data.Entities.EntityException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.GetValidValue``1(``0)">
            <summary>
            Get Valid Value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.GetValue``1">
            <summary>
            GetValue return the field value, 
            if field is null and field type is ValueType it's return defaultValue 
            0 for numeric type, now for date and false for bool
            otherwise it's return null
            </summary>
            <typeparam name="T"></typeparam>
            <returns>object</returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.SetValidValue``1(``0,``0)">
            <summary>
            Set Valid Value
            </summary>
            <param name="value"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.SetValidValue``1(``0,``0,System.String)">
            <summary>
            Set Valid Value with validation
            </summary>
            <param name="value"></param>
            <param name="defaultValue">if value=null or StringEmpty and defaultValue=null it's throw ArgumentNullException</param>
            <param name="regexValidation">Regex Validation Pattern</param>
            <exception cref="T:System.ArgumentNullException">when value is null or StringEmpty and defaultValue=null</exception>
            <exception cref="T:System.ArgumentException">when value is not valid</exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.SetValue``1(``0)">
            <summary>
            Set Value
            </summary>
            <returns>object</returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.GetValues">
            <summary>
            Get values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.SaveChanges">
            <summary>
            Save all Changes to DB and return number of AffectedRecords
            If not <see cref="!:IsDirty"/> which mean no changed has been made return 0
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Entities.EntityBase.Item(System.String)">
            <summary>
            Get or Set Active Value
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.Refresh">
            <summary>
            Refresh
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityBase.EntityRecord">
            <summary>
            Get or Set properties values as IDictionary
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityBase.IsReadOnly">
            <summary>
            Get or Set indicate if is it ReadOnly
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.GetValue``1(System.String)">
            <summary>
            GetValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <returns>T</returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.GetValue``1(System.String,``0)">
            <summary>
            GetValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <returns>if null or error return defaultValue</returns>
            <returns>T</returns>
        </member>
        <member name="P:Nistec.Data.Entities.EntityBase.IsEmpty">
            <summary>
            Get Indicate if entity is empty
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.TryGetValue``1(System.String,``0@)">
             <summary>
                 Gets the value associated with the specified key.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="field">The key whose value to get.</param>
             <param name="value">
                 When this method returns, the value associated with the specified key, if
                 the key is found; otherwise, the default value for the type of the value
                 parameter. This parameter is passed uninitialized.
            </param>
             <returns>
                 true if the object that implements System.Collections.Generic.IDictionary
                 contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.SetValue``1(System.String,``0)">
            <summary>
            SetValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <param name="value">the T value to insert</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.SetValue(System.String,System.Object)">
            <summary>
            SetValue
            </summary>
            <param name="field">the column name in data row</param>
            <param name="value">the value to insert</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityBase.ActiveProperties">
            <summary>
            Get ActiveProperties that implement <see cref="T:Nistec.Data.Entities.EntityPropertyAttribute"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Entities.EntityBase.EntityProperties">
            <summary>
            Get EntityProperties
            </summary>
        </member>
        <member name="T:Nistec.Data.Entities.EntityCommandResult">
            <summary>
            Represet Entity command result
            </summary>
        </member>
        <member name="T:Nistec.Data.Entities.EntityCommandBuilder">
            <summary>
            This class is similar to the System.Data.SqlClient.SqlCommandBuilder, but use only the Class Properties to create the required commands.
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityCommandBuilder.Dispose">
            <summary>
            This object will be cleaned up by the Dispose method. 
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityCommandBuilder.ExecCommand(Nistec.Data.UpdateCommandType)">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <param name="commandType"><see cref="T:Nistec.Data.UpdateCommandType"/> enumeration value</param>
            <returns>int</returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityCommandBuilder.ExecuteCommand(Nistec.Data.UpdateCommandType)">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <param name="commandType"><see cref="T:Nistec.Data.UpdateCommandType"/> enumeration value</param>
            <returns>int</returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityCommandBuilder.ExecuteQuery(System.String)">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <param name="commandText">StoredProcedure name</param>
            <returns>int</returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityCommandBuilder.SetParameters(Nistec.Data.UpdateCommandType)">
            <summary>
            Generates command parameters. 
            For some command types the command text can be changed during parameter generating.
            </summary>
            <param name="commandType"><see cref="T:Nistec.Data.DBCommandType"/> enumeration value</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityCommandBuilder.AddWithDelim(System.String,System.String,System.String)">
            <summary>
            Concats two strings with a delimiter.
            </summary>
            <param name="s1">string 1</param>
            <param name="delim">delimiter</param>
            <param name="s2">string 2</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityCommandBuilder.GetRefType(System.Type)">
            <summary>
            Returns type from reference type.
            </summary>
            <param name="type">Reference type value.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityCommandBuilder.CompareAsNullValues(System.Object,System.Object,System.Type)">
            <summary>
            Compares parameter value with a value that must be treated as DBNull.
            </summary>
            <param name="AsNull">The value that must be treated as DBNull</param>
            <param name="ParamValue">The parameter value.</param>
            <param name="ParamType">Type of the parameter value.</param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Entities.DynamicEntityLocalizer">
            <summary>
            DynamicEntityLang
            </summary>
        </member>
        <member name="T:Nistec.Data.Entities.EntityLocalizer">
            <summary>
            EntityLang
            </summary>
        </member>
        <member name="T:Nistec.Data.Entities.EntityPropertyType">
            <summary>
            Parameter type enumeration for <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.ParameterType"/> property
            of <see cref="T:Nistec.Data.Entities.EntityPropertyType"/> attribute.
            </summary>
        </member>
        <member name="F:Nistec.Data.Entities.EntityPropertyType.Default">
            <summary>
            The parameter is defaul and has not special role.
            </summary>
        </member>
        <member name="F:Nistec.Data.Entities.EntityPropertyType.Key">
            <summary>
            This parameter is a part of a table key 
            and is applicable only 
            </summary>
        </member>
        <member name="F:Nistec.Data.Entities.EntityPropertyType.Identity">
            <summary>
            This parameter is a part of a table autoincremental field 
            and is applicable only 
            </summary>
        </member>
        <member name="F:Nistec.Data.Entities.EntityPropertyType.NA">
            <summary>
            This parameter is not part of a table
            and is applicable only 
            </summary>
        </member>
        <member name="F:Nistec.Data.Entities.EntityPropertyType.View">
            <summary>
            The parameter is a part of a table but for view only.
            </summary>
        </member>
        <member name="F:Nistec.Data.Entities.EntityPropertyType.Optional">
            <summary>
            The parameter is an optional part of a table but for view only.
            </summary>
        </member>
        <member name="T:Nistec.Data.Entities.EntityPropertyAttribute">
            <summary>
            This attribute defines properties of method's properties
            </summary>
        </member>
        <member name="F:Nistec.Data.Entities.EntityPropertyAttribute.NullValueToken">
            <summary>
             Null Value Return
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityPropertyAttribute"/> class
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityPropertyAttribute"/> class
            </summary>
            <param name="name">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.Name"/> property</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityPropertyAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityPropertyAttribute"/> class
            </summary>
            <param name="size">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.Size"/> property</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityPropertyAttribute.#ctor(Nistec.Data.Entities.EntityPropertyType)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityPropertyAttribute"/> class
            </summary>
            <param name="parameterType">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.ParameterType"/> property</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityPropertyAttribute.#ctor(Nistec.Data.Entities.EntityPropertyType,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityPropertyAttribute"/> class
            </summary>
            <param name="parameterType">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.ParameterType"/> property</param>
            <param name="name">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.Name"/> property</param>
            <param name="column">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.Column"/> property</param>
            <param name="order">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.Order"/> property</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityPropertyAttribute.#ctor(Nistec.Data.Entities.EntityPropertyType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityPropertyAttribute"/> class
            </summary>
            <param name="parameterType">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.ParameterType"/> property</param>
            <param name="size">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.Size"/> property</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityPropertyAttribute.#ctor(Nistec.Data.Entities.EntityPropertyType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityPropertyAttribute"/> class
            </summary>
            <param name="parameterType">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.ParameterType"/> property</param>
            <param name="allowNull">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.AllowNull"/> property</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityPropertyAttribute.#ctor(Nistec.Data.Entities.EntityPropertyType,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityPropertyAttribute"/> class
            </summary>
            <param name="parameterType">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.ParameterType"/> property</param>
            <param name="size">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.Size"/> property</param>
            <param name="allowNull">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.AllowNull"/> property</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityPropertyAttribute.#ctor(Nistec.Data.Entities.EntityPropertyType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityPropertyAttribute"/> class
            </summary>
            <param name="parameterType">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.ParameterType"/> property</param>
            <param name="name">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.Name"/> property</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityPropertyAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityPropertyAttribute"/> class
            </summary>
            <param name="name">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.Name"/> property</param>
            <param name="size">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.Size"/> property</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityPropertyAttribute.#ctor(System.String,System.Boolean,System.Data.DbType,System.Int32,System.Object,Nistec.Data.Entities.EntityPropertyType,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Entities.EntityPropertyAttribute"/> class with the specified arguments.
            </summary>
            <param name="name">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.Name"/> property</param>
            <param name="allowNull">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.AllowNull"/> property</param>
            <param name="sqlDbType">Is a value of <see cref="T:System.Data.DbType"/> property</param>
            <param name="size">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.Size"/> property</param>
            <param name="asNull">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.AsNull"/> property</param>
            <param name="parameterType">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.ParameterType"/> property</param>
            <param name="column">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.Column"/> property</param>
            <param name="caption">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.Caption"/> property</param>
            <param name="order">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.Order"/> property</param>
            <param name="resourceKey">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.ResourceKey"/> property</param>
            <param name="paramName">Is a value of <see cref="P:Nistec.Data.Entities.EntityPropertyAttribute.ParamName"/> property</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityPropertyAttribute.GetAttributeBuilder(Nistec.Data.Entities.EntityPropertyAttribute)">
            <summary>
            An attribute builder method
            </summary>
            <param name="attr"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.Name">
            <summary>
            Parameter name.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.Column">
            <summary>
            Parameter column. usefull for DB field mapping
            If this property is not defined 
            then a method parameter Name is used.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.Caption">
            <summary>
            Parameter caption. usefull for UI
            If this property is not defined 
            then a method parameter Column is used.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.Order">
            <summary>
            Get or Set The order of properties (Must be greater then zero). 
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.Size">
            <summary>
            Sql parameter size. 
            It is strongly recomended to define this property for string parameters
            so that they could be trimmed to the size specified.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.AsNull">
            <summary>
            This parameter contains a value that will be interpreted as null. 
            This is usefull if you want to pass a null to a value type parameter.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.ParameterType">
            <summary>
            Parameter Type
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.ParamName">
            <summary>
            Parameter Name
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.IsNA">
            <summary>
            Get indecate if propertyType is NA
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.IsIdentity">
            <summary>
            Get indecate if propertyType is Identity
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.IsKeyOrIdentity">
            <summary>
            Get indecate if propertyType is Key or Identity
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.SqlDbType">
            <summary>
            Sql parameter type. 
            If not defined then method parameter type is converted to <see cref="T:System.Data.DbType"/> type
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.AllowNull">
            <summary>
            Indicate if parameter allow null value.
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.ResourceKey">
            <summary>
            Resource Key.
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityPropertyAttribute.GetCaption(System.String)">
            <summary>
            Get Caption or property name if Caption not Defined
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityPropertyAttribute.GetColumn(System.String)">
            <summary>
            Get Column or property name if Column not Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.IsResourceKeyDefined">
            <summary>
            Is Resource Key Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.IsCaptionDefined">
            <summary>
            Is Caption Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.IsClientPropertyDefined">
            <summary>
            Is Client property Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.IsNameDefined">
            <summary>
            Is Name Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.IsColumnDefined">
            <summary>
            Is Source Column Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.IsParamNameDefined">
            <summary>
            Is parameter name Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.IsSizeDefined">
            <summary>
            Is Size Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityPropertyAttribute.IsTypeDefined">
            <summary>
            Is Type Defined
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityPropertyBuilder.CreateGenericRecord(System.Object,System.Boolean)">
            <summary>
            Create <see cref="T:Nistec.Generic.GenericRecord"/> from EntityContext instance.
            </summary>
            <param name="instance"></param>
            <param name="EnablePropertyTypeView"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Entities.EntityTable">
            <summary>
            Represent an entity table that contains a multiple rows.
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityTable.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityTable.#ctor(System.Object[])">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityTable.#ctor(System.Data.DataTable)">
            <summary>
            ctor
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityTable.EntityBind">
            <summary>
            Bind to EntityDbContext, Occured on constrauctor
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityTable.InitSchema(System.Data.DataTable)">
            <summary>
            Init data source schema
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityTable.Init(System.Data.DataTable)">
            <summary>
            Init data source
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityTable.Init(System.Data.DataTable,System.Boolean)">
            <summary>
            Init data source
            </summary>
            <param name="table"></param>
            <param name="isCopy"></param>
            <param name="readOnly"></param>
        </member>
        <member name="P:Nistec.Data.Entities.EntityTable.EntityRecord">
            <summary>
            Get properties values as IDictionary
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityTable.GetValue``1(System.String)">
            <summary>
            GetValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <returns>object</returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityTable.GetValue``1(System.String,``0)">
            <summary>
            GetValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <returns>if null or error return defaultValue</returns>
            <returns>T</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nistec.Data.Entities.EntityTable.TryGetValue``1(System.String,``0@)" -->
        <member name="M:Nistec.Data.Entities.EntityTable.SetValue``1(System.String,``0)">
            <summary>
            SetValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <param name="value">the T value to insert</param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityTable.SetValue(System.String,System.Object)">
            <summary>
            Set Value
            </summary>
            <param name="field">the column name in data row</param>
            <param name="value">the T value to insert</param>
        </member>
        <member name="P:Nistec.Data.Entities.EntityTable.IsEmpty">
            <summary>
            Get the value indicating that data source IsEmpty
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityTable.Refresh">
            <summary>
            Refresh
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityTable.GoTo(System.Object[])">
            <summary>
            Find and load entity record from DataSource that contains the specified primary key values.
            </summary>
            <param name="keys"></param>
            <returns>true if found else false</returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityTable.OnAsyncCompleted(Nistec.Threading.AsyncDataResultEventArgs)">
            <summary>
            Occured when Async command Completed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityTable.OnAsyncProgress(Nistec.Threading.AsyncProgressEventArgs)">
            <summary>
            Occured when Async command in Progress
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityTable.OnReadOnlyChanged(System.EventArgs)">
            <summary>
            Occured when ReadOnly property Changed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityTable.SaveChanges">
            <summary>
            Save all Changes to DB and return number of AffectedRecords
            If not <see cref="!:IsDirty"/> which mean no changed has been made return 0
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityTable.FillEntity">
            <summary>
            Fill data source entity using current EntityDbContext
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityTable.EntityAsyncCmd">
            <summary>
            Get EntityAsyncCommand
            </summary>
        </member>
        <member name="T:Nistec.Data.Entities.EntityTable.EntityAsyncCommand">
            <summary>
            Represent an async entity command
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityTable.EntityAsyncCommand.AsyncTimeout">
            <summary>
            Get or Set the Timeout in milliseconds,the minimum is 1000 milliseconds
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityTable.EntityAsyncCommand.IsRunning">
            <summary>
            Get the value indicating that command is running
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityTable.EntityAsyncCommand.AsyncExecute">
            <summary>
            Execute async command and fill entity data source
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityTable.EntityAsyncCommand.AsyncExecute(System.UInt32)">
            <summary>
            Execute async command and fill entity data source
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:Nistec.Data.Entities.EntityTable.EntityAsyncCommand.StopExecution">
            <summary>
            Stop executing
            </summary>
        </member>
        <member name="T:Nistec.Data.Entities.EntityView">
            <summary>
            EntityView.
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityView.#ctor(System.Object[])">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.EntityView.#ctor(Nistec.Generic.KeySet)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityView.View">
            <summary>
            Get or Set DataSource
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.EntityView.Count">
            <summary>
            Get Count
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityView.Select(System.String,System.String,System.Data.DataViewRowState)">
            <summary>
            Get ActiveView by filterExpression
            </summary>
            <param name="filterExpression"></param>
            <param name="sort"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityView.Select(System.String,System.String)">
            <summary>
            Get ActiveView by filterExpression
            </summary>
            <param name="filterExpression"></param>
            <param name="sort"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityView.Select(System.String)">
            <summary>
            Get ActiveView by filterExpression
            </summary>
            <param name="filterExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityView.Find(System.String,System.Object)">
            <summary>
            Find
            </summary>
            <param name="columnName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityView.Find(System.String,System.Object[])">
            <summary>
            Find
            </summary>
            <param name="columns"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityView.Find(System.Object[])">
            <summary>
            Find
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityView.CompareRecord(System.Int32,System.String,System.Object)">
            <summary>
            CompareRecord
            </summary>
            <param name="index"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityView.MoveTo(System.String,System.Object)">
            <summary>
            MoveTo
            </summary>
            <param name="columnName"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.EntityView.MoveTo(System.String,System.Object[])">
            <summary>
            MoveTo
            </summary>
            <param name="columns"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Entities.GenericDataTable">
            <summary>
            Represent Generic Data Values
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.#ctor(System.Data.DataTable)">
            <summary>
            Intiliaize a new instance of <see cref="T:Nistec.Data.Entities.GenericDataTable"/> with
            specified System.Data.DataTable and default missing schema.
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.#ctor(System.Data.DataTable,System.Data.MissingSchemaAction)">
            <summary>
            Intiliaize a new instance of <see cref="T:Nistec.Data.Entities.GenericDataTable"/> with
            specified System.Data.DataTable and missing schema.
            </summary>
            <param name="dt"></param>
            <param name="missingSchemaAction"></param>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.ToRecords">
            <summary>
            Get values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.ToRecord(System.Int32)">
            <summary>
            Get values as <see cref="T:Nistec.Generic.GenericRecord"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.CancelEdit">
            <summary>
            Canceles the current edit on the row.
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.BeginEdit">
            <summary>
            Starts an edit operation on a System.Data.DataRow object.
            </summary>
            <exception cref="T:System.Data.InRowChangingEventException">The method was called inside the System.Data.DataTable.RowChanging event.</exception>
            <exception cref="T:System.Data.DeletedRowInaccessibleException">The method was called upon a deleted row.</exception>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.ClearErrors">
            <summary>
            Clears the errors for the row. This includes the System.Data.DataRow.RowError
            and errors set with System.Data.DataRow.SetColumnError(System.Int32,System.String).
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.Delete">
             <summary>
             Deletes the current System.Data.DataRow.
             </summary>
            <exception cref="T:System.Data.DeletedRowInaccessibleException">The System.Data.DataRow has already been deleted.</exception>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.EndEdit">
            <summary>
            Ends the edit occurring on the row.
            </summary>
            <exception cref="T:System.Data.InRowChangingEventException">The method was called inside the System.Data.DataTable.RowChanging event.</exception>
            <exception cref="T:System.Data.ConstraintException">The edit broke a constraint.</exception>
            <exception cref="T:System.Data.ReadOnlyException">The row belongs to the table and the edit tried to change the value of a
                read-only column.</exception>
            <exception cref="T:System.Data.NoNullAllowedException">The edit tried to put a null value into a column where System.Data.DataColumn.AllowDBNull
                is false.</exception>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.IsCurrentValid(System.Boolean)">
            <summary>
            Validate current index
            </summary>
            <param name="validateEdit"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.ValidateCurrent">
            <summary>
            Validate data and index position
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Nistec.Data.Entities.GenericDataTable.HasPrimaryKey">
            <summary>
            Get inducate if Data has PrimaryKey columns
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.GenericDataTable.PrimaryKeys">
            <summary>
            Get <see cref="T:Nistec.Data.Entities.EntityKeys"/>
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.SetPrimaryKeys(Nistec.Data.Entities.EntityKeys)">
            <summary>
            Set Primary Keys
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.Find``1(``0,System.String,System.Object)">
            <summary>
            Find Record in data and return entity with found record
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
            <param name="columnName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.Find``1(``0,System.Object[])">
            <summary>
            Find Record in data and return entity with found record
            </summary>
            <param name="entity"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.Find(System.String,System.Object)">
            <summary>
            Find Record in data and return entity with found record
            </summary>
            <param name="columnName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.FindRecord(System.Int32,System.Object)">
            <summary>
            Find Record by column index and field value and return the row index, if not found return -1.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.FindRow(System.Object[])">
            <summary>
            Gets the index of the specified row object.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.Find(System.Object[])">
            <summary>
            Gets the row that contains the specified primary key values.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.GetActiveRow">
            <summary>
            Gets the current row .
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.CompareRecord(System.Int32,System.String,System.Object)">
            <summary>
            Compare Record and return if it's equal
            </summary>
            <param name="index"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Entities.GenericDataTable.Count">
            <summary>
            Get the total row count in this data source.
            </summary>
            <returns>int</returns>
        </member>
        <member name="P:Nistec.Data.Entities.GenericDataTable.Item(System.String)">
            <summary>
            Get or Set value by column name.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Entities.GenericDataTable.Item(System.Int32)">
            <summary>
            Get or Set value by column index.
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Entities.GenericDataTable.Item(System.Int32,System.String)">
            <summary>
            Get value by row index and column name.
            </summary>
            <param name="row"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Entities.GenericDataTable.Item(System.Int32,System.Int32)">
            <summary>
            Get value by row index and column index.
            </summary>
            <param name="row"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Entities.GenericDataTable.ItemArray">
            <summary>
            Get or Set ItemArray
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.GenericDataTable.IsEmpty">
            <summary>
            Get the value indicating that data source IsEmpty
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.GenericDataTable.IsDirty">
            <summary>
            Get indicate if data source has changes
            </summary>
        </member>
        <member name="P:Nistec.Data.Entities.GenericDataTable.Index">
            <summary>
            Get or Set DataSorce row index.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <exception cref="T:Nistec.Data.Entities.EntityException"></exception>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.Next">
            <summary>
            Go to next record, if index is out of range do nothing
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.Prev">
            <summary>
            Go to next record, if index is out of range do nothing
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.GoTo(System.Int32)">
            <summary>
            Go To Position safety, if index is out of range do nothing
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.GoTo(System.Object[])">
            <summary>
            Find and load entity record from DataSource that contains the specified primary key values.
            </summary>
            <param name="keys"></param>
            <returns>true if found else false</returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.GetValue``1(System.String)">
            <summary>
            Get value from current row index and field name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.GetValue``1(System.String,``0)">
            <summary>
            Get value from current row index and field name,if not found or error occured return default value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <returns>if null or error return defaultValue</returns>
            <returns>T</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nistec.Data.Entities.GenericDataTable.TryGetValue``1(System.String,``0@)" -->
        <member name="M:Nistec.Data.Entities.GenericDataTable.SetValue``1(System.String,``0)">
            <summary>
            Set Value to current row index and field name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <param name="value">the T value to insert</param>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.SetValue(System.String,System.Object)">
            <summary>
            Set Value to current row index and field name
            </summary>
            <param name="field">the column name in data row</param>
            <param name="value">the T value to insert</param>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.SetValue(System.Int32,System.Object)">
            <summary>
            Set Value to current row index and column Index
            </summary>
            <param name="columnIndex">the column name in data row</param>
            <param name="value">the T value to insert</param>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.CompareValues``1(System.String,``0)">
            <summary>
            Compare Values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <param name="value">the T value to Compare</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.Compare``1(``0,``0)">
            <summary>
             Compare  Values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.Create(Nistec.Data.Entities.EntityDbContext,System.Object[])">
            <summary>
            Initialize a new instance of GenericData
            </summary>
            <param name="db"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.Create(Nistec.Data.Entities.EntityDbContext,Nistec.Data.DataFilter)">
            <summary>
            Initialize a new instance of GenericData
            </summary>
            <param name="db"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.Create(Nistec.Data.Entities.EntityDbContext,System.Data.IDbDataParameter[])">
            <summary>
            Initialize a new instance of GenericData
            </summary>
            <param name="db"></param>
            <param name="parameters">SqlParameter array key value.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.GenericDataTable.Create``1(System.String,System.Data.IDbDataParameter[],System.Data.CommandType)">
            <summary>
            Initialize a new instance of GenericData
            </summary>
            <typeparam name="Dbc"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="cmdType">Specifies how a command string is interpreted.</param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Entities.IGenericEntity.Count">
            <summary>
            Gets the number of key/value pairs contained in the System.Collections.Hashtable.
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.IGenericEntity.ContainsKey(System.String)">
            <summary>
             Determines whether the System.Collections.Hashtable contains a specific key.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IGenericEntity.ContainsValue(System.Object)">
            <summary>
             Determines whether the System.Collections.Hashtable contains a specific value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IGenericEntity.Clear">
            <summary>
             Removes all elements from the System.Collections.Hashtable.
            </summary>
        </member>
        <member name="M:Nistec.Data.Entities.IGenericEntity.GetValue(System.String)">
            <summary>
            GetValue
            </summary>
            <param name="field">the column name in data row</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Entities.IGenericEntity.GetValue``1(System.String)">
            <summary>
            GetValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <returns>T</returns>
        </member>
        <member name="M:Nistec.Data.Entities.IGenericEntity.Load(System.Data.DataRow)">
            <summary>
            Load entity
            </summary>
            <param name="dr"></param>
        </member>
        <member name="M:Nistec.Data.Entities.IGenericEntity.Load(System.Collections.IDictionary)">
            <summary>
            Load entity
            </summary>
            <param name="dic"></param>
        </member>
        <member name="M:Nistec.Data.Entities.IEntity`1.Set(`0)">
            <summary>
            Set the current instance of <see cref="T:Nistec.Data.Entities.EntityContext"/>
            </summary>
            <param name="instance"></param>
        </member>
        <member name="P:Nistec.Data.Entities.IEntity`1.Entity">
            <summary>
            Get the current entity
            </summary>
        </member>
        <member name="T:Nistec.Data.Factory.AutoCommand">
             <summary>
             This class contains static method <see cref="M:Nistec.Data.Factory.AutoCommand.Execute(System.Data.IDbConnection,System.Data.IDbTransaction,System.Reflection.MethodInfo,System.Object[],System.Boolean)"/> to create and execute Sql commands
             </summary>
             <example >
             <code >
             
            	public sealed class Data: Nistec.Data.OleDb.AutoBase  
             {
            		public ClassDB dalDB{get{return (ClassDB)GetDalDB();}}
            		public CheqsProperty dalCheq{get{return (CheqsProperty)GetDalDB();}}
             }
             
            	public abstract class ClassDB : Nistec.Data.OleDb.DalDB
            	{
            
            		[DBCommand("SELECT ID FROM CheqProperty WHERE PropertyName=@name")]
            		public abstract object GetCheqPropertyID(string name);
            
            		[DBCommand("SELECT PropertyName FROM CheqProperty ")]
            		public abstract ArrayList GetCheqPropertyList();
            
            		[DBCommand("SELECT ID,PropertyName FROM CheqProperty")]
            		public abstract Record[] GetCheqPropertyRecords();
            	}
             
             private int GetPropertyID(string name)
             {
             	return (int)App.DB.dalDB.GetCheqPropertyID (name) ; 
             }
             
            	private void GetRecordList()
             {
            		Nistec.Data.Record[] rcd=App.DB.dalDB.GetCheqPropertyRecords();
            		System.Text.StringBuilder sb=new System.Text.StringBuilder (); 
            		string s="";
            		for(int i=0;i  rcd.Length ;i++)
            		{
            		s="DisplayMember : " + ((Nistec.Data.Record)rcd.GetValue (i)).DisplayMember.ToString () ; 
            		sb.Append (s);
            		s=" ,  ValueMember : " + ((Nistec.Data.Record)rcd.GetValue (i)).ValueMember.ToString ()+ "\n\r" ; 
            		sb.Append (s);
            		}
            		MessageBox.Show (sb.ToString ());
             }
            	private void GetList()
            	{
            
            		System.Text.StringBuilder sb=new System.Text.StringBuilder (); 
            		ArrayList list=App.DB.dalDB.GetCheqPropertyList ();
            		for(int i=0;i list.Count ;i++)
            		{
                      sb.Append (list[i].ToString () + "\n\r");
                           
            		}
            		MessageBox.Show (sb.ToString ());
             }
             </code>
             </example>
        </member>
        <member name="M:Nistec.Data.Factory.AutoCommand.Execute(System.Data.IDbConnection,System.Data.IDbTransaction,System.Reflection.MethodInfo,System.Object[],System.Boolean)">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <param name="connection">Connection property.</param>
            <param name="transaction">Transaction property.</param>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/> type object from which the command object is built.</param>
            <param name="values">Array of values for the command parameters.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="T:Nistec.Data.Factory.CommandFactory">
            <summary>
            Base class for CommandFactory class. You can inherint your classes from 
            this base class.
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.CommandFactory.CreateAdapter">
            <summary>
            Create Adapter as <see cref="T:Nistec.Data.Factory.IDbAdapter"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.CommandFactory.BuildCommandText(System.Data.IDbCommand,Nistec.Data.DBCommandType,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Build Command Text
            </summary>
            <param name="command"></param>
            <param name="commandType"></param>
            <param name="TableName"></param>
            <param name="cmdPart1"></param>
            <param name="cmdPart2"></param>
            <param name="cmdPart3"></param>
            <param name="cmdPart4"></param>
            <param name="autNumberField"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.CommandFactory.ExecuteInternal(System.Data.IDbConnection,System.Data.IDbTransaction,System.Reflection.MethodInfo,System.Object[],System.Boolean,System.Int32)">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <param name="connection">Connection property.</param>
            <param name="transaction">Transaction property.</param>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/> type object from which the command object is built.</param>
            <param name="values">Array of values for the command parameters.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.CommandFactory.SetParameters(System.Data.IDbCommand,System.Reflection.MethodInfo,System.Object[],System.Int32[],Nistec.Data.DBCommandType)">
            <summary>
            Generates command parameters. 
            For some command types the command text can be changed during parameter generating.
            </summary>
            <param name="command">Command object.</param>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/> type object</param>
            <param name="values">Array of values for the command parameters.</param>
            <param name="commandType"><see cref="T:Nistec.Data.DBCommandType"/> enumeration value</param>
            <param name="indexes">Array of parameter indexes.</param>
        </member>
        <member name="M:Nistec.Data.Factory.CommandFactory.RunCommand(System.Data.IDbCommand,System.Type,System.Boolean,System.Data.MissingSchemaAction,System.Boolean)">
            <summary>
            Executes a command object according to the return type.
            </summary>
            <param name="cmd">The command object.</param>
            <param name="retType">Return type</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="missingSchemaAction">Determines <see cref="T:System.Data.MissingSchemaAction"/> type value in case of filling a datasets.</param>
            <param name="isScalar">Determines if the command is a lookup function.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.CommandFactory.RunCommand``1(System.Data.IDbCommand,System.Boolean,System.Data.MissingSchemaAction,System.Boolean)">
            <summary>
            Executes a command object according to the return type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">The command object.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="missingSchemaAction">Determines <see cref="T:System.Data.MissingSchemaAction"/> type value in case of filling a datasets.</param>
            <param name="isScalar">Determines if the command is a lookup function.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="T:Nistec.Data.Factory.CommandAsync">
            <remarks>
            <example>
             private delegate void AsyncFillDelegate(IDataReader reader);
             private delegate void AsyncStatusDelegate(string Text);
             protected void AsyncHandleCallback(IAsyncResult result)
             {
                try
                {
                     AsyncFillDelegate del = new AsyncFillDelegate(dalAsync.AsyncFillDataSource);
                     this.Invoke(del, dalAsync.AsyncExecuteEnd(result));
            
                      // Do not close the reader here, because it is being used in 
                     // a separate thread. Instead, have the procedure you have
                     // called close the reader once it is done with it.
                 }
                 catch (Exception ex)
                 {
                     this.Invoke(new AsyncStatusDelegate(dalAsync.AsyncStatus), "Error: " + ex.Message);
               }
            }
             protected override bool Initialize()
            {
                dalAsync = new CommandAsync(ConnectionString);
                dalAsync.AsyncCompleted += new EventHandler(Async_AsyncCompleted);
                dalAsync.AsyncExecuteBegin(new AsyncCallback(AsyncHandleCallback));
            }
            
            void Async_AsyncCompleted(object sender, EventArgs e)
            {
                DataTable dt = dalAsync.AsyncResult_DataTable();
                dt.TableName = "Accounts";
                this.ctlNavBar.Init(dt);
            }
            
             </example>
            </remarks>
             
             <summary>
             Use CommandAsync to invoke Asynchronous Processing
             you can use 2 ways AsyncExecute or AsyncExecuteBegin and AsyncExecuteEnd
             for win form you have simple way to accomplish this is to call the Invoke
             method of the form, which calls the delegate you supply
             from the form's thread. 
             </summary>
        </member>
        <member name="M:Nistec.Data.Factory.CommandAsync.Factory(System.String,System.String)">
            <summary>
            Factory Create Async provider
            </summary>
            <param name="provider"></param>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.CommandAsync.Factory(Nistec.Data.DBProvider,System.String)">
            <summary>
            Factory Create Async provider
            </summary>
            <param name="provider">DBProvider</param>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="F:Nistec.Data.Factory.CommandAsync.m_disposed">
            <summary>
            Disposed flag.
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.CommandAsync.Dispose">
            <summary>
            Implementation of method of IDisposable interface.
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.CommandAsync.Dispose(System.Boolean)">
            <summary>
            Dispose method with a boolean parameter indicating the source of calling.
            </summary>
            <param name="disposing">Indicates from whare the method is called.</param>
        </member>
        <member name="M:Nistec.Data.Factory.CommandAsync.InnerDispose">
            <summary>
            Inner implementation of Dispose method.
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.CommandAsync.Finalize">
            <summary>
            Class destructor.
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.CommandAsync.Provider">
            <summary>
            Provider
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.CommandAsync.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.CommandAsync.GetParameters(System.String[],System.Object[])">
            <summary>
            GetParameters factory
            </summary>
            <param name="names"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.CommandAsync.#ctor">
            <summary>
            CommandAsync ctor
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.CommandAsync.m_connectionString">
            <summary>
            Inner class member representing OleDbConnection string
            </summary>
        </member>
        <member name="E:Nistec.Data.Factory.CommandAsync.AsyncCompleted">
            <summary>
            AsyncCompleted event occured when executing complited
            </summary>
        </member>
        <member name="E:Nistec.Data.Factory.CommandAsync.AsyncStatusChanged">
            <summary>
            AsyncStatusChanged event occured when status is changed
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.CommandAsync._AsyncIsExecuting">
            <summary>
            _AsyncIsExecuting
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.CommandAsync._AsyncDataSource">
            <summary>
            _AsyncDataSource
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.CommandAsync.AsyncIsExecuting">
            <summary>
            This flag ensures that the user does not attempt
            to restart the command or close the form while the 
            asynchronous command is executing.
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.CommandAsync.AsyncDisplayStatus">
            <summary>
            Get Async Display Status
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.CommandAsync.AsyncStatus">
            <summary>
            Get Async Display Status
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.CommandAsync.AsyncResult_DataTable">
            <summary>
            Get AsyncResult as DataTable
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.CommandAsync.AsyncResult_DataRows">
            <summary>
            Get AsyncResult as DataRows array
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.CommandAsync.AsyncResult_SingleRow">
            <summary>
            Get AsyncResult as SingleRow,if multi rows affected return the first row
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.CommandAsync.SetAsyncStatus(System.String,Nistec.Data.StatusPriority)">
            <summary>
            SetAsyncStatus
            </summary>
            <param name="Text"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Nistec.Data.Factory.CommandAsync.OnAsyncCompleted(System.EventArgs)">
            <summary>
            OnAsyncCompleted occured when executing complited
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.Data.Factory.CommandAsync.OnAsyncStatusChanged(System.EventArgs)">
            <summary>
            OnAsyncStatusChanged occured when status changed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.Data.Factory.CommandAsync.AsyncFillDataSource(System.Data.IDataReader)">
            <summary>
            AsyncFillDataSource
            You must Use this method as a target of invokation delegate
            to complit AsyncExecution ,
            fill the data source you need
            and close the IDaqtaReader as well.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Nistec.Data.Factory.CommandAsync.FillDataSourceSchema(System.Data.IDataReader,System.String)">
            <summary>
            FillDataSourceSchema
            </summary>
            <param name="reader"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:Nistec.Data.Factory.CommandAsync.AsyncExecuteBegin(System.AsyncCallback,System.String,System.Data.IDataParameter[],System.Int32,System.Int32)">
            <summary>
            AsyncExecuteBegin , use this method to begin invoke 
            Async procedure call, doing so makes it easier
            to call AsyncExecuteEnd in the callback procedure.
            </summary>
            <param name="callback">AsyncCallback</param>
            <param name="sql"></param>
            <param name="parameters">parameters </param>
            <param name="timeOut">Set time out, default =0</param>
            <param name="WaitForDelay">a few seconds before retrieving the real data use for a long-running query, default =0</param>
        </member>
        <member name="M:Nistec.Data.Factory.CommandAsync.AsyncExecuteEnd(System.IAsyncResult)">
            <summary>
            AsyncHandleCallback
            Retrieve the original command object, passed
            to this procedure in the AsyncState property
            of the IAsyncResult parameter.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Nistec.Data.Factory.CommandAsync.AsyncExecute(System.String,System.Data.IDataParameter[],System.Int32,System.Int32,System.Int32)">
            <summary>
            AsyncExecute , use this method to invoke 
            Async procedure call until is IsCompleted 
            </summary>
            <param name="sql"></param>
            <param name="parameters">parameters </param>
            <param name="timeOut">Set time out, default =0</param>
            <param name="interval">Waiting time for async thread, default =0</param>
            <param name="WaitForDelay">a few seconds before retrieving the real data use for a long-running query, default =0</param>
        </member>
        <member name="M:Nistec.Data.Factory.CommandAsync.Execute(System.String,System.Data.IDataParameter[],System.Int32,System.Int32)">
            <summary>
            AsyncExecute , use this method to invoke 
            Async procedure call until is IsCompleted 
            </summary>
            <param name="sql"></param>
            <param name="parameters">parameters </param>
            <param name="timeOut">Set time out, default =0</param>
            <param name="interval">Waiting time for async thread, default =0</param>
        </member>
        <member name="T:Nistec.Data.Factory.DbBase">
            <summary>
            Base class for every dal class. You can inherint your classes from 
            this base class or <see cref="T:Nistec.Data.IAutoDb">IAutoDb</see> interface
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.DbBase.m_disposed">
            <summary>
            Disposed flag.
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.Dispose">
            <summary>
            Implementation of method of IDisposable interface.
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.Dispose(System.Boolean)">
            <summary>
            Dispose method with a boolean parameter indicating the source of calling.
            </summary>
            <param name="disposing">Indicates from whare the method is called.</param>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.InnerDispose">
            <summary>
            Inner implementation of Dispose method.
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.DbBase.m_connectionString">
            <summary>
            Inner class member representing Connection string
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.DbBase.m_autoCloseConnection">
            <summary>
            Inner class member representing auto CloseConnection
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.DbBase.m_EnableCancelExecuting">
            <summary>
            EnableCancelExecuting
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.DbBase.m_Command">
            <summary>
            IDbCommand
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.DbBase.m_DBProvider">
            <summary>
            DBProvider
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.DbBase.DBProvider">
            <summary>
            Get DBProvider property
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.ConnectionOpen(System.Data.IDbCommand)">
            <summary>
            ConnectionOpen
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.ConnectionAutoClose(System.Data.IDbCommand)">
            <summary>
            ConnectionAutoClose
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.ConnectionClose(System.Data.IDbCommand,System.Boolean)">
            <summary>
            ConnectionClose
            </summary>
            <param name="cmd"></param>
            <param name="dispose">optional</param>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.ConnectionOpen">
            <summary>
            ConnectionOpen
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.ConnectionClose">
            <summary>
            ConnectionClose
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.DSum``1(System.String,System.String,System.String,System.Object[])">
            <summary>
            Sum function if no record found return 0
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Field">field name for return value</param>
            <param name="Table">Table name or View name</param>
            <param name="Where">Sql Where string </param>
            <param name="values">parameters values </param>
            <returns>retun object result</returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.DMax``1(System.String,System.String,System.String,System.Object[])">
            <summary>
            Max function if no record found return 0
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Field">field name for return value</param>
            <param name="Table">Table name or View name</param>
            <param name="Where">Sql Where string </param>
            <param name="values">parameters values </param>
            <returns>retun object result</returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.DMin``1(System.String,System.String,System.String,System.Object[])">
            <summary>
            Min function if no record found return 0
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Field">field name for return value</param>
            <param name="Table">Table name or View name</param>
            <param name="Where">Sql Where string </param>
            <param name="values">parameters values </param>
            <returns>retun object result</returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.DAvg``1(System.String,System.String,System.String,System.Object[])">
            <summary>
            Avg function if no record found return 0
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Field">field name for return value</param>
            <param name="Table">Table name or View name</param>
            <param name="Where">Sql Where string </param>
            <param name="values">parameters values </param>
            <returns>retun object result</returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.DCount(System.String,System.String,System.String,System.Object[])">
            <summary>
            Count function if no record found return 0
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Field">field name for return value</param>
            <param name="Table">Table name or View name</param>
            <param name="Where">Sql Where string </param>
            <param name="values">parameters values </param>
            <returns>retun int result</returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.Init(Nistec.Data.IAutoBase)">
            <summary>
            DB Constructor with IAutoBase
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.Init``1">
            <summary>
            DB Constructor with IDbContext
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.Init(System.String,Nistec.Data.DBProvider,System.Boolean)">
            <summary>
            DB Constructor with connection string
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.Init(System.Data.IDbConnection,System.Boolean)">
            <summary>
            DB Constructor with connection
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.DbBase.m_connection">
            <summary>
            Inner class member representing IDbConnection object
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.DbBase.m_transaction">
            <summary>
            Inner class member representing IDbTransaction object
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.DbBase.m_AsyncConnection">
            <summary>
            Async Connection object.
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.DbBase.AsyncConnection">
            <summary>
            Get async connection
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.DbBase.Connection">
            <summary>
            Gte or set Connection property
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.DbBase.Transaction">
            <summary>
            Gte or set Transaction property
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.LookupQuery``1(System.String,System.String,System.String,``0,System.Data.IDbDataParameter[])">
            <summary>
            Execute lookup function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Field">field name for return value</param>
            <param name="Table">Table name or View name</param>
            <param name="Where">Sql Where string,each paramet name should start with @ </param>
            <param name="returnIfNull">Default value to return if no recored affected</param>
            <param name="parameters">Values of Parameters, use method DataParameter.Get(params object[] keyValueParameters)</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.LookupQuery``1(System.String,System.String,System.String,``0,System.Object[])">
            <summary>
            Execute lookup function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Field">field name for return value</param>
            <param name="Table">Table name or View name</param>
            <param name="Where">Sql Where string,each paramet name should start with @ </param>
            <param name="returnIfNull">Default value to return if no recored affected</param>
            <param name="values">Values of Parameters</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.Dlookup``1(System.String,System.String,System.String,``0)">
            <summary>
            Lookup function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Field">field name for return value</param>
            <param name="Table">Table name or View name</param>
            <param name="Where">Sql Where string </param>
            <param name="defaultValue">Default value to return if no recored affected</param>
            <returns>retun object result</returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.DExists(System.String,System.String,System.String,System.Object[])">
            <summary>
            Lookup function return true if exists
            </summary>
            <param name="Field">field name for return value</param>
            <param name="Table">Table name or View name</param>
            <param name="Where">Sql Where string </param>
            <param name="values">parameters values </param>
            <returns>retun Boolean result</returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.ExecuteScalarInternal``1(System.String,System.Data.IDbDataParameter[],``0,System.Data.CommandType,System.Int32)">
            <summary>
            Executes Command and returns T value as scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="returnIfNull">The value will return if result is null.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.ExecuteScalarInternal(System.String,System.Data.IDbDataParameter[],System.Data.CommandType,System.Int32)">
            <summary>
            Executes Command and returns object value as scalar or null.
            </summary>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.DataSetTableMapping(System.Data.DataSet,System.Boolean,System.String[])">
            <summary>
            Set DataSer tables mapping
            </summary>
            <param name="ds"></param>
            <param name="enforceConstraints"></param>
            <param name="tableMapping"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.DataCacheItem(System.String)">
            <summary>
            Get Item from DataCache. 
            </summary>
            <param name="cacheKey">Get or Set object from/to cache.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.RemoveCacheItem(System.String)">
            <summary>
            Remove Item from DataCache. 
            </summary>
            <param name="cacheKey">Get or Set object from/to cache.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.ExecuteDataConstraint(System.String,Nistec.Data.CONSTRAINT[])">
            <summary>
            Executes sql string and returns DataTable object,User can cancel executing.
            </summary>
            <param name="sql">Sql string.</param>
            <param name="constraint">Constraint.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbBase.ExecuteDataConstraint(System.String,Nistec.Data.CONSTRAINT[],System.Int32)">
            <summary>
            Executes sql string and returns DataTable object,User can cancel executing.
            </summary>
            <param name="sql">Sql string.</param>
            <param name="constraint">Constraint.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.FillDataTable(System.String,System.Boolean)">
            <summary>
            Fill Data Table
            </summary>
            <param name="mappingName"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.FillDataTable(System.Data.IDbCommand,System.Boolean)">
            <summary>
            Fill Data Table
            </summary>
            <param name="cmd"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.FillDataTable(System.Data.IDbCommand,System.String,System.Boolean)">
            <summary>
            Fill Data Table
            </summary>
            <param name="cmd"></param>
            <param name="tableName"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.FillDataSet">
            <summary>
            Fill Data Set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.FillDataSet(System.Data.IDbCommand,System.Boolean)">
            <summary>
            Fill Data Set
            </summary>
            <param name="cmd"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.FillDataOrScalar``1(System.Data.IDbCommand,System.Boolean)">
            <summary>
            Executes command and returns T value (DataSet|DataTable|DataRow) or any type for scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.GetSchemaDB">
            <summary>
            Get DB Schema
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.FillSchemaDB(System.Data.DataSet,System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Fill data set with DB schema
            </summary>
            <param name="dataSet"></param>
            <param name="tableSchema"></param>
            <param name="prefix"></param>
            <param name="addAdvancedColumns"></param>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.GetSchemaTable(System.String,System.Data.SchemaType)">
            <summary>
            Get Schema Table
            </summary>
            <param name="sql"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.GetSchemaTable">
            <summary>
            Get all DB tables
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.GetSchemaView">
            <summary>
            Get all DB views
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Factory.IDbAdapter.DataTableMapping">
            <summary>
            Get DataTable Mapping
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
            <summary>
            Fill Schema
            </summary>
            <param name="dataSet"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.CreateDataAdapter(System.String)">
            <summary>
            Create Data Adapter
            </summary>
            <param name="strSQL"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.GetChanges(System.Data.DataTable)">
            <summary>
            GetChanges
            </summary>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.GetChanges(System.Data.DataSet)">
            <summary>
            GetChanges
            </summary>
            <param name="dataSet"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.UpdateChanges(System.Data.DataTable,System.String,System.String)">
            <summary>
            UpdateChanges
            </summary>
            <param name="dataTable"></param>
            <param name="dbTableName"></param>
            <param name="selectCommand"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.UpdateChanges(System.Data.DataTable,System.String,System.String,System.Data.SchemaType)">
            <summary>
            UpdateChanges
            </summary>
            <param name="dataTable"></param>
            <param name="dbTableName"></param>
            <param name="selectCommand"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.UpdateChanges(System.Data.DataSet,System.String,System.String,System.String,System.Data.SchemaType)">
            <summary>
            UpdateChanges
            </summary>
            <param name="dataSet"></param>
            <param name="tableName"></param>
            <param name="dbTableName"></param>
            <param name="selectCommand"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.UpdateChanges(System.Data.DataSet,System.String)">
            <summary>
            UpdateChanges
            </summary>
            <param name="dataSet"></param>
            <param name="selectCommand"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.UpdateChanges(System.Data.DataTable,System.String)">
            <summary>
            UpdateChanges
            </summary>
            <param name="dataTable"></param>
            <param name="dbTableName"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbAdapter.UpdateChanges(System.Data.DataTable)">
            <summary>
            UpdateChanges
            </summary>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Factory.IDbCmd">
            <summary>
            Represent Command methods interface
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.IDbCmd.DBProvider">
            <summary>
            Get DBProvider
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.IDbCmd.ConnectionString">
            <summary>
            Get or Set ConnectionString
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.IDbCmd.Connection">
            <summary>
             Get or Set Connection
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.IDbCmd.Adapter">
            <summary>
            Get Adapter
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.IDbCmd.ExecuteNonQuery(System.String)">
            <summary>
            Executes a command NonQuery and returns the number of rows affected.
            </summary>
            <param name="cmdText">Sql command.</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Factory.IDbCmd.ExecuteNonQuery(System.String,System.Data.IDbDataParameter[],System.Data.CommandType,System.Int32)">
            <summary>
            Executes a command NonQuery and returns the number of rows affected.
            </summary>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Factory.IDbCmd.ExecuteScalar``1(System.String)">
            <summary>
            Executes Command and returns T value as scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql command.</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Factory.IDbCmd.ExecuteScalar``1(System.String,System.Data.IDbDataParameter[],``0,System.Data.CommandType,System.Int32)">
            <summary>
            Executes Command and returns T value as scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="returnIfNull">The value will return if result is null.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Factory.IDbCmd.ExecuteCommand``1(System.String,System.Boolean)">
            <summary>
            Executes Command and returns T value (DataSet|DataTable|DataRow).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Factory.IDbCmd.ExecuteCommand``1(System.String,System.Data.IDbDataParameter[],System.Data.CommandType,System.Int32,System.Boolean)">
            <summary>
            Executes Command and returns T value (DataSet|DataTable|DataRow) .
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Factory.IDbCmd.ExecuteCommand``1(System.String,System.Data.IDbDataParameter[],System.String,System.Data.CommandType,System.Int32,System.Boolean)">
            <summary>
            Executes Command and returns T value (DataSet|DataTable|DataRow|IEntityItem) .
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="cacheKey">Get or Set data from/to cache.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Factory.IDbCmd.ExecuteCommand``2(System.String,System.Data.IDbDataParameter[],System.Data.CommandType,System.Int32,System.Boolean)">
            <summary>
            Executes Command and returns T value (DataSet|DataTable|DataRow|IEntityItem|List of IEntityItem) .
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Factory.IDbCmd.ExecuteDataTable(System.String)">
            <summary>
            Executes Adapter and returns DataTable.
            </summary>
            <param name="mappingName"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbCmd.ExecuteDataTable(System.String,System.Boolean)">
            <summary>
            Executes Adapter and returns DataTable.
            </summary>
            <param name="mappingName"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbCmd.ExecuteDataTable(System.String,System.String,System.Boolean)">
            <summary>
            Executes Adapter and returns DataTable.
            </summary>
            <param name="tableName"></param>
            <param name="cmdText"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbCmd.ExecuteDataTable(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Executes Adapter and returns DataTable.
            </summary>
            <param name="tableName"></param>
            <param name="cmdText"></param>
            <param name="commandTimeout">Timeout in seconds</param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbCmd.ExecuteReader(System.String,System.Data.CommandBehavior)">
            <summary>
            Execute Reader
            </summary>
            <param name="cmdText">Sql command.</param>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbCmd.ExecuteReader(System.String,System.Data.CommandBehavior,System.Data.IDbDataParameter[])">
            <summary>
            Create Reader
            </summary>
            <param name="cmdText"></param>
            <param name="behavior"></param>
            <param name="parameters">SqlParameter array key value.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbCmd.LookupQuery``1(System.String,System.String,System.String,``0,System.Object[])">
            <summary>
            Execute lookup function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Field">field name for return value</param>
            <param name="Table">Table name or View name</param>
            <param name="Where">Sql Where string,each paramet should start with @ </param>
            <param name="returnIfNull">Default value to return if no recored affected</param>
            <param name="values">Values of Parameters</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.IDbCmd.MultiExecuteNonQuery(System.String[],System.Boolean)">
            <summary>
            Execute multiple commands Non Query
            </summary>
            <param name="commands"></param>
            <param name="failOnFirstError"></param>
        </member>
        <member name="M:Nistec.Data.Factory.IDbCmd.MultiExecuteScalar(System.String[],System.Boolean)">
            <summary>
            Execute multiple commands Scalar
            </summary>
            <param name="commands"></param>
            <param name="failOnFirstError"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Factory.AutoDb">
            <summary>
            Base class for every dal class. You can inherint your classes from 
            this base class or <see cref="T:Nistec.Data.IAutoDb">IAutoDb</see> interface
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.CancelExecuting">
            <summary>
            CancelExecuting
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.AutoDb.EnableCancelExecuting">
            <summary>
            Get or set EnableCancelExecuting property
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.AutoDb.AutoCloseConnection">
            <summary>
            Get or set AutoCloseConnection property
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.#ctor">
            <summary>
            DB Constructor
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.#ctor(Nistec.Data.IAutoBase)">
            <summary>
            DB Constructor with IAutoBase
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.#ctor(System.String,Nistec.Data.DBProvider)">
            <summary>
            DB Constructor with connection string
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.#ctor(System.Data.IDbConnection,System.Boolean)">
            <summary>
            DB Constructor with connection
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.Execute">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.Execute(System.Boolean)">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.Execute(System.Boolean,System.Object[])">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="values">Array of values for the command parameters.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.Execute(System.Int32,System.Object[])">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <param name="values">Array of values for the command parameters.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.Execute(System.Object[])">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <param name="values">Array of values for the command parameters.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.Execute(System.String,System.Boolean,System.Object[])">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <param name="cacheKey">Get or Set object from/to cache.</param>
            <param name="reload">Should reload item to cache.</param>
            <param name="values">Array of values for the command parameters.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.ExecuteTrans(System.Data.IDbTransaction,System.Boolean,System.Object[])">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <param name="transaction">Transaction property.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="values">Array of values for the command parameters.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.ExecuteTrans(System.Data.IDbTransaction,System.Boolean,System.Int32,System.Object[])">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <param name="transaction">Transaction property.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <param name="values">Array of values for the command parameters.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.ExecuteCmd(System.Data.IDbConnection,System.Data.IDbTransaction,System.Reflection.MethodInfo,System.Object[],System.Boolean,System.Int32)">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <param name="connection">Connection property.</param>
            <param name="transaction">Transaction property.</param>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/> type object from which the command object is built.</param>
            <param name="values">Array of values for the command parameters.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.Execute``1">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.Execute``1(System.Object[])">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">Array of values for the command parameters.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.Execute``1(System.String,System.Boolean,System.Object[])">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey">Get or Set object from/to cache.</param>
            <param name="reload">Should reload item to cache.</param>
            <param name="values">Array of values for the command parameters.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.ExecuteCmd``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Reflection.MethodInfo,System.Object[],System.Boolean,System.Int32)">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Connection property.</param>
            <param name="transaction">Transaction property.</param>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/> type object from which the command object is built.</param>
            <param name="values">Array of values for the command parameters.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.Execute``2">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.Execute``2(System.Object[])">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="values">Array of values for the command parameters.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.Execute``2(System.String,System.Boolean,System.Object[])">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="cacheKey">Get or Set object from/to cache.</param>
            <param name="reload">Should reload item to cache.</param>
            <param name="values">Array of values for the command parameters.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.ExecuteCmd``2(System.Data.IDbConnection,System.Data.IDbTransaction,System.Reflection.MethodInfo,System.Object[],System.Boolean,System.Int32)">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="connection">Connection property.</param>
            <param name="transaction">Transaction property.</param>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/> type object from which the command object is built.</param>
            <param name="values">Array of values for the command parameters.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.ExecuteScalar``1(System.String)">
            <summary>
            Executes sql string and returns Scalar value,User can cancel executing.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql string.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.ExecuteScalar``1(System.String,``0)">
            <summary>
            Executes sql string and returns Scalar value,User can cancel executing.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql string.</param>
            <param name="returnIfNull">The value will return if result is null.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.ExecuteScalar``1(System.String,System.Data.IDbDataParameter[],``0,System.Data.CommandType,System.Int32)">
            <summary>
            Executes Command and returns T value as scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="returnIfNull">The value will return if result is null.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.ExecuteNonQuery(System.String)">
            <summary>
            Executes a command NonQuery and returns the number of rows affected ,User can cancel executing.
            </summary>
            <param name="cmdText">Sql string.</param>
            <returns>return the number of rows affected.</returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.ExecuteNonQuery(System.String,System.Data.IDbDataParameter[],System.Data.CommandType,System.Int32)">
            <summary>
            Executes a command NonQuery and returns the number of rows affected ,User can cancel executing.
            </summary>
            <param name="cmdText">Sql string.</param>
            <param name="parameters">Command parameters.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns>return the number of rows affected.</returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.ExecuteCommand``1(System.String)">
            <summary>
            Executes Command and returns T value (DataSet|DataTable|DataRow),User can cancel executing.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql string.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.ExecuteCommand``1(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Executes Command and returns T value (DataSet|DataTable|DataRow),User can cancel executing.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql string.</param>
            <param name="parameters">Command parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.ExecuteCommand``2(System.String,System.Data.IDbDataParameter[],System.Data.CommandType)">
            <summary>
            Executes Command and returns T value (DataSet|DataTable|DataRow),User can cancel executing.
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="cmdText">Sql string.</param>
            <param name="parameters">Command parameters.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoDb.ExecuteCommand``1(System.String,System.Data.IDbDataParameter[],System.Data.CommandType,System.Int32,System.Data.MissingSchemaAction)">
            <summary>
            Executes Command and returns T value (DataSet|DataTable|DataRow),User can cancel executing.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql string.</param>
            <param name="parameters">Command parameters.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <param name="missingSchemaAction"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Factory.AutoTran">
            <summary>
            Execute Sql command with transaction
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoTran.Dispose">
            <summary>
            This object will be cleaned up by the Dispose method. 
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoTran.#ctor">
            <summary>
            Private constructor. This is a static class and it cannot be created.
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoTran.Begin(System.Data.IsolationLevel)">
            <summary>
            Begin Transaction
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoTran.Commit">
            <summary>
            Commit Transaction
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoTran.Rollback">
            <summary>
            Rollback Transaction
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoTran.#ctor(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            public constructor
            </summary>
            <param name="connection">Connection property.</param>
            <param name="transaction">Transaction property.</param>
        </member>
        <member name="M:Nistec.Data.Factory.AutoTran.#ctor(System.Data.IDbConnection)">
            <summary>
            public constructor
            </summary>
            <param name="connection">Connection property.</param>
        </member>
        <member name="M:Nistec.Data.Factory.AutoTran.#ctor(Nistec.Data.Factory.AutoDb)">
            <summary>
            public constructor
            </summary>
            <param name="dal">Connection property.</param>
        </member>
        <member name="M:Nistec.Data.Factory.AutoTran.Execute(System.String,Nistec.Data.DalReturnType)">
            <summary>
            Executes Sql commandText and returns execution result. 
            </summary>
            <param name="cmdText"></param>
            <param name="returnType"><see cref="T:Nistec.Data.DalReturnType"/> type object from which the command object is built.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoTran.AddWithDelim(System.String,System.String,System.String)">
            <summary>
            Concats two strings with a delimiter.
            </summary>
            <param name="s1">string 1</param>
            <param name="delim">delimiter</param>
            <param name="s2">string 2</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoTran.Execute(Nistec.Data.DBCommandType,System.String,Nistec.Data.DalReturnType)">
            <summary>
            Executes Sql commandText and returns execution result. 
            </summary>
            <param name="cmdType">DBCommandType</param>
            <param name="cmdText">string command</param>
            <param name="returnType"><see cref="T:Nistec.Data.DalReturnType"/> type object from which the command object is built.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoTran.Execute(Nistec.Data.DBCommandType,System.String,Nistec.Data.DalReturnType,System.Object[])">
            <summary>
            Executes Sql commandText and returns execution result. 
            </summary>
            <param name="cmdType">DBCommandType</param>
            <param name="cmdText">string command</param>
            <param name="returnType"><see cref="T:Nistec.Data.DalReturnType"/> type object from which the command object is built.</param>
            <param name="values">values part of sql command</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoTran.GetRefType(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Factory.AutoBase`1">
             <summary>
             Represent generic base class of data access that implements <see cref="T:Nistec.Data.IAutoBase"/>.
             </summary>
             <example>Implemention Sample of Data
             <code> 
             
            [DbContext("AdventureWorks")]
            public class AdventureWorks : DbContext
            {
                public static string Cnn
                {
                    get { return Nistec.Configuration.NetConfig.ConnectionString("AdventureWorks"); }
                }
            
                protected override void EntityBind()
                {
                }
            
                public override IEntityLang LangManager
                {
                    get
                    {
                        return base.GetLangManager&lt;AdventureWorksResources&gt;();
                    }
                }
            }
            
             public sealed class AdventureWorksBase : Nistec.Data.Factory.AutoBase&lt;AdventureWorks&gt;
            {
                public static readonly AdventureWorksBase DB = new AdventureWorksBase();
                
                public IAdventureWorksDB IAdventureWorks { get { return DB.CreateInstance&lt;IAdventureWorksDB&gt;(); } }
            }
            
            public interface IAdventureWorksDB : Nistec.Data.IAutoDb
            {
                [DBCommand(DBCommandType.Text, "SELECT * FROM Person.Contact", null, MissingSchemaAction.AddWithKey)]
                DataTable Contacts();
            
                [DBCommand(DBCommandType.Lookup, "SELECT EmailAddress FROM Person.Contact where ContactID=@ContactID", null)]
                string Contact_Email(int ContactID);
            
                [DBCommand(DBCommandType.Lookup, "SELECT EmailPromotion FROM Person.Contact where ContactID=@ContactID", 0)]
                int Contact_EmailPromotion(int ContactID);
            
                [DBCommand("SELECT * FROM Person.Contact where ContactID=@ContactID", 0)]
                DataRow Contact(int ContactID);
            
                [DBCommand(DBCommandType.Update, "Person.Contact")]
                int Contact_Update
                    (
                    [DalParam(DalParamType.Key)] int ContactID,
                    [DalParam()]DateTime ModifiedDate,
                    [DalParam(24)]string Phone
                    );
            }
            
            public class DalDemo
            {
            
                public void PrintContacts()
                {
                    DataTable dt = AdventureWorksBase.DB.IAdventureWorks.Contacts();
                    dt.WriteXml(Console.Out);
                }
            
                public void LookupContact(int contactId)
                {
                    string mail = AdventureWorksBase.DB.IAdventureWorks.Contact_Email(contactId);
                    Console.WriteLine(mail);
                }
            }
            </code>
            </example> 
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase`1.#ctor">
            <summary>
            Initializes the object. 
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes the object with specified parameters. 
            </summary>
            <param name="autoCloseConnection"></param>
            <param name="ownsConnection"></param>
        </member>
        <member name="T:Nistec.Data.Factory.AutoBase">
             <summary>
             Represent base class of data access that implements <see cref="T:Nistec.Data.IAutoBase"/>.
             </summary>
            <remarks>
             <example>implements Sample of Data
             <code> 
             <![CDATA[]]>
            [DbContext("AdventureWorks")]
            public class AdventureWorks : DbContext
            {
                public static string Cnn
                {
                    get { return Nistec.Configuration.NetConfig.ConnectionString("AdventureWorks"); }
                }
            
                protected override void EntityBind()
                {
                }
            
                public override IEntityLang LangManager
                {
                    get
                    {
                       return base.GetLangManager<![CDATA[<AdventureWorksResources>]]> ();
                    }
                }
            }
            
             public sealed class AdventureWorksBase : Nistec.Data.Factory.AutoBase
            {
                public static readonly AdventureWorksBase DB = new AdventureWorksBase();
                
                 static AdventureWorksBase()
                {
                       DB.Init<![CDATA[<AdventureWorks>]]> ( true, true);
                }
            
                public IAdventureWorksDB IAdventureWorks { get { return DB.CreateInstance<![CDATA[<IAdventureWorksDB>]]>(); } }
            }
            
            public interface IAdventureWorksDB : Nistec.Data.IAutoDb
            {
                [DBCommand(DBCommandType.Text, "SELECT * FROM Person.Contact", null, MissingSchemaAction.AddWithKey)]
                DataTable Contacts();
            
                [DBCommand(DBCommandType.Lookup, "SELECT EmailAddress FROM Person.Contact where ContactID=@ContactID", null)]
                string Contact_Email(int ContactID);
            
                [DBCommand(DBCommandType.Lookup, "SELECT EmailPromotion FROM Person.Contact where ContactID=@ContactID", 0)]
                int Contact_EmailPromotion(int ContactID);
            
                [DBCommand("SELECT * FROM Person.Contact where ContactID=@ContactID", 0)]
                DataRow Contact(int ContactID);
            
                [DBCommand(DBCommandType.Update, "Person.Contact")]
                int Contact_Update
                    (
                    [DalParam(DalParamType.Key)] int ContactID,
                    [DalParam()]DateTime ModifiedDate,
                    [DalParam(24)]string Phone
                    );
            }
            
            public class DalDemo
            {
            
                public void PrintContacts()
                {
                    DataTable dt = AdventureWorksBase.DB.IAdventureWorks.Contacts();
                    dt.WriteXml(Console.Out);
                }
            
                public void LookupContact(int contactId)
                {
                    string mail = AdventureWorksBase.DB.IAdventureWorks.Contact_Email(contactId);
                    Console.WriteLine(mail);
                }
            }
            </code>
            </example> 
            </remarks>
        </member>
        <member name="F:Nistec.Data.Factory.AutoBase.m_disposed">
            <summary>
            Disposed flag.
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.AutoBase.m_initilaized">
            <summary>
            m_initilaized
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.AutoBase.m_Permit">
            <summary>
            Permit
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.AutoBase.m_dbProvider">
            <summary>
            dbProvider
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase.Dispose">
            <summary>
            Implementation of method of IDisposable interface.
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase.Dispose(System.Boolean)">
            <summary>
            Dispose method with a boolean parameter indicating the source of calling.
            </summary>
            <param name="calledbyuser">Indicates from whare the method is called.</param>
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase.InnerDispose">
            <summary>
            Inner implementation of Dispose method.
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase.Finalize">
            <summary>
            Class destructor.
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.AutoBase.m_connection">
            <summary>
            Connection object.
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.AutoBase.m_transaction">
            <summary>
            Transaction object.
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.AutoBase.m_ownsConnection">
            <summary>
            Indicates that <see cref="T:Nistec.Data.Factory.AutoBase"/> object owns the connection.
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.AutoBase.m_autoCloseConnection">
            <summary>
            Indicates that the connection must be closed each time after a command execution.
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.AutoBase.m_ObjectTypes">
            <summary>
            Contains objects generated in <see cref="M:Nistec.Data.Factory.AutoBase.GenerateAllObjects"/> method.
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase.#ctor">
            <summary>
            A constructor with no parameters.
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase.Init(Nistec.Data.DBProvider,System.String,System.Boolean)">
            <summary>
            Initializes the object. 
            </summary>
            <param name="provider">db provider</param>
            <param name="connectionString">Sql connection string parameter.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase.Init(Nistec.Data.DBProvider,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes the object. 
            </summary>
            <param name="provider">db provider</param>
            <param name="connectionString">Sql connection string parameter.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="ownsConnection"></param>
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase.Init(System.String,System.Boolean,System.Boolean)">
            <summary>
             Initializes the object. 
            </summary>
            <param name="connectionKey">connectionKey from config file</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="ownsConnection"></param>
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase.Init(Nistec.Data.Entities.DbContext,System.Boolean,System.Boolean)">
            <summary>
            Initializes the object. 
            </summary>
            <param name="connection">ConnectionContext</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="ownsConnection"></param>
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase.Init``1(System.Boolean,System.Boolean)">
            <summary>
            Initializes the object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="ownsConnection"></param>
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase.GenerateAllObjects">
            <summary>
            Generates all objects mention in public properties 
            and derived from <see cref="T:Nistec.Data.IAutoDb"/> interface.
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.AutoBase.Permit">
            <summary>
            DalPermit
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.AutoBase.DBProvider">
            <summary>
            DBProvider
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.AutoBase.Initilaized">
            <summary>
            Get Initilaized
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.AutoBase.OwnsConnection">
            <summary>
            It true then the object owns its connection
            and disposes it on its own disposal.
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.AutoBase.AutoCloseConnection">
            <summary>
            If true then the object's connection is closed each time 
            after sql command execution.
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.AutoBase.Connection">
            <summary>
            Sql connection property.
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.AutoBase.Transaction">
            <summary>
            Sql transaction property.
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase.BeginTransaction">
            <summary>
            Begins sql transaction with a default (<see cref="F:System.Data.IsolationLevel.ReadCommitted"/>) isolation level.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins sql transaction with a specified isolation level.
            </summary>
            <param name="iso"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase.RollbackTransaction">
            <summary>
            Rolls back the current transaction.
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase.CommitTransaction">
            <summary>
            Commits the current transaction.
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase.UpdateBase(Nistec.Data.IAutoDb)">
            <summary>
            Update values of a dal object.
            </summary>
            <param name="dal">A dal object.</param>
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase.UpdateAllBaseObjects">
            <summary>
            Updates all generated objects properties.
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase.CreateInstance">
            <summary>
            Returns a generated object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoBase.CreateInstance``1">
            <summary>
            Returns a generated object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Factory.InternalCmd">
             <summary>
             This class contains static method Execute to create and execute Sql commands
             </summary>
             <example >
             <code >
             
            	public sealed class Data: Nistec.Data.OleDb.AutoBase  
             {
            		public ClassDB dalDB{get{return (ClassDB)GetDalDB();}}
            		public CheqsProperty dalCheq{get{return (CheqsProperty)GetDalDB();}}
             }
             
            	public abstract class ClassDB : Nistec.Data.OleDb.DalDB
            	{
            
            		[DBCommand("SELECT ID FROM CheqProperty WHERE PropertyName=@name")]
            		public abstract object GetCheqPropertyID(string name);
            
            		[DBCommand("SELECT PropertyName FROM CheqProperty ")]
            		public abstract ArrayList GetCheqPropertyList();
            
            		[DBCommand("SELECT ID,PropertyName FROM CheqProperty")]
            		public abstract Record[] GetCheqPropertyRecords();
            	}
             
             private int GetPropertyID(string name)
             {
             	return (int)App.DB.dalDB.GetCheqPropertyID (name) ; 
             }
             
            	private void GetRecordList()
             {
            		Nistec.Data.Record[] rcd=App.DB.dalDB.GetCheqPropertyRecords();
            		System.Text.StringBuilder sb=new System.Text.StringBuilder (); 
            		string s="";
            		for(int i=0;i  rcd.Length ;i++)
            		{
            		s="DisplayMember : " + ((Nistec.Data.Record)rcd.GetValue (i)).DisplayMember.ToString () ; 
            		sb.Append (s);
            		s=" ,  ValueMember : " + ((Nistec.Data.Record)rcd.GetValue (i)).ValueMember.ToString ()+ "\n\r" ; 
            		sb.Append (s);
            		}
            		MessageBox.Show (sb.ToString ());
             }
            	private void GetList()
            	{
            
            		System.Text.StringBuilder sb=new System.Text.StringBuilder (); 
            		ArrayList list=App.DB.dalDB.GetCheqPropertyList ();
            		for(int i=0;i list.Count ;i++)
            		{
                      sb.Append (list[i].ToString () + "\n\r");
                           
            		}
            		MessageBox.Show (sb.ToString ());
             }
             </code>
             </example>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.ExecuteCmd(System.Data.IDbConnection,System.Data.IDbTransaction,System.Reflection.MethodInfo,System.Object[],System.Boolean,System.Int32)">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <param name="connection">Connection property.</param>
            <param name="transaction">Transaction property.</param>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/> type object from which the command object is built.</param>
            <param name="values">Array of values for the command parameters.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.ExecuteCmd``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Reflection.MethodInfo,System.Object[],System.Boolean,System.Int32)">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection">Connection property.</param>
            <param name="transaction">Transaction property.</param>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/> type object from which the command object is built.</param>
            <param name="values">Array of values for the command parameters.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.ExecuteCmd``2(System.Data.IDbConnection,System.Data.IDbTransaction,System.Reflection.MethodInfo,System.Object[],System.Boolean,System.Int32)">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="connection">Connection property.</param>
            <param name="transaction">Transaction property.</param>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/> type object from which the command object is built.</param>
            <param name="values">Array of values for the command parameters.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.ExecuteCmd``1(System.Data.IDbConnection,System.Data.IDbTransaction,Nistec.Data.DBCommandType,System.String,System.Data.MissingSchemaAction,``0,Nistec.Data.DataParameter[],System.Boolean,System.Int32)">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="schemaAction"></param>
            <param name="returnIfNull"></param>
            <param name="parameters"></param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="commandTimeOut"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.SetParameters(System.Data.IDbCommand,System.Reflection.MethodInfo,System.Object[],System.Int32[],Nistec.Data.DBCommandType)">
            <summary>
            Generates command parameters. 
            For some command types the command text can be changed during parameter generating.
            </summary>
            <param name="command">Command object.</param>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/> type object</param>
            <param name="values">Array of values for the command parameters.</param>
            <param name="commandType"><see cref="T:Nistec.Data.DBCommandType"/> enumeration value</param>
            <param name="indexes">Array of parameter indexes.</param>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.SetParameters(System.Data.IDbCommand,Nistec.Data.DataParameter[],System.Int32[],Nistec.Data.DBCommandType)">
            <summary>
            Generates command parameters. 
            For some command types the command text can be changed during parameter generating.
            </summary>
            <param name="command">Command object.</param>
            <param name="parameters">Array of values for the command parameters.</param>
            <param name="indexes">Array of parameter indexes.</param>
            <param name="commandType"><see cref="T:Nistec.Data.DBCommandType"/> enumeration value</param>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.ReturnValue``1(Nistec.Data.DBCommandType,System.Object,``0)">
            <summary>
            Return Value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="commandType"></param>
            <param name="result"></param>
            <param name="retIfNull"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.ReturnValue(Nistec.Data.DBCommandType,System.Object,System.Type,System.Object)">
            <summary>
            Return Value
            </summary>
            <param name="commandType"></param>
            <param name="result"></param>
            <param name="retType"></param>
            <param name="retIfNull"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.AddWithDelim(System.String,System.String,System.String)">
            <summary>
            Concats two strings with a delimiter.
            </summary>
            <param name="s1">string 1</param>
            <param name="delim">delimiter</param>
            <param name="s2">string 2</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.RunCommand(System.Data.IDbCommand,System.Type,System.Boolean)">
            <summary>
            Execute Command
            </summary>
            <param name="cmd"></param>
            <param name="retType"></param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.RunCommand(System.Data.IDbCommand,System.Type,System.Boolean,System.Data.MissingSchemaAction)">
            <summary>
            Executes a command object according to the return type.
            </summary>
            <param name="cmd">The command object.</param>
            <param name="retType">Return type</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="missingSchemaAction">Determines <see cref="T:System.Data.MissingSchemaAction"/> type value in case of filling a datasets.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.RunCommand(System.Data.IDbCommand,System.Type,System.Boolean,System.Data.MissingSchemaAction,System.Boolean)">
            <summary>
            Executes a command object according to the return type.
            </summary>
            <param name="cmd">The command object.</param>
            <param name="retType">Return type</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="missingSchemaAction">Determines <see cref="T:System.Data.MissingSchemaAction"/> type value in case of filling a datasets.</param>
            <param name="isScalar">Determines if the command is a lookup function.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.RunCommand``2(System.Data.IDbCommand,System.Boolean,System.Data.MissingSchemaAction,System.Boolean)">
            <summary>
            Executes a command object according to the return type.
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="cmd">The command object.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="missingSchemaAction">Determines <see cref="T:System.Data.MissingSchemaAction"/> type value in case of filling a datasets.</param>
            <param name="isScalar">Determines if the command is a lookup function.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.RunCommandDs(System.Data.IDbCommand,System.Boolean,System.Data.MissingSchemaAction,System.String[])">
            <summary>
            Executes a command object according to the return type.
            </summary>
            <param name="cmd">The command object.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="missingSchemaAction">Determines <see cref="T:System.Data.MissingSchemaAction"/> type value in case of filling a datasets.</param>
            <param name="tableMapping"></param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.RunCommand``1(System.Data.IDbCommand,System.Boolean,System.Data.MissingSchemaAction,System.Boolean)">
            <summary>
            Executes a command object according to the return type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">The command object.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="missingSchemaAction">Determines <see cref="T:System.Data.MissingSchemaAction"/> type value in case of filling a datasets.</param>
            <param name="isScalar">Determines if the command is a lookup function.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.RunCommand``1(System.Data.IDbCommand,System.Boolean,System.Data.MissingSchemaAction)">
            <summary>
            Executes a command object according to the return type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">The command object.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="missingSchemaAction">Determines <see cref="T:System.Data.MissingSchemaAction"/> type value in case of filling a datasets.</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.RunCommandNonQuery(System.Data.IDbCommand,System.Boolean)">
            <summary>
            Executes a command NonQuery and returns the number of rows affected.
            </summary>
            <param name="cmd">The command object.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <returns>return the number of rows affected.</returns>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.RunCommandScalar``1(System.Data.IDbCommand,System.Boolean,``0)">
            <summary>
            Executes a command Scalar according to the return type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd">The command object.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="returnIfNull"></param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.RunCommandScalar``1(System.Data.IDbConnection,System.String,``0,Nistec.Data.DataParameter[],System.Boolean,System.Int32)">
            <summary>
            Executes a command Scalar according to the return type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
            <param name="commandText"></param>
            <param name="returnIfNull"></param>
            <param name="parameters"></param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="commandTimeOut"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.RunAsyncCommand(System.Data.SqlClient.SqlCommand,System.Boolean,System.Int32)">
            <summary>
            RunAsyncCommand, asynchronously execute
            the specified command against the connection. 
            </summary>
            <param name="cmd"></param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="interval"></param>
            <returns>complete Affected rows</returns>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.GetRefType(System.Type)">
            <summary>
            Returns type from reference type.
            </summary>
            <param name="type">Reference type value.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.InternalCmd.CompareAsNullValues(System.Object,System.Object,System.Type)">
            <summary>
            Compares parameter value with a value that must be treated as DBNull.
            </summary>
            <param name="AsNull">The value that must be treated as DBNull</param>
            <param name="ParamValue">The parameter value.</param>
            <param name="ParamType">Type of the parameter value.</param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Factory.AutoFactory">
            <summary>
            This class contains a static method <see cref="M:Nistec.Data.Factory.AutoFactory.CreateDB(System.Type)"/> 
            which generates class implementation from class 
            derived from <see cref="T:Nistec.Data.IAutoDb"/> and <see cref="T:Nistec.Data.IAutoDb"/> imterface.
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.AutoFactory.m_modBuilder">
            <summary>
            ModuleBuilder object.
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.AutoFactory.m_asmBuilder">
            <summary>
            AssemblyBuilder object.
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoFactory.#cctor">
            <summary>
            A static constructor.
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoFactory.#ctor">
            <summary>
            A private constructor designed in order that no one could create 
            an instance of this class.
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoFactory.CreateDB(System.Type)">
            <summary>
            Create the class implementation of a class 
            derived from <see cref="T:Nistec.Data.IAutoDb"/> imterface.
            </summary>
            <param name="encapType">A class type</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoFactory.AddType(System.Reflection.Emit.TypeBuilder,System.Type)">
            <summary>
            Adds an implementation to the created type.
            </summary>
            <param name="tb">Type builder object.</param>
            <param name="encapType">Created class.</param>
        </member>
        <member name="M:Nistec.Data.Factory.AutoFactory.AddMethod(System.Reflection.MethodInfo,System.Reflection.Emit.TypeBuilder)">
            <summary>
            Adds attributes and an implementation to a method of the created class.
            </summary>
            <param name="method">MethodInfo object.</param>
            <param name="tb">Type builder object.</param>
        </member>
        <member name="M:Nistec.Data.Factory.AutoFactory.CreateMethodBody(System.Reflection.Emit.ILGenerator,System.Type,System.Reflection.ParameterInfo[])">
            <summary>
            Generates an implementation to the method.
            </summary>
            <param name="ilGen">ILGenerator object.</param>
            <param name="RetType">Method's return type</param>
            <param name="prms">Method's parameters.</param>
        </member>
        <member name="M:Nistec.Data.Factory.AutoFactory.IsInterface(System.Type)">
            <summary>
            Checks if a type is an interface.
            </summary>
            <param name="encapType">Type object.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoFactory.IsAbstractMethod(System.Reflection.MethodInfo)">
            <summary>
            Checks if a method is abstract.
            </summary>
            <param name="method">MethodInfo object.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoFactory.SaveAssemply(System.String)">
            <summary>
            Saves the created assembly to a file.
            </summary>
            <param name="fileName">A file name.</param>
        </member>
        <member name="F:Nistec.Data.Factory.AutoFactory.ReturnTypesString">
            <summary>
            list of return types
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AutoFactory.GetReturnType(Nistec.Data.DalReturnType)">
            <summary>
            GetReturnType
            </summary>
            <param name="typ"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoFactory.GetReturnType(System.String)">
            <summary>
            GetReturnType
            </summary>
            <param name="typ"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoFactory.DBCommandTypeToCommandType(Nistec.Data.DBCommandType)">
            <summary>
            DBCommandTypeToCommandType
            </summary>
            <param name="dbcmd"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AutoFactory.ParseEnum(System.Type,System.String,System.Boolean,System.Int32)">
            <summary>
            ParseEnum
            </summary>
            <param name="enumType"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.Factory.DbFieldAttribute">
            <summary>
            This attribute defines properties of method's parameters
            </summary>
        </member>
        <member name="F:Nistec.Data.Factory.DbFieldAttribute.NullValueToken">
            <summary>
             Null Value Return
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.DbFieldAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Factory.DbFieldAttribute"/> class
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.DbFieldAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Factory.DbFieldAttribute"/> class
            </summary>
            <param name="name">Is a value of <see cref="P:Nistec.Data.Factory.DbFieldAttribute.Name"/> property</param>
        </member>
        <member name="M:Nistec.Data.Factory.DbFieldAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Factory.DbFieldAttribute"/> class
            </summary>
            <param name="size">Is a value of <see cref="P:Nistec.Data.Factory.DbFieldAttribute.Size"/> property</param>
        </member>
        <member name="M:Nistec.Data.Factory.DbFieldAttribute.#ctor(Nistec.Data.DalParamType)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Factory.DbFieldAttribute"/> class
            </summary>
            <param name="parameterType">Is a value of <see cref="P:Nistec.Data.Factory.DbFieldAttribute.ParameterType"/> property</param>
        </member>
        <member name="M:Nistec.Data.Factory.DbFieldAttribute.#ctor(Nistec.Data.DalParamType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Factory.DbFieldAttribute"/> class
            </summary>
            <param name="parameterType">Is a value of <see cref="P:Nistec.Data.Factory.DbFieldAttribute.ParameterType"/> property</param>
            <param name="size">Is a value of <see cref="P:Nistec.Data.Factory.DbFieldAttribute.Size"/> property</param>
        </member>
        <member name="M:Nistec.Data.Factory.DbFieldAttribute.#ctor(Nistec.Data.DalParamType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Factory.DbFieldAttribute"/> class
            </summary>
            <param name="parameterType">Is a value of <see cref="P:Nistec.Data.Factory.DbFieldAttribute.ParameterType"/> property</param>
            <param name="name">Is a value of <see cref="P:Nistec.Data.Factory.DbFieldAttribute.Name"/> property</param>
        </member>
        <member name="M:Nistec.Data.Factory.DbFieldAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Factory.DbFieldAttribute"/> class
            </summary>
            <param name="name">Is a value of <see cref="P:Nistec.Data.Factory.DbFieldAttribute.Name"/> property</param>
            <param name="size">Is a value of <see cref="P:Nistec.Data.Factory.DbFieldAttribute.Size"/> property</param>
        </member>
        <member name="M:Nistec.Data.Factory.DbFieldAttribute.#ctor(System.Data.DbType,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Factory.DbFieldAttribute"/> class with the specified
            <see cref="P:Nistec.Data.Factory.DbFieldAttribute.Name"/>, <see cref="T:System.Data.DbType"/>, <see cref="P:Nistec.Data.Factory.DbFieldAttribute.Size"/>, <see cref="P:Nistec.Data.Factory.DbFieldAttribute.Precision"/>, 
            <see cref="P:Nistec.Data.Factory.DbFieldAttribute.Scale"/>, <see cref="P:Nistec.Data.Factory.DbFieldAttribute.AsNull"/> and <see cref="P:Nistec.Data.Factory.DbFieldAttribute.ParameterType"/> values
            </summary>
            <param name="sqlDbType">Is a value of <see cref="T:System.Data.DbType"/> property</param>
            <param name="precision">Is a value of <see cref="P:Nistec.Data.Factory.DbFieldAttribute.Precision"/> property</param>
            <param name="scale">Is a value of <see cref="P:Nistec.Data.Factory.DbFieldAttribute.Scale"/> property</param>
        </member>
        <member name="M:Nistec.Data.Factory.DbFieldAttribute.#ctor(System.String,System.Data.DbType,System.Int32,System.Byte,System.Byte,System.Object,Nistec.Data.DalParamType)">
            <summary>
            Initializes a new instance of the <see cref="T:Nistec.Data.Factory.DbFieldAttribute"/> class with the specified
            <see cref="P:Nistec.Data.Factory.DbFieldAttribute.Name"/>, <see cref="T:System.Data.DbType"/>, <see cref="P:Nistec.Data.Factory.DbFieldAttribute.Size"/>, <see cref="P:Nistec.Data.Factory.DbFieldAttribute.Precision"/>, 
            <see cref="P:Nistec.Data.Factory.DbFieldAttribute.Scale"/>, <see cref="P:Nistec.Data.Factory.DbFieldAttribute.AsNull"/> and <see cref="P:Nistec.Data.Factory.DbFieldAttribute.ParameterType"/> values
            </summary>
            <param name="name">Is a value of <see cref="P:Nistec.Data.Factory.DbFieldAttribute.Name"/> property</param>
            <param name="sqlDbType">Is a value of <see cref="T:System.Data.DbType"/> property</param>
            <param name="size">Is a value of <see cref="P:Nistec.Data.Factory.DbFieldAttribute.Size"/> property</param>
            <param name="precision">Is a value of <see cref="P:Nistec.Data.Factory.DbFieldAttribute.Precision"/> property</param>
            <param name="scale">Is a value of <see cref="P:Nistec.Data.Factory.DbFieldAttribute.Scale"/> property</param>
            <param name="asNull">Is a value of <see cref="P:Nistec.Data.Factory.DbFieldAttribute.AsNull"/> property</param>
            <param name="parameterType">Is a value of <see cref="P:Nistec.Data.Factory.DbFieldAttribute.ParameterType"/> property</param>
        </member>
        <member name="M:Nistec.Data.Factory.DbFieldAttribute.GetAttributeBuilder(Nistec.Data.Factory.DbFieldAttribute)">
            <summary>
            An attribute builder method
            </summary>
            <param name="attr"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Data.Factory.DbFieldAttribute.Name">
            <summary>
            Sql parameter name. If this property is not defined 
            then a method parameter name is used.
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.DbFieldAttribute.Size">
            <summary>
            Sql parameter size. 
            It is strongly recomended to define this property for string parameters
            so that they could be trimmed to the size specified.
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.DbFieldAttribute.Precision">
            <summary>
            Sql parameter precision. It has not sense for non-numeric parameters.
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.DbFieldAttribute.Scale">
            <summary>
            Sql parameter scale. It has not sense for non-numeric parameters.
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.DbFieldAttribute.AsNull">
            <summary>
            This parameter contains a value that will be interpreted as null. 
            This is usefull if you want to pass a null to a value type parameter.
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.DbFieldAttribute.ParameterType">
            <summary>
            Parameter Type
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.DbFieldAttribute.SqlDbType">
            <summary>
            Sql parameter type. 
            If not defined then method parameter type is converted to <see cref="T:System.Data.DbType"/> type
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.DbFieldAttribute.IsNameDefined">
            <summary>
            Is Name Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.DbFieldAttribute.IsSizeDefined">
            <summary>
            Is Size Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.DbFieldAttribute.IsTypeDefined">
            <summary>
            Is Type Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.DbFieldAttribute.IsScaleDefined">
            <summary>
            Is Scale Defined
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.DbFieldAttribute.IsPrecisionDefined">
            <summary>
            Is Precision Defined
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.Dispose">
            <summary>
            This object will be cleaned up by the Dispose method. 
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.AdapterFactory.Provider">
            <summary>
            Get DBProvider
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.AdapterFactory.SchemaAction">
            <summary>
            Get or Set SchemaAction
            Specifies the action to take when adding data to the System.Data.DataSet
            and the required System.Data.DataTable or System.Data.DataColumn is missing.
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.AdapterFactory.ConnectionString">
            <summary>
            Get or Set ConnectionString
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.AdapterFactory.Connection">
            <summary>
            Get or Set Connection
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.AdapterFactory.Transaction">
            <summary>
            Gte or set Transaction property
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.AdapterFactory.DbConnection">
            <summary>
            Get Valid connection
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.SetConnection(System.String)">
            <summary>
            SetConnection
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="P:Nistec.Data.Factory.AdapterFactory.DataAdapter">
             <summary>
             Get DataAdapter
             </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:Nistec.Data.Factory.AdapterFactory.DataTableMapping">
            <summary>
            Get DataTableMapping
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.AdapterFactory.TableMappings">
            <summary>
            Get or Set the order of readed tables for DataSet adapter
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.CreateAdapter(Nistec.Data.Ado.ConnectionProvider)">
            <summary>
            CreateAdapter
            </summary>
            <param name="cp"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.CreateAdapter(Nistec.Data.Entities.IDbContext)">
            <summary>
            CreateAdapter
            </summary>
            <param name="cn"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.CreateAdapter(System.Data.IDbConnection)">
            <summary>
            CreateAdapter
            </summary>
            <param name="cnn"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.CreateAdapter(System.String,Nistec.Data.DBProvider)">
            <summary>
            CreateAdapter
            </summary>
            <param name="connectionString"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.CreateAdapter(System.Data.IDbCommand,System.Data.MissingSchemaAction)">
            <summary>
            CreateAdapter
            </summary>
            <param name="cmd"></param>
            <param name="schemaAction"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.CreateIDataAdapter(System.Data.IDbCommand)">
            <summary>
            CreateIDataAdapter
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.GetAdapter(System.Data.IDbCommand)">
            <summary>
            GetAdapter
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.GetSchemaTable(System.String,System.Data.SchemaType)">
            <summary>
            GetSchemaTable
            </summary>
            <param name="sql"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
            <summary>
            FillSchema
            </summary>
            <param name="dataSet"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.CreateDataAdapter(System.String)">
            <summary>
            CreateDataAdapter
            </summary>
            <param name="strSQL"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.CreateDataAdapter(System.Data.IDbCommand)">
            <summary>
            CreateDataAdapter
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.GetCommand(System.String)">
            <summary>
            GetCommand
            </summary>
            <param name="cmdText"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.FillDataTable(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="mappingName"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.FillDataTable(System.Data.IDbCommand,System.Boolean)">
            <summary>
            FillDataTable
            </summary>
            <param name="cmd"></param>
            <param name="addWithKey"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.FillDataTable(System.Data.IDbCommand,System.String,System.Boolean)">
            <summary>
            FillDataTable
            </summary>
            <param name="cmd"></param>
            <param name="tableName"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.FillDataSet">
            <summary>
            FillDataSet
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.FillDataSet(System.Data.IDbCommand,System.Boolean)">
            <summary>
            FillDataSet
            </summary>
            <param name="cmd"></param>
            <param name="addWithKey"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.FillTypedDataSet(System.Data.IDbCommand,System.Boolean,System.Data.DataSet,System.Type,System.Boolean)">
            <summary>
            Fill Typed DataSet
            </summary>
            <param name="cmd"></param>
            <param name="addWithKey"></param>
            <param name="ds"></param>
            <param name="dsType"></param>
            <param name="enforceConstraints"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.FillDataOrScalar``1(System.Data.IDbCommand,System.Boolean)">
            <summary>
            Executes command and returns T value (DataSet|DataTable|DataRow|IEntityItem) or any type for scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.FillSchema(System.Data.DataTable,System.Data.SchemaType)">
            <summary>
            Fill Schema
            </summary>
            <param name="dataTable"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)">
            <summary>
            Fill Schema
            </summary>
            <param name="dataSet"></param>
            <param name="type"></param>
            <param name="srcTable"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.Update(System.Data.DataTable)">
            <summary>
            Update
            </summary>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.Update(System.Data.DataSet,System.String)">
            <summary>
            Update
            </summary>
            <param name="dataSet"></param>
            <param name="srcTable"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.CreateIAdapter(System.Data.IDbCommand)">
            <summary>
            CreateIAdapter
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.Close">
            <summary>
            Close Connection
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.UpdateChanges(System.Data.DataTable,System.String,System.String)">
            <summary>
            UpdateChanges
            Calls the respective INSERT, UPDATE, or DELETE statements for each inserted,
            updated, or deleted row in the specified System.Data.DataSet from a System.Data.DataTable
            named "Table".
            </summary>
            <param name="dataTable"></param>
            <param name="dbTableName"></param>
            <param name="selectCommand"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.UpdateChanges(System.Data.DataTable,System.String,System.String,System.Data.SchemaType)">
            <summary>
            UpdateChanges
            Calls the respective INSERT, UPDATE, or DELETE statements for each inserted,
            updated, or deleted row in the specified System.Data.DataSet from a System.Data.DataTable
            named "Table".
            </summary>
            <param name="dataTable"></param>
            <param name="dbTableName"></param>
            <param name="selectCommand"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.UpdateChanges(System.Data.DataSet,System.String,System.String,System.String,System.Data.SchemaType)">
            <summary>
            UpdateChanges
            Calls the respective INSERT, UPDATE, or DELETE statements for each inserted,
            updated, or deleted row in the specified System.Data.DataSet from a System.Data.DataTable
            named "Table".
            </summary>
            <param name="dataSet"></param>
            <param name="tableName"></param>
            <param name="dbTableName"></param>
            <param name="selectCommand"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.UpdateChanges(System.Data.DataSet,System.String)">
            <summary>
            UpdateChanges
            Calls the respective INSERT, UPDATE, or DELETE statements for each inserted,
            updated, or deleted row in the specified System.Data.DataSet from a System.Data.DataTable
            named "Table".
            </summary>
            <param name="dataSet"></param>
            <param name="selectCommand"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.GetChanges(System.Data.DataTable)">
            <summary>
            GetChanges
            </summary>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.GetChanges(System.Data.DataSet)">
            <summary>
            GetChanges
            </summary>
            <param name="dataSet"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.UpdateChanges(System.Data.DataTable,System.String)">
            <summary>
            Update changes
            Calls the respective INSERT, UPDATE, or DELETE statements for each inserted,
            updated, or deleted row in the specified System.Data.DataSet from a System.Data.DataTable
            named "Table".
            </summary>
            <param name="dataTable"></param>
            <param name="dbTableName"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.UpdateChanges(System.Data.DataTable)">
            <summary>
            Update changes
            Calls the respective INSERT, UPDATE, or DELETE statements for each inserted,
            updated, or deleted row in the specified System.Data.DataSet from a System.Data.DataTable
            named "Table".
            </summary>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.SetAdapterSelectCommand(System.Data.IDbCommand)">
            <summary>
            Set Adapter SelectCommand
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.GetSchemaTable(System.Data.IDbConnection)">
            <summary>
            GetSchemaTable
            </summary>
            <param name="conn"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.GetSchemaView(System.Data.IDbConnection)">
            <summary>
            GetSchemaView
            </summary>
            <param name="conn"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.GetSchemaTable">
            <summary>
            GetSchemaTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.GetSchemaView">
            <summary>
            GetSchemaView
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.GetSchemaDB">
            <summary>
            Get DB Schema
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.FillSchemaDB(System.Data.DataSet,System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Fill Schema DB
            </summary>
            <param name="dataSet"></param>
            <param name="tableSchema"></param>
            <param name="prefix"></param>
            <param name="addAdvancedColumns"></param>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.ExecuteDataTable(System.Data.IDbCommand,System.String,System.Boolean)">
            <summary>
            Fill DataTable using DbDataAdapter
            </summary>
            <param name="cmd"></param>
            <param name="mappingName"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.ExecuteDataSet(System.Data.IDbCommand,System.String,System.Boolean)">
            <summary>
            Fill DataTable using DbDataAdapter
            </summary>
            <param name="cmd"></param>
            <param name="mappingName"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.ExecuteDataSet(System.Data.IDbCommand,System.String,System.Boolean,System.Boolean,System.String[])">
            <summary>
            Fill DataTable using DbDataAdapter
            </summary>
            <param name="cmd"></param>
            <param name="mappingName"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <param name="enforceConstraints"></param>
            <param name="tableMapping"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.DataSetTableMapping(System.Data.DataSet,System.Boolean,System.String[])">
            <summary>
            Set DataSer tables mapping
            </summary>
            <param name="ds"></param>
            <param name="enforceConstraints"></param>
            <param name="tableMapping"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.ExecuteTypedDataSet(System.Data.IDbCommand,System.Boolean,System.Data.DataSet,System.Type,System.Boolean,System.String[])">
            <summary>
            Fill Typed DataSet
            </summary>
            <param name="cmd"></param>
            <param name="addWithKey"></param>
            <param name="ds"></param>
            <param name="dsType"></param>
            <param name="enforceConstraints"></param>
            <param name="tableMapping"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.ExecuteDataOrScalar``1(System.Data.IDbCommand,System.String,System.Boolean)">
            <summary>
            Executes command and returns T value (DataSet|DataTable|DataRow|IEntityItem) or any type for scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmd"></param>
            <param name="mappingName"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.AdapterFactory.ExecuteDataOrScalar``2(System.Data.IDbCommand,System.String,System.Boolean)">
            <summary>
            Executes command and returns T value (DataSet|DataTable|DataRow|IEntityItem|List of IEntityItem) or any type for scalar.
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="cmd"></param>
            <param name="mappingName"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.Create``1">
            <summary>
            Create IDbCmd
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.Create(Nistec.Data.Ado.ConnectionProvider)">
            <summary>
            Create IDbCmd
            </summary>
            <param name="cp"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.Create(Nistec.Data.Entities.IDbContext)">
            <summary>
            Create IDbCmd
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.Create(System.Data.IDbConnection)">
            <summary>
            Create IDbCmd
            </summary>
            <param name="cnn"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.Create(System.String,Nistec.Data.DBProvider)">
            <summary>
            Create IDbCmd
            </summary>
            <param name="connectionString"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.Create(System.String)">
            <summary>
            Create IDbCmd
            </summary>
            <param name="connectionKey"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.BuildCommandText(System.Data.IDbCommand,Nistec.Data.DBProvider,Nistec.Data.DBCommandType,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            BuildCommandText
            </summary>
            <param name="command"></param>
            <param name="provider"></param>
            <param name="commandType"></param>
            <param name="TableName"></param>
            <param name="cmdPart1"></param>
            <param name="cmdPart2"></param>
            <param name="cmdPart3"></param>
            <param name="cmdPart4"></param>
            <param name="autNumberField"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.Query``1(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute query by using Default connection name and sql query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="parameters">SqlParameter array key value.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.Query``1(System.String,System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute query by given connection name and sql query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionName"></param>
            <param name="query"></param>
            <param name="parameters">SqlParameter array key value.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.Query``1(System.String,System.String,Nistec.Data.DataFilter)">
            <summary>
            execute query using filetr.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionName"></param>
            <param name="entity"></param>
            <param name="filter"><see cref="T:Nistec.Data.DataFilter"/></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.CreateConnection(System.String,Nistec.Data.DBProvider)">
            <summary>
            Create Connection
            </summary>
            <param name="connectionString"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.CreateCommand(System.String,System.Data.IDbConnection)">
            <summary>
            Create Command
            </summary>
            <param name="cmdText"></param>
            <param name="cnn"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.CreateCommand(System.String,System.Data.IDbConnection,System.Data.IDbDataParameter[])">
            <summary>
            Create Command
            </summary>
            <param name="cmdText"></param>
            <param name="cnn"></param>
            <param name="parameters">SqlParameter array key value.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.ParametersAddRange(System.Data.IDbCommand,System.Data.IDbDataParameter[])">
            <summary>
            Add Parameters to command
            </summary>
            <param name="cmd"></param>
            <param name="parameters">SqlParameter array key value.</param>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.GetProvider(System.Data.IDbConnection)">
            <summary>
            Get Provider
            </summary>
            <param name="cnn"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.GetProvider(System.Data.IDbCommand)">
            <summary>
            Get Provider
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.GetProvider(System.String)">
            <summary>
            Get Provider
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.#ctor(System.Data.IDbConnection)">
            <summary>
            ctor
            </summary>
            <param name="cnn"></param>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.#ctor(System.String,Nistec.Data.DBProvider)">
            <summary>
            ctor
            </summary>
            <param name="connectionString"></param>
            <param name="provider"></param>
        </member>
        <member name="P:Nistec.Data.Factory.DbFactory.ConnectionString">
            <summary>
            Get or Set ConnectionString
            </summary>
        </member>
        <member name="P:Nistec.Data.Factory.DbFactory.Adapter">
            <summary>
            Get Adapter
            </summary>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.GetCommand(System.String)">
            <summary>
            GetCommand
            </summary>
            <param name="cmdText"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.ExecuteReader(System.String,System.Data.CommandBehavior)">
            <summary>
            Execute Reader
            </summary>
            <param name="cmdText">Sql command.</param>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.ExecuteReader(System.String,System.Data.CommandBehavior,System.Data.IDbDataParameter[])">
            <summary>
            Execute Reader
            </summary>
            <param name="cmdText"></param>
            <param name="behavior"></param>
            <param name="parameters">SqlParameter array key value.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.ExecuteNonQuery(System.String)">
            <summary>
            Executes a command NonQuery and returns the number of rows affected.
            </summary>
            <param name="cmdText">Sql command.</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.ExecuteNonQuery(System.String,System.Data.IDbDataParameter[],System.Data.CommandType,System.Int32)">
            <summary>
            Executes a command NonQuery and returns the number of rows affected.
            </summary>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.ExecuteScalar``1(System.String)">
            <summary>
            Executes Command and returns T value as scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql command.</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.ExecuteScalar``1(System.String,Nistec.Data.DataParameter[],System.Data.CommandType,System.Int32)">
            <summary>
            Executes Command and returns T value as scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.ExecuteScalar``1(System.String,System.Data.IDbDataParameter[],``0,System.Data.CommandType,System.Int32)">
            <summary>
            Executes Command and returns T value as scalar.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="returnIfNull">The value will return if result is null.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.ExecuteCommand``1(System.String,System.Boolean)">
            <summary>
            Executes Command and returns T value (DataSet|DataTable|DataRow).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.ExecuteCommand``2(System.String,System.Data.IDbDataParameter[],System.Data.CommandType,System.Int32,System.Boolean)">
            <summary>
            Executes Command and returns T value (DataSet|DataTable|DataRow) .
            </summary>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.ExecuteCommand``1(System.String,System.Data.IDbDataParameter[],System.Data.CommandType,System.Int32,System.Boolean)">
            <summary>
            Executes Command and returns T value (DataSet|DataTable|DataRow) .
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.ExecuteCommand``1(System.String,System.Data.IDbDataParameter[],System.String,System.Data.CommandType,System.Int32,System.Boolean)">
            <summary>
            Executes Command and returns T value (DataSet|DataTable|DataRow) .
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cmdText">Sql command.</param>
            <param name="parameters">SqlParameter array key value.</param>
            <param name="cacheKey">Get or Set data from/to cache.</param>
            <param name="commandType">Specifies how a command string is interpreted.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns> 
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.ExecuteDataTable(System.String)">
            <summary>
            Executes Adapter and returns DataTable.
            </summary>
            <param name="mappingName"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.ExecuteDataTable(System.String,System.Boolean)">
            <summary>
            Executes Adapter and returns DataTable.
            </summary>
            <param name="mappingName"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.ExecuteDataTable(System.String,System.String,System.Boolean)">
            <summary>
            Executes Adapter and returns DataTable.
            </summary>
            <param name="tableName"></param>
            <param name="cmdText"></param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.ExecuteDataTable(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Executes Adapter and returns DataTable.
            </summary>
            <param name="tableName"></param>
            <param name="cmdText"></param>
            <param name="commandTimeout">Timeout in seconds</param>
            <param name="addWithKey">Adds the primary key columns to complete the schema.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.LookupQuery``1(System.String,System.String,System.String,``0,System.Object[])">
            <summary>
            Execute lookup function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Field">field name for return value</param>
            <param name="Table">Table name or View name</param>
            <param name="Where">Sql Where string,each paramet name should start with @ </param>
            <param name="returnIfNull">Default value to return if no recored affected</param>
            <param name="values">Values of Parameters</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.MultiExecuteNonQuery(System.String[],System.Boolean)">
            <summary>
            Execute multiple commands Non Query
            </summary>
            <param name="commands"></param>
            <param name="failOnFirstError"></param>
        </member>
        <member name="M:Nistec.Data.Factory.DbFactory.MultiExecuteScalar(System.String[],System.Boolean)">
            <summary>
            Execute multiple commands Scalar
            </summary>
            <param name="commands"></param>
            <param name="failOnFirstError"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.IUser">
            <summary>
            Interface provided by the "SignedUser" model. 
            </summary>
        </member>
        <member name="T:Nistec.Data.OleDb.CommandAsync">
            <remarks>
            <example>
             private delegate void AsyncFillDelegate(IDataReader reader);
             private delegate void AsyncStatusDelegate(string Text);
             protected void AsyncHandleCallback(IAsyncResult result)
             {
                try
                {
                     AsyncFillDelegate del = new AsyncFillDelegate(dalAsync.AsyncFillDataSource);
                     this.Invoke(del, dalAsync.AsyncExecuteEnd(result));
            
                      // Do not close the reader here, because it is being used in 
                     // a separate thread. Instead, have the procedure you have
                     // called close the reader once it is done with it.
                 }
                 catch (Exception ex)
                 {
                     this.Invoke(new AsyncStatusDelegate(dalAsync.AsyncStatus), "Error: " + ex.Message);
               }
            }
             protected override bool Initialize()
            {
                dalAsync = new CommandAsync(ConnectionString);
                dalAsync.AsyncCompleted += new EventHandler(Async_AsyncCompleted);
                dalAsync.AsyncExecuteBegin(new AsyncCallback(AsyncHandleCallback));
            }
            
            void Async_AsyncCompleted(object sender, EventArgs e)
            {
                DataTable dt = dalAsync.AsyncResult_DataTable();
                dt.TableName = "Accounts";
                this.ctlNavBar.Init(dt);
            }
            
             </example>
            </remarks>
             <summary>
             Use CommandAsync to invoke Asynchronous Processing
             you can use 2 ways AsyncExecute or AsyncExecuteBegin and AsyncExecuteEnd
             for win form you have simple way to accomplish this is to call the Invoke
             method of the form, which calls the delegate you supply
             from the form's thread. 
             </summary>
        </member>
        <member name="M:Nistec.Data.OleDb.CommandAsync.InnerDispose">
            <summary>
            InnerDispose
            </summary>
        </member>
        <member name="F:Nistec.Data.OleDb.CommandAsync.m_AsyncConnection">
            <summary>
            Async Connection object.
            </summary>
        </member>
        <member name="M:Nistec.Data.OleDb.CommandAsync.#ctor(System.String)">
            <summary>
            CommandAsync Ctor
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Nistec.Data.OleDb.CommandAsync.OnAsyncCompleted(System.EventArgs)">
            <summary>
            OnAsyncCompleted occured when executing complited
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.Data.OleDb.CommandAsync.OnAsyncStatusChanged(System.EventArgs)">
            <summary>
            OnAsyncStatusChanged occured when status changed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.Data.OleDb.CommandAsync.AsyncExecuteBegin(System.AsyncCallback,System.String,System.Data.IDataParameter[],System.Int32,System.Int32)">
            <summary>
            AsyncExecuteBegin , use this method to begin invoke 
            Async procedure call, doing so makes it easier
            to call AsyncExecuteEnd in the callback procedure.
            </summary>
            <param name="callback">AsyncCallback</param>
            <param name="sql"></param>
            <param name="parameters">parameters </param>
            <param name="timeOut">Set time out, default =0</param>
            <param name="WaitForDelay">a few seconds before retrieving the real data use for a long-running query, default =0</param>
        </member>
        <member name="M:Nistec.Data.OleDb.CommandAsync.AsyncExecuteEnd(System.IAsyncResult)">
            <summary>
            AsyncHandleCallback
            Retrieve the original command object, passed
            to this procedure in the AsyncState property
            of the IAsyncResult parameter.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Nistec.Data.OleDb.CommandAsync.AsyncExecute(System.String,System.Data.IDataParameter[],System.Int32,System.Int32,System.Int32)">
            <summary>
            AsyncExecute , use this method to invoke 
            Async procedure call until is IsCompleted 
            </summary>
            <param name="sql"></param>
            <param name="parameters">parameters </param>
            <param name="timeOut">Set time out, default =0</param>
            <param name="interval">Waiting time for async thread, default =0</param>
            <param name="WaitForDelay">a few seconds before retrieving the real data use for a long-running query, default =0</param>
        </member>
        <member name="M:Nistec.Data.OleDb.CommandAsync.Execute(System.String,System.Data.IDataParameter[],System.Int32,System.Int32)">
            <summary>
            AsyncExecute , use this method to invoke 
            Async procedure call until is IsCompleted 
            </summary>
            <param name="sql"></param>
            <param name="parameters">parameters </param>
            <param name="timeOut">Set time out, default =0</param>
            <param name="interval">Waiting time for async thread, default =0</param>
        </member>
        <member name="T:Nistec.Data.OleDb.DbCommand">
             <summary>
             This class contains method RunCommand to create and execute Sql commands
             </summary>
             <example >
             <code >
             
            	public sealed class Data: Nistec.Data.OleDb.AutoBase  
             {
            		public ClassDB dalDB{get{return (ClassDB)GetDalDB();}}
            		public CheqsProperty dalCheq{get{return (CheqsProperty)GetDalDB();}}
             }
             
            	public abstract class ClassDB : Nistec.Data.OleDb.DalDB
            	{
            
            		[DBCommand("SELECT ID FROM CheqProperty WHERE PropertyName=@name")]
            		public abstract object GetCheqPropertyID(string name);
            
            		[DBCommand("SELECT PropertyName FROM CheqProperty ")]
            		public abstract ArrayList GetCheqPropertyList();
            
            		[DBCommand("SELECT ID,PropertyName FROM CheqProperty")]
            		public abstract Record[] GetCheqPropertyRecords();
            	}
             
             private int GetPropertyID(string name)
             {
             	return (int)App.DB.dalDB.GetCheqPropertyID (name) ; 
             }
             
            	private void GetRecordList()
             {
            		Nistec.Data.Record[] rcd=App.DB.dalDB.GetCheqPropertyRecords();
            		System.Text.StringBuilder sb=new System.Text.StringBuilder (); 
            		string s="";
            		for(int i=0;i  rcd.Length ;i++)
            		{
            		s="DisplayMember : " + ((Nistec.Data.Record)rcd.GetValue (i)).DisplayMember.ToString () ; 
            		sb.Append (s);
            		s=" ,  ValueMember : " + ((Nistec.Data.Record)rcd.GetValue (i)).ValueMember.ToString ()+ "\n\r" ; 
            		sb.Append (s);
            		}
            		MessageBox.Show (sb.ToString ());
             }
            	private void GetList()
            	{
            
            		System.Text.StringBuilder sb=new System.Text.StringBuilder (); 
            		ArrayList list=App.DB.dalDB.GetCheqPropertyList ();
            		for(int i=0;i list.Count ;i++)
            		{
                      sb.Append (list[i].ToString () + "\n\r");
                           
            		}
            		MessageBox.Show (sb.ToString ());
             }
             </code>
             </example>
        </member>
        <member name="M:Nistec.Data.OleDb.DbCommand.#ctor(Nistec.Data.IAutoBase)">
            <summary>
            DbCommand Constructor with AutoBase. 
            </summary>
        </member>
        <member name="M:Nistec.Data.OleDb.DbCommand.#ctor(System.String)">
            <summary>
            DbCommand Constructor with connection string
            </summary>
        </member>
        <member name="M:Nistec.Data.OleDb.DbCommand.#ctor(System.Data.OleDb.OleDbConnection,System.Boolean)">
            <summary>
            DbCommand Constructor with connection
            </summary>
        </member>
        <member name="M:Nistec.Data.OleDb.DbCommand.Finalize">
            <summary>
            Class destructor.
            </summary>
        </member>
        <member name="M:Nistec.Data.OleDb.DbCommand.BuildCommandText(System.Data.IDbCommand,Nistec.Data.DBCommandType,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Build Command Text
            </summary>
            <param name="command"></param>
            <param name="commandType"></param>
            <param name="TableName"></param>
            <param name="cmdPart1"></param>
            <param name="cmdPart2"></param>
            <param name="cmdPart3"></param>
            <param name="cmdPart4"></param>
            <param name="autNumberField"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.OleDb.DbCommand.CreateAdapter">
            <summary>
            Create Adapter as <see cref="T:Nistec.Data.Factory.IDbAdapter"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.OleDb.DbCommand.ExecuteCmd(System.Data.IDbConnection,System.Data.IDbTransaction,System.Reflection.MethodInfo,System.Object[],System.Boolean,System.Int32)">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <param name="connection">Connection property.</param>
            <param name="transaction">Transaction property.</param>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/> type object from which the command object is built.</param>
            <param name="values">Array of values for the command parameters.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.OleDb.DbAdapter.CreateDataAdapter(System.String)">
            <summary>
            CreateDataAdapter
            </summary>
            <param name="strSQL"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Data.SqlClient.CommandAsync">
            <remarks>
            <example>
             private delegate void AsyncFillDelegate(IDataReader reader);
             private delegate void AsyncStatusDelegate(string Text);
             protected void AsyncHandleCallback(IAsyncResult result)
             {
                try
                {
                     AsyncFillDelegate del = new AsyncFillDelegate(dalAsync.AsyncFillDataSource);
                     this.Invoke(del, dalAsync.AsyncExecuteEnd(result));
            
                      // Do not close the reader here, because it is being used in 
                     // a separate thread. Instead, have the procedure you have
                     // called close the reader once it is done with it.
                 }
                 catch (Exception ex)
                 {
                     this.Invoke(new AsyncStatusDelegate(dalAsync.AsyncStatus), "Error: " + ex.Message);
               }
            }
             protected override bool Initialize()
            {
                dalAsync = new CommandAsync(ConnectionString);
                dalAsync.AsyncCompleted += new EventHandler(Async_AsyncCompleted);
                dalAsync.AsyncExecuteBegin(new AsyncCallback(AsyncHandleCallback));
            }
            
            void Async_AsyncCompleted(object sender, EventArgs e)
            {
                DataTable dt = dalAsync.AsyncResult_DataTable();
                dt.TableName = "Accounts";
                this.ctlNavBar.Init(dt);
            }
            
             </example>
             </remarks>
             <summary>
             Use CommandAsync to invoke Asynchronous Processing
             you can use 2 ways AsyncExecute or AsyncExecuteBegin and AsyncExecuteEnd
             for win form you have simple way to accomplish this is to call the Invoke
             method of the form, which calls the delegate you supply
             from the form's thread. 
             </summary>
        </member>
        <member name="M:Nistec.Data.SqlClient.CommandAsync.InnerDispose">
            <summary>
            InnerDispose
            </summary>
        </member>
        <member name="F:Nistec.Data.SqlClient.CommandAsync.m_AsyncConnection">
            <summary>
            Async Connection object.
            </summary>
        </member>
        <member name="M:Nistec.Data.SqlClient.CommandAsync.#ctor(System.String,System.String)">
            <summary>
            CommandAsync Ctor
            </summary>
            <param name="connection"></param>
            <param name="mode"></param>
        </member>
        <member name="M:Nistec.Data.SqlClient.CommandAsync.#ctor(System.String)">
            <summary>
            CommandAsync Ctor
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Nistec.Data.SqlClient.CommandAsync.OnAsyncCompleted(System.EventArgs)">
            <summary>
            OnAsyncCompleted occured when executing complited
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.Data.SqlClient.CommandAsync.OnAsyncStatusChanged(System.EventArgs)">
            <summary>
            OnAsyncStatusChanged occured when status changed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.Data.SqlClient.CommandAsync.AsyncExecuteBegin(System.AsyncCallback,System.String,System.Data.IDataParameter[],System.Int32,System.Int32)">
            <summary>
            AsyncExecuteBegin , use this method to begin invoke 
            Async procedure call, doing so makes it easier
            to call AsyncExecuteEnd in the callback procedure.
            </summary>
            <param name="callback">AsyncCallback</param>
            <param name="sql"></param>
            <param name="parameters">parameters </param>
            <param name="timeOut">Set time out, default =0</param>
            <param name="WaitForDelay">a few seconds before retrieving the real data use for a long-running query, default =0</param>
        </member>
        <member name="M:Nistec.Data.SqlClient.CommandAsync.AsyncExecuteEnd(System.IAsyncResult)">
            <summary>
            AsyncHandleCallback
            Retrieve the original command object, passed
            to this procedure in the AsyncState property
            of the IAsyncResult parameter.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Nistec.Data.SqlClient.CommandAsync.AsyncExecute(System.String,System.Data.IDataParameter[],System.Int32,System.Int32,System.Int32)">
            <summary>
            AsyncExecute , use this method to invoke 
            Async procedure call until is IsCompleted 
            </summary>
            <param name="sql"></param>
            <param name="parameters">parameters </param>
            <param name="timeOut">Set time out, default =0</param>
            <param name="interval">Waiting time for async thread, default =0</param>
            <param name="WaitForDelay">a few seconds before retrieving the real data use for a long-running query, default =0</param>
        </member>
        <member name="M:Nistec.Data.SqlClient.CommandAsync.Execute(System.String,System.Data.IDataParameter[],System.Int32,System.Int32)">
            <summary>
            AsyncExecute , use this method to invoke 
            Async procedure call until is IsCompleted 
            </summary>
            <param name="sql"></param>
            <param name="parameters">parameters </param>
            <param name="timeOut">Set time out, default =0</param>
            <param name="interval">Waiting time for async thread, default =0</param>
        </member>
        <member name="T:Nistec.Data.SqlClient.DbBulkCopy`1">
            <summary>
            Represent an object that execute <see cref="T:System.Data.SqlClient.SqlBulkCopy"/>  commands using generic <see cref="T:Nistec.Data.Entities.IDbContext"/> .
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Nistec.Data.SqlClient.DbBulkCopy">
            <summary>
            Represent an object that execute <see cref="T:System.Data.SqlClient.SqlBulkCopy"/>  commands.
            </summary>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbBulkCopy.#ctor(Nistec.Data.IAutoBase)">
            <summary>
            DbCommand Constructor with AutoBase. 
            </summary>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbBulkCopy.#ctor(Nistec.Data.Entities.IDbContext)">
            <summary>
            DbCommand Constructor with IDbContext. 
            </summary>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbBulkCopy.#ctor(System.String)">
            <summary>
            DbCommand Constructor with connection string
            </summary>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Boolean)">
            <summary>
            DbCommand Constructor with connection
            </summary>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbBulkCopy.Finalize">
            <summary>
            Class destructor.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Nistec.Data.SqlClient.DbCommand`1" -->
        <member name="T:Nistec.Data.SqlClient.DbCommand">
             <summary>
             Represent an object that execute sql commands and implements <see cref="T:Nistec.Data.IAutoDb"/>.
             </summary>
             <example >
             <code >
             
            public class AdventureWorksCommand : Nistec.Data.SqlClient.DbCommand
            {
            
                public AdventureWorksCommand()
                  : base(DBConfig.ConnectionString)
                {
                }
               
                public static AdventureWorksCommand Instance
                {
                    get { return new AdventureWorksCommand(); }
                }
            
                [DBCommand(DBCommandType.Text, "SELECT * FROM Person.Contact", null, MissingSchemaAction.AddWithKey)]
                public DataTable Contacts()
                {
                    return (DataTable)base.Execute();
                }
            
                [DBCommand(DBCommandType.Lookup, "SELECT EmailAddress FROM Person.Contact where ContactID=@ContactID", null)]
                public string Contact_Email(int ContactID)
                {
                    return (string)base.Execute(ContactID);
                }
            
                [DBCommand(DBCommandType.Lookup, "SELECT EmailPromotion FROM Person.Contact where ContactID=@ContactID", 0)]
                public int Contact_EmailPromotion(int ContactID)
                {
                    return (int)base.Execute(ContactID);
                }
            
                [DBCommand("SELECT * FROM Person.Contact where ContactID=@ContactID", 0)]
                public DataRow Contact(int ContactID)
                {
                    return (DataRow)base.Execute(ContactID);
                }
            
                [DBCommand(DBCommandType.Update, "Person.Contact")]
                public int Contact_Update
                    (
                    [DalParam(DalParamType.Key)] int ContactID,
                    [DalParam()]DateTime ModifiedDate,
                    [DalParam(24)]string Phone
                    )
                {
                    return (int)base.Execute(ContactID, ModifiedDate, Phone);
            
                }
            }
            
             </code>
             </example>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbCommand.#ctor(Nistec.Data.IAutoBase)">
            <summary>
            DbCommand Constructor with AutoBase. 
            </summary>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbCommand.#ctor(System.String)">
            <summary>
            DbCommand Constructor with connection string
            </summary>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbCommand.#ctor(System.Data.SqlClient.SqlConnection,System.Boolean)">
            <summary>
            DbCommand Constructor with connection
            </summary>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbCommand.Finalize">
            <summary>
            Class destructor.
            </summary>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbCommand.BuildCommandText(System.Data.IDbCommand,Nistec.Data.DBCommandType,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Build Command Text
            </summary>
            <param name="command"></param>
            <param name="commandType"></param>
            <param name="TableName"></param>
            <param name="cmdPart1"></param>
            <param name="cmdPart2"></param>
            <param name="cmdPart3"></param>
            <param name="cmdPart4"></param>
            <param name="autNumberField"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbCommand.CreateAdapter">
            <summary>
            Create Adapter as <see cref="T:Nistec.Data.Factory.IDbAdapter"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbCommand.ExecuteCmd(System.Data.IDbConnection,System.Data.IDbTransaction,System.Reflection.MethodInfo,System.Object[],System.Boolean,System.Int32)">
            <summary>
            Executes Sql command and returns execution result. 
            Command text, type and parameters are taken from method using reflection.
            Command parameter values are taken from method parameter values.
            </summary>
            <param name="connection">Connection property.</param>
            <param name="transaction">Transaction property.</param>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/> type object from which the command object is built.</param>
            <param name="values">Array of values for the command parameters.</param>
            <param name="autoCloseConnection">Determines if the connection must be closed after the command execution.</param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <returns>return one of list <see cref="T:Nistec.Data.DalReturnType"/> type </returns>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbCommand.ExecuteAsyncCommand(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Executes Async sql string and returns the number of row affected.
            </summary>
            <param name="sql">Sql string.</param>
            <param name="interval"></param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <param name="WaitForDelay">a few seconds before retrieving the real data use for a long-running query, default =0</param>
            <returns>number of row affected</returns>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbCommand.ExecuteAsyncReader(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            AsyncExecute
            </summary>
            <param name="sql"></param>
            <param name="commandTimeOut">Set the command time out, default =0</param>
            <param name="interval">Waiting time for async thread, default =0</param>
            <param name="WaitForDelay">a few seconds before retrieving the real data use for a long-running query, default =0</param>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbCommand.RunAsyncReader(System.Data.SqlClient.SqlCommand,System.Int32)">
            <summary>
            RunAsyncReader, asynchronously execute
            the specified command against the connection. 
            </summary>
            <param name="cmd"></param>
            <param name="interval">Waiting time for async thread, default =0</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbCommand.ExecuteBulkCopy(System.String,System.String,Nistec.Data.MAPPING[])">
            <summary>
            Execute Bulk Copy
            </summary>
            <param name="sql"></param>
            <param name="destinationTableName"></param>
            <param name="columnMapping"></param>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbCommand.ExecuteBulkCopy(System.String,System.String,Nistec.Data.MAPPING[],System.Int32,System.Int32)">
            <summary>
            Execute Bulk Copy
            </summary>
            <param name="sql"></param>
            <param name="destinationTableName"></param>
            <param name="columnMapping"></param>
            <param name="batchSize"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbCommand.ExecuteBulkCopy(System.Data.DataTable,System.String,Nistec.Data.MAPPING[])">
            <summary>
            Execute Bulk Copy
            </summary>
            <param name="table"></param>
            <param name="destinationTableName"></param>
            <param name="columnMapping"></param>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbCommand.ExecuteBulkCopy(System.Data.DataTable,System.Data.DataRowState,System.String,Nistec.Data.MAPPING[])">
            <summary>
            Execute Bulk Copy
            </summary>
            <param name="table"></param>
            <param name="state"></param>
            <param name="destinationTableName"></param>
            <param name="columnMapping"></param>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbCommand.ExecuteBulkCopy(System.Data.DataRow[],System.String,Nistec.Data.MAPPING[])">
            <summary>
            Execute Bulk Copy
            </summary>
            <param name="rows"></param>
            <param name="destinationTableName"></param>
            <param name="columnMapping"></param>
        </member>
        <member name="M:Nistec.Data.SqlClient.DbAdapter.CreateDataAdapter(System.String)">
            <summary>
            CreateDataAdapter
            </summary>
            <param name="strSQL"></param>
            <returns></returns>
        </member>
    </members>
</doc>
