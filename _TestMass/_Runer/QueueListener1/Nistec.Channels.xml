<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nistec.Channels</name>
    </assembly>
    <members>
        <member name="P:Nistec.Channels.Http.HttpResult.WebExceptionStatus">
            <summary>
            Get the WebExceptionStatus
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpResult.HttpStatusCode">
            <summary>
            Get the HttpStatusCode
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpResult.HttpStatusDescription">
            <summary>
            Get the HttpStatus Description
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpResult.WebException">
            <summary>
            Get the WebException
            </summary>
        </member>
        <member name="T:Nistec.Channels.Http.HttpRequest">
            <summary>
            HttpRequest
            </summary>
        </member>
        <member name="F:Nistec.Channels.Http.HttpRequest.request">
            <summary>
            Http WebRequest
            </summary>
        </member>
        <member name="F:Nistec.Channels.Http.HttpRequest.m_postData">
            <summary>
            postData
            </summary>
        </member>
        <member name="E:Nistec.Channels.Http.HttpRequest.AsyncWorker">
            <summary>
            AsyncWorker
            </summary>
        </member>
        <member name="F:Nistec.Channels.Http.HttpRequest.ManualReset">
            <summary>
            ManualReset
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpRequest.#ctor(System.String,Nistec.Channels.Http.RequestContentType,System.Int32)">
            <summary>
            Initialized new instance of HttpRequest class
            </summary>
            <param name="url"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpRequest.#ctor(System.String,System.String,Nistec.Channels.Http.RequestContentType,System.Int32)">
            <summary>
            Initialized new instance of HttpRequest class
            </summary>
            <param name="url"></param>
            <param name="method"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpRequest.#ctor(System.String,System.String,System.String,Nistec.Channels.Http.RequestContentType,System.Int32)">
            <summary>
            Initialized new instance of HttpRequest class
            </summary>
            <param name="url"></param>
            <param name="method"></param>
            <param name="charSet"></param>
            <param name="contentType"></param>
        </member>
        <member name="P:Nistec.Channels.Http.HttpRequest.HttpWebRequest">
            <summary>
            Get HttpWebRequest
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpRequest.CharSet">
            <summary>
            Get or Set CharSet
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpRequest.ContentType">
            <summary>
            Get or Set ContentType
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpRequest.WebExceptionStatus">
            <summary>
            Get the WebExceptionStatus
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpRequest.HttpStatusCode">
            <summary>
            Get the HttpStatusCode
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpRequest.HttpStatusDescription">
            <summary>
            Get the HttpStatus Description
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpRequest.WebException">
            <summary>
            Get the WebException
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpRequest.OnAsyncWorker(System.EventArgs)">
            <summary>
            OnAsyncWorker
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpRequest.DoAsyncRequest(System.String,System.Action{System.String},System.String,System.Boolean)">
            <summary>
            Async Request
            </summary>
            <param name="postData"></param>
            <param name="charSet"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpRequest.DoGet(System.String,System.String,System.String)">
            <summary>
            Send HttpWebRequest
            </summary>
            <param name="url"></param>
            <param name="postData"></param>
            <param name="codePage">codePage</param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Channels.Http.HttpJsonClient">
            <summary>
            Represent a base class for tcp client.
            </summary>
        </member>
        <member name="F:Nistec.Channels.Http.HttpJsonClient.DefaultHostName">
            <summary>
            DefaultHostName
            </summary>
        </member>
        <member name="F:Nistec.Channels.Http.HttpJsonClient.DefaultAddress">
            <summary>
            DefaultAddress
            </summary>
        </member>
        <member name="F:Nistec.Channels.Http.HttpJsonClient.DefaultPort">
            <summary>
            DefaultPort
            </summary>
        </member>
        <member name="F:Nistec.Channels.Http.HttpJsonClient.DefaultReceiveBufferSize">
            <summary>
            DefaultReceiveBufferSize
            </summary>
        </member>
        <member name="F:Nistec.Channels.Http.HttpJsonClient.DefaultSendBufferSize">
            <summary>
            DefaultSendBufferSize
            </summary>
        </member>
        <member name="F:Nistec.Channels.Http.HttpJsonClient.DefaultSendTimeout">
            <summary>
            DefaultSendTimeout
            </summary>
        </member>
        <member name="F:Nistec.Channels.Http.HttpJsonClient.DefaultProcessTimeout">
            <summary>
            DefaultProcessTimeout
            </summary>
        </member>
        <member name="F:Nistec.Channels.Http.HttpJsonClient.DefaultReadTimeout">
            <summary>
            DefaultReadTimeout
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpJsonClient.HostName">
            <summary>
             Get or Set HostName.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpJsonClient.Address">
            <summary>
             Get or Set Host Address.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpJsonClient.Port">
            <summary>
             Get or Set Port.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpJsonClient.Method">
            <summary>
             Get or Set request method.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpJsonClient.MaxServerConnections">
            <summary>
            Get or Set MaxServerConnections (Only for server side) (Default=1).
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpJsonClient.ProcessTimeout">
            <summary>
            Get or Set ProcessTimeout (Default=5000).
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpJsonClient.ConnectTimeout">
            <summary>
            Get or Set ConnectTimeout (Default=5000).
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpJsonClient.Log">
            <summary>
            Get or Set Logger that implements <see cref="T:Nistec.Logging.ILogger"/> interface.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpJsonClient.HostAddress">
            <summary>
             Get or Set Host Address.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpJsonClient.GetHostAddress">
            <summary>
            Get host adress.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpJsonClient.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="hostAddress"></param>
            <param name="port"></param>
            <param name="method"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpJsonClient.#ctor(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="hostAddress"></param>
            <param name="port"></param>
            <param name="method"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpJsonClient.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:Nistec.Channels.Http.HttpClient"/> from configuration.
            </summary>
            <param name="configHost"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpJsonClient.#ctor(Nistec.Channels.Http.HttpSettings)">
            <summary>
            Initialize a new instance of <see cref="T:Nistec.Channels.Http.HttpClient"/> with given <see cref="T:Nistec.Channels.Http.HttpSettings"/> settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpJsonClient.Execute(System.String,System.Boolean)">
            <summary>
            connect to the host and execute request.
            </summary>
        </member>
        <member name="T:Nistec.Channels.Http.HttpClient`1">
            <summary>
            Represent a base class for tcp client.
            </summary>
            <typeparam name="TRequest"></typeparam>
        </member>
        <member name="P:Nistec.Channels.Http.HttpClient`1.Settings">
            <summary>
            Get or Set <see cref="T:Nistec.Channels.Http.HttpSettings"/> Settings.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpClient`1.Log">
            <summary>
            Get or Set Logger that implements <see cref="T:Nistec.Logging.ILogger"/> interface.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient`1.#ctor">
            <summary>
            Constractor default
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient`1.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <param name="method"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient`1.#ctor(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="address"></param>
            <param name="method"></param>
            <param name="port"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient`1.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="hostAddress"></param>
            <param name="method"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient`1.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:Nistec.Channels.Http.HttpClient"/> from configuration.
            </summary>
            <param name="configHost"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient`1.#ctor(Nistec.Channels.Http.HttpSettings)">
            <summary>
            Initialize a new instance of <see cref="T:Nistec.Channels.Http.HttpClient"/> with given <see cref="T:Nistec.Channels.Http.HttpSettings"/> settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient`1.RequestToStream(`0)">
            <summary>
            Serialize json request
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient`1.RequestToBinary(`0)">
            <summary>
            Serialize json request
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient`1.RequestToJson(`0)">
            <summary>
            Serialize json request
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient`1.ReadJsonResponse(System.String,System.Type)">
            <summary>
            Deserialize json response
            </summary>
            <param name="response"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient`1.ReadJsonResponse``1(System.String)">
            <summary>
            Deserialize json response
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient`1.ExecuteOut(`0,System.Boolean)">
            <summary>
            connect to the host and execute request.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient`1.ExecuteJson(System.String,System.Boolean)">
            <summary>
            connect to the host and execute request.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient`1.ExecuteQueryBinary(System.String[])">
            <summary>
            connect to the host and execute request.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient`1.ExecuteQueryStream(System.String[])">
            <summary>
            connect to the host and execute request.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient`1.Execute(System.String,Nistec.Channels.Http.RequestContentType,System.Boolean)">
            <summary>
            connect to the host and execute request.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient`1.Execute(`0,System.Type,System.Boolean)">
            <summary>
            connect to the host and execute request.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient`1.Execute(`0,System.Boolean)">
            <summary>
            connect to the http server and execute request.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient`1.Execute``1(`0,System.Boolean)">
            <summary>
            connect to the http server and execute request.
            </summary>
        </member>
        <member name="T:Nistec.Channels.Http.HttpClient">
            <summary>
            Represent tcp client.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient.SendDuplexStream(Nistec.Channels.MessageStream,System.String,System.Boolean)">
            <summary>
            Send Duplex
            </summary>
            <param name="request"></param>
            <param name="hostName"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient.SendDuplexJson(Nistec.Channels.MessageStream,System.String,System.Boolean)">
            <summary>
            Send Duplex json
            </summary>
            <param name="request"></param>
            <param name="hostName"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient.SendOutJson(Nistec.Channels.MessageStream,System.String,System.Boolean)">
            <summary>
            Send Duplex json
            </summary>
            <param name="request"></param>
            <param name="hostName"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient.SendDuplexJson(System.String,System.String,System.Boolean)">
            <summary>
            Send Duplex json
            </summary>
            <param name="request"></param>
            <param name="hostName"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient.SendOutJson(System.String,System.String,System.Boolean)">
            <summary>
            Send Duplex json
            </summary>
            <param name="request"></param>
            <param name="hostName"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Constractor with arguments
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <param name="method"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient.#ctor(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Constractor with arguments
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <param name="method"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constractor with arguments
            </summary>
            <param name="hostAddress"></param>
            <param name="method"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:Nistec.Channels.Http.HttpClient"/> from configuration.
            </summary>
            <param name="configHost"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient.#ctor(Nistec.Channels.Http.HttpSettings)">
            <summary>
            Initialize a new instance of <see cref="T:Nistec.Channels.Http.HttpClient"/> with given <see cref="T:Nistec.Channels.Http.HttpSettings"/> settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient.RequestToStream(Nistec.Channels.MessageStream)">
            <summary>
            Serialize json request
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient.RequestToBinary(Nistec.Channels.MessageStream)">
            <summary>
            Serialize json request
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient.RequestToJson(Nistec.Channels.MessageStream)">
            <summary>
            Serialize json request
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient.ReadJsonResponse``1(System.String)">
            <summary>
             Deserialize json response
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpClient.ReadJsonResponse(System.String,System.Type)">
            <summary>
             Deserialize json response
            </summary>
            <param name="response"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Channels.Http.HttpServer`1">
            <summary>
            Represent a base class for tcp server listner.
            </summary>
            <typeparam name="TRequest"></typeparam>
        </member>
        <member name="P:Nistec.Channels.Http.HttpServer`1.ServiceState">
            <summary>
            Get <see cref="T:Nistec.Channels.ChannelServiceState"/> State.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpServer`1.Settings">
            <summary>
            Get current <see cref="T:Nistec.Channels.Http.HttpSettings"/> settings.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpServer`1.Log">
            <summary>
            Get or Set Logger that implements <see cref="T:Nistec.Logging.ILogger"/> interface.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpServer`1.IsReady">
            <summary>
            Get current <see cref="T:Nistec.Channels.Http.HttpSettings"/> settings.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpServer`1.#ctor(System.String)">
            <summary>
            Constractor using host configuration.
            </summary>
            <param name="configHost"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpServer`1.#ctor(Nistec.Channels.Http.HttpSettings)">
            <summary>
            Constractor using settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpServer`1.FaultAck(System.String)">
            <summary>
            Create fault ack.
            </summary>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpServer`1.ReadRequest(Nistec.Channels.Http.HttpRequestInfo)">
            <summary>
            Read Request from client.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpServer`1.ExecTransStream(`0)">
            <summary>
            Exec client requset.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpServer`1.ExecString(`0)">
            <summary>
            Exec client requset.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpServer`1.WriteResponse(System.Net.HttpListenerContext,Nistec.Channels.TransStream)">
            <summary>
            Write response to client.
            </summary>
            <param name="context"></param>
            <param name="bResponse"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpServer`1.WriteResponse(System.Net.HttpListenerContext,System.String)">
            <summary>
            Write response to client.
            </summary>
            <param name="context"></param>
            <param name="strResponse"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Nistec.Channels.Http.HttpSettings" -->
        <member name="F:Nistec.Channels.Http.HttpSettings.DefaultHostName">
            <summary>
            DefaultHostName
            </summary>
        </member>
        <member name="F:Nistec.Channels.Http.HttpSettings.DefaultAddress">
            <summary>
            DefaultAddress
            </summary>
        </member>
        <member name="F:Nistec.Channels.Http.HttpSettings.DefaultMethod">
            <summary>
            DefaultMethod
            </summary>
        </member>
        <member name="F:Nistec.Channels.Http.HttpSettings.DefaultPort">
            <summary>
            DefaultPort
            </summary>
        </member>
        <member name="F:Nistec.Channels.Http.HttpSettings.DefaultSslPort">
            <summary>
            DefaultSslPort
            </summary>
        </member>
        <member name="F:Nistec.Channels.Http.HttpSettings.DefaultConnectTimeout">
            <summary>
            DefaultSendTimeout
            </summary>
        </member>
        <member name="F:Nistec.Channels.Http.HttpSettings.DefaultProcessTimeout">
            <summary>
            DefaultProcessTimeout
            </summary>
        </member>
        <member name="F:Nistec.Channels.Http.HttpSettings.DefaultMaxErrors">
            <summary>
            DefaultMaxSocketError
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpSettings.HostName">
            <summary>
             Get or Set HostName.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpSettings.Address">
            <summary>
             Get or Set Host Address.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpSettings.Port">
            <summary>
             Get or Set Port.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpSettings.SslPort">
            <summary>
             Get or Set SslPort.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpSettings.Method">
            <summary>
             Get or Set request method.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpSettings.SslEnabled">
            <summary>
             Get or Set if ssl is enabled.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpSettings.MaxServerConnections">
            <summary>
            Get or Set MaxServerConnections (Only for server side) (Default=1).
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpSettings.ProcessTimeout">
            <summary>
            Get or Set ProcessTimeout (Default=5000).
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpSettings.ConnectTimeout">
            <summary>
            Get or Set ConnectTimeout (Default=5000).
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpSettings.MaxErrors">
            <summary>
            Get or Set the max errors befor service shut down.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpSettings.MaxThreads">
            <summary>
            Get or Set the max workers of http listener.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpSettings.EnsureHostAddress(System.String)">
            <summary>
            Ensure Hot Address
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Channels.Http.HttpSettings.HostAddress">
            <summary>
             Get or Set Full Host Address like "site.com:13010".
            </summary>
        </member>
        <member name="P:Nistec.Channels.Http.HttpSettings.SslHostAddress">
            <summary>
             Get or Set Host Address ssl.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpSettings.GetHostAddress">
            <summary>
            Get host adress.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpSettings.GetSslHostAddress">
            <summary>
            Get host adress ssl.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpSettings.#ctor">
            <summary>
            Default constractor.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpSettings.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="hostAddress"></param>
            <param name="port"></param>
            <param name="method"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpSettings.#ctor(System.String,System.Boolean)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="configHost"></param>
            <param name="isServer"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpSettings.#ctor(System.Xml.XmlNode,System.Boolean)">
            <summary>
            HttpSettings
            </summary>
            <param name="node"></param>
            <param name="isServer"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpSettings.LoadHttpServerSttings(System.String)">
            <summary>
            Load pipe server settings from appConfig using HostName attribute.
            </summary>
            <param name="configHost"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpSettings.LoadHttpClientSttings(System.String)">
            <summary>
            Load pipe client settings from appConfig using HostName attribute.
            </summary>
            <param name="configHost"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpSettings.LoadSettings(System.Boolean)">
            <summary>
            Load Settings from config.
            </summary>
            <param name="isServer"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Channels.Http.HttpMessage">
            <summary>
            Represent a message for named tcp communication.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpMessage.#ctor">
            <summary>
            Initialize a new instance of tcp message.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpMessage.#ctor(System.String,System.String,System.Object,System.Int32)">
            <summary>
            Initialize a new instance of tcp message.
            </summary>
            <param name="command"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpMessage.#ctor(System.String,System.String,System.Object,System.Int32,System.String)">
            <summary>
            Initialize a new instance of tcp message.
            </summary>
            <param name="command"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration"></param>
            <param name="sessionId"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpMessage.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Http.HttpMessage.SendDuplex(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Send duplex message to tcp server using the host name and port arguments.
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <param name="method"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpMessage.SendDuplex``1(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Send duplex message to tcp server using the host name and port arguments.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="address"></param>
            <param name="port"></param>
            <param name="method"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Http.HttpMessage.SendOut(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Send one way message to tcp server using the host name and port arguments.
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <param name="method"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:Nistec.Channels.Http.HttpMessage.GetHostAddress(System.String,System.Int32)">
            <summary>
            Get host adress.
            </summary>
        </member>
        <member name="T:Nistec.Channels.GenericMessage">
            <summary>
            Represent a message for named pipe communication.
            </summary>
        </member>
        <member name="M:Nistec.Channels.GenericMessage.#ctor">
            <summary>
            Initialize a new instance of message stream.
            </summary>
        </member>
        <member name="M:Nistec.Channels.GenericMessage.#ctor(System.Object)">
            <summary>
            Initialize a new instance of message stream.
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:Nistec.Channels.GenericMessage.#ctor(System.String,System.String,System.Object,System.Int32)">
            <summary>
            Initialize a new instance of message stream.
            </summary>
            <param name="command"></param>
            <param name="id"></param>
            <param name="value"></param>
            <param name="expiration"></param>
        </member>
        <member name="M:Nistec.Channels.GenericMessage.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="T:Nistec.Channels.TransStream">
            <summary>
            Represent a ack stream for named pipe/tcp communication.
            </summary>
        </member>
        <member name="M:Nistec.Channels.TransStream.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Nistec.Channels.AnonymousPipeClient">
            <summary>
            Represent pipe client channel
            </summary>
        </member>
        <member name="P:Nistec.Channels.AnonymousPipeClient.Log">
            <summary>
            Get or Set Logger that implements <see cref="T:Nistec.Logging.ILogger"/> interface.
            </summary>
        </member>
        <member name="T:Nistec.Channels.AnonymousPipeServer">
            <summary>
            Represent a anonymous pipe server
            </summary>
        </member>
        <member name="P:Nistec.Channels.AnonymousPipeServer.Log">
            <summary>
            Get or Set Logger that implements <see cref="T:Nistec.Logging.ILogger"/> interface.
            </summary>
        </member>
        <member name="P:Nistec.Channels.AnonymousPipeServer.FileName">
            <summary>
            Get or Set the file name.
            </summary>
        </member>
        <member name="P:Nistec.Channels.AnonymousPipeServer.ConnectTimeout">
            <summary>
            Get or Set the connection timeout.
            </summary>
        </member>
        <member name="P:Nistec.Channels.AnonymousPipeServer.BufferSize">
            <summary>
            Get or Set the in buffer size in bytes.
            </summary>
        </member>
        <member name="T:Nistec.Channels.AnonymousMessage">
            <summary>
            Represent a message for anonymous pipe communication.
            </summary>
        </member>
        <member name="M:Nistec.Channels.AnonymousMessage.#ctor">
            <summary>
            Initialize a new instance of pipe message.
            </summary>
        </member>
        <member name="M:Nistec.Channels.AnonymousMessage.#ctor(System.String,System.String,System.Object,System.Int32)">
            <summary>
            Initialize a new instance of pipe message.
            </summary>
            <param name="command"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration"></param>
        </member>
        <member name="M:Nistec.Channels.AnonymousMessage.#ctor(System.String,System.String,System.Object,System.Int32,System.String)">
            <summary>
            Initialize a new instance of pipe message.
            </summary>
            <param name="command"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration"></param>
            <param name="sessionId"></param>
        </member>
        <member name="M:Nistec.Channels.AnonymousMessage.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Nistec.Channels.AnonymousMessage.Create(System.IO.Stream,Nistec.Serialization.IBinaryStreamer)">
            <summary>
            Create a new message stream.
            </summary>
            <param name="stream"></param>
            <param name="streamer"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.AnonymousMessage.SendDuplex(System.String,System.Boolean)">
            <summary>
            Send duplex message to named pipe server using the pipe name argument.
            </summary>
            <param name="FileName"></param>
            <param name="IsAsync"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.AnonymousMessage.SendDuplex``1(System.String,System.Boolean)">
            <summary>
            Send duplex message to named pipe server using the pipe name argument.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="FileName"></param>
            <param name="IsAsync"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.AnonymousMessage.SendOut(System.String,System.Boolean)">
            <summary>
            Send one way message to named pipe server using the pipe name argument.
            </summary>
            <param name="FileName"></param>
            <param name="IsAsync"></param>
        </member>
        <member name="M:Nistec.Channels.AnonymousMessage.ConvertFrom(System.Collections.IDictionary)">
            <summary>
            Convert <see cref="T:System.Collections.IDictionary"/> to <see cref="T:Nistec.Channels.MessageStream"/>.
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Channels.ITransformMessage.IsDuplex">
            <summary>
            Get or Set indicate wether the message is a duplex type.
            </summary>
        </member>
        <member name="P:Nistec.Channels.ITransformMessage.DuplexType">
            <summary>
            Get or Set DuplexType.
            </summary>
        </member>
        <member name="P:Nistec.Channels.ITransformMessage.Expiration">
            <summary>
             Get or Set The message expiration.
            </summary>
        </member>
        <member name="P:Nistec.Channels.ITransformMessage.TransformType">
            <summary>
            Get or Set The result type name.
            </summary>
        </member>
        <member name="T:Nistec.Channels.RemoteCache.RemoteCacheApi">
            <summary>
            Represent cache api for client.
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheApi.IsRemoteAsync">
            <summary>
            Get or Set if the client use async method.
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheApi.EnableRemoteException">
            <summary>
            Get or Set if the client will throw exeption on error.
            </summary>
        </member>
        <member name="P:Nistec.Channels.RemoteCache.RemoteCacheApi.DefaultSessionTimeout">
            <summary>
            Get or Set The session timeout in minutes.
            </summary>
        </member>
        <member name="P:Nistec.Channels.RemoteCache.RemoteCacheApi.DefaultCacheExpiration">
            <summary>
            Get or Set The cache expiration in minutes.
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheApi.DefaultProtocol">
            <summary>
            Default Protocol
            </summary>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.Get(System.String,System.Int32,System.String,Nistec.Channels.NetProtocol)">
            <summary>
            Get <see cref="T:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi"/> api.
            </summary>
            <param name="hostAddress"></param>
            <param name="port"></param>
            <param name="httpMethod"></param>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.Get(Nistec.Channels.NetProtocol)">
            <summary>
            Get <see cref="T:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi"/> api.
            </summary>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.Session(System.String,System.Int32,System.String,Nistec.Channels.NetProtocol)">
            <summary>
            Get <see cref="T:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi"/> api.
            </summary>
            <param name="hostAddress"></param>
            <param name="port"></param>
            <param name="httpMethod"></param>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.Session(Nistec.Channels.NetProtocol)">
            <summary>
            Get <see cref="T:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi"/> api.
            </summary>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.Sync(System.String,System.Int32,System.String,Nistec.Channels.NetProtocol)">
            <summary>
            Get<see cref="T:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi"/> api.
            </summary>
            <param name="hostAddress"></param>
            <param name="port"></param>
            <param name="httpMethod"></param>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.Sync(Nistec.Channels.NetProtocol)">
            <summary>
            Get<see cref="T:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi"/> api.
            </summary>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.Data(System.String,System.Int32,System.String,Nistec.Channels.NetProtocol)">
            <summary>
            Get<see cref="T:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi"/> api.
            </summary>
            <param name="hostAddress"></param>
            <param name="port"></param>
            <param name="httpMethod"></param>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.Data(Nistec.Channels.NetProtocol)">
            <summary>
            Get<see cref="T:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi"/> api.
            </summary>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi">
            <summary>
            Represent a cache api.
            </summary>
        </member>
        <member name="P:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi.Item(System.String)">
            <summary>
            Get or Set cache value by key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi.Get``1(System.String)">
            <summary>
            Get item value from cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi.Get``1(System.String,``0)">
            <summary>
            Get item value from cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi.Get(System.String)">
            <summary>
            Get item value from cache.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi.GetRecord(System.String)">
            <summary>
            Get item value from cache.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi.GetJson(System.String,Nistec.Serialization.JsonFormat)">
            <summary>
            Get item value from cache as json.
            </summary>
            <param name="key"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi.Remove(System.String)">
            <summary>
            Remove item from cache
            </summary>
            <param name="cacheKey"></param>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi.GetStream(System.String)">
            <summary>
            Get value from cache as <see cref="T:Nistec.IO.NetStream"/>
            </summary>
            <param name="cacheKey"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi.Fetch``1(System.String)">
            <summary>
            Fetch Value from cache (Cut item from cache)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi.Set(System.String,System.Object,System.Int32)">
            <summary>
            Set a new item to the cache, if this item is exists override it with the new one.
            </summary>
            <param name="cacheKey"></param>
            <param name="value"></param>
            <param name="expiration"></param>
            <returns>return RemoteCacheState</returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi.Set(System.String,System.Object,System.String,System.Int32)">
            <summary>
             Set a new item to the cache, if this item is exists override it with the new one.
            </summary>
            <param name="cacheKey"></param>
            <param name="value"></param>
            <param name="sessionId"></param>
            <param name="expiration"></param>
            <returns>return RemoteCacheState</returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi.Add(System.String,System.Object,System.Int32)">
            <summary>
            Add a new item to the cache, only if this item not exists.
            </summary>
            <param name="cacheKey"></param>
            <param name="value"></param>
            <param name="expiration"></param>
            <returns>return RemoteCacheState</returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi.Add(System.String,System.Object,System.String,System.Int32)">
            <summary>
            Add a new item to the cache, only if this item not exists.
            </summary>
            <param name="cacheKey"></param>
            <param name="value"></param>
            <param name="sessionId"></param>
            <param name="expiration"></param>
            <returns>return RemoteCacheState</returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi.CopyTo(System.String,System.String,System.Int32)">
            <summary>
            Copy item in cache from source to another destination.
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <param name="expiration"></param>
            <returns>return RemoteCacheState</returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi.CutTo(System.String,System.String,System.Int32)">
            <summary>
            Cut item in cache from source to another destination.
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <param name="expiration"></param>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi.RemoveItemsBySession(System.String)">
            <summary>
            Remove all session items from cache.
            </summary>
            <param name="sessionId"></param>
            <returns>return number of items removed from cache.</returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi.KeepAliveItem(System.String)">
            <summary>
            Keep Alive Cache Item.
            </summary>
            <param name="cacheKey"></param>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.CacheApi.Reply(System.String)">
            <summary>
            Reply for test.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi">
            <summary>
            Represent a session cache api.
            </summary>
        </member>
        <member name="P:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.Item(System.String,System.String)">
            <summary>
            Get or Set cache session value by key.
            </summary>
            <param name="sessionId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.Get``1(System.String,System.String)">
            <summary>
            Get value from session cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sessionId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.Get``1(System.String,System.String,``0)">
            <summary>
            Get value from session cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sessionId"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.Get(System.String,System.String)">
            <summary>
            Get value from session cache.
            </summary>
            <param name="sessionId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.GetJson(System.String,System.String,Nistec.Serialization.JsonFormat)">
            <summary>
            Get item value from cache as json.
            </summary>
            <param name="sessionId"></param>
            <param name="key"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.GetRecord(System.String,System.String)">
            <summary>
            Get item from session cache.
            </summary>
            <param name="sessionId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.FetchRecord(System.String,System.String)">
            <summary>
             Fetch item from specified session cache using session id and item key.
            </summary>
            <param name="sessionId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.GetSessionItems(System.String)">
            <summary>
            Get item from session cache.
            </summary>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.CreateSession(System.String,System.Int32,System.String[])">
            <summary>
            Add new session with CacheSettings.SessionTimeout configuration.
            </summary>
            <param name="sessionId"></param>
            <param name="expiration"></param>
            <param name="keyValueArgs"></param>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.Add(System.String,System.String,System.Object,System.Int32)">
            <summary>
            Add item to specified session (if session not exists create new one) with CacheSettings.SessionTimeout configuration.
            </summary>
            <param name="sessionId"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.Set(System.String,System.String,System.Object,System.Int32)">
            <summary>
            Add item to specified session (if session not exists create new one) with CacheSettings.SessionTimeout configuration.
            </summary>
            <param name="sessionId"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.GetAllSessionsKeysByState(System.String)">
            <summary>
            Get all sessions keys in session cache using <see cref="T:Nistec.Channels.RemoteCache.KnownSessionState"/> state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.CopyTo(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Copy session item to a new place in MCache.
            </summary>
            <param name="sessionId"></param>
            <param name="key"></param>
            <param name="targetKey"></param>
            <param name="expiration"></param>
            <param name="addToCache"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.CutTo(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Copy session item to a new place in MCache, and remove the current session item.
            </summary>
            <param name="sessionId"></param>
            <param name="key"></param>
            <param name="targetKey"></param>
            <param name="expiration"></param>
            <param name="addToCache"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.RemoveSession(System.String)">
            <summary>
            Remove session from session cache.
            </summary>
            <param name="sessionId"></param>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.ClearItems(System.String)">
            <summary>
            Remove all items from specified session.
            </summary>
            <param name="sessionId"></param>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.ClearAll">
            <summary>
            Remove all sessions from session cache.
            </summary>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.Refresh(System.String)">
            <summary>
            Refresh specified session in session cache.
            </summary>
            <param name="sessionId"></param>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.RefreshOrCreate(System.String)">
            <summary>
            Refresh sfcific session in session cache or create a new session bag if not exists.
            </summary>
            <param name="sessionId"></param>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.Remove(System.String,System.String)">
            <summary>
            Remove item from specified session using session id and item key.
            </summary>
            <param name="sessionId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.Exists(System.String,System.String)">
            <summary>
            Get indicate whether the session cache contains specified item in specific session.
            </summary>
            <param name="sessionId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.GetAllSessionsKeys">
            <summary>
            Get all sessions keys in session cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.GetSessionsItemsKeys(System.String)">
            <summary>
            Get all items keys in specified session.
            </summary>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SessionApi.Reply(System.String)">
            <summary>
            Reply for test.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi">
            <summary>
            Represent a sync cache api.
            </summary>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.Get(Nistec.Channels.ComplexKey,System.String)">
            <summary>
            Get item value from sync cache using <see cref="T:Nistec.Channels.ComplexKey"/> an <see cref="T:System.Type"/>.
            </summary>
            <param name="info"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.Get(System.String,System.String[],System.String)">
            <summary>
            Get item value from sync cache using arguments.
            </summary>
            <param name="entityName"></param>
            <param name="keys"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.Get``1(Nistec.Channels.ComplexKey,System.String)">
            <summary>
            Get item value from sync cache using <see cref="T:Nistec.Channels.ComplexKey"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.Get``1(System.String,System.String[],System.String)">
            <summary>
            Get item value from sync cache using arguments.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityName"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.GetRecord(System.String,System.String[])">
            <summary>
             Get item as <see cref="T:System.Collections.IDictionary"/> from sync cache using pipe name and item key.
            </summary>
            <param name="entityName"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.GetRecord(Nistec.Channels.ComplexKey)">
            <summary>
            Get item as <see cref="T:System.Collections.IDictionary"/> from sync cache using <see cref="T:Nistec.Channels.ComplexKey"/>.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.GetJson(Nistec.Channels.ComplexKey,Nistec.Serialization.JsonFormat)">
            <summary>
            Get item value from cache as json.
            </summary>
            <param name="info"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.GetJson(System.String,System.String[],Nistec.Serialization.JsonFormat)">
            <summary>
            Get item value from cache as json.
            </summary>
            <param name="entityName"></param>
            <param name="keys"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.GetAs(Nistec.Channels.ComplexKey)">
            <summary>
            Get item as stream from sync cache using <see cref="T:Nistec.Channels.ComplexKey"/>.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.GetAs(System.String,System.String[])">
            <summary>
            Get item as stream from sync cache using arguments.
            </summary>
            <param name="entityName"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.GetEntity``1(Nistec.Channels.ComplexKey)">
            <summary>
            Get item as entity from sync cache using <see cref="T:Nistec.Channels.ComplexKey"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.GetEntity``1(System.String,System.String[])">
            <summary>
            Get item as entity from sync cache using arguments.
            </summary>
            <param name="entityName"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.Reset">
            <summary>
            Reset all items in sync cache
            </summary>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.RefreshAll">
            <summary>
            Refresh all items in sync cache
            </summary>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.Refresh(System.String)">
            <summary>
            Refresh specified item in sync cache.
            </summary>
            <param name="syncName"></param>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.Remove(System.String)">
            <summary>
            Refresh specified item in sync cache.
            </summary>
            <param name="syncName"></param>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.GetEntityItemsCount(System.String)">
            <summary>
            Get entity count from sync cache using entityName.
            </summary>
            <param name="entityName"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.GetEntityItems(System.String)">
            <summary>
            Get entity values as <see cref="T:Nistec.Generic.GenericKeyValue"/> array from sync cache using entityName.
            </summary>
            <param name="entityName"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.GetEntityKeys(System.String)">
            <summary>
            Get entity keys from sync cache using entityName.
            </summary>
            <param name="entityName"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.GetAllEntityNames">
            <summary>
            Get all entity names from sync cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.GetItemsReport(System.String)">
            <summary>
            Get entity items report from sync cache using entityName.
            </summary>
            <param name="entityName"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.Reply(System.String)">
            <summary>
            Reply for test.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.SyncApi.Contains(System.String,System.String[])">
            <summary>
            Get if sync cache contains item using arguments.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityName"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Channels.RemoteCache.RemoteCacheApi.DataApi">
            <summary>
            Represent a sync cache api.
            </summary>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.DataApi.Get(Nistec.Channels.ComplexKey)">
            <summary>
            Get item from sync cache using <see cref="T:Nistec.Channels.ComplexKey"/> an <see cref="T:System.Type"/>.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.DataApi.AddValue(System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Add Value into specific row and column in local data table  
            </summary>
            <param name="db">db name</param>
            <param name="tableName">table name</param>
            <param name="column">column name</param>
            <param name="primaryKey">primary Key</param>
            <param name="value">value to set</param>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.DataApi.SetValue(System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Set Value into specific row and column in local data table  
            </summary>
            <param name="db">db name</param>
            <param name="tableName">table name</param>
            <param name="column">column name</param>
            <param name="primaryKey">primary Key</param>
            <param name="value">value to set</param>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.DataApi.GetValue``1(System.String,System.String,System.String,System.String)">
             <summary>
             Get single value from storage by filter Expression,if no rows found by filter Expression return null.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="db">db name</param>
             <param name="tableName">table name</param>
             <param name="column">column name</param>
             <param name="primaryKey">primary Key</param>
             <returns></returns>
             <example><code>
             //Get value from data cache.
            public void GetValue()
            {
                <![CDATA[string val = TcpDataCacheApi.GetValue<string>(db, tableName, "FirstName", "ContactID=1");]]>
                Console.WriteLine(val);
            }
             </code></example>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.DataApi.GetValue(System.String,System.String,System.String,System.String)">
            <summary>
            Get single value from storage by filter Expression,if no rows found by filter Expression return null.
            </summary>
            <param name="db">db name</param>
            <param name="tableName">table name</param>
            <param name="column">column name</param>
            <param name="primaryKey">primary Key</param>
            <returns>object value</returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.DataApi.GetRecord(System.String,System.String,System.String)">
             <summary>
             Get single data row from storage by filter Expression,if no rows found by filter Expression return null.
             </summary>
             <param name="db">db name</param>
             <param name="tableName">table name</param>
             <param name="primaryKey">primary Key</param>
             <returns>Hashtable object</returns>
             <example><code>
             //Get item record from data cache as Dictionary.
            public void GetRecord()
            {
                string key = "1";
                var item = TcpDataCacheApi.GetRow(db, tableName, "ContactID=1");
                if (item == null)
                    Console.WriteLine("item not found " + key);
                else
                    Console.WriteLine(item["FirstName"]);
            }
             </code></example>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.DataApi.RemoveTable(System.String,System.String)">
             <summary>
             Remove data table  from storage
             </summary>
             <param name="db">db name</param>
             <param name="tableName">table name</param>
             <example><code>
             //Remove data table from data cache.
            public void RemoveItem()
            {
                TcpDataCacheApi.RemoveTable(db, tableName);
            }
             </code></example>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.DataApi.AddTable(System.String,System.Data.DataTable,System.String,System.String,System.String[])">
            <summary>
            Add Remoting Data Item to cache
            </summary>
            <param name="db"></param>
            <param name="dt"></param>
            <param name="tableName"></param>
            <param name="mappingName"></param>
            <param name="primaryKey"></param>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.DataApi.SetTable(System.String,System.Data.DataTable,System.String,System.String,System.String[])">
            <summary>
            Set Remoting Data Item to cache
            </summary>
            <param name="db"></param>
            <param name="dt"></param>
            <param name="tableName"></param>
            <param name="mappingName"></param>
            <param name="primaryKey"></param>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.DataApi.Reply(System.String)">
            <summary>
            Reply for test
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.DataApi.Reset(System.String)">
            <summary>
            Reset all items in sync cache
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.DataApi.Refresh(System.String,System.String)">
            <summary>
            Refresh specified item in sync cache.
            </summary>
            <param name="db"></param>
            <param name="tableName"></param>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.DataApi.GetEntityItemsCount(System.String,System.String)">
            <summary>
            Get entity count from sync cache using entityName.
            </summary>
            <param name="db"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.DataApi.GetEntityKeys(System.String,System.String)">
            <summary>
            Get entity keys from sync cache using entityName.
            </summary>
            <param name="db"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.DataApi.GetAllEntityNames(System.String)">
            <summary>
            Get all entity names from sync cache.
            </summary>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteCache.RemoteCacheApi.DataApi.GetItemsReport(System.String,System.String)">
            <summary>
            Get entity items report from sync cache using entityName.
            </summary>
            <param name="db"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Channels.RemoteCache.RemoteCacheSettings">
            <summary>
            Represent the cache api settings as read only.
            </summary>
        </member>
        <member name="P:Nistec.Channels.RemoteCache.RemoteCacheSettings.DefaultFormatter">
            <summary>
            Get Default Formatter
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheSettings.DefaultHostName">
            <summary>
            Default Cache HostName
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheSettings.DefaultPipeName">
            <summary>
            Default Data HostName
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheSettings.DefaultTcpAddress">
            <summary>
            Default Sync Address
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheSettings.DefaultTcpPort">
            <summary>
            DefaultCachePort
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheState.Ok">
            <summary>Ok.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheState.ItemAdded">
            <summary>ItemAdded.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheState.ItemChanged">
            <summary>ItemChanged.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheState.ItemRemoved">
            <summary>ItemRemoved.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheState.NotFound">
            <summary>ItemNotFount.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheState.CacheNotReady">
            <summary>CacheNotReady.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheState.CacheIsFull">
            <summary>CacheIsFull.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheState.InvalidItem">
            <summary>InvalidItem.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheState.InvalidSession">
            <summary>InvalidSession.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheState.AddItemFailed">
            <summary>AddItemFailed.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheState.MergeItemFailed">
            <summary>MergeItemFailed.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheState.CopyItemFailed">
            <summary>CopyItemFailed.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheState.RemoveItemFailed">
            <summary>RemoveItemFailed.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheState.ArgumentsError">
            <summary>ArgumentsError.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheState.ItemAllreadyExists">
            <summary>ItemAllreadyExists.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheState.SerializationError">
            <summary>SerializationError.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheState.CommandNotSupported">
            <summary>CommandNotSupported.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.RemoteCacheState.UnexpectedError">
            <summary>UnexpectedError.</summary>
        </member>
        <member name="T:Nistec.Channels.RemoteCache.KnownEntitySourceType">
            <summary>
            Known Entity Source Type
            </summary>
        </member>
        <member name="T:Nistec.Channels.RemoteCache.KnownCacheEntityTypes">
            <summary>
            Represent cache entity known types.
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheEntityTypes.GenericEntity">
            <summary>Represent GenericEntity type.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheEntityTypes.EntityContext">
            <summary>Represent EntityContext type.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheEntityTypes.IDictionary">
            <summary>Represent IDictionary type also known as GenericRecord.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheEntityTypes.BodyStream">
            <summary>Represent BodyStream type also known as NetStream.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheEntityTypes.AnyType">
            <summary>Represent any entity type, mean unknown type.</summary>
        </member>
        <member name="T:Nistec.Channels.RemoteCache.KnownSyncType">
            <summary>
            SyncType
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownSyncType.None">
            <summary>
            No sync time
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownSyncType.Daily">
            <summary>
            Dal SyncType By Day 
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownSyncType.Interval">
            <summary>
            Dal SyncType By Interval
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownSyncType.Event">
            <summary>
            Dal SyncType By Event
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownSyncType.Remove">
            <summary>
            Remove SyncType
            </summary>
        </member>
        <member name="T:Nistec.Channels.RemoteCache.KnownSessionState">
            <summary>
            Session states.
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownSessionState.Active">
            <summary>
            Active
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownSessionState.Idle">
            <summary>
            Idle
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownSessionState.Timedout">
            <summary>
            Timedout
            </summary>
        </member>
        <member name="T:Nistec.Channels.RemoteCache.KnownCacheState">
            <summary>
            Known Cache State
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheState.Ok">
            <summary>Ok.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheState.ItemAdded">
            <summary>ItemAdded.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheState.ItemChanged">
            <summary>ItemChanged.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheState.ItemRemoved">
            <summary>ItemRemoved.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheState.CacheNotReady">
            <summary>CacheNotReady.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheState.CacheIsFull">
            <summary>CacheIsFull.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheState.InvalidItem">
            <summary>InvalidItem.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheState.InvalidSession">
            <summary>InvalidSession.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheState.AddItemFailed">
            <summary>AddItemFailed.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheState.MergeItemFailed">
            <summary>MergeItemFailed.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheState.CopyItemFailed">
            <summary>CopyItemFailed.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheState.RemoveItemFailed">
            <summary>RemoveItemFailed.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheState.ArgumentsError">
            <summary>ArgumentsError.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheState.ItemAllreadyExists">
            <summary>ItemAllreadyExists.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheState.SerializationError">
            <summary>SerializationError.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnownCacheState.UnexpectedError">
            <summary>UnexpectedError.</summary>
        </member>
        <member name="T:Nistec.Channels.RemoteCache.KnowsArgs">
            <summary>
            Represent known args for api commands.
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.Source">
            <summary>Source.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.Destination">
            <summary>Destination.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.ConnectionKey">
            <summary>ConnectionKey.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.TableName">
            <summary>TableName.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.MappingName">
            <summary>MappingName.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.SourceName">
            <summary>SourceName.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.SourceType">
            <summary>SourceType.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.EntityName">
            <summary>EntityName.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.EntityType">
            <summary>EntityType.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.Pk">
            <summary>Primary key.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.Filter">
            <summary>Filter.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.Column">
            <summary>Column.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.EntityKeys">
            <summary>EntityKeys.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.UserId">
            <summary>UserId.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.TargetKey">
            <summary>TargetKey.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.AddToCache">
            <summary>AddToCache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.IsAsync">
            <summary>IsAsync.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.StrArgs">
            <summary>StrArgs.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.ShouldSerialized">
            <summary>ShouldSerialized.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.CloneType">
            <summary>CloneType.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.SyncType">
            <summary>SyncType.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.KnowsArgs.SyncTime">
            <summary>SyncTime.</summary>
        </member>
        <member name="T:Nistec.Channels.RemoteCache.CacheCmd">
            <summary>
            Represent all cache api command.
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.CacheCmd.Reply">
            <summary>
            Reply for test.
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.CacheCmd.Remove">
            <summary>Remove item from cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.CacheCmd.RemoveAsync">
            <summary>Remove item from cache async.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.CacheCmd.ViewEntry">
            <summary>Get item properties from cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.CacheCmd.GetEntry">
            <summary>Get item value and properties from cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.CacheCmd.GetRecord">
            <summary>Get value from cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.CacheCmd.Get">
            <summary>Get value from cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.CacheCmd.Fetch">
            <summary>Fetch value from cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.CacheCmd.FetchEntry">
            <summary>Fetch item properties and value from cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.CacheCmd.Add">
            <summary>Add new item to cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.CacheCmd.Set">
            <summary>Add new item to cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.CacheCmd.KeepAliveItem">
            <summary>Keep alive item in cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.CacheCmd.LoadData">
            <summary>Load data item to or from cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.CacheCmd.CopyTo">
            <summary>Duplicate item to a new destination in cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.CacheCmd.CutTo">
            <summary>Duplicate item to a new destination in cache and remove the old item.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.CacheCmd.RemoveItemsBySession">
            <summary>Remove all items from cache that belong to specified session..</summary>
        </member>
        <member name="T:Nistec.Channels.RemoteCache.DataCacheCmd">
            <summary>
            Represent data cache commands.
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.Reply">
            <summary>Reply.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.Set">
            <summary>Set value to specified field in row.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.Add">
            <summary>Add value to specified field in row.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.Get">
            <summary>Get value from specified field in row.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.GetRecord">
            <summary>Get row from specified table.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.GetStream">
            <summary>Get row stream from specified table.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.AddTable">
            <summary>Add a new data item to data cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.AddTableWithSync">
            <summary>Add a new data item to data cache with sync.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.SetTable">
            <summary>Set a new data item with override to data cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.GetTable">
            <summary>Get data table from specified data cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.RemoveTable">
            <summary>Remove table from data cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.AddSyncItem">
            <summary>Add Item to SyncTables.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.GetItemProperties">
            <summary>Get item properties.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.Refresh">
            <summary>Refresh specified table in db cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.Reset">
            <summary>Restart all items in db cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.Contains">
            <summary>Get indicate werher the table exists in db cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.GetEntityItems">
            <summary>Get all items copy for specified entity from sync cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.GetEntityKeys">
            <summary>Get all keys for specified entity from sync cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.GetItemsReport">
            <summary>Get report of all items for specified entity from sync cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.GetAllEntityNames">
            <summary>Get all entites names from sync cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.DataCacheCmd.GetEntityItemsCount">
            <summary>Get all items count for specified entity from sync cache.</summary>
        </member>
        <member name="T:Nistec.Channels.RemoteCache.SessionCmd">
            <summary>
            Represent session commands.
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.Reply">
            <summary>Reply.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.CreateSession">
            <summary>Add new session to sessions cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.RemoveSession">
            <summary>Remove session from sessions cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.ClearItems">
            <summary>Clear all item from specified session.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.ClearAll">
            <summary>Clear all sessions from session cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.GetSessionItems">
            <summary>Get session items.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.GetOrCreateSession">
            <summary>Get existing session, if session not exists create new one.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.GetOrCreateRecord">
            <summary>Get existing session, if session not exists create new one.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.Refresh">
            <summary>Refresh session.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.RefreshOrCreate">
            <summary>Refresh sfcific session in session cache or create a new session bag if not exists.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.Remove">
            <summary>Remove item from specified session.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.Add">
            <summary>Add item to existing session, if session not exists do nothing.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.Set">
            <summary>Add item to session, if session not exists create new one and add the the item to session created.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.GetEntry">
            <summary>Get item from specified session.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.Get">
            <summary>Get value from specified session.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.GetRecord">
            <summary>Get item from specified session.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.Fetch">
            <summary>Fetch item from specified session.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.FetchRecord">
            <summary>Fetch item from specified session.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.CopyTo">
            <summary>Copy item from specified session to a new place.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.CutTo">
            <summary>Cut item from specified session to a new place..</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.Exists">
            <summary>Get indicate whether the session is exists.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.ViewAllSessionsKeys">
            <summary>Get all sessions keys.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.ViewAllSessionsKeysByState">
            <summary>Get all sessions keys using SessionState state.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.ViewSessionKeys">
            <summary>Get all items keys from specified session.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.ViewSessionStream">
            <summary>Get existing session, if session not exists return null.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SessionCmd.ViewEntry">
            <summary>View item from specified session.</summary>
        </member>
        <member name="T:Nistec.Channels.RemoteCache.SyncCacheCmd">
            <summary>
            Represent sync cache commands.
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SyncCacheCmd.Reply">
            <summary>Reply.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SyncCacheCmd.Get">
            <summary>Get item from sync cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SyncCacheCmd.GetRecord">
            <summary>Get item as dictionary from sync cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SyncCacheCmd.GetEntity">
            <summary>Get item as Entity from sync cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SyncCacheCmd.GetAs">
            <summary>Get item as Entity copy using stream convert from sync cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SyncCacheCmd.Contains">
            <summary>Get indicate werher the item exists in sync cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SyncCacheCmd.AddSyncItem">
            <summary>Add new item to sync cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SyncCacheCmd.AddEntity">
            <summary>Add new entity to sync cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SyncCacheCmd.Remove">
            <summary>Remove item from sync cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SyncCacheCmd.RefreshAll">
            <summary>Refresh all items in sync cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SyncCacheCmd.Refresh">
            <summary>Refresh specified item in sync cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SyncCacheCmd.GetEntityItems">
            <summary>Get all items copy for specified entity from sync cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SyncCacheCmd.GetEntityKeys">
            <summary>Get all keys for specified entity from sync cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SyncCacheCmd.GetItemsReport">
            <summary>Get report of all items for specified entity from sync cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SyncCacheCmd.GetAllEntityNames">
            <summary>Get all entites names from sync cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SyncCacheCmd.Reset">
            <summary>Restart all items in sync cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SyncCacheCmd.GetEntityItemsCount">
            <summary>Get all items count for specified entity from sync cache.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SyncCacheCmd.GetItemProperties">
            <summary>Get item properties.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SyncCacheCmd.GetEntityPrimaryKey">
            <summary>Get item EntityPrimaryKey.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteCache.SyncCacheCmd.FindEntity">
            <summary>Find entity.</summary>
        </member>
        <member name="M:Nistec.Channels.StreamExtension.ReadStream(System.Net.Sockets.NetworkStream,System.Int32)">
            <summary>
            Read from the given <see cref="T:System.Net.Sockets.NetworkStream"/> to byte array.
            </summary>
            <param name="stream"></param>
            <param name="BufferSize"></param>
        </member>
        <member name="M:Nistec.Channels.StreamExtension.ReadStream(System.IO.Pipes.PipeStream,System.Int32)">
            <summary>
            Read from the given <see cref="T:System.IO.Pipes.PipeStream"/> to byte array.
            </summary>
            <param name="stream"></param>
            <param name="BufferSize"></param>
        </member>
        <member name="M:Nistec.Channels.StreamExtension.ReadStream(System.IO.Stream,System.Int32)">
            <summary>
            Read from the given <see cref="T:System.IO.Stream"/> to byte array.
            </summary>
            <param name="stream"></param>
            <param name="BufferSize"></param>
        </member>
        <member name="T:Nistec.Channels.Config.HttpConfigItem">
            <summary>
            Represent Http  <see cref="T:System.Configuration.ConfigurationElement"/> item.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.HttpConfigItem.HostName">
            <summary>
            Get host name.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.HttpConfigItem.Address">
            <summary>
            Get host address.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.HttpConfigItem.Method">
            <summary>
            Get Method.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.HttpConfigItem.Port">
            <summary>
            Get port.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.HttpConfigItem.SslPort">
            <summary>
            Get port.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.HttpConfigItem.SslEnabled">
            <summary>
            Get port.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.HttpConfigItem.ConnectTimeout">
            <summary>
            Get connection timeout.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.HttpConfigItem.ProcessTimeout">
            <summary>
            Get Process timeout.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.HttpConfigItem.MaxErrors">
            <summary>
            Get Max Socket Error.
            </summary>
        </member>
        <member name="T:Nistec.Channels.Config.HttpServerConfigItem">
            <summary>
            Represent pipe server config item.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.HttpServerConfigItem.MaxServerConnections">
            <summary>
            Get max server connection.
            </summary>
        </member>
        <member name="T:Nistec.Channels.Config.HttpServerConfigItems">
            <summary>
            Represent Http server configuration element collection.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.HttpServerConfigItems.Item(System.Int32)">
            <summary>
            Get or Set <see cref="T:Nistec.Channels.Config.HttpServerConfigItem"/> item by index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Channels.Config.HttpServerConfigItems.Item(System.String)">
            <summary>
            Get or Set <see cref="T:Nistec.Channels.Config.HttpServerConfigItem"/> item by key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Config.HttpServerConfigItems.CreateNewElement">
            <summary>
            Create New Element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Config.HttpServerConfigItems.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Get Element Key
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Channels.Config.PipeConfigItem">
            <summary>
            Represent pipe  <see cref="T:System.Configuration.ConfigurationElement"/> item.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.PipeConfigItem.HostName">
            <summary>
            Get pipe name.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.PipeConfigItem.ServerName">
            <summary>
            Get server name.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.PipeConfigItem.PipeName">
            <summary>
            Get pipe name.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.PipeConfigItem.PipeDirection">
            <summary>
            Get pipe direction.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.PipeConfigItem.PipeOptions">
            <summary>
            Get pipe options.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.PipeConfigItem.VerifyPipe">
            <summary>
            Get Verify Pipe Name.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.PipeConfigItem.ConnectTimeout">
            <summary>
            Get connection timeout.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.PipeConfigItem.ProcessTimeout">
            <summary>
            Get process timeout.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.PipeConfigItem.ReceiveBufferSize">
            <summary>
            Get In buffer size in bytes.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.PipeConfigItem.SendBufferSize">
            <summary>
            Get Out buffer size in bytes.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.PipeConfigItem.IsAsync">
            <summary>
            Get indicate if host server is async.
            </summary>
        </member>
        <member name="T:Nistec.Channels.Config.PipeServerConfigItem">
            <summary>
            Represent pipe server config item.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.PipeServerConfigItem.MaxServerConnections">
            <summary>
            Get max server connection.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.PipeServerConfigItem.MaxAllowedServerInstances">
            <summary>
            Get max allowed server instances.
            </summary>
        </member>
        <member name="T:Nistec.Channels.Config.PipeServerConfigItems">
            <summary>
            Represent Pipe server configuration element collection.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.PipeServerConfigItems.Item(System.Int32)">
            <summary>
            Get or Set <see cref="T:Nistec.Channels.Config.PipeServerConfigItem"/> item by index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Channels.Config.PipeServerConfigItems.Item(System.String)">
            <summary>
            Get or Set <see cref="T:Nistec.Channels.Config.PipeServerConfigItem"/> item by key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Config.PipeServerConfigItems.CreateNewElement">
            <summary>
            Create New Element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Config.PipeServerConfigItems.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Get Element Key
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Channels.Config.TcpConfigItem">
            <summary>
            Represent tcp  <see cref="T:System.Configuration.ConfigurationElement"/> item.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.TcpConfigItem.HostName">
            <summary>
            Get host name.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.TcpConfigItem.Address">
            <summary>
            Get host address.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.TcpConfigItem.Port">
            <summary>
            Get port.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.TcpConfigItem.IsAsync">
            <summary>
            Get indicate if host server is async.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.TcpConfigItem.ConnectTimeout">
            <summary>
            Get connection timeout.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.TcpConfigItem.ProcessTimeout">
            <summary>
            Get Process timeout.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.TcpConfigItem.MaxSocketError">
            <summary>
            Get Max Socket Error.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.TcpConfigItem.ReceiveBufferSize">
            <summary>
            Get In buffer size in bytes.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.TcpConfigItem.SendBufferSize">
            <summary>
            Get Out buffer size in bytes.
            </summary>
        </member>
        <member name="T:Nistec.Channels.Config.TcpServerConfigItem">
            <summary>
            Represent pipe server config item.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.TcpServerConfigItem.MaxServerConnections">
            <summary>
            Get max server connection.
            </summary>
        </member>
        <member name="T:Nistec.Channels.Config.TcpServerConfigItems">
            <summary>
            Represent Tcp server configuration element collection.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Config.TcpServerConfigItems.Item(System.Int32)">
            <summary>
            Get or Set <see cref="T:Nistec.Channels.Config.TcpServerConfigItem"/> item by index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Channels.Config.TcpServerConfigItems.Item(System.String)">
            <summary>
            Get or Set <see cref="T:Nistec.Channels.Config.TcpServerConfigItem"/> item by key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Config.TcpServerConfigItems.CreateNewElement">
            <summary>
            Create New Element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Config.TcpServerConfigItems.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Get Element Key
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Channels.PipeJsonClient">
            <summary>
            Represent json pipe client channel
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeJsonClient.Log">
            <summary>
            Get or Set Logger that implements <see cref="T:Nistec.Logging.ILogger"/> interface.
            </summary>
        </member>
        <member name="F:Nistec.Channels.PipeJsonClient.DefaultInBufferSize">
            <summary>
            DefaultInBufferSize
            </summary>
        </member>
        <member name="F:Nistec.Channels.PipeJsonClient.DefaultOutBufferSize">
            <summary>
            DefaultOutBufferSize
            </summary>
        </member>
        <member name="F:Nistec.Channels.PipeJsonClient.DefaultConnectTimeout">
            <summary>
            DefaultConnectTimeout
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeJsonClient.HostName">
            <summary>
             Get or Set HostName.
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeJsonClient.PipeName">
            <summary>
             Get or Set PipeName.
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeJsonClient.PipeDirection">
            <summary>
            Get or Set PipeDirection (Default=InOut).
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeJsonClient.PipeOptions">
            <summary>
            Get or Set PipeOptions (Default=None).
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeJsonClient.VerifyPipe">
            <summary>
            Get or Set VerifyPipe.
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeJsonClient.ConnectTimeout">
            <summary>
            Get or Set ConnectTimeout (Default=5000).
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeJsonClient.ReceiveBufferSize">
            <summary>
            Get or Set ReceiveBufferSize (Default=8192).
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeJsonClient.SendBufferSize">
            <summary>
            Get or Set SendBufferSize (Default=8192).
            </summary>
        </member>
        <member name="F:Nistec.Channels.PipeJsonClient.ServerName">
            <summary>
            ServerName constant.
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeJsonClient.FullPipeName">
            <summary>
            Get Full Pipe Name.
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeJsonClient.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.IO.Pipes.PipeOptions)">
            <summary>
            Constractor with arguments
            </summary>
            <param name="hostAddress"></param>
            <param name="inBufferSize"></param>
            <param name="outBufferSize"></param>
            <param name="isDuplex"></param>
            <param name="option"></param>
        </member>
        <member name="M:Nistec.Channels.PipeJsonClient.#ctor(System.String)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="configHostName"></param>
        </member>
        <member name="T:Nistec.Channels.PipeJsonServer">
            <summary>
            Represent a json pipe server listner.
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeJsonServer.OnStart">
            <summary>
            OnStart
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeJsonServer.OnStop">
            <summary>
            OnStop
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeJsonServer.OnLoad">
            <summary>
            OnLoad
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeJsonServer.#ctor(System.String,System.Boolean)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="hostName"></param>
            <param name="loadFromSettings"></param>
        </member>
        <member name="M:Nistec.Channels.PipeJsonServer.#ctor(Nistec.Channels.PipeSettings)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Nistec.Channels.PipeJsonServer.ReadRequest(System.IO.Pipes.NamedPipeServerStream)">
            <summary>
            ReadRequest
            </summary>
            <param name="pipeServer"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.PipeJsonServer.OnClientConnected">
            <summary>
            Occured when new client connected to cache.
            </summary>
        </member>
        <member name="P:Nistec.Channels.HostChannel.HostName">
            <summary>
            Get or Set HostName
            </summary>
        </member>
        <member name="P:Nistec.Channels.HostChannel.ServerName">
            <summary>
            Get or Set ServerName
            </summary>
        </member>
        <member name="P:Nistec.Channels.HostChannel.Endpoint">
            <summary>
            Get or Set Endpoint Address
            </summary>
        </member>
        <member name="P:Nistec.Channels.HostChannel.CanDistrebute">
            <summary>
            Get indicate wether this host can distrebute.
            </summary>
        </member>
        <member name="P:Nistec.Channels.HostChannel.IsLocal">
            <summary>
            Get indicate wether this host is local.
            </summary>
        </member>
        <member name="M:Nistec.Channels.HostChannel.EntityWrite(System.IO.Stream,Nistec.Serialization.IBinaryStreamer)">
            <summary>
            Write the current object include the body and properties to stream using <see cref="T:Nistec.Serialization.IBinaryStreamer"/>, This method is a part of <see cref="T:Nistec.Serialization.ISerialEntity"/> implementation.
            </summary>
            <param name="stream"></param>
            <param name="streamer"></param>
        </member>
        <member name="M:Nistec.Channels.HostChannel.EntityRead(System.IO.Stream,Nistec.Serialization.IBinaryStreamer)">
            <summary>
            Read stream to the current object include the body and properties using <see cref="T:Nistec.Serialization.IBinaryStreamer"/>, This method is a part of <see cref="T:Nistec.Serialization.ISerialEntity"/> implementation.
            </summary>
            <param name="stream"></param>
            <param name="streamer"></param>
        </member>
        <member name="T:Nistec.Channels.RemoteTrace.TraceApi">
            <summary>
            Represent sync trace api for client.
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceApi.DefaultProtocol">
            <summary>
            Default Protocol
            </summary>
        </member>
        <member name="M:Nistec.Channels.RemoteTrace.TraceApi.Get(System.String,System.String,System.Type,Nistec.Channels.NetProtocol)">
            <summary>
            Get item from sync trace using <see cref="T:Nistec.Channels.ComplexKey"/> an <see cref="T:System.Type"/>.
            </summary>
            <param name="command"></param>
            <param name="key"></param>
            <param name="type"></param>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteTrace.TraceApi.Get``1(System.String,System.String,Nistec.Channels.NetProtocol)">
            <summary>
            Get item from sync trace using <see cref="T:Nistec.Channels.ComplexKey"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="command"></param>
            <param name="key"></param>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteTrace.TraceApi.Do(System.String,System.String,System.String[],Nistec.Channels.NetProtocol)">
            <summary>
            Do trace command.
            </summary>
            <param name="command"></param>
            <param name="key"></param>
            <param name="keyValue"></param>
            <param name="protocol"></param>
        </member>
        <member name="M:Nistec.Channels.RemoteTrace.TraceApi.Set(System.String,System.String,System.String,System.Object,Nistec.Channels.NetProtocol)">
            <summary>
            Set command to trace.
            </summary>
            <param name="command"></param>
            <param name="key"></param>
            <param name="id"></param>
            <param name="value"></param>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteTrace.TraceApi.DoSiteCounter(System.Int32,System.Int32,System.Int32,Nistec.Channels.NetProtocol)">
            <summary>
            SiteCounter
            </summary>
            <param name="siteId"></param>
            <param name="state"></param>
            <param name="device"></param>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.RemoteTrace.TraceApi.DoServiceCounter(System.Int32,System.Int32,System.Int32,Nistec.Channels.NetProtocol)">
            <summary>
            ServiceCounter
            </summary>
            <param name="serviceId"></param>
            <param name="state"></param>
            <param name="device"></param>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Channels.RemoteTrace.KnownEntitySourceType">
            <summary>
            Known Entity Source Type
            </summary>
        </member>
        <member name="T:Nistec.Channels.RemoteTrace.KnownTraceEntityTypes">
            <summary>
            Represent trace entity known types.
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceEntityTypes.GenericEntity">
            <summary>Represent GenericEntity type.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceEntityTypes.EntityContext">
            <summary>Represent EntityContext type.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceEntityTypes.IDictionary">
            <summary>Represent IDictionary type also known as GenericRecord.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceEntityTypes.BodyStream">
            <summary>Represent BodyStream type also known as NetStream.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceEntityTypes.AnyType">
            <summary>Represent any entity type, mean unknown type.</summary>
        </member>
        <member name="T:Nistec.Channels.RemoteTrace.KnownTraceState">
            <summary>
            Known Trace State
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceState.Ok">
            <summary>Ok.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceState.ItemAdded">
            <summary>ItemAdded.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceState.ItemChanged">
            <summary>ItemChanged.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceState.ItemRemoved">
            <summary>ItemRemoved.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceState.TraceNotReady">
            <summary>TraceNotReady.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceState.TraceIsFull">
            <summary>TraceIsFull.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceState.InvalidItem">
            <summary>InvalidItem.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceState.InvalidSession">
            <summary>InvalidSession.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceState.AddItemFailed">
            <summary>AddItemFailed.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceState.MergeItemFailed">
            <summary>MergeItemFailed.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceState.CopyItemFailed">
            <summary>CopyItemFailed.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceState.RemoveItemFailed">
            <summary>RemoveItemFailed.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceState.ArgumentsError">
            <summary>ArgumentsError.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceState.ItemAllreadyExists">
            <summary>ItemAllreadyExists.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceState.SerializationError">
            <summary>SerializationError.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnownTraceState.UnexpectedError">
            <summary>UnexpectedError.</summary>
        </member>
        <member name="T:Nistec.Channels.RemoteTrace.TraceCmd">
            <summary>
            Represent all trace api command.
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceCmd.TraceLog">
            <summary>TraceLog.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceCmd.TraceAct">
            <summary>TraceAct.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceCmd.SiteCounter">
            <summary>trace_SiteCounter.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceCmd.ServiceCounter">
            <summary>trace_ServiceCounter.</summary>
        </member>
        <member name="T:Nistec.Channels.RemoteTrace.TraceManagerCmd">
            <summary>
            Represent the trace managment command.
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceManagerCmd.Reply">
            <summary>Reply.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceManagerCmd.TraceProperties">
            <summary>Get trace properties.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceManagerCmd.Timeout">
            <summary>Cmd.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceManagerCmd.GetPerformanceReport">
            <summary>Get performance report.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceManagerCmd.GetAgentPerformanceReport">
            <summary>Get performance report for specified agent.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceManagerCmd.TraceToXml">
            <summary>Save trace to xml file.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceManagerCmd.TraceFromXml">
            <summary>Load trace from xml file.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceManagerCmd.TraceLog">
            <summary>Get trace log.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceManagerCmd.Reset">
            <summary>Reset trace.</summary>
        </member>
        <member name="T:Nistec.Channels.RemoteTrace.KnowsArgs">
            <summary>
            Represent known args for api commands.
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.Source">
            <summary>Source.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.Destination">
            <summary>Destination.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.ConnectionKey">
            <summary>ConnectionKey.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.TableName">
            <summary>TableName.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.MappingName">
            <summary>MappingName.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.SourceName">
            <summary>SourceName.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.SourceType">
            <summary>SourceType.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.EntityName">
            <summary>EntityName.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.EntityType">
            <summary>EntityType.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.Filter">
            <summary>Filter.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.Column">
            <summary>Column.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.EntityKeys">
            <summary>EntityKeys.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.UserId">
            <summary>UserId.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.TargetKey">
            <summary>TargetKey.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.AddToTrace">
            <summary>AddToTrace.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.IsAsync">
            <summary>IsAsync.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.StrArgs">
            <summary>StrArgs.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.ShouldSerialized">
            <summary>ShouldSerialized.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.CloneType">
            <summary>CloneType.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.SyncType">
            <summary>SyncType.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.KnowsArgs.SyncTime">
            <summary>SyncTime.</summary>
        </member>
        <member name="T:Nistec.Channels.RemoteTrace.TraceSettings">
            <summary>
            Represent the cache api settings.
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceSettings.DefaultInBufferSize">
            <summary>ReceiveBufferSize.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceSettings.DefaultOutBufferSize">
            <summary>SendBufferSize.</summary>
        </member>
        <member name="P:Nistec.Channels.RemoteTrace.TraceSettings.ReceiveBufferSize">
            <summary>ReceiveBufferSize.</summary>
        </member>
        <member name="P:Nistec.Channels.RemoteTrace.TraceSettings.SendBufferSize">
            <summary>SendBufferSize.</summary>
        </member>
        <member name="P:Nistec.Channels.RemoteTrace.TraceSettings.DefaultFormatter">
            <summary>
            Get Default Formatter
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceSettings.DefaultSessionTimeout">
            <summary>
            DefaultSessionTimeout
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceSettings.DefaultMaxSessionTimeout">
            <summary>
            Get Max Session Timeout in minutes
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceSettings.DefaultExpiration">
            <summary>
            Get Default Expiration in minutes
            </summary>
        </member>
        <member name="P:Nistec.Channels.RemoteTrace.TraceSettings.IsRemoteAsync">
            <summary>IsRemoteAsync.</summary>
        </member>
        <member name="P:Nistec.Channels.RemoteTrace.TraceSettings.EnableRemoteException">
            <summary>EnableRemoteException.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceSettings.DefaultRemoteTraceHostName">
            <summary>
            Default Trace HostName
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceSettings.DefaultRemoteTraceManagerHostName">
            <summary>
            Default Trace manager HostName
            </summary>
        </member>
        <member name="P:Nistec.Channels.RemoteTrace.TraceSettings.RemoteTraceHostName">
            <summary>RemoteTraceHostName.</summary>
        </member>
        <member name="P:Nistec.Channels.RemoteTrace.TraceSettings.RemoteTraceManagerPipeName">
            <summary>RemoteTraceManagerHostName.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceSettings.DefaultRemoteTraceHostAddress">
            <summary>
            Default Trace HostAddress
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceSettings.DefaultRemoteTraceManagerHostAddress">
            <summary>
            Default TraceManager HostAddress
            </summary>
        </member>
        <member name="P:Nistec.Channels.RemoteTrace.TraceSettings.RemoteTraceHostAddress">
            <summary>RemoteTraceHostAddress.</summary>
        </member>
        <member name="P:Nistec.Channels.RemoteTrace.TraceSettings.RemoteTraceManagerHostAddress">
            <summary>RemoteTraceManagerHostAddress.</summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceSettings.DefaultRemoteTracePort">
            <summary>
            Default Trace Port
            </summary>
        </member>
        <member name="F:Nistec.Channels.RemoteTrace.TraceSettings.DefaultRemoteTraceManagerPort">
            <summary>
            Default TraceManager Port
            </summary>
        </member>
        <member name="P:Nistec.Channels.RemoteTrace.TraceSettings.RemoteTracePort">
            <summary>RemoteTracePort.</summary>
        </member>
        <member name="P:Nistec.Channels.RemoteTrace.TraceSettings.RemoteTraceManagerPort">
            <summary>RemoteTraceManagerPort.</summary>
        </member>
        <member name="T:Nistec.Channels.MessageException">
            <summary>
            The exception that is thrown when a non-fatal application error occurs.
            </summary>
        </member>
        <member name="P:Nistec.Channels.MessageException.State">
            <summary>
            Get state.
            </summary>
        </member>
        <member name="M:Nistec.Channels.MessageException.#ctor(Nistec.MessageState,System.String)">
            <summary>
            Initializes a new instance of the MessageException class.
            </summary>
            <param name="state"></param>
            <param name="message"></param>
        </member>
        <member name="M:Nistec.Channels.MessageException.#ctor(Nistec.MessageState,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MessageException class.
            </summary>
            <param name="state"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Nistec.Channels.AppDomainStarter">
            <summary><see cref="M:Nistec.Channels.AppDomainStarter.Start``1(System.String,System.String,System.Object[],System.Boolean)"/> starts an AppDomain.</summary>
        </member>
        <member name="M:Nistec.Channels.AppDomainStarter.Start``1(System.String,System.String,System.Object[],System.Boolean)">
            <summary>Creates a type in a new sandbox-friendly AppDomain.</summary>
            <typeparam name="T">A trusted type derived MarshalByRefObject to create 
            in the new AppDomain. The constructor of this type must catch any 
            untrusted exceptions so that no untrusted exception can escape the new 
            AppDomain.</typeparam>
            <param name="baseFolder">Value to use for AppDomainSetup.ApplicationBase.
            The AppDomain will be able to use any assemblies in this folder.</param>
            <param name="appDomainName">A friendly name for the AppDomain. MSDN
            does not state whether or not the name must be unique.</param>
            <param name="constructorArgs">Arguments to send to the constructor of T,
            or null to call the default constructor. Do not send arguments of 
            untrusted types this way.</param>
            <param name="partialTrust">Whether the new AppDomain should run in 
            partial-trust mode.</param>
            <returns>A remote proxy to an instance of type T. You can call methods 
            of T and the calls will be marshalled across the AppDomain boundary.</returns>
        </member>
        <member name="T:Nistec.Channels.MessageAck">
            <summary>
            Represent a response message for named pipe/tcp communication.
            </summary>
        </member>
        <member name="T:Nistec.Channels.ComplexQuery">
            <summary>
            Represent the item key for messaging.
            </summary>
        </member>
        <member name="T:Nistec.Channels.ComplexArgs">
            <summary>
            Represent the item key args for messaging.
            </summary>
        </member>
        <member name="T:Nistec.Channels.ComplexKey">
            <summary>
            Represent the item key info for messaging.
            </summary>
        </member>
        <member name="M:Nistec.Channels.ComplexKey.ToString">
            <summary>
            Get ComplexKey as string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nistec.Channels.MessageStream">
            <summary>
            Represent a message stream for network communication like namedPipe or Tcp.
            This message can serialize/desrialize fast and easly using the <see cref="T:Nistec.Serialization.BinaryStreamer"/>
            </summary>
        </member>
        <member name="P:Nistec.Channels.MessageStream.DefaultFormatter">
            <summary>
            Get the default formatter.
            </summary>
        </member>
        <member name="P:Nistec.Channels.MessageStream.Id">
            <summary>
            Get or Set The message Id.
            </summary>
        </member>
        <member name="P:Nistec.Channels.MessageStream.BodyStream">
            <summary>
            Get or Set The message body stream.
            </summary>
        </member>
        <member name="P:Nistec.Channels.MessageStream.TypeName">
            <summary>
             Get or Set The type name of body stream.
            </summary>
        </member>
        <member name="P:Nistec.Channels.MessageStream.Formatter">
            <summary>
            Get or Set The serializer formatter.
            </summary>
        </member>
        <member name="P:Nistec.Channels.MessageStream.Label">
            <summary>
            Get or Set The message detail.
            </summary>
        </member>
        <member name="P:Nistec.Channels.MessageStream.Command">
            <summary>
            Get or Set The message command.
            </summary>
        </member>
        <member name="P:Nistec.Channels.MessageStream.Sender">
            <summary>
            Get or Set who send the message.
            </summary>
        </member>
        <member name="F:Nistec.Channels.MessageStream._IsDuplex">
            <summary>
            Get indicate wether the message is a duplex type.
            </summary>
        </member>
        <member name="F:Nistec.Channels.MessageStream._DuplexType">
            <summary>
            Get or Set DuplexType.
            </summary>
        </member>
        <member name="P:Nistec.Channels.MessageStream.Expiration">
            <summary>
             Get or Set The message expiration.
            </summary>
        </member>
        <member name="P:Nistec.Channels.MessageStream.Modified">
            <summary>
            Get or Set The last time that message was modified.
            </summary>
        </member>
        <member name="P:Nistec.Channels.MessageStream.Args">
            <summary>
            Get or Set The extra arguments for current message.
            </summary>
        </member>
        <member name="P:Nistec.Channels.MessageStream.TransformType">
            <summary>
            Get or Set The return type name.
            </summary>
        </member>
        <member name="P:Nistec.Channels.MessageStream.GroupId">
            <summary>
            Get or Set The message GroupId.
            </summary>
        </member>
        <member name="M:Nistec.Channels.MessageStream.#ctor">
            <summary>
            Initialize a new instance of MessageStream
            </summary>
        </member>
        <member name="M:Nistec.Channels.MessageStream.#ctor(System.IO.Stream,Nistec.Serialization.IBinaryStreamer)">
            <summary>
            Initialize a new instance of MessageStream from stream using for <see cref="T:Nistec.Serialization.ISerialEntity"/>.
            </summary>
            <param name="stream"></param>
            <param name="streamer"></param>
        </member>
        <member name="M:Nistec.Channels.MessageStream.#ctor(Nistec.Serialization.SerializeInfo)">
            <summary>
            Initialize a new instance of MessageStream from <see cref="T:Nistec.Serialization.SerializeInfo"/>.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Nistec.Channels.MessageStream.Dispose">
            <summary>
            Release all resources.
            </summary>
        </member>
        <member name="P:Nistec.Channels.MessageStream.IsDisposed">
            <summary>
            Get indicate wether the current instance is Disposed.
            </summary>
        </member>
        <member name="M:Nistec.Channels.MessageStream.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Nistec.Channels.MessageStream.Size">
            <summary>
            Get Body Size in bytes
            </summary>
        </member>
        <member name="P:Nistec.Channels.MessageStream.IsEmpty">
            <summary>
            Get indicate wether the item is empty 
            </summary>
        </member>
        <member name="P:Nistec.Channels.MessageStream.BodyType">
            <summary>
            Get Type of body
            </summary>
        </member>
        <member name="P:Nistec.Channels.MessageStream.IsKnownType">
            <summary>
            Get indicate wether the current body type is a known object type.
            </summary>
        </member>
        <member name="M:Nistec.Channels.MessageStream.CreateArgs(System.String[])">
            <summary>
            Create arguments helper.
            </summary>
            <param name="keyValues"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.MessageStream.GetArgs">
            <summary>
            Get or create a collection of arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.MessageStream.ConvertToBase64">
            <summary>
            Convert body to base 64 string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.MessageStream.ConvertFromBase64``1(System.String)">
            <summary>
            Convert from base 64 string to generic object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="base64"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.MessageStream.EntityWrite(System.IO.Stream,Nistec.Serialization.IBinaryStreamer)">
            <summary>
            Write the current object include the body and properties to stream using <see cref="T:Nistec.Serialization.IBinaryStreamer"/>, This method is a part of <see cref="T:Nistec.Serialization.ISerialEntity"/> implementation.
            </summary>
            <param name="stream"></param>
            <param name="streamer"></param>
        </member>
        <member name="M:Nistec.Channels.MessageStream.EntityRead(System.IO.Stream,Nistec.Serialization.IBinaryStreamer)">
            <summary>
            Read stream to the current object include the body and properties using <see cref="T:Nistec.Serialization.IBinaryStreamer"/>, This method is a part of <see cref="T:Nistec.Serialization.ISerialEntity"/> implementation.
            </summary>
            <param name="stream"></param>
            <param name="streamer"></param>
        </member>
        <member name="M:Nistec.Channels.MessageStream.WriteContext(Nistec.Serialization.ISerializerContext)">
            <summary>
            Write the current object include the body and properties to <see cref="T:Nistec.Serialization.ISerializerContext"/> using <see cref="T:Nistec.Serialization.SerializeInfo"/>.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nistec.Channels.MessageStream.ReadContext(Nistec.Serialization.ISerializerContext)">
            <summary>
            Read <see cref="T:Nistec.Serialization.ISerializerContext"/> context to the current object include the body and properties using <see cref="T:Nistec.Serialization.SerializeInfo"/>.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nistec.Channels.MessageStream.GetStream">
            <summary>
            Get body stream ready to read from position 0, is a part of <see cref="T:Nistec.Serialization.IBodyStream"/> implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.MessageStream.GetCopy">
            <summary>
            Get copy of body stream, is a part of <see cref="T:Nistec.Serialization.IBodyStream"/> implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.MessageStream.SetBody(System.Object)">
            <summary>
            Set the given value to body stream using <see cref="T:Nistec.Serialization.BinarySerializer"/>, This method is a part of <see cref="T:Nistec.Runtime.IMessageStream"/> implementation..
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nistec.Channels.MessageStream.SetBody(System.Byte[],System.Type)">
            <summary>
            Set the given byte array to body stream using <see cref="T:Nistec.IO.NetStream"/>, This method is a part of <see cref="T:Nistec.Runtime.IMessageStream"/> implementation
            </summary>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="M:Nistec.Channels.MessageStream.DecodeBody">
            <summary>
            Deserialize body stream to object, This method is a part of <see cref="T:Nistec.Runtime.IMessageStream"/> implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.MessageStream.DecodeBody``1">
            <summary>
             Deserialize body stream to generic object.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.MessageStream.ReadBodyStream(System.Type,System.IO.Stream)">
            <summary>
            Read stream to object.
            </summary>
            <param name="type"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.MessageStream.WriteBodyStream(System.Object,System.IO.Stream)">
            <summary>
            Write object to stream
            </summary>
            <param name="entity"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Nistec.Channels.MessageStream.SetBody(System.Byte[],System.String)">
            <summary>
            Set the given byte array to body stream.
            </summary>
            <param name="value"></param>
            <param name="typeName"></param>
        </member>
        <member name="M:Nistec.Channels.MessageStream.SetBody(Nistec.IO.NetStream,System.String,System.Boolean)">
            <summary>
            Set the given stream to body stream.
            </summary>
            <param name="ns"></param>
            <param name="typeName"></param>
            <param name="copy"></param>
        </member>
        <member name="M:Nistec.Channels.MessageStream.AsyncTransStream(System.Func{Nistec.IO.NetStream},System.String,Nistec.Runtime.TransformType)">
            <summary>
            Execute async task request and return the response as<see cref="T:Nistec.IO.NetStream"/>.
            </summary>
            <param name="action"></param>
            <param name="messageOnError"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.MessageStream.AsyncTransObject(System.Func{System.Object},System.String,Nistec.Runtime.TransformType)">
            <summary>
            Execute async task request and return the response as<see cref="T:Nistec.IO.NetStream"/>.
            </summary>
            <param name="action"></param>
            <param name="messageOnError"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.MessageStream.AsyncBinaryTask(System.Func{System.Byte[]},System.String,Nistec.MessageState)">
            <summary>
            Execute async task request and return the response as<see cref="T:Nistec.IO.NetStream"/>.
            </summary>
            <param name="action"></param>
            <param name="actionName"></param>
            <param name="nullState"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.MessageStream.ReadResponse(System.Net.Sockets.NetworkStream,System.Int32,System.Int32,Nistec.Runtime.TransformType,System.Boolean)">
            <summary>
            Read response from server.
            </summary>
            <param name="stream"></param>
            <param name="readTimeout"></param>
            <param name="ReceiveBufferSize"></param>
        </member>
        <member name="M:Nistec.Channels.MessageStream.ReadResponse``1(System.Net.Sockets.NetworkStream,System.Int32,System.Int32)">
            <summary>
            Read response from server.
            </summary>
            <typeparam name="TResponse"></typeparam>
            <param name="stream"></param>
            <param name="readTimeout"></param>
            <param name="ReceiveBufferSize"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.MessageStream.SerializeBody(System.Object)">
            <summary>
            Set the given value to body stream using <see cref="T:Nistec.Serialization.BinarySerializer"/>, This method is a part of <see cref="T:Nistec.Runtime.IMessageStream"/> implementation..
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nistec.Channels.MessageStream.ConvertTo(Nistec.Channels.MessageStream)">
            <summary>
            Convert <see cref="T:Nistec.Channels.MessageStream"/> to <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.MessageStream.ToStream">
            <summary>
            Get message as Stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.MessageStream.ParseStream(System.IO.Stream,Nistec.Channels.NetProtocol)">
            <summary>
            Convert stream to <see cref="T:Nistec.Channels.Tcp.TcpMessage"/> message.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.MessageStream.ConvertFrom(System.Collections.Generic.IDictionary{System.String,System.Object},Nistec.Channels.NetProtocol)">
            <summary>
            Convert <see cref="T:System.Collections.IDictionary"/> to <see cref="T:Nistec.Channels.MessageStream"/>.
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.MessageStream.Create(Nistec.Channels.NetProtocol,System.IO.Stream,Nistec.Serialization.IBinaryStreamer)">
            <summary>
            Create a new message stream.
            </summary>
            <param name="protocol"></param>
            <param name="stream"></param>
            <param name="streamer"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Channels.ChannelServiceState">
            <summary>
            Channel Service State
            </summary>
        </member>
        <member name="T:Nistec.Channels.NetProtocol">
            <summary>
            Net Protocol
            </summary>
        </member>
        <member name="T:Nistec.Channels.BundleFormatter">
            <summary>
            Net Format
            </summary>
        </member>
        <member name="T:Nistec.Channels.MessageDirection">
            <summary>
            Message Direction
            </summary>
        </member>
        <member name="T:Nistec.Channels.PipeMessage">
            <summary>
            Represent a message for named pipe communication.
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeMessage.#ctor">
            <summary>
            Initialize a new instance of pipe message.
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeMessage.#ctor(System.String,System.String,System.Object,System.Int32)">
            <summary>
            Initialize a new instance of pipe message.
            </summary>
            <param name="command"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration"></param>
        </member>
        <member name="M:Nistec.Channels.PipeMessage.#ctor(System.String,System.String,System.Object,System.Int32,System.String)">
            <summary>
            Initialize a new instance of pipe message.
            </summary>
            <param name="command"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration"></param>
            <param name="sessionId"></param>
        </member>
        <member name="M:Nistec.Channels.PipeMessage.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeMessage.SendDuplex(System.String,System.IO.Pipes.PipeOptions)">
            <summary>
            Send duplex message to named pipe server using the pipe name argument.
            </summary>
            <param name="PipeName"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.PipeMessage.SendDuplex``1(System.String,System.IO.Pipes.PipeOptions)">
            <summary>
            Send duplex message to named pipe server using the pipe name argument.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="PipeName"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.PipeMessage.SendOut(System.String,System.IO.Pipes.PipeOptions)">
            <summary>
            Send one way message to named pipe server using the pipe name argument.
            </summary>
            <param name="PipeName"></param>
            <param name="option"></param>
        </member>
        <member name="P:Nistec.Channels.PipeClient`1.Log">
            <summary>
            Get or Set Logger that implements <see cref="T:Nistec.Logging.ILogger"/> interface.
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeClient`1.#ctor(System.String,System.IO.Pipes.PipeDirection)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="configHostName"></param>
            <param name="direction"></param>
        </member>
        <member name="M:Nistec.Channels.PipeClient`1.#ctor(Nistec.Channels.PipeSettings)">
            <summary>
            Constractor with settings parameters
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Nistec.Channels.PipeClient`1.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.IO.Pipes.PipeOptions)">
            <summary>
            Constractor with arguments
            </summary>
            <param name="hostName"></param>
            <param name="inBufferSize"></param>
            <param name="outBufferSize"></param>
            <param name="isDuplex"></param>
            <param name="option"></param>
        </member>
        <member name="M:Nistec.Channels.PipeClient`1.#ctor(System.String,System.Boolean,System.IO.Pipes.PipeOptions)">
            <summary>
            Constractor with arguments
            </summary>
            <param name="hostName"></param>
            <param name="isDuplex"></param>
            <param name="option"></param>
        </member>
        <member name="M:Nistec.Channels.PipeClient`1.#ctor(System.String,System.Boolean,System.IO.Pipes.PipeOptions,System.Int32)">
            <summary>
            Constractor with arguments
            </summary>
            <param name="hostName"></param>
            <param name="isDuplex"></param>
            <param name="option"></param>
            <param name="connectTimeout"></param>
        </member>
        <member name="M:Nistec.Channels.PipeClient`1.ExecuteOut(`0,System.Boolean)">
            <summary>
            connect to the named pipe and execute request.
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeClient`1.Execute(`0,System.Boolean)">
            <summary>
            connect to the named pipe and execute request.
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeClient`1.Execute``1(`0,System.Boolean)">
            <summary>
            connect to the named pipe and execute request.
            </summary>
        </member>
        <member name="T:Nistec.Channels.PipeClient">
            <summary>
            Represent pipe client channel
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeClient.SendDuplexStream(Nistec.Channels.MessageStream,System.String,System.Boolean,System.IO.Pipes.PipeOptions)">
            <summary>
            Send Duplex message with return value.
            </summary>
            <param name="request"></param>
            <param name="hostName"></param>
            <param name="option"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.PipeClient.#ctor(System.String,System.Boolean,System.IO.Pipes.PipeOptions)">
            <summary>
            Constractor with arguments
            </summary>
            <param name="hostName"></param>
            <param name="isDuplex"></param>
            <param name="option"></param>
        </member>
        <member name="M:Nistec.Channels.PipeClient.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.IO.Pipes.PipeOptions)">
            <summary>
            Constractor with arguments
            </summary>
            <param name="hostName"></param>
            <param name="inBufferSize"></param>
            <param name="outBufferSize"></param>
            <param name="isDuplex"></param>
            <param name="option"></param>
        </member>
        <member name="M:Nistec.Channels.PipeClient.#ctor(System.String,System.IO.Pipes.PipeDirection)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="configHostName"></param>
            <param name="direction"></param>
        </member>
        <member name="M:Nistec.Channels.PipeClient.#ctor(System.String)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="configHostName"></param>
        </member>
        <member name="M:Nistec.Channels.PipeClient.#ctor(Nistec.Channels.PipeSettings)">
            <summary>
            Constractor with settings parameters
            </summary>
            <param name="settings"></param>
        </member>
        <member name="T:Nistec.Channels.PipeServer`1">
            <summary>
            Represent a pipe server listner
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeServer`1.Log">
            <summary>
            Get or Set Logger that implements <see cref="T:Nistec.Logging.ILogger"/> interface.
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeServer`1.HostName">
            <summary>
            Get or Set the host name.
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeServer`1.PipeName">
            <summary>
            Get or Set the pipe name.
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeServer`1.PipeDirection">
            <summary>
            Get or Set the pipe direction
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeServer`1.PipeOptions">
            <summary>
            Get or Set the pipe options.
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeServer`1.MaxServerConnections">
            <summary>
            Get or Set the max server connections.
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeServer`1.MaxAllowedServerInstances">
            <summary>
            Get or Set the max allowed server instances
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeServer`1.VerifyPipe">
            <summary>
            Get or Set the verify pipe for security.
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeServer`1.ConnectTimeout">
            <summary>
            Get or Set the connection timeout.
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeServer`1.ReceiveBufferSize">
            <summary>
            Get or Set the in buffer size in bytes.
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeServer`1.SendBufferSize">
            <summary>
            Get or Set the out buffer size in bytes.
            </summary>
        </member>
        <member name="F:Nistec.Channels.PipeServer`1.ServerName">
            <summary>
            Local Server name
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeServer`1.FullPipeName">
            <summary>
            Get the full pipe name.
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeServer`1.IsAsync">
            <summary>
             Get or Set Indicates that the channel can be used for asynchronous reading and writing..
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeServer`1.#ctor(System.String,System.Boolean)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="hostName"></param>
            <param name="loadFromSettings"></param>
        </member>
        <member name="M:Nistec.Channels.PipeServer`1.#ctor(Nistec.Channels.PipeSettings)">
            <summary>
            Constractor with settings
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Nistec.Channels.PipeServer`1.OnLoad">
            <summary>
            On load.
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeServer`1.OnStart">
            <summary>
            On start.
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeServer`1.OnStop">
            <summary>
            On stop.
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeServer`1.OnFault(System.String,System.Exception)">
            <summary>
            On error.
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeServer`1.Start">
            <summary>
            Start pipe server listner.
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeServer`1.Stop">
            <summary>
            Stop pipe server listner.
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeServer`1.ReadRequest(System.IO.Pipes.NamedPipeServerStream)">
            <summary>
            Read request
            </summary>
            <param name="pipeServer"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.PipeServer`1.WriteResponse(System.IO.Pipes.NamedPipeServerStream,Nistec.Channels.TransStream)">
            <summary>
            Write response
            </summary>
            <param name="pipeServer"></param>
            <param name="bResponse"></param>
        </member>
        <member name="M:Nistec.Channels.PipeServer`1.ExecRequset(`0)">
            <summary>
            Exec Requset
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.PipeServer`1.OnClientConnected">
            <summary>
            Occured when client is connected.
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeServer`1.Run">
            <summary>
            Use the pipe classes in the System.IO.Pipes namespace to create the 
            named pipe. This solution is recommended.
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeServer`1.RunTask">
            <summary>
            Use the pipe classes in the System.IO.Pipes namespace to create the 
            named pipe. This solution is recommended.
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeServer`1.RunAsync">
            <summary>
            Use the pipe classes in the System.IO.Pipes namespace to create the 
            named pipe. This solution is recommended.
            </summary>
        </member>
        <member name="T:Nistec.Channels.PipeSettings">
             <summary>
            Pipe Settings.
             </summary>
             <example>
             pipeClientSettings
             <pipeClientSettings>
                 <pipe PipeName="myPipe" 
                 PipeDirection="In|Out|InOut" 
                 PipeOptions="None|WriteThrough|Asynchronous" 
                 VerifyPipe="myPipe" 
                 ConnectTimeout="5000" 
                 ReceiveBufferSize="1024" 
                 SendBufferSize="1024"/>
             </pipeClientSettings>
             pipeServerSettings
             <pipeServerSettings>
                 <pipe PipeName="myPipe" 
                 PipeDirection="In|Out|InOut" 
                 PipeOptions="None|WriteThrough|Asynchronous" 
                 VerifyPipe="myPipe" 
                 ConnectTimeout="5000" 
                 ReceiveBufferSize="1024" 
                 SendBufferSize="1024" 
                 MaxServerConnections="5" 
                 MaxAllowedServerInstances="255"/>
             </pipeServerSettings>
             </example>
        </member>
        <member name="F:Nistec.Channels.PipeSettings.PIPE_UNLIMITED_INSTANCES">
            <summary>
            Unlimited server pipe instances.
            </summary>
        </member>
        <member name="F:Nistec.Channels.PipeSettings.DefaultReceiveBufferSize">
            <summary>
            DefaultInBufferSize
            </summary>
        </member>
        <member name="F:Nistec.Channels.PipeSettings.DefaultSendBufferSize">
            <summary>
            DefaultOutBufferSize
            </summary>
        </member>
        <member name="F:Nistec.Channels.PipeSettings.DefaultConnectTimeout">
            <summary>
            DefaultConnectTimeout
            </summary>
        </member>
        <member name="F:Nistec.Channels.PipeSettings.DefaultProcessTimeout">
            <summary>
            DefaultConnectTimeout
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeSettings.HostName">
            <summary>
             Get or Set HostName.
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeSettings.PipeName">
            <summary>
             Get or Set PipeName.
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeSettings.PipeDirection">
            <summary>
            Get or Set PipeDirection (Default=InOut).
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeSettings.PipeOptions">
            <summary>
            Get or Set PipeOptions (Default=None).
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeSettings.MaxServerConnections">
            <summary>
            Get or Set MaxServerConnections (Only for server side) (Default=1).
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeSettings.MaxAllowedServerInstances">
            <summary>
            Get or Set MaxAllowedServerInstances (Only for server side) (Default=255).
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeSettings.VerifyPipe">
            <summary>
            Get or Set VerifyPipe.
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeSettings.ConnectTimeout">
            <summary>
            Get or Set ConnectTimeout (Default=5000).
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeSettings.ProcessTimeout">
            <summary>
            Get or Set ProcessTimeout (Default=5000).
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeSettings.ReceiveBufferSize">
            <summary>
            Get or Set ReceiveBufferSize (Default=8192).
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeSettings.SendBufferSize">
            <summary>
            Get or Set SendBufferSize (Default=8192).
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeSettings.ServerName">
            <summary>
            ServerName constant.
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeSettings.FullPipeName">
            <summary>
            Get Full Pipe Name.
            </summary>
        </member>
        <member name="P:Nistec.Channels.PipeSettings.IsAsync">
            <summary>
             Get or Set Indicates that the channel can be used for asynchronous reading and writing..
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeSettings.#ctor">
            <summary>
            Default constractor.
            </summary>
        </member>
        <member name="M:Nistec.Channels.PipeSettings.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="hostName"></param>
            <param name="isServer"></param>
            <param name="loadFromSettings"></param>
        </member>
        <member name="M:Nistec.Channels.PipeSettings.#ctor(System.Xml.XmlNode,System.Boolean)">
            <summary>
            PipeSettings
            </summary>
            <param name="node"></param>
            <param name="isServer"></param>
        </member>
        <member name="M:Nistec.Channels.PipeSettings.LoadPipeServerSttings(System.String)">
            <summary>
            Load pipe server settings from appConfig using PipeName attribute.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nistec.Channels.PipeSettings.LoadPipeClientSttings(System.String)">
            <summary>
            Load pipe client settings from appConfig using PipeName attribute.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nistec.Channels.PipeSettings.EnsureSettings">
            <summary>
            EnsureSettings PipeOptions
            </summary>
        </member>
        <member name="T:Nistec.Channels.MessageRequest">
            <summary>
            Represent a request message for named pipe/tcp communication.
            </summary>
        </member>
        <member name="T:Nistec.Channels.Tcp.TcpJsonClient">
            <summary>
            Represent json tcp client channel
            </summary>
        </member>
        <member name="F:Nistec.Channels.Tcp.TcpJsonClient.DefaultHostName">
            <summary>
            DefaultHostName
            </summary>
        </member>
        <member name="F:Nistec.Channels.Tcp.TcpJsonClient.DefaultAddress">
            <summary>
            DefaultAddress
            </summary>
        </member>
        <member name="F:Nistec.Channels.Tcp.TcpJsonClient.DefaultPort">
            <summary>
            DefaultPort
            </summary>
        </member>
        <member name="F:Nistec.Channels.Tcp.TcpJsonClient.DefaultReceiveBufferSize">
            <summary>
            DefaultReceiveBufferSize
            </summary>
        </member>
        <member name="F:Nistec.Channels.Tcp.TcpJsonClient.DefaultSendBufferSize">
            <summary>
            DefaultSendBufferSize
            </summary>
        </member>
        <member name="F:Nistec.Channels.Tcp.TcpJsonClient.DefaultSendTimeout">
            <summary>
            DefaultSendTimeout
            </summary>
        </member>
        <member name="F:Nistec.Channels.Tcp.TcpJsonClient.DefaultProcessTimeout">
            <summary>
            DefaultProcessTimeout
            </summary>
        </member>
        <member name="F:Nistec.Channels.Tcp.TcpJsonClient.DefaultReadTimeout">
            <summary>
            DefaultReadTimeout
            </summary>
        </member>
        <member name="F:Nistec.Channels.Tcp.TcpJsonClient.DefaultMaxSocketError">
            <summary>
            DefaultMaxSocketError
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpJsonClient.HostName">
            <summary>
             Get or Set HostName.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpJsonClient.Address">
            <summary>
             Get or Set Host Address.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpJsonClient.Port">
            <summary>
             Get or Set Port.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpJsonClient.IsAsync">
            <summary>
             Get or Set Indicates that the channel can be used for asynchronous reading and writing..
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpJsonClient.ConnectTimeout">
            <summary>
            Get or Set ConnectTimeout (Default=5000).
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpJsonClient.ProcessTimeout">
            <summary>
            Get or Set ProcessTimeout (Default=5000).
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpJsonClient.ReceiveBufferSize">
            <summary>
            Get or Set ReceiveBufferSize (Default=8192).
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpJsonClient.SendBufferSize">
            <summary>
            Get or Set SendBufferSize (Default=8192).
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpJsonClient.Log">
            <summary>
            Get or Set Logger that implements <see cref="T:Nistec.Logging.ILogger"/> interface.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpJsonClient.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constractor with arguments
            </summary>
            <param name="hostAddress"></param>
            <param name="port"></param>
            <param name="readTimeout"></param>
            <param name="receiveBufferSize"></param>
            <param name="sendBufferSize"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpJsonClient.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:Nistec.Channels.Tcp.TcpClient"/> from configuration.
            </summary>
            <param name="configHost"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpJsonClient.Execute(System.String,System.Boolean)">
            <summary>
            connect to the host and execute request.
            </summary>
        </member>
        <member name="T:Nistec.Channels.Tcp.TcpJsonClient.SocketConnector">
            <summary>
            Represent a tcp socket connector for tcp client.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpJsonClient.SocketConnector.Connect(System.Net.IPEndPoint,System.Int32)">
            <summary>
            Connect asynchronaizly to tcp server.
            </summary>
            <param name="remoteEndPoint"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpJsonClient.EnsureHostAddress(System.String)">
            <summary>
            Ensure Host Address
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpJsonClient.HostAddress">
            <summary>
            Get host adress as <see cref="T:System.Net.IPAddress"/>.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpJsonClient.GetEndpoint">
            <summary>
            Get endpoint using host adress and port.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpJsonClient.GetServerEndpointUsingMachineName(System.String,System.Int32)">
            <summary>
            Get Server Endpoint Using Machine Name
            </summary>
            <param name="host"></param>
            <param name="portOnHost"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpJsonClient.GetServerEndpointUsingIpAddress(System.String,System.Int32)">
            <summary>
            Get Server Endpoint Using Ip Address
            </summary>
            <param name="host"></param>
            <param name="portOnHost"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Channels.Tcp.TcpJsonServer">
            <summary>
            Represent a json tcp server listner.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpJsonServer.OnStart">
            <summary>
            OnStart
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpJsonServer.OnStop">
            <summary>
            OnStop
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpJsonServer.OnLoad">
            <summary>
            OnLoad
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpJsonServer.#ctor(System.String)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="hostName"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpJsonServer.#ctor(Nistec.Channels.Tcp.TcpSettings)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpJsonServer.ReadRequest(System.Net.Sockets.NetworkStream)">
            <summary>
            ReadRequest
            </summary>
            <param name="networkStream"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpServerPool`1.ServiceState">
            <summary>
            Get <see cref="T:Nistec.Channels.ChannelServiceState"/> State.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpServerPool`1.Settings">
            <summary>
            Get current <see cref="T:Nistec.Channels.Tcp.TcpSettings"/> settings.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpServerPool`1.Log">
            <summary>
            Get or Set Logger that implements <see cref="T:Nistec.Logging.ILogger"/> interface.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpServerPool`1.IsReady">
            <summary>
            Get current <see cref="T:Nistec.Channels.Tcp.TcpSettings"/> settings.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpServerPool`1.#ctor">
            <summary>
            Constractor default
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpServerPool`1.#ctor(System.String,System.Int32)">
            <summary>
            Constractor using hostAddress and port.
            </summary>
            <param name="hostAddress"></param>
            <param name="port"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpServerPool`1.#ctor(System.String)">
            <summary>
            Constractor using host configuration.
            </summary>
            <param name="configHost"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpServerPool`1.#ctor(Nistec.Channels.Tcp.TcpSettings)">
            <summary>
            Constractor using settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpServerPool`1.FaultAck(System.String)">
            <summary>
            Create fault ack.
            </summary>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpServerPool`1.ExecRequset(`0)">
            <summary>
            Exec Requset
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Channels.Tcp.TcpClient`1">
            <summary>
            Represent a base class for tcp client.
            </summary>
            <typeparam name="TRequest"></typeparam>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpClient`1.Settings">
            <summary>
            Get or Set <see cref="T:Nistec.Channels.Tcp.TcpSettings"/> Settings.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpClient`1.Log">
            <summary>
            Get or Set Logger that implements <see cref="T:Nistec.Logging.ILogger"/> interface.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpClient`1.#ctor">
            <summary>
            Constractor default
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpClient`1.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="hostAddress"></param>
            <param name="port"></param>
            <param name="timeout"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpClient`1.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:Nistec.Channels.Tcp.TcpClient"/> from configuration.
            </summary>
            <param name="configHost"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpClient`1.#ctor(Nistec.Channels.Tcp.TcpSettings)">
            <summary>
            Initialize a new instance of <see cref="T:Nistec.Channels.Tcp.TcpClient"/> with given <see cref="T:Nistec.Channels.Tcp.TcpSettings"/> settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpClient`1.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constractor with arguments
            </summary>
            <param name="hostAddress"></param>
            <param name="port"></param>
            <param name="timeout"></param>
            <param name="receiveBufferSize"></param>
            <param name="sendBufferSize"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpClient`1.Execute(`0,System.Boolean)">
            <summary>
            connect to the host and execute request.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpClient`1.ExecuteOut(`0,System.Boolean)">
            <summary>
            connect to the named pipe and execute request.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpClient`1.Execute``1(`0,System.Boolean)">
            <summary>
            connect to the named pipe and execute request.
            </summary>
        </member>
        <member name="T:Nistec.Channels.Tcp.SocketConnector">
            <summary>
            Represent a tcp socket connector for tcp client.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.SocketConnector.Connect(System.Net.IPEndPoint,System.Int32)">
            <summary>
            Connect asynchronaizly to tcp server.
            </summary>
            <param name="remoteEndPoint"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Channels.Tcp.TcpClient">
            <summary>
            Represent tcp client.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpClient.SendDuplexStream(Nistec.Channels.MessageStream,System.String,System.Boolean)">
            <summary>
            Send Duplex
            </summary>
            <param name="request"></param>
            <param name="hostName"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpClient.#ctor(System.String,System.Int32)">
            <summary>
            Constractor with arguments
            </summary>
            <param name="hostAddress"></param>
            <param name="port"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpClient.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constractor with arguments
            </summary>
            <param name="hostAddress"></param>
            <param name="port"></param>
            <param name="readTimeout"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpClient.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constractor with arguments
            </summary>
            <param name="hostAddress"></param>
            <param name="port"></param>
            <param name="readTimeout"></param>
            <param name="inBufferSize"></param>
            <param name="outBufferSize"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpClient.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:Nistec.Channels.Tcp.TcpClient"/> from configuration.
            </summary>
            <param name="configHost"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpClient.#ctor(Nistec.Channels.Tcp.TcpSettings)">
            <summary>
            Initialize a new instance of <see cref="T:Nistec.Channels.Tcp.TcpClient"/> with given <see cref="T:Nistec.Channels.Tcp.TcpSettings"/> settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpClient.Execute(Nistec.Channels.MessageStream,System.Boolean)">
            <summary>
            connect to the tcp channel and execute request.
            </summary>
        </member>
        <member name="T:Nistec.Channels.Tcp.TcpMessage">
            <summary>
            Represent a message for named tcp communication.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpMessage.#ctor">
            <summary>
            Initialize a new instance of tcp message.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpMessage.#ctor(System.String,System.String,System.Object,System.Int32)">
            <summary>
            Initialize a new instance of tcp message.
            </summary>
            <param name="command"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpMessage.#ctor(System.String,System.String,System.Object,System.Int32,System.String)">
            <summary>
            Initialize a new instance of tcp message.
            </summary>
            <param name="command"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiration"></param>
            <param name="sessionId"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpMessage.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpMessage.SendDuplex(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Send duplex message to tcp server using the host name and port arguments.
            </summary>
            <param name="HostAddress"></param>
            <param name="Port"></param>
            <param name="ReadTimeOut"></param>
            <param name="IsAsync"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpMessage.SendDuplex``1(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Send duplex message to tcp server using the host name and port arguments.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="HostAddress"></param>
            <param name="Port"></param>
            <param name="ReadTimeOut"></param>
            <param name="IsAsync"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpMessage.SendOut(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Send one way message to tcp server using the host name and port arguments.
            </summary>
            <param name="HostAddress"></param>
            <param name="Port"></param>
            <param name="ReadTimeOut"></param>
            <param name="IsAsync"></param>
        </member>
        <member name="T:Nistec.Channels.Tcp.TcpServer`1">
            <summary>
            Represent a base class for tcp server listner.
            </summary>
            <typeparam name="TRequest"></typeparam>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpServer`1.ServiceState">
            <summary>
            Get <see cref="T:Nistec.Channels.ChannelServiceState"/> State.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpServer`1.Settings">
            <summary>
            Get current <see cref="T:Nistec.Channels.Tcp.TcpSettings"/> settings.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpServer`1.Log">
            <summary>
            Get or Set Logger that implements <see cref="T:Nistec.Logging.ILogger"/> interface.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpServer`1.IsReady">
            <summary>
            Get current <see cref="T:Nistec.Channels.Tcp.TcpSettings"/> settings.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpServer`1.#ctor">
            <summary>
            Constractor default
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpServer`1.#ctor(System.String,System.Int32)">
            <summary>
            Constractor using hostAddress and port.
            </summary>
            <param name="hostAddress"></param>
            <param name="port"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpServer`1.#ctor(System.String)">
            <summary>
            Constractor using host configuration.
            </summary>
            <param name="configHost"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpServer`1.#ctor(Nistec.Channels.Tcp.TcpSettings)">
            <summary>
            Constractor using settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpServer`1.FaultAck(System.String)">
            <summary>
            Create fault ack.
            </summary>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpServer`1.ReadRequest(System.Net.Sockets.NetworkStream)">
            <summary>
            Read Request from client.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpServer`1.ExecRequset(`0)">
            <summary>
            Exec client requset.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpServer`1.WriteResponse(System.Net.Sockets.NetworkStream,Nistec.Channels.TransStream)">
            <summary>
            Write response to client.
            </summary>
            <param name="stream"></param>
            <param name="bResponse"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpServer`1.OnClientConnected">
            <summary>
            Occured when client is connected.
            </summary>
        </member>
        <member name="T:Nistec.Channels.Tcp.SocketAcceptor">
            <summary>
            Represent a tcp socket acceptor for tcp listener.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.SocketAcceptor.AcceptTcpClient(System.Net.Sockets.TcpListener,System.Int32)">
            <summary>
            Connect asynchronaizly to tcp server.
            </summary>
            <param name="listener"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Channels.Tcp.TcpServer">
            <summary>
            Represent a tcp server listner.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpServer.#ctor(System.String,System.Int32)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="hostName"></param>
            <param name="port"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpServer.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:Nistec.Channels.Tcp.TcpServer"/> from configuration.
            </summary>
            <param name="configHost"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpServer.#ctor(Nistec.Channels.Tcp.TcpSettings)">
            <summary>
            Initialize a new instance of <see cref="T:Nistec.Channels.Tcp.TcpServer"/> with given <see cref="T:Nistec.Channels.Tcp.TcpSettings"/> settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpServer.ReadRequest(System.Net.Sockets.NetworkStream)">
            <summary>
            Read Request
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Nistec.Channels.Tcp.TcpSettings" -->
        <member name="F:Nistec.Channels.Tcp.TcpSettings.DefaultHostName">
            <summary>
            DefaultHostName
            </summary>
        </member>
        <member name="F:Nistec.Channels.Tcp.TcpSettings.DefaultAddress">
            <summary>
            DefaultAddress
            </summary>
        </member>
        <member name="F:Nistec.Channels.Tcp.TcpSettings.DefaultPort">
            <summary>
            DefaultPort
            </summary>
        </member>
        <member name="F:Nistec.Channels.Tcp.TcpSettings.DefaultReceiveBufferSize">
            <summary>
            DefaultReceiveBufferSize
            </summary>
        </member>
        <member name="F:Nistec.Channels.Tcp.TcpSettings.DefaultSendBufferSize">
            <summary>
            DefaultSendBufferSize
            </summary>
        </member>
        <member name="F:Nistec.Channels.Tcp.TcpSettings.DefaultConnectTimeout">
            <summary>
            DefaultConnectTimeout
            </summary>
        </member>
        <member name="F:Nistec.Channels.Tcp.TcpSettings.DefaultProcessTimeout">
            <summary>
            DefaultProcessTimeout
            </summary>
        </member>
        <member name="F:Nistec.Channels.Tcp.TcpSettings.DefaultMaxSocketError">
            <summary>
            DefaultMaxSocketError
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpSettings.HostName">
            <summary>
             Get or Set HostName.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpSettings.Address">
            <summary>
             Get or Set Host Address.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpSettings.Port">
            <summary>
             Get or Set Port.
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpSettings.IsAsync">
            <summary>
             Get or Set Indicates that the channel can be used for asynchronous reading and writing..
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpSettings.MaxServerConnections">
            <summary>
            Get or Set MaxServerConnections (Only for server side) (Default=1).
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpSettings.ProcessTimeout">
            <summary>
            Get or Set ProcessTimeout (Default=5000).
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpSettings.ConnectTimeout">
            <summary>
            Get or Set ConnectTimeout (Default=5000).
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpSettings.ReceiveBufferSize">
            <summary>
            Get or Set ReceiveBufferSize (Default=8192).
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpSettings.SendBufferSize">
            <summary>
            Get or Set SendBufferSize (Default=8192).
            </summary>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpSettings.MaxSocketError">
            <summary>
            Get or Set the max socket errors
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpSettings.EnsureHostAddress(System.String)">
            <summary>
            Ensure Host Address
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpSettings.#ctor">
            <summary>
            Default constractor.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpSettings.#ctor(System.String,System.Int32)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="hostAddress"></param>
            <param name="port"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpSettings.#ctor(System.String,System.Boolean)">
            <summary>
            Constractor with extra parameters
            </summary>
            <param name="configHost"></param>
            <param name="isServer"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpSettings.#ctor(System.Xml.XmlNode,System.Boolean)">
            <summary>
            TcpSettings
            </summary>
            <param name="node"></param>
            <param name="isServer"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpSettings.LoadTcpServerSttings(System.String)">
            <summary>
            Load pipe server settings from appConfig using HostName attribute.
            </summary>
            <param name="configHost"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpSettings.LoadTcpClientSttings(System.String)">
            <summary>
            Load pipe client settings from appConfig using HostName attribute.
            </summary>
            <param name="configHost"></param>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpSettings.LoadSettings(System.Boolean)">
            <summary>
            Load Settings from config.
            </summary>
            <param name="isServer"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Channels.Tcp.TcpSettings.HostAddress">
            <summary>
            Get host adress as <see cref="T:System.Net.IPAddress"/>.
            </summary>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpSettings.GetEndpoint">
            <summary>
            Get endpoint using host adress and port.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpSettings.GetServerEndpointUsingMachineName(System.String,System.Int32)">
            <summary>
            Get Server Endpoint Using Machine Name
            </summary>
            <param name="host"></param>
            <param name="portOnHost"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Channels.Tcp.TcpSettings.GetServerEndpointUsingIpAddress(System.String,System.Int32)">
            <summary>
            Get Server Endpoint Using Ip Address
            </summary>
            <param name="host"></param>
            <param name="portOnHost"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Channels.StringMessage">
            <summary>
            String message stream
            </summary>
        </member>
        <member name="F:Nistec.Channels.StringMessage._IsDuplex">
            <summary>
            Get indicate wether the message is a duplex type.
            </summary>
        </member>
        <member name="F:Nistec.Channels.StringMessage._DuplexType">
            <summary>
            Get or Set DuplexType.
            </summary>
        </member>
        <member name="P:Nistec.Channels.StringMessage.Expiration">
            <summary>
             Get or Set The message expiration.
            </summary>
        </member>
        <member name="P:Nistec.Channels.StringMessage.TransformType">
            <summary>
            Get or Set The result type name.
            </summary>
        </member>
        <member name="M:Nistec.Diagnostics.ProcessExtensions.GetChildProcesses(System.Diagnostics.Process)">
            <summary>
            Get the child processes for a given process
            </summary>
            <param name="process"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Diagnostics.ProcessExtensions.GetParentId(System.Diagnostics.Process)">
            <summary>
            Get the Parent Process ID for a given process
            </summary>
            <param name="process"></param>
            <returns></returns>
        </member>
    </members>
</doc>
