<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nistec.Lib</name>
    </assembly>
    <members>
        <member name="T:Nistec.FastMember.MemberSet">
            <summary>
            Represents an abstracted view of the members defined for a type
            </summary>
        </member>
        <member name="M:Nistec.FastMember.MemberSet.GetEnumerator">
            <summary>
            Return a sequence of all defined members
            </summary>
        </member>
        <member name="P:Nistec.FastMember.MemberSet.Item(System.Int32)">
            <summary>
            Get a member by index
            </summary>
        </member>
        <member name="P:Nistec.FastMember.MemberSet.Count">
            <summary>
            The number of members defined for this type
            </summary>
        </member>
        <member name="T:Nistec.FastMember.Member">
            <summary>
            Represents an abstracted view of an individual member defined for a type
            </summary>
        </member>
        <member name="P:Nistec.FastMember.Member.Name">
            <summary>
            The name of this member
            </summary>
        </member>
        <member name="P:Nistec.FastMember.Member.Type">
            <summary>
            The type of value stored in this member
            </summary>
        </member>
        <member name="M:Nistec.FastMember.Member.IsDefined(System.Type)">
            <summary>
            Is the attribute specified defined on this type
            </summary>
        </member>
        <member name="M:Nistec.FastMember.Member.GetAttribute(System.Type,System.Boolean)">
            <summary>
            Getting Attribute Type
            </summary>
        </member>
        <member name="P:Nistec.FastMember.Member.CanWrite">
            <summary>
            Property Can Write
            </summary>
        </member>
        <member name="P:Nistec.FastMember.Member.CanRead">
            <summary>
            Property Can Read
            </summary>
        </member>
        <member name="T:Nistec.FastMember.ObjectAccessor">
            <summary>
            Represents an individual object, allowing access to members by-name
            </summary>
        </member>
        <member name="P:Nistec.FastMember.ObjectAccessor.Item(System.String)">
            <summary>
            Get or Set the value of a named member for the underlying object
            </summary>
        </member>
        <member name="P:Nistec.FastMember.ObjectAccessor.Target">
            <summary>
            The object represented by this instance
            </summary>
        </member>
        <member name="M:Nistec.FastMember.ObjectAccessor.Equals(System.Object)">
            <summary>
            Use the target types definition of equality
            </summary>
        </member>
        <member name="M:Nistec.FastMember.ObjectAccessor.GetHashCode">
            <summary>
            Obtain the hash of the target object
            </summary>
        </member>
        <member name="M:Nistec.FastMember.ObjectAccessor.ToString">
            <summary>
            Use the target's definition of a string representation
            </summary>
        </member>
        <member name="M:Nistec.FastMember.ObjectAccessor.Create(System.Object)">
            <summary>
            Wraps an individual object, allowing by-name access to that instance
            </summary>
        </member>
        <member name="M:Nistec.FastMember.ObjectAccessor.Create(System.Object,System.Boolean)">
            <summary>
            Wraps an individual object, allowing by-name access to that instance
            </summary>
        </member>
        <member name="T:Nistec.FastMember.ObjectReader">
            <summary>
            Provides a means of reading a sequence of objects as a data-reader, for example
            for use with SqlBulkCopy or other data-base oriented code
            </summary>
        </member>
        <member name="M:Nistec.FastMember.ObjectReader.Create``1(System.Collections.Generic.IEnumerable{``0},System.String[])">
            <summary>
            Creates a new ObjectReader instance for reading the supplied data
            </summary>
            <param name="source">The sequence of objects to represent</param>
            <param name="members">The members that should be exposed to the reader</param>
        </member>
        <member name="M:Nistec.FastMember.ObjectReader.#ctor(System.Type,System.Collections.IEnumerable,System.String[])">
            <summary>
            Creates a new ObjectReader instance for reading the supplied data
            </summary>
            <param name="type">The expected Type of the information to be read</param>
            <param name="source">The sequence of objects to represent</param>
            <param name="members">The members that should be exposed to the reader</param>
        </member>
        <member name="P:Nistec.FastMember.ObjectReader.Item(System.Int32)">
            <summary>
            Gets the value of the current object in the member specified
            </summary>
        </member>
        <member name="T:Nistec.FastMember.TypeAccessor">
            <summary>
            Provides by-name member-access to objects of a given type
            </summary>
        </member>
        <member name="P:Nistec.FastMember.TypeAccessor.CreateNewSupported">
            <summary>
            Does this type support new instances via a parameterless constructor?
            </summary>
        </member>
        <member name="M:Nistec.FastMember.TypeAccessor.CreateNew">
            <summary>
            Create a new instance of this type
            </summary>
        </member>
        <member name="P:Nistec.FastMember.TypeAccessor.GetMembersSupported">
            <summary>
            Can this type be queried for member availability?
            </summary>
        </member>
        <member name="M:Nistec.FastMember.TypeAccessor.GetMembers">
            <summary>
            Query the members available for this type
            </summary>
        </member>
        <member name="M:Nistec.FastMember.TypeAccessor.Create(System.Type)">
            <summary>
            Provides a type-specific accessor, allowing by-name access for all objects of that type
            </summary>
            <remarks>The accessor is cached internally; a pre-existing accessor may be returned</remarks>
        </member>
        <member name="M:Nistec.FastMember.TypeAccessor.Create(System.Type,System.Boolean)">
            <summary>
            Provides a type-specific accessor, allowing by-name access for all objects of that type
            </summary>
            <remarks>The accessor is cached internally; a pre-existing accessor may be returned</remarks>
        </member>
        <member name="T:Nistec.FastMember.TypeAccessor.RuntimeTypeAccessor">
            <summary>
            A TypeAccessor based on a Type implementation, with available member metadata
            </summary>
        </member>
        <member name="P:Nistec.FastMember.TypeAccessor.RuntimeTypeAccessor.Type">
            <summary>
            Returns the Type represented by this accessor
            </summary>
        </member>
        <member name="P:Nistec.FastMember.TypeAccessor.RuntimeTypeAccessor.GetMembersSupported">
            <summary>
            Can this type be queried for member availability?
            </summary>
        </member>
        <member name="M:Nistec.FastMember.TypeAccessor.RuntimeTypeAccessor.GetMembers">
            <summary>
            Query the members available for this type
            </summary>
        </member>
        <member name="P:Nistec.FastMember.TypeAccessor.Item(System.Object,System.String)">
            <summary>
            Get or set the value of a named member on the target instance
            </summary>
        </member>
        <member name="T:Nistec.Collections.CircleCollection`1">
            <summary>
            Circle collection. Elements will be circled clockwise.
            </summary>
        </member>
        <member name="M:Nistec.Collections.CircleCollection`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nistec.Collections.CircleCollection`1.Add(`0[])">
            <summary>
            Adds specified items to the collection.
            </summary>
            <param name="items">Items to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>items</b> is null.</exception>
        </member>
        <member name="M:Nistec.Collections.CircleCollection`1.Add(`0)">
            <summary>
            Adds specified item to the collection.
            </summary>
            <param name="item">Item to add.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>item</b> is null.</exception>
        </member>
        <member name="M:Nistec.Collections.CircleCollection`1.Remove(`0)">
            <summary>
            Removes specified item from the collection.
            </summary>
            <param name="item">Item to remove.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>item</b> is null.</exception>
        </member>
        <member name="M:Nistec.Collections.CircleCollection`1.Clear">
            <summary>
            Clears all items from collection.
            </summary>
        </member>
        <member name="M:Nistec.Collections.CircleCollection`1.Contains(`0)">
            <summary>
            Gets if the collection contain the specified item.
            </summary>
            <param name="item">Item to check.</param>
            <returns>Returns true if the collection contain the specified item, otherwise false.</returns>
        </member>
        <member name="M:Nistec.Collections.CircleCollection`1.Next">
            <summary>
            Gets next item from the collection. This method is thread-safe.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is raised when thre is no items in the collection.</exception>
        </member>
        <member name="M:Nistec.Collections.CircleCollection`1.ToArray">
            <summary>
            Copies all elements to new array, all elements will be in order they added. This method is thread-safe.
            </summary>
            <returns>Returns elements in a new array.</returns>
        </member>
        <member name="M:Nistec.Collections.CircleCollection`1.ToCurrentOrderArray">
            <summary>
            Copies all elements to new array, all elements will be in current circle order. This method is thread-safe.
            </summary>
            <returns>Returns elements in a new array.</returns>
        </member>
        <member name="P:Nistec.Collections.CircleCollection`1.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:Nistec.Collections.CircleCollection`1.Item(System.Int32)">
            <summary>
            Gets item at the specified index.
            </summary>
            <param name="index">Item zero based index.</param>
            <returns>Returns item at the specified index.</returns>
        </member>
        <member name="T:Nistec.Collections.QueueListener`1">
            <summary>
            Represents a thread-safe queue listener (FIFO) collection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:Nistec.Collections.QueueListener`1.ErrorOcurred">
            <summary>
            ErrorOcurred
            </summary>
        </member>
        <member name="E:Nistec.Collections.QueueListener`1.MessageReceived">
            <summary>
            Message Received
            </summary>
        </member>
        <member name="E:Nistec.Collections.QueueListener`1.MessageArraived">
            <summary>
            Message Arraived
            </summary>
        </member>
        <member name="M:Nistec.Collections.QueueListener`1.OnErrorOcurred(System.String)">
            <summary>
            OnErrorOcurred
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:Nistec.Collections.QueueListener`1.Count">
            <summary>
            Gets the number of elements contained in the Queue{T}.
            </summary>
        </member>
        <member name="P:Nistec.Collections.QueueListener`1.IsEmpty">
            <summary>
            Get indicating whether the queue is empty.
            </summary>
        </member>
        <member name="P:Nistec.Collections.QueueListener`1.IsAlive">
            <summary>
            Get indicating whether the queue listener ia alive.
            </summary>
        </member>
        <member name="M:Nistec.Collections.QueueListener`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the Queue{T}.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nistec.Collections.QueueListener`1.Dequeue">
            <summary>
            Attempts to remove and return the object at the beginning of the Queue{T}.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Collections.QueueListener`1.Start">
            <summary>
            Start the queue listener.
            </summary>
        </member>
        <member name="M:Nistec.Collections.QueueListener`1.Stop">
            <summary>
            Stop the queue listener.
            </summary>
        </member>
        <member name="T:Nistec.AppConfig">
            <summary>
            Represent a Config file as Dictionary key-value
            </summary>
        </member>
        <member name="M:Nistec.AppConfig.#ctor(System.String)">
            <summary>
            AppConfig ctor with a specefied filename
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Nistec.AppConfig.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            AppConfig ctor with a specefied Dictionary
            </summary>
            <param name="dic"></param>
        </member>
        <member name="M:Nistec.AppConfig.#ctor">
            <summary>
            AppConfig ctor with default filename CallingAssembly '.cnf' in current direcory
            </summary>
        </member>
        <member name="M:Nistec.AppConfig.InitWatcher">
            <summary>
            Initilaize the file system watcher
            </summary>
        </member>
        <member name="M:Nistec.AppConfig.OnFileChanged(System.IO.FileSystemEventArgs)">
            <summary>
            Occoured when file changed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.AppConfig.OnFileRenamed(System.IO.RenamedEventArgs)">
            <summary>
            Occoured when file renamed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.AppConfig.GetItem(System.String)">
            <summary>
            Get string value by key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.AppConfig.Item(System.String)">
            <summary>
            Get or Set value by key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.AppConfig.AutoSave">
            <summary>
            Get or Set value indicating is AppConfig will save changes to config file when each item value has changed 
            </summary>
        </member>
        <member name="P:Nistec.AppConfig.HasChanges">
            <summary>
            Get value indicating if AppConfig has changes. 
            </summary>
        </member>
        <member name="P:Nistec.AppConfig.Filename">
            <summary>
            Get or Set The config full file path
            </summary>
        </member>
        <member name="P:Nistec.AppConfig.FileExists">
            <summary>
            Get value indicating if the config file exists
            </summary>
        </member>
        <member name="P:Nistec.AppConfig.RootTag">
            <summary>
            Get The Config root tag
            </summary>
        </member>
        <member name="P:Nistec.AppConfig.Password">
            <summary>
            Get or Set the password for encryption
            </summary>
        </member>
        <member name="M:Nistec.AppConfig.ToDictionary">
            <summary>
            Get all items as IDictionary
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.AppConfig.ContainsKey(System.String)">
            <summary>
            Determines whether the XmlTable contains the specified key.
            </summary>
            <param name="key">Key of value to get.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.AppConfig.ContainsValue(System.Object)">
            <summary>
            Determines whether the XmlTable contains the specified value.
            </summary>
            <param name="value">value to get.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.AppConfig.GetValue(System.String)">
            <summary>
            Gets value from name/value table.
            </summary>
            <param name="key">Key of value to get.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.AppConfig.Get``1(System.String)">
            <summary>
            Gets value from name/value table.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.AppConfig.Get``1(System.String,``0)">
            <summary>
            Gets value from name/value table.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="valueIfNull"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.AppConfig.Read">
            <summary>
            Read Config File
            </summary>
        </member>
        <member name="M:Nistec.AppConfig.Save">
            <summary>
            Save Changes 
            </summary>
        </member>
        <member name="M:Nistec.AppConfig.PrintConfig">
            <summary>
            Print all item to Console
            </summary>
        </member>
        <member name="M:Nistec.AppConfig.SaveConfig">
            <summary>
            Save config to file.
            </summary>
        </member>
        <member name="T:Nistec.MessageState">
            <summary>
            Message State
            </summary>
        </member>
        <member name="T:Nistec.Config.ConfigChangedArgs">
            <summary>
              EventArgs class to be passed as the second parameter of a <see cref="!:Config.Changed" /> event handler. </summary>
            <remarks>
              This class provides all the information relevant to the change made to the Config.
              It is also used as a convenient base class for the ConfigChangingArgs class which is passed 
              as the second parameter of the <see cref="!:Config.Changing" /> event handler. </remarks>
            <seealso cref="T:Nistec.Config.ConfigChangingArgs" />
        </member>
        <member name="M:Nistec.Config.ConfigChangedArgs.#ctor(System.String,System.String,System.Object)">
            <summary>
              Initializes a new instance of the ConfigChangedArgs class by initializing all of its properties. </summary>
            <param name="section">
              The name of the section involved in the change or null. </param>
            <param name="entry">
              The name of the entry involved in the change, or if changeType is set to Other, the name of the method/property that was changed. </param>
            <param name="value">
              The new value for the entry or method/property, based on the value of changeType. </param>
            <seealso cref="!:ConfigChangeType" />
        </member>
        <member name="P:Nistec.Config.ConfigChangedArgs.Section">
            <summary>
              Gets the name of the section involved in the change, or null if not applicable. </summary>
        </member>
        <member name="P:Nistec.Config.ConfigChangedArgs.Entry">
            <summary>
              Gets the name of the entry involved in the change, or null if not applicable. </summary>
            <remarks> 
              If <see cref="!:ChangeType" /> is set to Other, this property holds the name of the 
              method/property that was changed. </remarks>
        </member>
        <member name="P:Nistec.Config.ConfigChangedArgs.Value">
            <summary>
              Gets the new value for the entry or method/property, based on the value of <see cref="!:ChangeType" />. </summary>
        </member>
        <member name="T:Nistec.Config.ConfigChangingArgs">
            <summary>
              EventArgs class to be passed as the second parameter of a <see cref="!:Config.Changing" /> event handler. </summary>
            <remarks>
              This class provides all the information relevant to the change about to be made to the Config.
              Besides the properties of ConfigChangedArgs, it adds the Cancel property which allows the 
              event handler to prevent the change from happening. </remarks>
            <seealso cref="T:Nistec.Config.ConfigChangedArgs" />
        </member>
        <member name="M:Nistec.Config.ConfigChangingArgs.#ctor(System.String,System.String,System.Object)">
            <summary>
              Initializes a new instance of the ConfigChangingArgs class by initializing all of its properties. </summary>
            <param name="section">
              The name of the section involved in the change or null. </param>
            <param name="entry">
              The name of the entry involved in the change, or if changeType is set to Other, the name of the method/property that was changed. </param>
            <param name="value">
              The new value for the entry or method/property, based on the value of changeType. </param>
            <seealso cref="!:ConfigChangeType" />
        </member>
        <member name="P:Nistec.Config.ConfigChangingArgs.Cancel">
            <summary>
              Gets or sets whether the change about to the made should be canceled or not. </summary>
            <remarks> 
              By default this property is set to false, meaning that the change is allowed.  </remarks>
        </member>
        <member name="T:Nistec.Config.ConfigChangingHandler">
            <summary>
              Definition of the <see cref="!:Config.Changing" /> event handler. </summary>
            <remarks>
              This definition complies with the .NET Framework's standard for event handlers.
              The sender is always set to the Config object that raised the event. </remarks>
        </member>
        <member name="T:Nistec.Config.ConfigChangedHandler">
            <summary>
              Definition of the <see cref="!:Config.Changed" /> event handler. </summary>
            <remarks>
              This definition complies with the .NET Framework's standard for event handlers.
              The sender is always set to the Config object that raised the event. </remarks>
        </member>
        <member name="M:Nistec.Config.GenericConfig`1.Start(System.Boolean)">
            <summary>
            Start Cache Synchronization.
            </summary>
        </member>
        <member name="M:Nistec.Config.GenericConfig`1.Stop">
            <summary>
            Stop Cache Synchronization.
            </summary>
        </member>
        <member name="E:Nistec.Config.GenericConfig`1.SyncError">
            <summary>
            Sync Error Event Handler.
            </summary>
        </member>
        <member name="E:Nistec.Config.GenericConfig`1.LoadCompleted">
            <summary>
            Sync LoadCompleted Event Handler.
            </summary>
        </member>
        <member name="M:Nistec.Config.GenericConfig`1.OnError(System.String)">
            <summary>
            On Error Occured
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.Config.GenericConfig`1.LoadConfig">
            <summary>
            Load sync cache from config file.
            </summary>
        </member>
        <member name="M:Nistec.Config.GenericConfig`1.LoadConfigFile(System.String)">
            <summary>
            Load sync cache from config file.
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:Nistec.Config.GenericConfig`1.LoadConfig(System.String)">
            <summary>
            Load sync cache from xml string argument.
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:Nistec.Config.GenericConfig`1.LoadConfig(System.Xml.XmlDocument)">
            <summary>
            Load sync cache from <see cref="T:System.Xml.XmlDocument"/> document.
            </summary>
            <param name="doc"></param>
        </member>
        <member name="T:Nistec.Config.IniConfig">
            <summary>
              Config class that utilizes an INI-formatted file to retrieve and save its data. </summary>
        </member>
        <member name="E:Nistec.Config.IniConfig.Changing">
            <summary>
              Event used to notify that the Config is about to be changed. </summary>
            <seealso cref="E:Nistec.Config.IniConfig.Changed" />
        </member>
        <member name="E:Nistec.Config.IniConfig.Changed">
            <summary>
              Event used to notify that the Config has been changed. </summary>
            <seealso cref="E:Nistec.Config.IniConfig.Changing" />
        </member>
        <member name="M:Nistec.Config.IniConfig.#ctor">
            <summary>
              Initializes a new instance of the Config class by setting the <see cref="P:Nistec.Config.IniConfig.Name" /> to <see cref="P:Nistec.Config.IniConfig.DefaultName" />. </summary>
        </member>
        <member name="M:Nistec.Config.IniConfig.#ctor(System.String)">
            <summary>
              Initializes a new instance of the Config class by setting the <see cref="P:Nistec.Config.IniConfig.Name" /> to a value. </summary>
            <param name="name">
              The name to initialize the <see cref="P:Nistec.Config.IniConfig.Name" /> property with. </param>
        </member>
        <member name="M:Nistec.Config.IniConfig.#ctor(Nistec.Config.IniConfig)">
            <summary>
              Initializes a new instance of the Config class based on another Config object. </summary>
            <param name="Config">
              The Config object whose properties and events are used to initialize the object being constructed. </param>
        </member>
        <member name="P:Nistec.Config.IniConfig.Name">
            <summary>
              Gets or sets the name associated with the Config. </summary>
            <exception cref="T:System.NullReferenceException">
              Setting this property to null. </exception>
            <exception cref="T:System.InvalidOperationException">
              Setting this property if ReadOnly is true. </exception>
        </member>
        <member name="P:Nistec.Config.IniConfig.ReadOnly">
            <summary>
              Gets or sets whether the Config is read-only or not. </summary>
            <exception cref="T:System.InvalidOperationException">
              Setting this property if it's already true. </exception>
        </member>
        <member name="M:Nistec.Config.IniConfig.GetValue(System.String,System.String,System.String)">
            <summary>
              Retrieves the string value of an entry inside a section, or a default value if the entry does not exist. </summary>
            <param name="section">
              The name of the section that holds the entry with the value. </param>
            <param name="entry">
              The name of the entry where the value is stored. </param>
            <param name="defaultValue">
              The value to return if the entry (or section) does not exist. </param>
            <returns>
              The return value is the entry's value converted to a string, or the given default value if the entry does not exist. </returns>
        </member>
        <member name="M:Nistec.Config.IniConfig.GetValue``1(System.String,System.String,``0)">
            <summary>
              Retrieves the generic value of an entry inside a section, or a default value if the entry does not exist. </summary>
            <typeparam name="T"></typeparam>
            <param name="section">
              The name of the section that holds the entry with the value. </param>
            <param name="entry">
              The name of the entry where the value is stored. </param>
            <param name="defaultValue">
              The value to return if the entry (or section) does not exist. </param>
            <returns>
              The return value is the entry's value converted to an generic T value.  If the value
              cannot be converted, or entry does not exist, the
              given default value is returned. </returns>
        </member>
        <member name="M:Nistec.Config.IniConfig.HasEntry(System.String,System.String)">
            <summary>
              Determines if an entry exists inside a section. </summary>
            <param name="section">
              The name of the section that holds the entry. </param>
            <param name="entry">
              The name of the entry to be checked for existence. </param>
            <returns>
              If the entry exists inside the section, the return value is true; otherwise false. </returns>
            <exception cref="T:System.ArgumentNullException">
              section is null. </exception>
        </member>
        <member name="M:Nistec.Config.IniConfig.HasSection(System.String)">
            <summary>
              Determines if a section exists. </summary>
            <param name="section">
              The name of the section to be checked for existence. </param>
            <returns>
              If the section exists, the return value is true; otherwise false. </returns>
        </member>
        <member name="M:Nistec.Config.IniConfig.DataTableToConfig(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            DataTable to Configuration file
            </summary>
            <param name="dt"></param>
            <param name="sectionFieldName"></param>
            <param name="entryFieldName"></param>
            <param name="valueFieldName"></param>
        </member>
        <member name="M:Nistec.Config.IniConfig.ConfigToDataTable(System.String,System.String,System.String,System.String)">
            <summary>
            Configuration file to DataTable
            </summary>
            <param name="mappingName"></param>
            <param name="sectionFieldName"></param>
            <param name="entryFieldName"></param>
            <param name="valueFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Config.IniConfig.ConfigToDataSet">
             <summary>
               Retrieves a DataSet object containing every section, entry, and value in the Config. </summary>
             <returns>
               If the Config exists, the return value is a DataSet object representing the Config; otherwise it's null. </returns>
             <exception cref="T:System.InvalidOperationException">
            	  <see cref="!:Config.Name" /> is null or empty. </exception>
             <remarks>
               The returned DataSet will be named using the <see cref="P:Nistec.Config.IniConfig.Name" /> property.  
               It will contain one table for each section, and each entry will be represented by a column inside the table.
               Each table will contain only one row where the values will stored corresponding to each column (entry). 
            </remarks>
        </member>
        <member name="M:Nistec.Config.IniConfig.DataSetToConfig(System.Data.DataSet)">
             <summary>
               Writes the data of every table from a DataSet into this Config. </summary>
             <param name="ds">
               The DataSet object containing the data to be set. </param>
             <exception cref="T:System.InvalidOperationException">
               <see cref="!:Config.ReadOnly" /> is true or
               <see cref="!:Config.Name" /> is null or empty. </exception>
             <exception cref="T:System.ArgumentNullException">
               ds is null. </exception>
             <remarks>
               Each table in the DataSet represents a section of the Config.  
               Each column of each table represents an entry.  And for each column, the corresponding value
               of the first row is the value to be passed to <see cref="M:Nistec.Config.IniConfig.SetValue(System.String,System.String,System.Object)" />.  
               Note that only the first row is imported; additional rows are ignored.
            </remarks>
        </member>
        <member name="P:Nistec.Config.IniConfig.DefaultNameWithoutExtension">
            <summary>
              Gets the name of the file to be used as the default, without the Config-specific extension. </summary>
            <remarks>
              For Windows applications, this property returns the full path of the executable.  
              For Web applications, this returns the full path of the web.config file without 
              the .config extension.  </remarks>
        </member>
        <member name="M:Nistec.Config.IniConfig.VerifyAndAdjustSection(System.String@)">
            <summary>
              Verifies the given section name is not null and trims it. </summary>
            <param name="section">
              The section name to verify and adjust. </param>
            <exception cref="T:System.ArgumentNullException">
              section is null. </exception>
            <remarks>
              This method may be used by derived classes to make sure that a valid
              section name has been passed, and to make any necessary adjustments to it
              before passing it to the corresponding APIs. </remarks>
        </member>
        <member name="M:Nistec.Config.IniConfig.VerifyAndAdjustEntry(System.String@)">
            <summary>
              Verifies the given entry name is not null and trims it. </summary>
            <param name="entry">
              The entry name to verify and adjust. </param>
            <remarks>
              This method may be used by derived classes to make sure that a valid
              entry name has been passed, and to make any necessary adjustments to it
              before passing it to the corresponding APIs. </remarks>
            <exception cref="T:System.ArgumentNullException">
              entry is null. </exception>
        </member>
        <member name="M:Nistec.Config.IniConfig.VerifyName">
            <summary>
              Verifies the Name property is not empty or null. </summary>
            <remarks>
              This method may be used by derived classes to make sure that the 
              APIs are working with a valid Name (file name) </remarks>
            <exception cref="T:System.InvalidOperationException">
              name is empty or null. </exception>
            <seealso cref="P:Nistec.Config.IniConfig.Name" />
        </member>
        <member name="M:Nistec.Config.IniConfig.VerifyNotReadOnly">
            <summary>
              Verifies the ReadOnly property is not true. </summary>
            <remarks>
              This method may be used by derived classes as a convenient way to 
              validate that modifications to the Config can be made. </remarks>
            <exception cref="T:System.InvalidOperationException">
              ReadOnly is true. </exception>
            <seealso cref="P:Nistec.Config.IniConfig.ReadOnly" />
        </member>
        <member name="M:Nistec.Config.IniConfig.RaiseChangeEvent(System.Boolean,System.String,System.String,System.Object)">
            <summary>
              Raises either the Changing or Changed event. </summary>
            <param name="changing">
              If true, the Changing event is raised otherwise it's Changed. </param>
            <param name="section">
              The name of the section that was involved in the change or null if not applicable. </param>
            <param name="entry">
              The name of the entry that was involved in the change or null if not applicable. 
              If changeType is equal to Other, entry is the name of the property involved in the change.</param>
            <param name="value">
              The value that was changed or null if not applicable. </param>
            <returns>
              The return value is based on the event raised.  If the Changing event was raised, 
              the return value is the opposite of ConfigChangingArgs.Cancel; otherwise it's true.</returns>
            <remarks>
              This method may be used by derived classes as a convenient alternative to calling 
              OnChanging and OnChanged.  For example, a typical call to OnChanging would require
              four lines of code, which this method reduces to two. </remarks>
            <seealso cref="E:Nistec.Config.IniConfig.Changing" />
            <seealso cref="E:Nistec.Config.IniConfig.Changed" />
            <seealso cref="M:Nistec.Config.IniConfig.OnChanging(Nistec.Config.ConfigChangingArgs)" />
            <seealso cref="M:Nistec.Config.IniConfig.OnChanged(Nistec.Config.ConfigChangedArgs)" />
        </member>
        <member name="M:Nistec.Config.IniConfig.OnChanging(Nistec.Config.ConfigChangingArgs)">
            <summary>
              Raises the Changing event. </summary>
            <param name="e">
              The arguments object associated with the Changing event. </param>
            <remarks>
              This method should be invoked prior to making a change to the Config so that the
              Changing event is raised, giving a chance to the handlers to prevent the change from
              happening (by setting e.Cancel to true). This method calls each individual handler 
              associated with the Changing event and checks the resulting e.Cancel flag.  
              If it's true, it stops and does not call of any remaining handlers since the change 
              needs to be prevented anyway. </remarks>
            <seealso cref="E:Nistec.Config.IniConfig.Changing" />
            <seealso cref="M:Nistec.Config.IniConfig.OnChanged(Nistec.Config.ConfigChangedArgs)" />
        </member>
        <member name="M:Nistec.Config.IniConfig.OnChanged(Nistec.Config.ConfigChangedArgs)">
            <summary>
              Raises the Changed event. </summary>
            <param name="e">
              The arguments object associated with the Changed event. </param>
            <remarks>
              This method should be invoked after a change to the Config has been made so that the
              Changed event is raised, giving a chance to the handlers to be notified of the change. </remarks>
            <seealso cref="E:Nistec.Config.IniConfig.Changed" />
            <seealso cref="M:Nistec.Config.IniConfig.OnChanging(Nistec.Config.ConfigChangingArgs)" />
        </member>
        <member name="P:Nistec.Config.IniConfig.DefaultName">
            <summary>
              Gets the default name for the INI file. </summary>
            <remarks>
              For Windows apps, this property returns the name of the executable plus .ini ("program.exe.ini").
              For Web apps, this property returns the full path of <i>web.ini</i> based on the root folder.
              This property is used to set the <see cref="!:Config.Name" /> property inside the default constructor.</remarks>
        </member>
        <member name="M:Nistec.Config.IniConfig.Clone">
            <summary>
              Retrieves a copy of itself. </summary>
            <returns>
              The return value is a copy of itself as an object. </returns>
            <seealso cref="!:Config.CloneReadOnly" />
        </member>
        <member name="M:Nistec.Config.IniConfig.SetValue(System.String,System.String,System.Object)">
            <summary>
              Sets the value for an entry inside a section. If the INI file does not exist, it is created.</summary>
            <param name="section">
              The name of the section that holds the entry. </param>
            <param name="entry">
              The name of the entry where the value will be set. </param>
            <param name="value">
              The value to set. If it's null, the entry is removed. </param>
        </member>
        <member name="M:Nistec.Config.IniConfig.GetValue(System.String,System.String)">
            <summary>
              Retrieves the value of an entry inside a section. </summary>
            <param name="section">
              The name of the section that holds the entry with the value. </param>
            <param name="entry">
              The name of the entry where the value is stored. </param>
            <returns>
              The return value is the entry's value, or null if the entry does not exist. </returns>
        </member>
        <member name="M:Nistec.Config.IniConfig.RemoveEntry(System.String,System.String)">
            <summary>
              Removes an entry from a section. </summary>
            <param name="section">
              The name of the section that holds the entry. </param>
            <param name="entry">
              The name of the entry to remove. </param>
        </member>
        <member name="M:Nistec.Config.IniConfig.RemoveSection(System.String)">
            <summary>
              Removes a section. </summary>
            <param name="section">
              The name of the section to remove. </param>
        </member>
        <member name="M:Nistec.Config.IniConfig.GetEntryNames(System.String)">
            <summary>
              Retrieves the names of all the entries inside a section. </summary>
            <param name="section">
              The name of the section holding the entries. </param>
            <returns>
              If the section exists, the return value is an array with the names of its entries; 
              otherwise it's null. </returns>
        </member>
        <member name="M:Nistec.Config.IniConfig.GetSectionNames">
            <summary>
              Retrieves the names of all the sections. </summary>
            <returns>
              If the INI file exists, the return value is an array with the names of all the sections;
              otherwise it's null. </returns>
            <seealso cref="!:Config.HasSection" />
            <seealso cref="M:Nistec.Config.IniConfig.GetEntryNames(System.String)" />
        </member>
        <member name="P:Nistec.Config.XConfigSettings.AutoSave">
            <summary>
            Get or Set value indicating is XConfig will save changes to config file when each item value has changed, 
            Default is true;
            </summary>
        </member>
        <member name="P:Nistec.Config.XConfigSettings.Filename">
            <summary>
            Get or Set The config full file path.
            Default is (Current Location) + .xconfig;
            </summary>
        </member>
        <member name="P:Nistec.Config.XConfigSettings.RootTag">
            <summary>
            Get or Set The Config root tag.
            Default is appSettings;
            </summary>
        </member>
        <member name="P:Nistec.Config.XConfigSettings.UseFileWatcher">
            <summary>
            Use event of a System.IO.FileSystemWatcher class.
            Default is true;
            </summary>
        </member>
        <member name="P:Nistec.Config.XConfigSettings.Password">
            <summary>
            Get or Set the password for encryption.
            Default is internal password;
            </summary>
        </member>
        <member name="P:Nistec.Config.XConfigSettings.Encrypted">
            <summary>
            Use Encryption configuration.
            Default is false;
            </summary>
        </member>
        <member name="T:Nistec.Config.XConfig">
            <summary>
            Represent a Config file as Dictionary key-value
            <example>
            <sppSttings>
            <myname value='nissim' />
            <mycompany value='mcontrol' />
            </sppSttings>
            </example>
            </summary>
        </member>
        <member name="M:Nistec.Config.XConfig.#ctor(System.String)">
            <summary>
            XConfig ctor with a specefied filename
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Nistec.Config.XConfig.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            XConfig ctor with a specefied Dictionary
            </summary>
            <param name="dict"></param>
        </member>
        <member name="M:Nistec.Config.XConfig.#ctor(Nistec.Config.XConfigSettings)">
            <summary>
            XConfig ctor with default filename CallingAssembly '.mconfig' in current direcory
            </summary>
        </member>
        <member name="M:Nistec.Config.XConfig.InitWatcher">
            <summary>
            Initilaize the file system watcher
            </summary>
        </member>
        <member name="M:Nistec.Config.XConfig.OnFileChanged(System.IO.FileSystemEventArgs)">
            <summary>
            Occoured when file changed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.Config.XConfig.OnFileRenamed(System.IO.RenamedEventArgs)">
            <summary>
            Occoured when file renamed
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Nistec.Config.XConfig.Item(System.String)">
            <summary>
            Get or Set value by key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Config.XConfig.FileExists">
            <summary>
            Get value indicating if the config file exists
            </summary>
        </member>
        <member name="M:Nistec.Config.XConfig.ToDictionary">
            <summary>
            Get all items as IDictionary
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Config.XConfig.Read">
            <summary>
            Read Config File
            </summary>
        </member>
        <member name="M:Nistec.Config.XConfig.Save">
            <summary>
            Save Changes 
            </summary>
        </member>
        <member name="M:Nistec.Config.XConfig.PrintConfig">
            <summary>
            Print all item to Console
            </summary>
        </member>
        <member name="M:Nistec.Config.XConfig.Init">
            <summary>
            Init new config file from dictionary
            </summary>
        </member>
        <member name="T:Nistec.Drawing.ColorUtils">
            <summary>
            Summary description for ColorConvert.
            </summary>
        </member>
        <member name="M:Nistec.Drawing.ColorUtils.StringToColor(System.String)">
            <summary>
            StringToColor
            </summary>
            <param name="colorString"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Drawing.ColorUtils.ColorToString(System.Drawing.Color)">
            <summary>
            ColorToString
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nistec.Drawing.ImageResizer.SaveJpeg(System.String,System.Drawing.Image,System.Int32)" -->
        <member name="M:Nistec.Drawing.ImageResizer.GetEncoder(System.String)">
            <summary> 
            Returns the image codec with the given mime type 
            </summary> 
        </member>
        <member name="T:Nistec.Drawing.ImageUtil">
            <summary>Represents a Image Util control for displaying an image.</summary>
        </member>
        <member name="E:Nistec.Drawing.ImageUtil.LoadCompleted">
            <summary>Occurs when the asynchronous image-load operation is completed, been cancelled or raised an exception.</summary>
        </member>
        <member name="E:Nistec.Drawing.ImageUtil.LoadProgressChanged">
            <summary>Occurs when the progress of an asynchronous image-loading operation has changed.</summary>
        </member>
        <member name="E:Nistec.Drawing.ImageUtil.SizeModeChanged">
            <summary>Occurs when <see cref="P:System.Windows.Forms.PictureBox.SizeMode"></see> changes.</summary>
        </member>
        <member name="M:Nistec.Drawing.ImageUtil.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Windows.Forms.PictureBox"></see> class.</summary>
        </member>
        <member name="M:Nistec.Drawing.ImageUtil.CancelAsync">
            <summary>Cancels an asynchronous image load.</summary>
        </member>
        <member name="M:Nistec.Drawing.ImageUtil.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.PictureBox"></see> and optionally releases the managed resources.</summary>
            <param name="disposing">true to release managed and unmanaged resources; false to release unmanaged resources only.</param>
        </member>
        <member name="M:Nistec.Drawing.ImageUtil.Load">
            <summary>Displays the image specified by the property</summary>
        </member>
        <member name="M:Nistec.Drawing.ImageUtil.Load(System.String)">
            <summary>Sets the <see cref="P:System.Windows.Forms.PictureBox.ImageLocation"></see> to the specified URL and displays the image indicated.</summary>
        </member>
        <member name="M:Nistec.Drawing.ImageUtil.LoadAsync">
            <summary>Loads the image asynchronously.</summary>
        </member>
        <member name="M:Nistec.Drawing.ImageUtil.LoadAsync(System.String)">
            <summary>Loads the image at the specified location, asynchronously.</summary>
        </member>
        <member name="M:Nistec.Drawing.ImageUtil.OnLoadCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.PictureBox.LoadCompleted"></see> event.</summary>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:Nistec.Drawing.ImageUtil.OnLoadProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.PictureBox.LoadProgressChanged"></see> event.</summary>
            <param name="e">A <see cref="T:System.ComponentModel.ProgressChangedEventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:Nistec.Drawing.ImageUtil.OnResize(System.EventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.Resize"></see> event.</summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:Nistec.Drawing.ImageUtil.OnSizeModeChanged(System.EventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.PictureBox.SizeModeChanged"></see> event.</summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:Nistec.Drawing.ImageUtil.ToString">
            <summary>Returns a string that represents the current <see cref="T:System.Windows.Forms.PictureBox"></see> control.</summary>
            <returns>A string that represents the current <see cref="T:System.Windows.Forms.PictureBox"></see>. </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Nistec.Drawing.ImageUtil.ErrorImage">
            <summary>Gets or sets the image to display when an error occurs during the image-loading process or if the image load is cancelled.</summary>
        </member>
        <member name="P:Nistec.Drawing.ImageUtil.Image">
            <summary>Gets or sets the image that the <see cref="T:System.Windows.Forms.PictureBox"></see> displays.</summary>
        </member>
        <member name="P:Nistec.Drawing.ImageUtil.ImageLocation">
            <summary>Gets or sets the path for the image to display in the <see cref="T:System.Windows.Forms.PictureBox"></see>.</summary>
        </member>
        <member name="P:Nistec.Drawing.ImageUtil.InitialImage">
            <summary>Gets or sets the image displayed in the <see cref="T:System.Windows.Forms.PictureBox"></see> control while the main image is loading.</summary>
        </member>
        <member name="P:Nistec.Drawing.ImageUtil.SizeMode">
            <summary>Indicates how the image is displayed.</summary>
        </member>
        <member name="P:Nistec.Drawing.ImageUtil.WaitOnLoad">
            <summary>Gets or sets a value indicating whether an image is loaded synchronously.</summary>
        </member>
        <member name="T:Nistec.Generic.DynamicEntity">
            <summary>
             The class derived from DynamicObject.
            </summary>
        </member>
        <member name="P:Nistec.Generic.DynamicEntity.Count">
            <summary>
            Get the number of elements
            </summary>
        </member>
        <member name="M:Nistec.Generic.DynamicEntity.EntityWrite(System.IO.Stream,Nistec.Serialization.IBinaryStreamer)">
            <summary>
            Write the current object include the body and properties to stream using <see cref="T:Nistec.Serialization.IBinaryStreamer"/>, This method is a part of <see cref="T:Nistec.Serialization.ISerialEntity"/> implementation.
            </summary>
            <param name="stream"></param>
            <param name="streamer"></param>
        </member>
        <member name="M:Nistec.Generic.DynamicEntity.EntityRead(System.IO.Stream,Nistec.Serialization.IBinaryStreamer)">
            <summary>
            Read stream to the current object include the body and properties using <see cref="T:Nistec.Serialization.IBinaryStreamer"/>, This method is a part of <see cref="T:Nistec.Serialization.ISerialEntity"/> implementation.
            </summary>
            <param name="stream"></param>
            <param name="streamer"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nistec.Generic.GenericNameValue.Sorted" -->
        <!-- Badly formed XML comment ignored for member "M:Nistec.Generic.GenericKeyValue`1.Sorted" -->
        <member name="P:Nistec.Generic.GenericKeyValue`1.EnableDuplicate">
            <summary>
            Get or Set if enable duplicate keys, Default is (false)
            </summary>
        </member>
        <member name="T:Nistec.Generic.KeySet">
            <summary>
            Represent KeySet collection
            </summary>
        </member>
        <member name="M:Nistec.Generic.KeySet.ToString">
            <summary>
            Get Keys as string 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nistec.Generic.KeyValueTuple`3">
            <summary>
            Generic tuple for a key and a pair of values
            </summary>
            <typeparam name="TKey">The Type of the key</typeparam>
            <typeparam name="T1">The Type of the first value</typeparam>
            <typeparam name="T2">The Type of the second value</typeparam>    
        </member>
        <member name="P:Nistec.Generic.KeyValueTuple`3.Key">
            <summary>
            The key for the tuple
            </summary>
        </member>
        <member name="P:Nistec.Generic.KeyValueTuple`3.Value1">
            <summary>
            The first value
            </summary>
        </member>
        <member name="P:Nistec.Generic.KeyValueTuple`3.Value2">
            <summary>
            The second value
            </summary>
        </member>
        <member name="M:Nistec.Generic.KeyValueTuple`3.#ctor(`0,`1,`2)">
            <summary>
            Creates a new tuple with the given key and values
            </summary>
        </member>
        <member name="T:Nistec.Generic.KeyValueTuple`4">
            <summary>
            Generic tuple for a key and a trio of values
            </summary>
            <typeparam name="TKey">The Type of the key</typeparam>
            <typeparam name="T1">The Type of the first value</typeparam>
            <typeparam name="T2">The Type of the second value</typeparam>
            <typeparam name="T3">The Type of the third value</typeparam>
        </member>
        <member name="P:Nistec.Generic.KeyValueTuple`4.Key">
            <summary>
            The key for the tuple
            </summary>
        </member>
        <member name="P:Nistec.Generic.KeyValueTuple`4.Value1">
            <summary>
            The first value
            </summary>
        </member>
        <member name="P:Nistec.Generic.KeyValueTuple`4.Value2">
            <summary>
            The second value
            </summary>
        </member>
        <member name="P:Nistec.Generic.KeyValueTuple`4.Value3">
            <summary>
            The third value
            </summary>
        </member>
        <member name="M:Nistec.Generic.KeyValueTuple`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Creates a new tuple with the given key and values
            </summary>
        </member>
        <member name="T:Nistec.Generic.KeyValueTuple`5">
            <summary>
            Generic tuple for a key and a quartet of values
            </summary>
            <typeparam name="TKey">The Type of the key</typeparam>
            <typeparam name="T1">The Type of the first value</typeparam>
            <typeparam name="T2">The Type of the second value</typeparam>
            <typeparam name="T3">The Type of the third value</typeparam>
            <typeparam name="T4">The Type of the fourth value</typeparam>
        </member>
        <member name="P:Nistec.Generic.KeyValueTuple`5.Key">
            <summary>
            The key for the tuple
            </summary>
        </member>
        <member name="P:Nistec.Generic.KeyValueTuple`5.Value1">
            <summary>
            The first value
            </summary>
        </member>
        <member name="P:Nistec.Generic.KeyValueTuple`5.Value2">
            <summary>
            The second value
            </summary>
        </member>
        <member name="P:Nistec.Generic.KeyValueTuple`5.Value3">
            <summary>
            The third value
            </summary>
        </member>
        <member name="P:Nistec.Generic.KeyValueTuple`5.Value4">
            <summary>
            The fourth value
            </summary>
        </member>
        <member name="M:Nistec.Generic.KeyValueTuple`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Creates a new tuple with the given key and values
            </summary>
        </member>
        <member name="T:Nistec.Generic.GenericRecord">
            <summary>
            Represent Serializable Generic Dictionary that implement <see cref="T:Nistec.Serialization.ISerialEntity"/> and <see cref="T:Nistec.Serialization.IEntityDictionary"/>.
            </summary>
        </member>
        <member name="M:Nistec.Generic.GenericRecord.GetValue(System.String)">
            <summary>
            GetValue
            </summary>
            <param name="field">the column name in data row</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Generic.GenericRecord.GetValue``1(System.String)">
            <summary>
            GetValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <returns>T</returns>
        </member>
        <member name="M:Nistec.Generic.GenericRecord.GetValue``1(System.String,``0)">
            <summary>
            GetValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <returns>if null or error return defaultValue</returns>
            <returns>T</returns>
        </member>
        <member name="M:Nistec.Generic.GenericRecord.TryGetValue``1(System.String,``0@)">
             <summary>
                 Gets the value associated with the specified key.
             </summary>
             <typeparam name="T"></typeparam>
             <param name="field">The key whose value to get.</param>
             <param name="value">
                 When this method returns, the value associated with the specified key, if
                 the key is found; otherwise, the default value for the type of the value
                 parameter. This parameter is passed uninitialized.
            </param>
             <returns>
                 true if the object that implements System.Collections.Generic.IDictionary
                 contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Nistec.Generic.GenericRecord.TryGetValue(System.String,System.Object@)">
             <summary>
                 Gets the value associated with the specified key.
             </summary>
             <param name="field">The key whose value to get.</param>
             <param name="value">
                 When this method returns, the value associated with the specified key, if
                 the key is found; otherwise, the default value for the type of the value
                 parameter. This parameter is passed uninitialized.
            </param>
             <returns>
                 true if the object that implements System.Collections.Generic.IDictionary
                 contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Nistec.Generic.GenericRecord.TryGetValue(System.String,System.Type,System.Object@)">
             <summary>
              Gets the value associated with the specified key.
             </summary>
             <param name="field">The key whose value to get.</param>
             <param name="type"></param>
             <param name="value">
                 When this method returns, the value associated with the specified key, if
                 the key is found; otherwise, the default value for the type of the value
                 parameter. This parameter is passed uninitialized.
            </param>
             <returns>
                 true if the object that implements System.Collections.Generic.IDictionary
                 contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Nistec.Generic.GenericRecord.SetValue``1(System.String,``0)">
            <summary>
            SetValue
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <param name="value">the T value to insert</param>
        </member>
        <member name="M:Nistec.Generic.GenericRecord.SetValue(System.String,System.Object)">
            <summary>
            SetValue
            </summary>
            <param name="field">the column name in data row</param>
            <param name="value">the value to insert</param>
        </member>
        <member name="M:Nistec.Generic.GenericRecord.SetValue(System.Object,System.Object)">
            <summary>
            SetValue
            </summary>
            <param name="field">the column name in data row</param>
            <param name="value">the value to insert</param>
        </member>
        <member name="M:Nistec.Generic.GenericRecord.CompareValues``1(System.String,``0)">
            <summary>
            Compare Values between current field value and valueToComparee
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field">the column name in data row</param>
            <param name="valueToCompare">the T value to Compare</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Generic.GenericRecord.CompareValues(System.String,System.Object)">
            <summary>
            Compare Values between current field value and valueToComparee
            </summary>
            <param name="field">the column name in data row</param>
            <param name="valueToCompare">the value to Compare</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Generic.GenericRecord.Compare``1(``0,``0)">
            <summary>
             Compare  Values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Generic.GenericRecord.Compare(Nistec.Generic.GenericRecord)">
            <summary>
            Compare between 2 GenericRecords
            </summary>
            <param name="gr"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Generic.GenericRecord.IsEmpty">
            <summary>
            Get Indicate if GenericRecord is Empty
            </summary>
        </member>
        <member name="M:Nistec.Generic.GenericRecord.ToJson(System.Boolean)">
            <summary>
            Convert GenericRecord to Json string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Generic.GenericRecord.ToDataRow">
            <summary>
            Convert GenericRecord to DataRow
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Generic.GenericRecord.AddTo(System.Data.DataTable,System.Boolean)">
            <summary>
            Add current record to specified DataTable using fields list
            </summary>
            <param name="table"></param>
            <param name="enableIdentity"></param>
        </member>
        <member name="M:Nistec.Generic.GenericRecord.Print(System.String,System.String)">
            <summary>
            Display data as Vertical view, 
            </summary>
            <param name="headerName"></param>
            <param name="headerValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Generic.GenericRecord.Sorted">
            <summary>
            Get this as sorted.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nistec.Generic.KeyValueArgs.Sorted" -->
        <!-- Badly formed XML comment ignored for member "M:Nistec.Generic.NameValueArgs.Sorted" -->
        <member name="T:Nistec.Generic.GenericException`1">
            <summary>
            Represents errors that occur during application execution
            </summary>
        </member>
        <member name="M:Nistec.Generic.GenericException`1.#ctor">
            <summary>
            Initializes a new instance of the Exception class.
            </summary>
        </member>
        <member name="M:Nistec.Generic.GenericException`1.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the Exception class with a specified error message.
            </summary>
            <param name="ex">The message that describes the error.</param>
        </member>
        <member name="M:Nistec.Generic.GenericException`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Exception class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Nistec.Generic.GenericException`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the Exception class with a specified error message and state.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="state">The value that describes the error state.</param>
        </member>
        <member name="M:Nistec.Generic.GenericException`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Exception class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Nistec.Generic.GenericException`1.#ctor(System.String,`0,System.Exception)">
            <summary>
            Initializes a new instance of the Exception class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="state">The value that describes the error state.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:Nistec.Generic.NetConfig">
            <summary>
            NetConfig is wrapper of ConfigurationManager
            </summary>
        </member>
        <member name="M:Nistec.Generic.NetConfig.GetCustomConfig(System.String,System.Boolean)">
            <summary>
            CacheSettings ctor
            </summary>
            <param name="elementName"></param>
            <param name="isWeb"></param>
        </member>
        <member name="T:Nistec.Generic.NetConfigSection">
            <summary>
            Represent a configuration section within a configuration file.
            </summary>
        </member>
        <member name="M:Nistec.Generic.NetConfigSection.GetConfig(System.String)">
            <summary>
            Get <see cref="T:Nistec.Generic.NetConfigSection"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nistec.Generic.NetConfigItem">
            <summary>
            Represents a configuration element within a configuration file.
            </summary>
        </member>
        <member name="T:Nistec.Generic.NetConfigItems">
            <summary>
            Represents a configuration element containing a collection of child elements.
            </summary>
        </member>
        <member name="M:Nistec.Generic.EnumExtension.Parse``1(System.String)">
            <summary>
             Converts the string representation of the name or numeric value of one or
             more enumerated constants to an equivalent enumerated object. A string parameter
             is not case-insensitive.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nistec.Generic.EnumExtension.GetEnumFlags``1(System.String,``0)" -->
        <member name="M:Nistec.Generic.UUID.NewId">
            <summary>
            Create new unique from base62
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Generic.UUID.CLSIDFromString(System.String,System.Guid@)">
            <summary>
            This function converts a string generated by the StringFromCLSID function back into the original class identifier.
            </summary>
            <param name="sz">String that represents the class identifier</param>
            <param name="clsid">On return will contain the class identifier</param>
            <returns>
            Positive or zero if class identifier was obtained successfully
            Negative if the call failed
            </returns>
        </member>
        <member name="T:Nistec.Generic.ILocalizer">
            <summary>
            EntityLang interface
            </summary>
        </member>
        <member name="T:Nistec.Generic.XmlTable">
            <summary>
            Represents simple xml serializable/deserializable name/value table.
            </summary>
        </member>
        <member name="M:Nistec.Generic.XmlTable.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nistec.Generic.XmlTable.#ctor(System.String,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nistec.Generic.XmlTable.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor using XmlNode.Attributes.
            </summary>
        </member>
        <member name="M:Nistec.Generic.XmlTable.#ctor(System.Xml.XmlNode,System.String)">
            <summary>
            Constructor using XmlNode.Attributes.
            </summary>
        </member>
        <member name="M:Nistec.Generic.XmlTable.Add(System.String,System.String)">
            <summary>
            Adds name/value to table.
            </summary>
            <param name="key">Key of the value pair.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Nistec.Generic.XmlTable.Add(System.String,System.Int32)">
            <summary>
            Adds name/value to table.
            </summary>
            <param name="key">Key of the value pair.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Nistec.Generic.XmlTable.ContainsKey(System.String)">
            <summary>
            Determines whether the XmlTable contains the specified key.
            </summary>
            <param name="key">Key of value to get.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Generic.XmlTable.ContainsValue(System.Object)">
            <summary>
            Determines whether the XmlTable contains the specified value.
            </summary>
            <param name="value">value to get.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Generic.XmlTable.GetValue(System.String)">
            <summary>
            Gets value from name/value table.
            </summary>
            <param name="key">Key of value to get.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Generic.XmlTable.Get``1(System.String)">
            <summary>
            Gets value from name/value table.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Generic.XmlTable.Get``1(System.String,``0)">
            <summary>
            Gets value from name/value table.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="valueIfNull"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Generic.XmlTable.GetEnum``1(System.String,``0)">
            <summary>
            Gets value from name/value table.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="valueIfNull"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Generic.XmlTable.Parse(System.Byte[],System.Boolean)">
            <summary>
            Parses table from byte[] xml data.
            </summary>
            <param name="data">Table data.</param>
            <param name="isMulti"></param>
        </member>
        <member name="M:Nistec.Generic.XmlTable.ToStringData">
            <summary>
            Returns string representation of xml table.
            </summary>
            <returns>Returns string representation of xml table.</returns>
        </member>
        <member name="M:Nistec.Generic.XmlTable.ToByteData">
            <summary>
            Returns byte[] representation of xml table.
            </summary>
            <returns>Returns byte[] representation of xml table.</returns>
        </member>
        <member name="M:Nistec.Generic.XmlTable.ToXml">
            <summary>
            Returns XmlDocument representation of xml table.
            </summary>
            <returns>Returns XmlDocument representation of xml table.</returns>
        </member>
        <member name="M:Nistec.Generic.XmlTable.ToDataTable">
            <summary>
            Returns DataTable representation of xml table.
            </summary>
            <returns>Returns byte[] representation of xml table.</returns>
        </member>
        <member name="P:Nistec.Generic.XmlTable.TableName">
            <summary>
            Gets or sets table name.
            </summary>
        </member>
        <member name="P:Nistec.Generic.XmlTable.IsMulti">
            <summary>
            Gets indicate wether is multi rows.
            </summary>
        </member>
        <member name="M:Nistec.Generic.XmlTable.OnError(System.String)">
            <summary>
            OnErrorOccured
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Nistec.IO.BinaryConverter">
            <summary>
            Represent a binary streamer such as binary write and reader.
            </summary>
        </member>
        <member name="M:Nistec.IO.BinaryConverter.GetBytes(System.DateTime)">
            <summary>
            Convert DateTime value to byte[8].
            </summary>
            <param name="val">DateTime value.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.BinaryConverter.ReadDateTime(System.Byte[])">
            <summary>
            Converts 8 bytes to DateTime value. Offset byte is included.
            </summary>
            <param name="buffer">Data array.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.BinaryConverter.ReadDateTime(System.Byte[],System.Int32)">
            <summary>
            Converts 8 bytes to DateTime value. Offset byte is included.
            </summary>
            <param name="buffer">Data array.</param>
            <param name="offset">Offset where 8 bytes long value starts. Offset byte is included.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.MapStream.#ctor">
            <summary>
            Initialize a new instance of MapStream.
            </summary>
        </member>
        <member name="M:Nistec.IO.MapStream.#ctor(System.Byte[])">
            <summary>
            Initialize a new instance of MapStream.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Nistec.IO.MapStream.#ctor(Nistec.IO.VersionStream,System.Object[])">
            <summary>
            Initialize a new instance of MapStream.
            </summary>
            <param name="version"></param>
            <param name="values"></param>
        </member>
        <member name="M:Nistec.IO.Win32Io.LockFileEx(System.IntPtr,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Nistec.IO.Win32Io.OVERLAPPED@)">
             Return Type: BOOL->int 
            hFile: HANDLE->void* 
            dwFlags: DWORD->unsigned int 
            dwReserved: DWORD->unsigned int 
            nNumberOfBytesToLockLow: DWORD->unsigned int 
            nNumberOfBytesToLockHigh: DWORD->unsigned int 
            lpOverlapped: LPOVERLAPPED->_OVERLAPPED* 
        </member>
        <member name="M:Nistec.IO.FileStreamHelper.GetFiles(System.String[],System.String[],System.IO.SearchOption)">
            <summary>
            Returns the names of files in a specified directories that match the specified patterns using LINQ
            </summary>
            <param name="srcDirs">The directories to seach</param>
            <param name="searchPatterns">the list of search patterns</param>
            <param name="searchOption"></param>
            <returns>The list of files that match the specified pattern</returns>
        </member>
        <member name="M:Nistec.IO.FileStreamHelper.WriteToFile(System.String,System.String,System.Boolean)">
            <summary>
            Save a string to file.
            </summary>
            <param name="value">String value to save.</param>
            <param name="fileName">File name to save to.</param>
            <param name="appendToFile">True - to append string to file.  Default false - overwrite file.</param>
        </member>
        <member name="M:Nistec.IO.StreamExtension.PeekDateTime(Nistec.IO.NetStream,System.Int32)">
            <summary>
            Peek a bytes from given offset and return a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.StreamExtension.PeekString(Nistec.IO.NetStream,System.Int32,System.Int32)">
            <summary>
            Peek a range of bytes from given offset and count.
            </summary>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.StreamExtension.PeekString(Nistec.IO.NetStream,System.Int32,System.Int32@)">
            <summary>
            Peek a range of bytes from given offset and offset+1 for count.
            </summary>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.StreamExtension.PeekLastBytes(Nistec.IO.NetStream,System.Int32)">
            <summary>
            Peek a range of the last bytes from given count.
            </summary>
            <param name="stream"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.StreamExtension.PeekStream(Nistec.IO.NetStream,System.Int32,System.Int32)">
            <summary>
            Peek a range of bytes from given offset and count.
            </summary>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.StreamExtension.PeekStream(Nistec.IO.NetStream,System.Int32,System.Int32@)">
            <summary>
            Peek a range of bytes from given offset and offset+1 for count.
            </summary>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.IO.StreamLineReader">
            <summary>
            Stream reader.
            </summary>
        </member>
        <member name="M:Nistec.IO.StreamLineReader.#ctor(System.IO.Stream)">
            <summary>
            Initialize a new instance of <see cref="T:System.IO.StreamReader"/>.
            </summary>
            <param name="strmSource">Source stream from where to read data. Reading begins from stream current position.</param>
        </member>
        <member name="M:Nistec.IO.StreamLineReader.ReadBlock(System.Int32)">
            <summary>
            Reads byte[] block from stream.
            </summary>
            <returns>Return null if end of stream reached.</returns>
        </member>
        <member name="M:Nistec.IO.StreamLineReader.ReadLine">
            <summary>
            Reads byte[] line from stream. NOTE: Returns null if end of stream reached.
            </summary>
            <returns>Return null if end of stream reached.</returns>
        </member>
        <member name="M:Nistec.IO.StreamLineReader.ReadLineString">
            <summary>
            Reads string line from stream. String is converted with specified Encoding property from byte[] line. NOTE: Returns null if end of stream reached.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nistec.IO.StreamLineReader.Encoding">
            <summary>
            Gets or sets charset encoding to use for string based methods. Default("") encoding is system default encoding.
            </summary>
        </member>
        <member name="P:Nistec.IO.StreamLineReader.CRLF_LinesOnly">
            <summary>
            Gets or sets if lines must be CRLF terminated or may be only LF terminated too.
            </summary>
        </member>
        <member name="T:Nistec.IO.NetStream">
            <summary>
            Provides a generic view of a sequence of bytes, using especially for serialization. 
            </summary>
        </member>
        <member name="M:Nistec.IO.NetStream.CopyStream(System.IO.Stream,System.Int32)">
            <summary>
            Copy stream to a new instance of <see cref="T:Nistec.IO.NetStream"/>.
            </summary>
            <param name="stream"></param>
            <param name="BufferSize"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.NetStream.CopyFrom(System.IO.Pipes.PipeStream,System.Int32)">
            <summary>
            Clear the current stream and Copy the given <see cref="T:System.IO.Pipes.PipeStream"/> to the current <see cref="T:Nistec.IO.NetStream"/>.
            </summary>
            <param name="stream"></param>
            <param name="BufferSize"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.CopyBlock(System.IO.Pipes.PipeStream,System.Int32)">
            <summary>
            Clear the current stream and Copy the given <see cref="T:System.IO.Pipes.PipeStream"/> to the current <see cref="T:Nistec.IO.NetStream"/>.
            </summary>
            <param name="stream"></param>
            <param name="BufferSize"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.CopyWithTerminateCount(System.Net.Sockets.NetworkStream,System.Int32,System.Int32)">
            <summary>
            Clear the current stream and Copy the given <see cref="T:System.Net.Sockets.NetworkStream"/> to the current <see cref="T:Nistec.IO.NetStream"/>.
            
            </summary>
            <param name="stream"></param>
            <param name="readTimeout">specifies the amount of time, in milliseconds, that will elapse before a read operation fails.</param>
            <param name="BufferSize"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.CopyFrom(System.Net.Sockets.NetworkStream,System.Int32,System.Int32,System.Int32)">
            <summary>
            Clear the current stream and Copy the given <see cref="T:System.Net.Sockets.NetworkStream"/> to the current <see cref="T:Nistec.IO.NetStream"/>.
            </summary>
            <param name="stream"></param>
            <param name="readTimeout">specifies the amount of time, in milliseconds, that will elapse before a read operation fails.</param>
            <param name="BufferSize"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.Copy">
            <summary>
            Get a copy of current stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.NetStream.Copy(System.Int32)">
            <summary>
            Get a copy of current stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.NetStream.Copy(System.Int32,System.Int32)">
            <summary>
            Get a copy of current stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.NetStream.Ready">
            <summary>
            Get the current stream ready to seek in position 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.NetStream.ToBase64String">
            <summary>
            Convert to base 64 string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.NetStream.FromBase64String(System.String)">
            <summary>
            Get a new instance of <see cref="T:Nistec.IO.NetStream"/> converted from base 64 string.
            </summary>
            <param name="base64String"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.NetStream.SaveToFile(System.String)">
            <summary>
            Save the current stream to file.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.#ctor">
            <summary>
            Initialize a new instance of NetStream.
            </summary>
        </member>
        <member name="M:Nistec.IO.NetStream.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of NetStream.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.#ctor(System.Byte[])">
            <summary>
            Initialize a new instance of NetStream.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Initialize a new instance of NetStream.
            </summary>
            <param name="buffer"></param>
            <param name="writable"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of NetStream.
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initialize a new instance of NetStream.
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <param name="writable"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initialize a new instance of NetStream.
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <param name="writable"></param>
            <param name="publiclyVisible"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.PeekInt64(System.Int32)">
            <summary>
            Peek a bytes from given offset and return a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.NetStream.PeekInt32(System.Int32)">
            <summary>
            Peek a bytes from given offset and return a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.NetStream.PeekByte(System.Int32)">
            <summary>
            Peek a byte from given offset and return it as a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.NetStream.PeekBytes(System.Int32,System.Int32)">
            <summary>
            Peek a range of bytes from given offset and count.
            </summary>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.NetStream.Replace(System.Int32,System.Int32)">
            <summary>
            Replace a range of bytes in buffer to an int value from offset and value parameters.
            </summary>
            <param name="value"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.Replace(System.Int64,System.Int32)">
            <summary>
            Replace a range of bytes in buffer to an long value from offset and value parameters.
            </summary>
            <param name="value"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.Replace(System.Byte,System.Int32)">
            <summary>
            Replace a range of bytes in buffer to an byte value from offset and value parameters.
            </summary>
            <param name="value"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.Replace(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Replace a range of bytes in buffer from byte array and offset parameters.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Nistec.IO.NetStream.GetBuffer">
            <summary>
            Get the current buffer as byte array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.NetStream.ObjectInvariant">
            <summary>
            Provides support for a System.Diagnostics.Contracts.Contract.
            </summary>
        </member>
        <member name="M:Nistec.IO.NetStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.NetStream.ReadCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read Core is a virtual method for overriding when read.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.ReadInt32(System.Int32)">
            <summary>
            Read a bytes from given offset and return a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.NetStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream
                by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.NetStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset"></param>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.NetStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.ToArray">
            <summary>
            Get the current stream as a byte array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.IO.NetStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current
                stream and advances the current position within this stream by the number
                of bytes written.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.WriteCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write Core is a virtual method for overriding when write.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.WriteByte(System.Byte)">
            <summary>
             Writes a byte to the current position in the stream and advances the position
                within the stream by one byte.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.WriteTo(System.IO.Stream)">
            <summary>
            Write the current stream to a given stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Nistec.IO.NetStream.Write(Nistec.IO.NetStream,System.Int32,System.Int32)">
            <summary>
            Write the current stream to a given stream.
            </summary>
            <param name="stream"></param>
            <param name="offset"></param>
            <param name="limitCount"></param>
        </member>
        <member name="P:Nistec.IO.NetStream.CanRead">
            <summary>
            Get a value indicating whether the current
                stream supports reading.
            </summary>
        </member>
        <member name="P:Nistec.IO.NetStream.CanSeek">
            <summary>
            Get a value indicating whether the current
                stream supports seeking.
            </summary>
        </member>
        <member name="P:Nistec.IO.NetStream.CanWrite">
            <summary>
            Get a value indicating whether the current
                stream supports writing.
            </summary>
        </member>
        <member name="P:Nistec.IO.NetStream.Capacity">
            <summary>
            Get or Set the capacity of current stream.
            </summary>
        </member>
        <member name="P:Nistec.IO.NetStream.Length">
            <summary>
            Get the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:Nistec.IO.NetStream.iLength">
            <summary>
            Get the length in bytes of the stream as int.
            </summary>
        </member>
        <member name="P:Nistec.IO.NetStream.Position">
            <summary>
            Get or sets the position within the
                current stream.
            </summary>
        </member>
        <member name="T:Nistec.IO.StreamHelper">
            <summary>
            A class that helps save and load with stream persistence
            </summary>
        </member>
        <member name="M:Nistec.IO.StreamHelper.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Nistec.Runtime.Advanced.SyncTimerState">
            <summary>
            SyncTimercState
            </summary>
        </member>
        <member name="F:Nistec.Runtime.Advanced.SyncTimerState.Idle">
            <summary>
            SyncTimercState is in idle
            </summary>
        </member>
        <member name="F:Nistec.Runtime.Advanced.SyncTimerState.ShouldStart">
            <summary>
            SyncTimercState Should Start
            </summary>
        </member>
        <member name="F:Nistec.Runtime.Advanced.SyncTimerState.Started">
            <summary>
            SyncTimercState is Started
            </summary>
        </member>
        <member name="F:Nistec.Runtime.Advanced.SyncTimerState.Finished">
            <summary>
            SyncTimercState is Stoped
            </summary>
        </member>
        <member name="T:Nistec.Runtime.Advanced.ISyncItem">
            <summary>
            ISyncItem
            </summary>
        </member>
        <member name="P:Nistec.Runtime.Advanced.ISyncItem.Expiration">
            <summary>
            Get Expiration
            </summary>
        </member>
        <member name="M:Nistec.Runtime.Advanced.ISyncItem.SyncExpired">
            <summary>
            Sync Expired
            </summary>
        </member>
        <member name="M:Nistec.Runtime.Advanced.ISyncItem.DoSync">
            <summary>
            Do Sync
            </summary>
        </member>
        <member name="T:Nistec.Runtime.Advanced.SyncItemEventHandler`1">
            <summary>
            SyncItemCompletedEventHandler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Nistec.Runtime.Advanced.SyncItemEventArgs`1">
            <summary>
            CacheEventArgs
            </summary>
        </member>
        <member name="M:Nistec.Runtime.Advanced.SyncItemEventArgs`1.#ctor(`0)">
            <summary>
            SyncItemCompletedEventArgs
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Nistec.Runtime.Advanced.SyncItemEventArgs`1.Item">
            <summary>
            Items
            </summary>
        </member>
        <member name="T:Nistec.Runtime.Sandbox">
             <summary>
             This method lets you hoist the compilation process outside of the sandboxed AppDomain, which is a plus
            For reference, This class created to facilitate the launching of script assemblies in a clean separate AppDomain that has limited permissions and can be easily unloaded when necessary.
            Note: if you use this method to supply security evidence for the new AppDomain, you need to sign your assembly to give it a strong name.
            Note:this works fine when run in process, but for a bullet-proof script environment, you need to isolate the script in a separate process to ensure that scripts that do malicious (or just stupid) things like stack overflows, fork bombs, and out of memory situations don't bring down the whole application process.
             </summary>
        </member>
        <member name="M:Nistec.Runtime.Sandbox.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Nistec.Runtime.Sandbox.Create">
            <summary>
            Create assembly as Sandbox.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.Sandbox.Execute(System.String,System.String,System.String,System.Object[])">
            <summary>
            Execute assembly.
            </summary>
            <param name="assemblyPath"></param>
            <param name="scriptType"></param>
            <param name="method"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="P:Nistec.Runtime.IMessageStream.Id">
            <summary>
            Get or Set the message key.
            </summary>
        </member>
        <member name="P:Nistec.Runtime.IMessageStream.Formatter">
            <summary>
            Get or Set The serializer formatter.
            </summary>
        </member>
        <member name="P:Nistec.Runtime.IMessageStream.Label">
            <summary>
            Get or Set the message detail.
            </summary>
        </member>
        <member name="P:Nistec.Runtime.IMessageStream.GroupId">
            <summary>
            Get or Set the message group.
            </summary>
        </member>
        <member name="P:Nistec.Runtime.IMessageStream.Command">
            <summary>
            Get or Set the message command.
            </summary>
        </member>
        <member name="P:Nistec.Runtime.IMessageStream.Sender">
            <summary>
            Get or Set who send the message.
            </summary>
        </member>
        <member name="P:Nistec.Runtime.IMessageStream.DuplexType">
            <summary>
            Get or Set indicate wether the message is a duplex type.
            </summary>
        </member>
        <member name="P:Nistec.Runtime.IMessageStream.Expiration">
            <summary>
             Get or Set The message expiration.
            </summary>
        </member>
        <member name="P:Nistec.Runtime.IMessageStream.Modified">
            <summary>
            Get or Set the last time that message was modified.
            </summary>
        </member>
        <member name="P:Nistec.Runtime.IMessageStream.Args">
            <summary>
            Get or Set the extra arguments for current message.
            </summary>
        </member>
        <member name="P:Nistec.Runtime.IMessageStream.TransformType">
            <summary>
            Get or Set the transform type name.
            </summary>
        </member>
        <member name="M:Nistec.Runtime.IMessageStream.ToJson(System.Boolean)">
            <summary>
            Get entity as json
            </summary>
            <param name="pretty"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.IMessageStream.GetStream">
            <summary>
            Get body stream ready to read from position 0.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nistec.Runtime.SysFileWatcher">
            <summary>
            Represent a wrapper functionality for FileSystemWatcher,
            that Listens to the file system change notifications and raises events when a
            directory, or file in a directory, changes.
            </summary>
        </member>
        <member name="F:Nistec.Runtime.SysFileWatcher.DefaultFileName">
            <summary>
            Default file name.
            </summary>
        </member>
        <member name="F:Nistec.Runtime.SysFileWatcher.DefaultFileFilter">
            <summary>
            Default file filter
            </summary>
        </member>
        <member name="P:Nistec.Runtime.SysFileWatcher.SyncPath">
            <summary>
            Get the system file path.
            </summary>
        </member>
        <member name="P:Nistec.Runtime.SysFileWatcher.Filename">
            <summary>
            Get the file name to watch.
            </summary>
        </member>
        <member name="P:Nistec.Runtime.SysFileWatcher.FileFilter">
            <summary>
            Get the file filter was specified by user.
            </summary>
        </member>
        <member name="E:Nistec.Runtime.SysFileWatcher.FileChanged">
            <summary>
            File System Event Handler
            </summary>
        </member>
        <member name="M:Nistec.Runtime.SysFileWatcher.OnFileChanged(System.IO.FileSystemEventArgs)">
            <summary>
            Occured when file has been changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.Runtime.SysFileWatcher.#ctor">
            <summary>
            Initialize a new instance of SysFileWatcher
            </summary>
        </member>
        <member name="M:Nistec.Runtime.SysFileWatcher.#ctor(System.String)">
            <summary>
            Initialize a new instance of SysFileWatcher
            </summary>
            <param name="fpath"></param>
        </member>
        <member name="M:Nistec.Runtime.SysFileWatcher.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of SysFileWatcher
            </summary>
            <param name="fpath"></param>
            <param name="fileFilter"></param>
        </member>
        <member name="M:Nistec.Runtime.SysFileWatcher.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize a new instance of SysFileWatcher
            </summary>
            <param name="fpath"></param>
            <param name="usefileNameAsFilter"></param>
        </member>
        <member name="P:Nistec.Runtime.SysFileWatcher.LastTimeRead">
            <summary>
            Get the last time file was readed.
            </summary>
        </member>
        <member name="P:Nistec.Runtime.SysFileWatcher.LastFileRead">
            <summary>
            Get the last file name was readed.
            </summary>
        </member>
        <member name="T:Nistec.Runtime.AssemblyExec">
            <summary>
            Executes "public static void Main(..)" of assembly in a separate domain.
            </summary>
        </member>
        <member name="M:Nistec.Runtime.AssemblyExec.InvokeAssembly(System.String,System.String,System.String,System.Object[])">
            <summary>
            Invoke assembly (dll)
            </summary>
            <param name="fileName"></param>
            <param name="ClassName"></param>
            <param name="methodName"></param>
            <param name="Params"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Runtime.AssemblyResolver">
            <summary>
            Class for resolving assembly name to assembly file
            </summary>
        </member>
        <member name="F:Nistec.Runtime.AssemblyResolver.ignoreFileName">
            <summary>
            File to be excluded from assembly search
            </summary>
        </member>
        <member name="M:Nistec.Runtime.AssemblyResolver.ResolveAssembly(System.String,System.String)">
            <summary>
            Resolves assembly name to assembly file
            </summary>
            <param name="assemblyName">The name of assembly</param>
            <param name="workingDir">The name of directory where local assemblies are expected to be</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.AssemblyResolver.FindAssembly(System.String,System.String)">
            <summary>
            Resolves namespace into array of assembly locations (local and GAC ones).
            </summary>
        </member>
        <member name="M:Nistec.Runtime.AssemblyResolver.FindLocalAssembly(System.String,System.String)">
            <summary>
            Resolves namespace into array of local assembly locations.
            (it returns only one assembly location)
            </summary>
        </member>
        <member name="M:Nistec.Runtime.AssemblyResolver.FindGlobalAssembly(System.String)">
            <summary>
            Resolves namespace into array of global assembly (GAC) locations.
            </summary>
        </member>
        <member name="M:Nistec.Runtime.AssemblyResolver.IsNamespaceDefinedInAssembly(System.String,System.String)">
            <summary>
            Search for namespace into local assembly file.
            </summary>
        </member>
        <member name="T:Nistec.Runtime.COM">
            <summary>
            COM HR checker: just to make code more compact;
            </summary>
        </member>
        <member name="T:Nistec.Runtime.IAssemblyCache">
            <summary>
            IAssemblyCache; COM import
            </summary>
        </member>
        <member name="T:Nistec.Runtime.IAssemblyName">
            <summary>
            IAssemblyName; COM import
            </summary>
        </member>
        <member name="T:Nistec.Runtime.IAssemblyEnum">
            <summary>
            IAssemblyEnum; COM import
            </summary>
        </member>
        <member name="T:Nistec.Runtime.AssemblyCommitFlags">
            <summary>
            AssemblyCommitFlags; Used by COM imported calls 
            </summary>
        </member>
        <member name="T:Nistec.Runtime.AssemblyCacheFlags">
            <summary>
            AssemblyCacheFlags; Used by COM imported calls
            </summary>
        </member>
        <member name="T:Nistec.Runtime.AssemblyCacheUninstallDisposition">
            <summary>
            AssemblyCacheUninstallDisposition; Used by COM imported calls
            </summary>
        </member>
        <member name="T:Nistec.Runtime.CreateAssemblyNameObjectFlags">
            <summary>
            CreateAssemblyNameObjectFlags; Used by COM imported calls
            </summary>
        </member>
        <member name="T:Nistec.Runtime.AssemblyNameDisplayFlags">
            <summary>
            AssemblyNameDisplayFlags; Used by COM imported calls
            </summary>
        </member>
        <member name="T:Nistec.Runtime.InstallReference">
            <summary>
            InstallReference + struct initialization; Used by COM imported calls
            </summary>
        </member>
        <member name="T:Nistec.Runtime.AssemblyInfo">
            <summary>
            AssemblyInfo; Used by COM imported calls
            </summary>
        </member>
        <member name="T:Nistec.Runtime.InstallReferenceGuid">
            <summary>
            InstallReferenceGuid; Used by COM imported calls
            </summary>
        </member>
        <member name="T:Nistec.Runtime.AssemblyCache">
            <summary>
             Helper calss for IAssemblyCache
            </summary>
        </member>
        <member name="T:Nistec.Runtime.AssemblyEnum">
            <summary>
            Helper calss for IAssemblyEnum
            </summary>
        </member>
        <member name="T:Nistec.Runtime.RemoteExecAssembly">
            <summary>
            Invokes static method 'Main' from the assembly.
            </summary>
        </member>
        <member name="M:Nistec.Runtime.RemoteExecAssembly.ResolveEventHandler(System.Object,System.ResolveEventArgs)">
            <summary>
            AppDomain evant handler. This handler will be called if CLR cannot resolve 
            referenced local assemblies 
            </summary>
        </member>
        <member name="T:Nistec.Runtime.RequestQuery">
            <summary>
            RequestQuery Encryption
            </summary>
        </member>
        <member name="M:Nistec.Runtime.RequestQuery.EncryptEx32(System.String)">
            <summary>
            EncryptQuery
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.RequestQuery.DecryptEx32(System.String)">
            <summary>
            DecryptQuery
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.RequestQuery.EncryptBigId(System.Int64)">
            <summary>
            EncryptBigId ToBase62
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.RequestQuery.DecryptBigId(System.String)">
            <summary>
            DecryptBigId FromBase62
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.RequestQuery.EncryptQuery(System.String,Nistec.Runtime.EncyptionType)">
            <summary>
            EncryptQuery
            </summary>
            <param name="data"></param>
            <param name="encType"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.RequestQuery.DecryptQuery(System.String,Nistec.Runtime.EncyptionType)">
            <summary>
            DecryptQuery
            </summary>
            <param name="data"></param>
            <param name="encType"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.RequestQuery.DecryptQueryOptional(System.String)">
            <summary>
            Decrypt Query with Optional
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.RequestQuery.DecryptQuery(System.String,System.Boolean,System.Boolean)">
            <summary>
            DecryptQuery
            </summary>
            <param name="args"></param>
            <param name="allowEmpty"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Nistec.Runtime.RequestQuery.DecryptQuery32(System.String,System.Boolean)">
            <summary>
            DecryptQuery32
            </summary>
            <param name="args"></param>
            <param name="allowEmpty"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Nistec.Runtime.BaseConverter.Hex(System.String)">
            <summary>
            Converts specified string to HEX string.
            </summary>
            <param name="text">String to convert.</param>
            <returns>Returns hex string.</returns> 
        </member>
        <member name="M:Nistec.Runtime.BaseConverter.ToHexString(System.String)">
            <summary>
            Converts string to hex string.
            </summary>
            <param name="data">String to convert.</param>
            <returns>Returns data as hex string.</returns>
        </member>
        <member name="M:Nistec.Runtime.BaseConverter.ToHexString(System.Byte[])">
            <summary>
            Converts string to hex string.
            </summary>
            <param name="data">Data to convert.</param>
            <returns>Returns data as hex string.</returns>
        </member>
        <member name="M:Nistec.Runtime.BaseConverter.ToHex(System.Byte)">
            <summary>
            Convert byte to hex data.
            </summary>
            <param name="byteValue">Byte to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.BaseConverter.ToHex(System.Byte[])">
            <summary>
            Converts data to hex data.
            </summary>
            <param name="data">Data to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.BaseConverter.FromHexString(System.String)">
            <summary>
            Converts string from hex string.
            </summary>
            <param name="data">String to convert.</param>
            <returns>Returns data as hex string.</returns>
        </member>
        <member name="M:Nistec.Runtime.BaseConverter.FromHex(System.Byte[])">
            <summary>
            Converts hex byte data to normal byte data. Hex data must be in two bytes pairs, for example: 0F,FF,A3,... .
            </summary>
            <param name="hexData">Hex data.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.BaseConverter.ToBase32(System.String)">
            <summary>
            Convert string to Base32 string
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.BaseConverter.FromBase32(System.String)">
            <summary>
            Convert Base32String to string
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.BaseConverter.ToBase32String(System.Byte[])">
            <summary>
            Converts an array of bytes to a Base32 string.
            </summary>
        </member>
        <member name="M:Nistec.Runtime.BaseConverter.FromBase32String(System.String)">
            <summary>
            Converts a Base32-k string into an array of bytes.
            </summary>
            <exception cref="T:System.ArgumentException">
            Input string <paramref name="str">s</paramref> contains invalid Base32 characters.
            </exception>
        </member>
        <member name="M:Nistec.Runtime.BaseConverter.ToBase64(System.String)">
            <summary>
            Convert string to Base64 string
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.BaseConverter.FromBase64(System.String)">
            <summary>
            Convert Base64String to string
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.Encryption.ComputeMd5(System.String,System.Boolean)">
            <summary>
            Computes md5 hash.
            </summary>
            <param name="text">Text to hash.</param>
            <param name="hex">Specifies if md5 value is returned as hex string.</param>
            <returns>Resturns md5 value or md5 hex value.</returns>
        </member>
        <member name="T:Nistec.Runtime.RandomPassword">
            <summary>
            This class can generate random passwords, which do not include ambiguous 
            characters, such as I, l, and 1. The generated password will be made of
            7-bit ASCII symbols. Every four characters will include one lower case
            character, one upper case character, one number, and one special symbol
            (such as '%') in a random order. The password will always start with an
            alpha-numeric character; it will not start with a special symbol (we do
            this because some back-end systems do not like certain special
            characters in the first position).
            </summary>
        </member>
        <member name="M:Nistec.Runtime.RandomPassword.Generate">
            <summary>
            Generates a random password.
            </summary>
            <returns>
            Randomly generated password.
            </returns>
            <remarks>
            The length of the generated password will be determined at
            random. It will be no shorter than the minimum default and
            no longer than maximum default.
            </remarks>
        </member>
        <member name="M:Nistec.Runtime.RandomPassword.Generate(System.Int32)">
            <summary>
            Generates a random password of the exact length.
            </summary>
            <param name="length">
            Exact password length.
            </param>
            <returns>
            Randomly generated password.
            </returns>
        </member>
        <member name="M:Nistec.Runtime.RandomPassword.Generate(System.Int32,System.Int32)">
            <summary>
            Generates a random password.
            </summary>
            <param name="minLength">
            Minimum password length.
            </param>
            <param name="maxLength">
            Maximum password length.
            </param>
            <returns>
            Randomly generated password.
            </returns>
            <remarks>
            The length of the generated password will be determined at
            random and it will fall with the range determined by the
            function parameters.
            </remarks>
        </member>
        <member name="T:Nistec.Runtime.SysNet">
            <summary>
            Provides net core utility methods.
            </summary>
        </member>
        <member name="M:Nistec.Runtime.SysNet.IsAscii(System.String)">
            <summary>
            Checks if specified string data is acii data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.SysNet.GetFileNameFromPath(System.String)">
            <summary>
            Gets file name from path.
            </summary>
            <param name="filePath">File file path with file name. For examples: c:\fileName.xxx, aaa\fileName.xxx.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.SysNet.IsIP(System.String)">
            <summary>
            Gets if specified value is IP address.
            </summary>
            <param name="value">String value.</param>
            <returns>Returns true if specified value is IP address.</returns>
        </member>
        <member name="M:Nistec.Runtime.SysNet.CompareIP(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Compares 2 IP addresses. Returns 0 if IPs are equal, 
            returns positive value if destination IP is bigger than source IP,
            returns negative value if destination IP is smaller than source IP.
            </summary>
            <param name="source">Source IP address.</param>
            <param name="destination">Destination IP address.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.SysNet.IsPrivateIP(System.String)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
            <returns>Returns true if IP is private IP.</returns>
        </member>
        <member name="M:Nistec.Runtime.SysNet.IsPrivateIP(System.Net.IPAddress)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <returns>Returns true if IP is private IP.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
        </member>
        <member name="M:Nistec.Runtime.SysNet.CreateSocket(System.Net.IPEndPoint,System.Net.Sockets.ProtocolType)">
            <summary>
            Creates new socket for the specified end point.
            </summary>
            <param name="localEP">Local end point.</param>
            <param name="protocolType">Protocol type.</param>
            <returns>Retruns newly created socket.</returns>
        </member>
        <member name="M:Nistec.Runtime.SysNet.Hex(System.String)">
            <summary>
            Converts specified string to HEX string.
            </summary>
            <param name="text">String to convert.</param>
            <returns>Returns hex string.</returns> 
        </member>
        <member name="M:Nistec.Runtime.SysNet.ToHexString(System.String)">
            <summary>
            Converts string to hex string.
            </summary>
            <param name="data">String to convert.</param>
            <returns>Returns data as hex string.</returns>
        </member>
        <member name="M:Nistec.Runtime.SysNet.ToHexString(System.Byte[])">
            <summary>
            Converts string to hex string.
            </summary>
            <param name="data">Data to convert.</param>
            <returns>Returns data as hex string.</returns>
        </member>
        <member name="M:Nistec.Runtime.SysNet.ToHex(System.Byte)">
            <summary>
            Convert byte to hex data.
            </summary>
            <param name="byteValue">Byte to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.SysNet.ToHex(System.Byte[])">
            <summary>
            Converts data to hex data.
            </summary>
            <param name="data">Data to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.SysNet.FromHex(System.Byte[])">
            <summary>
            Converts hex byte data to normal byte data. Hex data must be in two bytes pairs, for example: 0F,FF,A3,... .
            </summary>
            <param name="hexData">Hex data.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Runtime.SysNet.ComputeMd5(System.String,System.Boolean)">
            <summary>
            Computes md5 hash.
            </summary>
            <param name="text">Text to hash.</param>
            <param name="hex">Specifies if md5 value is returned as hex string.</param>
            <returns>Resturns md5 value or md5 hex value.</returns>
        </member>
        <member name="M:Nistec.Serialization.IBodyStream.GetStream">
            <summary>
            Get body stream ready to read.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.IBodyStream.GetCopy">
            <summary>
            Get copy of body stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.ISerialEntity.EntityWrite(System.IO.Stream,Nistec.Serialization.IBinaryStreamer)">
            <summary>
            Write entity to stream.
            </summary>
            <param name="stream"></param>
            <param name="streamer"></param>
        </member>
        <member name="M:Nistec.Serialization.ISerialEntity.EntityRead(System.IO.Stream,Nistec.Serialization.IBinaryStreamer)">
            <summary>
            Read entity from stream.
            </summary>
            <param name="stream"></param>
            <param name="streamer"></param>
        </member>
        <member name="T:Nistec.Serialization.SerializerExtension">
            <summary>
            Provide an extension methods for ISerialEntity
            </summary>
        </member>
        <member name="M:Nistec.Serialization.SerializerExtension.Serialize(Nistec.Serialization.ISerialEntity)">
            <summary>
            Serialize <see cref="T:Nistec.Serialization.ISerialEntity"/> entity to <see cref="T:Nistec.IO.NetStream"/>.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.SerializerExtension.Deserialize``1(Nistec.IO.NetStream)">
            <summary>
            Deserialize <see cref="T:Nistec.IO.NetStream"/> to <see cref="T:Nistec.Serialization.ISerialEntity"/> entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.SerializerExtension.EntityWrite(Nistec.Serialization.ISerialEntity,System.IO.Stream)">
            <summary>
            Write the current object include the body and properties to stream using <see cref="T:Nistec.Serialization.IBinaryStreamer"/>, This method is a part of <see cref="T:Nistec.Serialization.ISerialEntity"/> implementation.
            </summary>
            <param name="entity"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Nistec.Serialization.SerializerExtension.EntityRead(Nistec.Serialization.ISerialEntity,System.IO.Stream)">
            <summary>
            Read stream to the current object include the body and properties using <see cref="T:Nistec.Serialization.IBinaryStreamer"/>, This method is a part of <see cref="T:Nistec.Serialization.ISerialEntity"/> implementation.
            </summary>
            <param name="entity"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Nistec.Serialization.SerializerExtension.EntityEncode(Nistec.Serialization.ISerialEntity)">
            <summary>
            Encode entity to byte array.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.SerializerExtension.EntityDecode(Nistec.Serialization.ISerialEntity,System.Byte[])">
            <summary>
            Decode entity from byte arrray.
            </summary>
            <param name="entity"></param>
            <param name="bytes"></param>
        </member>
        <member name="M:Nistec.Serialization.SerializerExtension.GetEntityStream(Nistec.Serialization.ISerialEntity,System.Boolean)">
            <summary>
            Get entity as stream.
            </summary>
            <param name="entity"></param>
            <param name="writeContextType"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Serialization.BinaryStreamer">
            <summary>
            Represent a binary streamer such as binary write and reader.
            </summary>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.Encode(System.Object)">
            <summary> Writes an arbitrary object to the buffer.  Useful where we have something of type "object"
            and don't know how to treat it.  This works out the best method to use to write to the buffer. </summary>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.WriteAny(System.Object,System.Type)">
            <summary> Writes an arbitrary object to the buffer.  Useful where we have something of type "object"
            and don't know how to treat it.  This works out the best method to use to write to the buffer. </summary>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.Decode">
            <summary> Reads an object which was added to the buffer by WriteObject. </summary>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.ReadAny">
            <summary> Reads an object which was added to the buffer by WriteObject. </summary>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.ReadItem(Nistec.Serialization.SerialType)">
            <summary> Reads an object which was added to the buffer by WriteObject. </summary>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.WriteValue(System.Object,System.Type)">
            <summary> Writes an arbitrary object to the buffer.  Useful where we have something of type "object"
            and don't know how to treat it.  This works out the best method to use to write to the buffer. </summary>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.ReadValue">
            <summary> Writes an arbitrary object to the buffer.  Useful where we have something of type "object"
            and don't know how to treat it.  This works out the best method to use to write to the buffer. </summary>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.WriteString(System.String)">
            <summary> Writes a string to the buffer.  Overrides the base implementation so it can cope with nulls </summary>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.ReadString">
            <summary> Reads a string from the buffer.  Overrides the base implementation so it can cope with nulls. </summary>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.AddToInfo(System.Runtime.Serialization.SerializationInfo)">
            <summary> Adds the BinaryWriterEx buffer to the SerializationInfo at the end of GetObjectData(). </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Nistec.Serialization.BinaryStreamer.WriteList``1(System.Collections.Generic.IList{``0})" -->
        <member name="M:Nistec.Serialization.BinaryStreamer.ReadList``1">
            <summary> Reads a generic list from the buffer. </summary>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.WriteByteArray(System.Byte[])">
            <summary> Writes a byte array to the buffer.  Overrides the base implementation to
            send the length of the array which is needed when it is retrieved </summary>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.ReadByteArray">
            <summary> Reads a byte array from the buffer, handling nulls and the array length. </summary>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.WriteCharArray(System.Char[])">
            <summary> Writes a char array to the buffer.  Overrides the base implementation to
            sends the length of the array which is needed when it is read. </summary>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.ReadCharArray">
            <summary> Reads a char array from the buffer, handling nulls and the array length. </summary>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.Write(System.Guid)">
            <summary>
            Writes a Guid to the buffer.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.ReadGuid">
            <summary> Reads a Guid from the buffer. </summary>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.WriteEnum(System.Object)">
            <summary>
            Writes a Enum to the buffer.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.ReadEnum">
            <summary> Reads a Enum from the buffer. </summary>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.WriteType(System.Type)">
            <summary>
            Writes a Type to the buffer.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.ReadType">
            <summary> Reads a Type from the buffer. </summary>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.Write(System.DateTime)">
            <summary>
            Writes a DateTime to the buffer.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.ReadDateTime">
            <summary> Reads a DateTime from the buffer. </summary>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.Write(System.TimeSpan)">
            <summary>
            Writes a TimeSpan to the buffer.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nistec.Serialization.BinaryStreamer.ReadTimeSpan">
            <summary> Reads a TimeSpan from the buffer. </summary>
        </member>
        <member name="T:Nistec.Serialization.BinarySerializer">
            <summary>
            Represent a binary serializer/deserializer , using <see cref="T:Nistec.Serialization.BinaryStreamer"/>.
            </summary>
        </member>
        <member name="M:Nistec.Serialization.BinarySerializer.#ctor">
            <summary>
            Initialize a new instance of BinarySerializer.
            </summary>
        </member>
        <member name="M:Nistec.Serialization.BinarySerializer.#ctor(System.Boolean)">
            <summary>
            Initialize a new instance of BinarySerializer.
            </summary>
            <param name="useStreamerForUnknownType"></param>
        </member>
        <member name="M:Nistec.Serialization.BinarySerializer.Serialize(System.IO.Stream,System.Object,System.Boolean)">
            <summary>
            Serialize object.
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
            <param name="enableException"></param>
        </member>
        <member name="M:Nistec.Serialization.BinarySerializer.Serialize(System.IO.Stream,System.Object,System.Type,System.Boolean)">
            <summary>
            Serialize object.
            </summary>
            <param name="stream"></param>
            <param name="value"></param>
            <param name="baseType"></param>
            <param name="enableException"></param>
        </member>
        <member name="M:Nistec.Serialization.BinarySerializer.Deserialize(System.IO.Stream,System.Boolean)">
            <summary>
            Deserialize object from stream.
            </summary>
            <param name="stream"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.BinarySerializer.Deserialize``1(System.IO.Stream,System.Boolean)">
            <summary>
            Reads an object which was added to the buffer by Serialize.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.BinarySerializer.Deserialize``1(System.IO.Stream,Nistec.Serialization.SerialContextType,System.Boolean)">
            <summary>
            Reads an object which was added to the buffer by Serialize using <see cref="T:Nistec.Serialization.SerialContextType"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <param name="contextType"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.BinarySerializer.SerializeToStream(System.Object,System.Boolean)">
            <summary>
            Serialize object to <see cref="T:Nistec.IO.NetStream"/> stream.
            </summary>
            <param name="value"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.BinarySerializer.DeserializeFromStream``1(Nistec.IO.NetStream,System.Boolean)">
            <summary>
            Deserialize object from <see cref="T:Nistec.IO.NetStream"/> stream.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.BinarySerializer.DeserializeFromStream``1(System.IO.Stream,Nistec.Serialization.SerialContextType,System.Boolean)">
            <summary>
            Reads an object which was added to the buffer by Serialize using <see cref="T:Nistec.Serialization.SerialContextType"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <param name="contextType"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.BinarySerializer.SerializeToBase64(System.Object,System.Boolean)">
            <summary>
            SerializeToBase64
            </summary>
            <param name="body"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.BinarySerializer.DeserializeFromBase64``1(System.String,System.Boolean)">
            <summary>
            DeserializeFromBase64
            </summary>
            <typeparam name="T"></typeparam>
            <param name="base64String"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.BinarySerializer.DeserializeFromBase64(System.String,System.Boolean)">
            <summary>
            DeserializeFromBase64
            </summary>
            <param name="base64String"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.BinarySerializer.SerializeToFile(System.Object,System.String,System.Boolean)">
            <summary>
            SerializeToBase64
            </summary>
            <param name="body"></param>
            <param name="filename"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.BinarySerializer.DeserializeFromFile``1(System.String,System.Boolean)">
            <summary>
            DeserializeFromBytes
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.ISerialJson.EntityWrite(Nistec.Serialization.IJsonSerializer,System.Boolean)">
            <summary>
            Write entity to stream.
            </summary>
            <param name="serializer"></param>
            <param name="pretty"></param>
        </member>
        <member name="M:Nistec.Serialization.ISerialJson.EntityRead(System.String,Nistec.Serialization.IJsonSerializer)">
            <summary>
            Read entity from json.
            </summary>
            <param name="json"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Nistec.Serialization.JsonParser">
            <summary>
            Represenent a json parser, see spec at http://www.json.org/
            </summary>
        </member>
        <member name="M:Nistec.Serialization.JsonResults.EntityWrite(System.IO.Stream,Nistec.Serialization.IBinaryStreamer)">
            <summary>
            Write the current object include the body and properties to stream using <see cref="T:Nistec.Serialization.IBinaryStreamer"/>, This method is a part of <see cref="T:Nistec.Serialization.ISerialEntity"/> implementation.
            </summary>
            <param name="stream"></param>
            <param name="streamer"></param>
        </member>
        <member name="M:Nistec.Serialization.JsonResults.EntityRead(System.IO.Stream,Nistec.Serialization.IBinaryStreamer)">
            <summary>
            Read stream to the current object include the body and properties using <see cref="T:Nistec.Serialization.IBinaryStreamer"/>, This method is a part of <see cref="T:Nistec.Serialization.ISerialEntity"/> implementation.
            </summary>
            <param name="stream"></param>
            <param name="streamer"></param>
        </member>
        <member name="M:Nistec.Serialization.JsonSerializer.Write(System.Object,System.Type)">
            <summary>
            Create a json representation for an object with parameter override on this call
            </summary>
            <param name="obj"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.JsonSerializer.Read``1(System.String)">
            <summary>
            Create a typed generic object from the json with parameter override on this call
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="F:Nistec.Serialization.JsonSerializer.DefaultOption">
            <summary>
            Default serializer option.
            </summary>
        </member>
        <member name="M:Nistec.Serialization.JsonSerializer.DefaultSettingsFormat(Nistec.Serialization.JsonDateFormat)">
            <summary>
            Default serializer with date format option.
            </summary>
        </member>
        <member name="M:Nistec.Serialization.JsonSerializer.Serialize(System.Object)">
            <summary>
            Create a json from object using default <see cref="T:Nistec.Serialization.JsonSettings"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.JsonSerializer.Serialize(System.Object,System.Boolean)">
            <summary>
            Create a json from object using <see cref="T:Nistec.Serialization.JsonSettings"/> and format(optional) with Indented format.
            </summary>
            <param name="obj"></param>
            <param name="pretty"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.JsonSerializer.Serialize(System.Object,Nistec.Serialization.JsonSettings,Nistec.Serialization.JsonFormat)">
            <summary>
            Create a json from object using <see cref="T:Nistec.Serialization.JsonSettings"/> and format(optional).
            </summary>
            <param name="obj"></param>
            <param name="settings"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.JsonSerializer.Serialize(System.Object,System.Type,Nistec.Serialization.JsonSettings,Nistec.Serialization.JsonFormat)">
            <summary>
            Create a json from object using <see cref="T:Nistec.Serialization.JsonSettings"/> and format(optional).
            </summary>
            <param name="obj"></param>
            <param name="baseType"></param>
            <param name="settings"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.JsonSerializer.Parse(System.String,System.Type)">
            <summary>
            Parse json tring and convert it to object.
            </summary>
            <param name="json"></param>
            <param name="returnType"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.JsonSerializer.ToDynamic(System.String)">
            <summary>
            Create a dynamic object from the json string
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.JsonSerializer.ToDictionary(System.String)">
            <summary>
            Create a dictionary object from the json string
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.JsonSerializer.Deserialize``1(System.String)">
            <summary>
            Create a typed generic object from the json
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.JsonSerializer.Deserialize``1(System.String,Nistec.Serialization.JsonSettings)">
            <summary>
            Create a typed generic object from the json with parameter override on this call
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.JsonSerializer.Deserialize(System.String,System.Type,Nistec.Serialization.JsonSettings)">
            <summary>
            Create an object from the json with settings parameter.
            </summary>
            <param name="json"></param>
            <param name="type"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.JsonSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Create an object of type from the json
            </summary>
            <param name="json"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.JsonSerializer.ParseAndCopy(System.Object,System.Type)">
            <summary>
            Parse and clone to a new object.
            </summary>
            <param name="obj"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.JsonSerializer.ParseAndCopy``1(``0)">
            <summary>
            Parse and clone to a new object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.JsonSerializer.Print(System.String)">
            <summary>
            Format json. 
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.JsonSerializer.RegisterCustomType(System.Type,Nistec.Serialization.SerializeFunc,Nistec.Serialization.DeserializeFunc)">
            <summary>
            Register custom type handlers for your own types not natively handled by Nistec.Runtime.Json
            </summary>
            <param name="type"></param>
            <param name="serializer"></param>
            <param name="JsonReader"></param>
        </member>
        <member name="M:Nistec.Serialization.JsonSerializer.ClearActivatorCache">
            <summary>
            Clear the internal reflection cache so you can start from new (you will loose performance)
            </summary>
        </member>
        <member name="P:Nistec.Serialization.JsonSettings.SerializeNullValues">
            <summary>
            Serialize null values to the output (default = True)
            </summary>
        </member>
        <member name="P:Nistec.Serialization.JsonSettings.JsonDateFormat">
            <summary>
            JsonDateFormat (default = iso)
            </summary>
        </member>
        <member name="P:Nistec.Serialization.JsonSettings.UseUTCDateTime">
            <summary>
            Use the UTC date format (default = False)
            </summary>
        </member>
        <member name="P:Nistec.Serialization.JsonSettings.ShowReadOnlyProperties">
            <summary>
            Show readonly properties in the output (default = False)
            </summary>
        </member>
        <member name="P:Nistec.Serialization.JsonSettings.UseTypesExtension">
            <summary>
            Use the $types extension to optimise the output json (default = False)
            </summary>
        </member>
        <member name="P:Nistec.Serialization.JsonSettings.IgnoreCaseOnDeserialize">
            <summary>
            Ignore case on json and deserialize (default = False).
            </summary>
        </member>
        <member name="P:Nistec.Serialization.JsonSettings.EnableAnonymousTypes">
            <summary>
            Anonymous types have read only properties (default = False). 
            </summary>
        </member>
        <member name="P:Nistec.Serialization.JsonSettings.UseExtensions">
            <summary>
            Enable extensions $types, $type, $map (default = False)
            </summary>
        </member>
        <member name="P:Nistec.Serialization.JsonSettings.UseEscapedUnicode">
            <summary>
            Use escaped unicode i.e. \uXXXX format for non ASCII characters (default = True)
            </summary>
        </member>
        <member name="P:Nistec.Serialization.JsonSettings.UseExtraKeyValueDictionary">
            <summary>
            Output string key dictionaries as "k"/"v" format (default = False) 
            </summary>
        </member>
        <member name="P:Nistec.Serialization.JsonSettings.UseDatasetSchema">
            <summary>
            Use Dataset Schema format (default = False)
            </summary>
        </member>
        <member name="P:Nistec.Serialization.JsonSettings.UseBinaryGuid">
            <summary>
            Use the fast GUID format (default = False)
            </summary>
        </member>
        <member name="P:Nistec.Serialization.JsonSettings.UseEnumValues">
            <summary>
            Output Enum values instead of names (default = False)
            </summary>
        </member>
        <member name="P:Nistec.Serialization.JsonSettings.UseUninitializedObject">
            <summary>
            If any object has no default constructor 
            then all initial values within the class will be ignored and will be not set (default = False).
            </summary>
        </member>
        <member name="P:Nistec.Serialization.JsonSettings.EnableDateTimeMilliseconds">
            <summary>
            Enable DateTime milliseconds i.e. yyyy-MM-dd HH:mm:ss.nnn (default = false)
            </summary>
        </member>
        <member name="M:Nistec.Serialization.JsonSettings.AddIgnoreXmlAttributes(System.Type[])">
            <summary>
            Add XmlIgnoreAttribute attributes.
            </summary>
            <param name="types"></param>
        </member>
        <member name="T:Nistec.Serialization.SerializeTools">
            <summary>
              Some help functions for the serializing framework. As these functions are complexer
              they can be converted to single classes.
            </summary>
        </member>
        <member name="M:Nistec.Serialization.SerializeTools.IsPrimitive(System.Type)">
            <summary>
              Is the simple type (string, DateTime, TimeSpan, Decimal, Enumeration or other primitive type)
            </summary>
            <param name = "type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.SerializeTools.IsSimple(System.Type)">
            <summary>
              Is the simple type (string, DateTime, TimeSpan, Decimal, Enumeration or other primitive type)
            </summary>
            <param name = "type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.SerializeTools.IsEnumerable(System.Type)">
            <summary>
              Is type an IEnumerable
            </summary>
            <param name = "type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.SerializeTools.IsGenericEnumerable(System.Type)">
            <summary>
              Is type an Generic IEnumerable
            </summary>
            <param name = "type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.SerializeTools.IsCollection(System.Type)">
            <summary>
              Is type ICollection
            </summary>
            <param name = "type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.SerializeTools.IsAssignableFromDictionary(System.Type,System.Boolean)">
            <summary>
              Is type IDictionary
            </summary>
            <param name = "type"></param>
            <param name = "includeGeneric"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.SerializeTools.IsStringObjectDictionary(System.Type)">
            <summary>
              Is type Is Generic Dictionary{string,object}
            </summary>
            <param name = "type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.SerializeTools.IsGenericDictionary(System.Type)">
            <summary>
              Is type Is Generic Dictionary
            </summary>
            <param name = "type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.SerializeTools.IsGenericList(System.Type)">
            <summary>
              Is type Is Generic List
            </summary>
            <param name = "type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.SerializeTools.IsGenericSet(System.Type)">
            <summary>
              Is type Is Generic Hashset
            </summary>
            <param name = "type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.SerializeTools.IsArray(System.Type)">
            <summary>
              Is it array? It does not matter if singledimensional or multidimensional
            </summary>
            <param name = "type"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Serialization.NetSerializer">
            <summary>
            Class for serialization utilities
            </summary>
        </member>
        <member name="M:Nistec.Serialization.NetSerializer.SerializeXmlToBytes(System.Object)">
            <summary>
            SerializeToBytes
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.NetSerializer.SerializeToFile(System.Object,System.String)">
            <summary>
            SerializeToBase64
            </summary>
            <param name="body"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.NetSerializer.DeserializeFromFile``1(System.String)">
            <summary>
            DeserializeFromBytes
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.NetSerializer.SerializeToBase64(System.Object)">
            <summary>
            SerializeToBase64
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.NetSerializer.DeserializeFromBase64``1(System.String)">
            <summary>
            DeserializeFromBase64
            </summary>
            <typeparam name="T"></typeparam>
            <param name="base64String"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.NetSerializer.DeserializeFromBase64(System.String)">
            <summary>
            DeserializeFromBase64
            </summary>
            <param name="base64String"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.NetSerializer.DeserializeFromBase64(System.String,System.Int32@)">
            <summary>
            DeserializeFromBase64
            </summary>
            <param name="base64String"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.NetSerializer.SerializeToBase64(System.Object,System.Int32@)">
            <summary>
            SerializeToBase64
            </summary>
            <param name="body"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.NetSerializer.SerializeToBytes(System.Object,System.Boolean)">
            <summary>
            SerializeToBytes
            </summary>
            <param name="body"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.NetSerializer.DeserializeFromBytes(System.Byte[],System.Boolean)">
            <summary>
            DeserializeFromBytes
            </summary>
            <param name="buf"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.NetSerializer.DeserializeFromBytes``1(System.Byte[],System.Boolean)">
            <summary>
            DeserializeFromBytes
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buf"></param>
            <param name="enableException"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.NetSerializer.SizeOf(System.Object)">
            <summary>
            SizeOf object in Bytes
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.NetSerializer.StructureToByteArray(System.Object)">
            <summary>
            Structure To ByteArray
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.NetSerializer.StructureFromByteArray(System.Byte[],System.Type)">
            <summary>
            ByteArray To Structure
            </summary>
            <param name="bytearray"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.NetSerializer.StructureToBase64(System.Object)">
            <summary>
            Structure To Base64
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.NetSerializer.StructureFromBase64(System.String,System.Type)">
            <summary>
            ByteArray To Structure
            </summary>
            <param name="base64String"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.NetSerializer.StructureToBase64(System.Object,System.Int32@)">
            <summary>
            Structure To Base64
            </summary>
            <param name="obj"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Serialization.NetSerializer.StructureFromBase64(System.String,System.Type,System.Int32@)">
            <summary>
            ByteArray To Structure
            </summary>
            <param name="base64String"></param>
            <param name="type"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Threading.TaskItem.OnTaskCompleted(Nistec.Generic.GenericEventArgs{Nistec.Threading.TaskItem})">
            <summary>
            OnTaskCompleted
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.Threading.TaskItem.OnError(Nistec.Generic.GenericEventArgs{System.String,System.Exception})">
            <summary>
            OnTaskCompleted
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.Threading.TaskItem.EndTask(System.IAsyncResult)">
            <summary>Completes the specified asynchronous receive operation.</summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="F:Nistec.Threading.AsyncTasker.Instance">
            <summary>
            Default Instance
            </summary>
        </member>
        <member name="M:Nistec.Threading.AsyncTasker.OnTaskCompleted(Nistec.Generic.GenericEventArgs{Nistec.Threading.TaskItem})">
            <summary>
            OnTaskCompleted
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.Threading.AsyncTasker.OnError(Nistec.Generic.GenericEventArgs{System.String,System.Exception})">
            <summary>
            OnTaskCompleted
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Nistec.Threading.ListenerDelay">
            <summary>
            Represent listener interval algorithem.
            </summary>
        </member>
        <member name="T:Nistec.Threading.WorkItem">
            <summary>
            WorkItem
            </summary>
        </member>
        <member name="T:Nistec.Threading.WorkItemStatus">
            <summary>
            WorkItem Status
            </summary>
        </member>
        <member name="T:Nistec.Threading.ThreadPoolEx">
            <summary>
            Extended <see cref="T:System.Threading.ThreadPool"/> 
            </summary>
            <example>
            <code>
            ThreadPoolEx.QueueUserWorkItem(delegate(object state));
            
            ThreadPoolEx.Cancel(item, true);
            </code>
            </example>
        </member>
        <member name="M:Nistec.Threading.ThreadPoolEx.QueueUserWorkItem(System.Threading.WaitCallback)">
            <summary>
            Queues a method for execution. The method executes when a thread pool thread  becomes available.
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Threading.ThreadPoolEx.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>
            Queues a method for execution. The method executes when a thread pool thread  becomes available.
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Threading.ThreadPoolEx.Cancel(Nistec.Threading.WorkItem,System.Boolean)">
            <summary>
            Cancel WorkItem and abort thread.
            </summary>
            <param name="item"></param>
            <param name="allowAbort"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <exception cref="T:System.Threading.ThreadStateException"></exception>
        </member>
        <member name="T:Nistec.Threading.ThreadTimer">
            <summary>
            ThreadTimer
            </summary>
        </member>
        <member name="M:Nistec.Threading.ThreadTimer.#ctor">
            <summary>
            ThreadTimer
            </summary>
        </member>
        <member name="M:Nistec.Threading.ThreadTimer.#ctor(System.Int64)">
            <summary>
            ThreadTimer ctor
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:Nistec.Threading.ThreadTimer.OnElapsed(System.Timers.ElapsedEventArgs)">
            <summary>
            OnElapsed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.Threading.ThreadTimer.Wait(System.Int64)">
            <summary>
            Wait
            </summary>
        </member>
        <member name="M:Nistec.Threading.ThreadTimer.RestartTimer">
            <summary>
            RestartTimer
            </summary>
        </member>
        <member name="M:Nistec.Threading.ThreadTimer.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="P:Nistec.Threading.ThreadTimer.CurrentTimeSpan">
            <summary>
            CurrentTimeSpan
            </summary>
        </member>
        <member name="P:Nistec.Threading.ThreadTimer.SignalTime">
            <summary>
            SignalTime
            </summary>
        </member>
        <member name="P:Nistec.Threading.ThreadTimer.CurrentDisplayTime">
            <summary>
            CurrentDisplayTime
            </summary>
        </member>
        <member name="T:Nistec.Threading.GenericThreadPool">
            <summary>
            Provides an thread pool that can resume or suspend threads in pool.
            </summary>
        </member>
        <member name="F:Nistec.Threading.GenericThreadPool.workerThreads">
            <summary>
            Hashtable of all the threads in the thread pool.
            </summary>
        </member>
        <member name="F:Nistec.Threading.GenericThreadPool.workItems">
            <summary>
            Hashtable of all the threads in the thread pool.
            </summary>
        </member>
        <member name="F:Nistec.Threading.GenericThreadPool.m_IdleWaitHandle">
            <summary>
            Signaled when the thread pool is idle, i.e. no thread is busy
            and the work items queue is empty
            </summary>
        </member>
        <member name="F:Nistec.Threading.GenericThreadPool.m_shuttingDownEvent">
            <summary>
            An event to signal all the threads to quit immediately.
            </summary>
        </member>
        <member name="F:Nistec.Threading.GenericThreadPool.disposed">
            <summary>
            Indicate that the NetThreadPool has been disposed
            </summary>
        </member>
        <member name="E:Nistec.Threading.GenericThreadPool.ErrorOcurred">
            <summary>
            ErrorOcurred
            </summary>
        </member>
        <member name="M:Nistec.Threading.GenericThreadPool.#ctor(System.Int32)">
            <summary>
            Ctor GenericThreadPool with fixed size
            </summary>
            <param name="maxThread"></param>
        </member>
        <member name="M:Nistec.Threading.GenericThreadPool.#ctor(System.Int32,System.Int32)">
            <summary>
            Ctor GenericThreadPool with dynamic size, using ManualReset and IdleTime
            </summary>
            <param name="minThread"></param>
            <param name="maxThread"></param>
        </member>
        <member name="M:Nistec.Threading.GenericThreadPool.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Ctor GenericThreadPool
            </summary>
            <param name="minThread"></param>
            <param name="maxThread"></param>
            <param name="fixedSize"></param>
        </member>
        <member name="M:Nistec.Threading.GenericThreadPool.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:Nistec.Threading.GenericThreadPool.CurrentThreadName">
            <summary>
            Get current thread name
            </summary>
        </member>
        <member name="P:Nistec.Threading.GenericThreadPool.MaxThread">
            <summary>
            Get MaxThread
            </summary>
        </member>
        <member name="P:Nistec.Threading.GenericThreadPool.MinThread">
            <summary>
            Get MinThread
            </summary>
        </member>
        <member name="P:Nistec.Threading.GenericThreadPool.CurrentWorkItems">
            <summary>
            Get CurrentWorkItems
            </summary>
        </member>
        <member name="P:Nistec.Threading.GenericThreadPool.FixedSize">
            <summary>
            Get if is a FixedSize
            </summary>
        </member>
        <member name="P:Nistec.Threading.GenericThreadPool.IsAutoSettings">
            <summary>
            Get if is an auto threads settings
            </summary>
        </member>
        <member name="P:Nistec.Threading.GenericThreadPool.SuspendTimeout">
            <summary>
            Get or set SuspendTimeout in miliseconds
            </summary>
        </member>
        <member name="P:Nistec.Threading.GenericThreadPool.IdleSecondTime">
            <summary>
            Get or set Idle Time in seconds
            </summary>
        </member>
        <member name="M:Nistec.Threading.GenericThreadPool.StartThreadPool(System.Threading.ParameterizedThreadStart)">
            <summary>
            Start Thread Pool
            </summary>
            <param name="start"></param>
        </member>
        <member name="M:Nistec.Threading.GenericThreadPool.StopThreadPool">
            <summary>
            StopThreadPool
            </summary>
        </member>
        <member name="M:Nistec.Threading.GenericThreadPool.WaitForIdle">
            <summary>
            Wait for the thread pool to be idle
            </summary>
        </member>
        <member name="M:Nistec.Threading.GenericThreadPool.WaitForIdle(System.TimeSpan)">
            <summary>
            Wait for the thread pool to be idle
            </summary>
        </member>
        <member name="M:Nistec.Threading.GenericThreadPool.WaitForIdle(System.Int32)">
            <summary>
            Wait for the thread pool to be idle
            </summary>
        </member>
        <member name="M:Nistec.Threading.GenericThreadPool.Abort">
            <summary>
            Force the NetThreadPool to shutdown
            </summary>
        </member>
        <member name="M:Nistec.Threading.GenericThreadPool.Abort(System.Boolean,System.Int32)">
            <summary>
            Empties the queue of work items and abort the threads in the pool.
            </summary>
        </member>
        <member name="M:Nistec.Threading.GenericThreadPool.ManualReset(System.Boolean,System.Int32)">
            <summary>
            Set ManualReset
            </summary>
            <param name="initialState">true= WorkBegin, false=WorkEnd </param>
            <param name="timeToSleep">time to sleep in milisconds</param>
        </member>
        <member name="M:Nistec.Threading.GenericThreadPool.ManualReset(System.Boolean)">
            <summary>
            Set ManualReset
            </summary>
            <param name="initialState"></param>
        </member>
        <member name="M:Nistec.Threading.GenericThreadPool.ManualIdle(System.Int32)">
            <summary>
            Set ManualIdle
            </summary>
        </member>
        <member name="M:Nistec.Threading.GenericThreadPool.ManualReset(Nistec.Threading.GenericThreadPool.GenericThradState)">
            <summary>
            Set ManualIdle
            </summary>
            <param name="initialState"></param>
        </member>
        <member name="M:Nistec.Threading.GenericThreadPool.OnErrorOcurred(System.String)">
            <summary>
            OnErrorOcurred
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Nistec.Threading.GenericThreadPool.OnErrorOcurred(Nistec.Generic.GenericEventArgs{System.String})">
            <summary>
            OnErrorOcurred
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Nistec.Threading.SchedulerEventArgs.ScheduleName">
            <summary>
            Get Table
            </summary>
        </member>
        <member name="M:Nistec.Threading.Schedule.CalcNextTime">
            <summary>
            CalcNextTime
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nistec.Threading.Scheduler">
            <summary>
            Sync time struct
            </summary>
        </member>
        <member name="M:Nistec.Threading.Scheduler.#ctor">
            <summary>
            SyncTimer constructor
            </summary>
        </member>
        <member name="P:Nistec.Threading.Scheduler.Enabled">
            <summary>
            Get indicator if sync are enabled 
            </summary>
        </member>
        <member name="M:Nistec.Threading.Scheduler.Start">
            <summary>
            Start Async config Background multi thread Listner 
            </summary>
        </member>
        <member name="M:Nistec.Threading.Scheduler.Stop">
            <summary>
            Stop AsyncQueue Background multi thread Listner 
            </summary>
        </member>
        <member name="M:Nistec.Threading.Scheduler.OnScheduleElapsed(Nistec.Threading.SchedulerEventArgs)">
            <summary>
            OnTimeElapsed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.Threading.Scheduler.Current">
            <summary>
            Get The last Schedule was running
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nistec.Web.MailClient.SendMessage(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Transmit an email message to a recipient without
            any attachments
            </summary>
            <param name="hostAddress">host Address</param>
            <param name="sendTo">Recipient Email Address</param>
            <param name="sendFrom">Sender Email Address</param>
            <param name="sendSubject">Subject Line Describing Message</param>
            <param name="sendMessage">The Email Message Body</param>
            <returns>Status Message as String</returns>
        </member>
        <member name="M:Nistec.Web.MailClient.SendMessageWithAttachment(System.String,System.String,System.String,System.String,System.String,System.Collections.ArrayList)">
            <summary>
            Transmit an email message with
            attachments
            </summary>
            <param name="hostAddress">host Address</param>
            <param name="sendTo">Recipient Email Address</param>
            <param name="sendFrom">Sender Email Address</param>
            <param name="sendSubject">Subject Line Describing Message</param>
            <param name="sendMessage">The Email Message Body</param>
            <param name="attachments">A string array pointing to the location of each attachment</param>
            <returns>Status Message as String</returns>
        </member>
        <member name="M:Nistec.Web.MailClient.ValidateEmailAddress(System.String)">
            <summary>
            Confirm that an email address is valid
            in format
            </summary>
            <param name="emailAddress">Full email address to validate</param>
            <returns>True if email address is valid</returns>
        </member>
        <member name="T:Nistec.Web.HttpUtil">
            <summary>
            HttpRequest
            </summary>
        </member>
        <member name="F:Nistec.Web.HttpUtil.request">
            <summary>
            Http WebRequest
            </summary>
        </member>
        <member name="F:Nistec.Web.HttpUtil.m_postData">
            <summary>
            postData
            </summary>
        </member>
        <member name="E:Nistec.Web.HttpUtil.AsyncWorker">
            <summary>
            AsyncWorker
            </summary>
        </member>
        <member name="F:Nistec.Web.HttpUtil.ManualReset">
            <summary>
            ManualReset
            </summary>
        </member>
        <member name="F:Nistec.Web.HttpUtil.m_CodePage">
            <summary>
            m_codePage
            </summary>
        </member>
        <member name="F:Nistec.Web.HttpUtil.m_CodePageNum">
            <summary>
            m_CodePageNum
            </summary>
        </member>
        <member name="F:Nistec.Web.HttpUtil.m_ContentType">
            <summary>
            ContentType
            </summary>
        </member>
        <member name="M:Nistec.Web.HttpUtil.#ctor(System.String)">
            <summary>
            Initialized new instance of HttpRequest class
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:Nistec.Web.HttpUtil.#ctor(System.String,System.String)">
            <summary>
            Initialized new instance of HttpRequest class
            </summary>
            <param name="url"></param>
            <param name="method"></param>
        </member>
        <member name="M:Nistec.Web.HttpUtil.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initialized new instance of HttpRequest class
            </summary>
            <param name="method"></param>
            <param name="codePage"></param>
            <param name="isXml"></param>
        </member>
        <member name="P:Nistec.Web.HttpUtil.HttpWebRequest">
            <summary>
            Get HttpWebRequest
            </summary>
        </member>
        <member name="P:Nistec.Web.HttpUtil.IsUrlEncoded">
            <summary>
            Get or Set UrlEncoded
            </summary>
        </member>
        <member name="P:Nistec.Web.HttpUtil.IsXml">
            <summary>
            Get or Set IsXml
            </summary>
        </member>
        <member name="P:Nistec.Web.HttpUtil.ContentType">
            <summary>
            Get or Set ContentType
            </summary>
        </member>
        <member name="P:Nistec.Web.HttpUtil.ExceptionStatus">
            <summary>
            Get the WebExceptionStatus
            </summary>
        </member>
        <member name="P:Nistec.Web.HttpUtil.StatusCode">
            <summary>
            Get the HttpStatusCode
            </summary>
        </member>
        <member name="P:Nistec.Web.HttpUtil.HttpStatusDescription">
            <summary>
            Get the HttpStatus Description
            </summary>
        </member>
        <member name="P:Nistec.Web.HttpUtil.HttpWebException">
            <summary>
            Get the WebException
            </summary>
        </member>
        <member name="M:Nistec.Web.HttpUtil.OnAsyncWorker(System.EventArgs)">
            <summary>
            OnAsyncWorker
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nistec.Web.HttpUtil.AsyncRequest(System.String)">
            <summary>
            Async Request with empty code page
            </summary>
            <param name="postData"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Web.HttpUtil.AsyncRequestUTF8(System.String)">
            <summary>
            Async Request UTF8
            </summary>
            <param name="postData"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Web.HttpUtil.AsyncRequest(System.String,System.String)">
            <summary>
            Async Request
            </summary>
            <param name="postData"></param>
            <param name="codePage"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Web.HttpUtil.AsyncRequest(System.String,System.Int32)">
            <summary>
            AsyncRequest
            </summary>
            <param name="postData"></param>
            <param name="codePage"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Web.HttpUtil.ReadCallback(System.IAsyncResult)">
            <summary>
            ReadCallback
            </summary>
            <param name="asynchronousResult"></param>
        </member>
        <member name="M:Nistec.Web.HttpUtil.DoRequest(System.String)">
            <summary>
            Send HttpWebRequest
            </summary>
            <param name="postData"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Web.HttpUtil.DoRequest(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            DoRequest
            </summary>
            <param name="postData"></param>
            <param name="codePage"></param>
            <param name="maxRetry"></param>
            <param name="delay"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Web.HttpUtil.DoRequest(System.String,System.String)">
            <summary>
            Send HttpWebRequest
            </summary>
            <param name="postData"></param>
            <param name="codePage">codePage</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Web.HttpUtil.DoGet(System.String,System.String,System.String)">
            <summary>
            Send HttpWebRequest
            </summary>
            <param name="url"></param>
            <param name="postData"></param>
            <param name="codePage">codePage</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Web.HttpUtil.DoPost(System.String,System.String,System.Int32)">
            <summary>
            Do post as "application/x-www-form-urlencoded"
            </summary>
            <param name="url"></param>
            <param name="postData"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.GenericTypes">
            <summary>
            Represent a generic type converter
            </summary>
        </member>
        <member name="M:Nistec.GenericTypes.Convert``1(System.Object,Nistec.ConvertDescriptor)">
            <summary>
            Convert
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="cd"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.GenericTypes.Convert``1(System.Object,``0,Nistec.ConvertDescriptor)">
            <summary>
            Convert
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <param name="cd"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.GenericTypes.Default``1">
            <summary>
            Get the Default value for given generic type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Nistec.GenericTypes.Default(System.Type)">
            <summary>
            Get the Default value for given object type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.GenericTypes.ConvertProperty(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Convert input to sepcified type, if input is null or unable to convert
            Creates an instance of the specified type using that type's default constructor.
            </summary>
            <param name="input"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.GenericTypes.ConvertTo``1(System.String)">
            <summary>
            Convert string to struct.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.GenericTypes.ConvertTo``1(System.String,``0)">
            <summary>
            Convert string to struct.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.GenericTypes.ConvertObject``1(System.Object)">
            <summary>
            Convert string to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.GenericTypes.Convert``1(System.Object)">
            <summary>
            Generic Converter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.GenericTypes.Convert``1(System.Object,``0)">
            <summary>
            Generic Converter with default value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.GenericTypes.ImplicitConvert``1(System.Object,``0)">
            <summary>
            Generic implicit Convert an object with default value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.GenericTypes.ImplicitConvert``1(System.Object)">
            <summary>
            Generic implicit Convert an object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.GenericTypes.NZorEmpty(System.Object,System.String)">
            <summary>
            Get indicate wether the value is null or empty, if yes return the given valueIfNull argument.
            </summary>
            <param name="value"></param>
            <param name="valueIfNull"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.GenericTypes.NZ(System.Object,System.String)">
            <summary>
            Generic converter , if the given value is null or DBNull.Value return valueIfNull argument.
            </summary>
            <param name="value"></param>
            <param name="valueIfNull"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.GenericTypes.CanConvert(System.String,System.Type)">
            <summary>  
            Checks the specified value to see if it can be  
            converted into the specified type.  
            <remarks>  
            The method supports all the primitive types of the CLR  
            such as int, boolean, double, guid etc. as well as other  
            simple types like Color and Unit and custom enum types.  
            </remarks>  
            </summary>  
            <param name="value">The value to check.</param>  
            <param name="type">The type that the value will be checked against.</param>  
            <returns>True if the value can convert to the given type, otherwise false. </returns>  
        </member>
        <member name="M:Nistec.GenericTypes.CanConvert``1(System.String)">
            <summary>
            Is ? Can ConvertFrom
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.GenericTypes.ConvertList``1(System.Object[])">
            <summary>
            Convert array of object to generic list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.GenericTypes.ConvertList``1(System.Collections.Generic.List{System.Object})">
            <summary>
            Convert list of object to generic list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.GenericTypes.ConvertArray``1(System.Object[])">
            <summary>
            Convert array of object to generic array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.GenericTypes.Cast``1(System.Object,System.Boolean)">
            <summary>
            Convert an object of the specified type and whose value is equivalent to the specified object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.GenericTypes.ConvertEnum``1(System.String)">
            <summary>
             Converts the string representation of the name or numeric value of one or
             more enumerated constants to an equivalent enumerated object. A string parameter
             is not case-insensitive.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Nistec.IoHelper.FileToString(System.String)">
            <summary>
            Load the entire text file into a string.
            </summary>
            <param name="sFile">Full pathname of file to read.</param>
            <returns>String content of the text file.</returns>
        </member>
        <member name="M:Nistec.IoHelper.FileToString(System.String,System.Int32)">
            <summary>
            Load the text file with specified size as return text.
            </summary>
            <param name="sFile">File to read from.</param>
            <param name="size">Number of char to read.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IoHelper.StringToFile(System.String,System.String,System.Boolean)">
            <summary>
            Save a string to file.
            </summary>
            <param name="strValue">String value to save.</param>
            <param name="strFileName">File name to save to.</param>
            <param name="bAppendToFile">True - to append string to file.  Default false - overwrite file.</param>
        </member>
        <member name="M:Nistec.IoHelper.StringToFile(System.String,System.String)">
            <summary>
            Save a string to file.
            </summary>
        </member>
        <member name="M:Nistec.IoHelper.StringToMemoryStream(System.String)">
            <summary>
            Converts a string to a MemoryStream.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IoHelper.StringToMemoryStream(System.String,System.String)">
            <summary>
            Converts a string to a MemoryStream.
            </summary>
            <param name="s"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IoHelper.MemoryStreamToString(System.IO.MemoryStream)">
            <summary>
            Converts a MemoryStream to a string. Makes some assumptions about the content of the stream. 
            </summary>
            <param name="ms"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IoHelper.MemoryStreamToString(System.IO.MemoryStream,System.String)">
            <summary>
            Converts a MemoryStream to a string. Makes some assumptions about the content of the stream. 
            </summary>
            <param name="ms"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IoHelper.CopyStream(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copy Stream
            </summary>
            <param name="src"></param>
            <param name="dest"></param>
            <param name="length"></param>
        </member>
        <member name="M:Nistec.IoHelper.ReadSream(System.IO.Stream,System.Byte[])">
            <summary>
            Reads data into a complete array, throwing an EndOfStreamException
            if the stream runs out of data first, or if an IOException
            naturally occurs.
            </summary>
            <param name="stream">The stream to read data from</param>
            <param name="data">The array to read bytes into. The array
            will be completely filled from the stream, so an appropriate
            size must be given.</param>
        </member>
        <member name="M:Nistec.IoHelper.ReadSream(System.IO.Stream)">
            <summary>
            Reads data from a stream until the end is reached. The
            data is returned as a byte array. An IOException is
            thrown if any of the underlying IO calls fail.
            </summary>
            <param name="stream">The stream to read data from</param>
        </member>
        <member name="M:Nistec.IoHelper.ReadSream(System.IO.Stream,System.Int32)">
            <summary>
            Reads data from a stream until the end is reached. The
            data is returned as a byte array. An IOException is
            thrown if any of the underlying IO calls fail.
            </summary>
            <param name="stream">The stream to read data from</param>
            <param name="initialLength">The initial buffer length</param>
        </member>
        <member name="M:Nistec.IoHelper.GetFiles(System.String[],System.String[],System.IO.SearchOption)">
            <summary>
            Returns the names of files in a specified directories that match the specified patterns using LINQ
            </summary>
            <param name="srcDirs">The directories to seach</param>
            <param name="searchPatterns">the list of search patterns</param>
            <param name="searchOption"></param>
            <returns>The list of files that match the specified pattern</returns>
        </member>
        <member name="M:Nistec.IoHelper.StreamCopy(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies <b>source</b> stream data to <b>target</b> stream.
            </summary>
            <param name="source">Source stream. Reading starts from stream current position.</param>
            <param name="target">Target stream. Writing starts from stream current position.</param>
            <param name="blockSize">Specifies transfer block size in bytes.</param>
            <returns>Returns number of bytes copied.</returns>
        </member>
        <member name="M:Nistec.IoHelper.NormalizeFolder(System.String)">
            <summary>
            Normalizes folder value. Replaces \ to /, removes duplicate //, removes / from folder start and end.
            </summary>
            <param name="folder">Folder to normalize.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IoHelper.PathFix(System.String)">
            <summary>
            Fixes path separator, replaces / \ with platform separator char.
            </summary>
            <param name="path">Path to fix.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IoHelper.DirectoryExists(System.String)">
            <summary>
            Checks if directory exists. If linux, checks with case-insenstively (linux is case-sensitive). 
            Returns actual dir (In linux it may differ from requested directory, because of case-sensitivity.)
            or null if directory doesn't exist.
            </summary>
            <param name="dirName">Directory to check.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IoHelper.EnsureFolder(System.String)">
            <summary>
            Ensures that specified folder exists, if not it will be created.
            Returns actual dir (In linux it may differ from requested directory, because of case-sensitivity.).
            </summary>
            <param name="folder">Folder name with path.</param>
        </member>
        <member name="M:Nistec.IoHelper.FileExists(System.String)">
            <summary>
            Checks if file exists. If linux, checks with case-insenstively (linux is case-sensitive). 
            Returns actual file (In linux it may differ from requested file, because of case-sensitivity.)
            or null if file doesn't exist.
            </summary>
            <param name="fileName">File to check.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.IoHelper.StreamCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies all data from source stream to destination stream.
            Copy starts from source stream current position and will be copied to the end of source stream.
            </summary>
            <param name="source">Source stream.</param>
            <param name="destination">Destination stream.</param>
        </member>
        <member name="M:Nistec.IoHelper.SaveFile(System.IO.Stream,System.String)">
            <summary>
            SaveFile
            </summary>
            <param name="message"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Nistec.IoHelper.DeleteFile(System.String)">
            <summary>
            DeleteFile
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Nistec.IoHelper.MoveFile(System.String,System.String)">
            <summary>
            MoveFile
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Nistec.Xml.XmlFileSerializer.#ctor">
            <summary>
            Constructor for this class.
            </summary>
        </member>
        <member name="M:Nistec.Xml.XmlFileSerializer.Load(System.Object,System.String)">
            <summary>
            Load an object from an Xml file that is in an Xml Document format.
            <newpara></newpara>
            <example>
            See Load method that uses the SerializedFormatType argument for more information.
            </example>
            </summary>
        </member>
        <member name="M:Nistec.Xml.XmlFileSerializer.Load(System.Object,System.String,Nistec.Xml.XmlFileSerializer.SerializedFormatType)">
            <summary>
            Load an object from an Xml file that is in the specified format.
            <newpara></newpara>
            </summary>
            <param name="obj">Object to be loaded.</param>
            <param name="XmlFilePathName">File Path name of the Xml file containing object(s) serialized to Xml.</param>
            <param name="SerializedFormat">Xml serialized format to load the object from.</param>
            <returns>Returns an Object loaded from the Xml file. If the Object could not be loaded returns null.</returns>
        </member>
        <member name="M:Nistec.Xml.XmlFileSerializer.Load(System.Object,System.String,System.IO.IsolatedStorage.IsolatedStorageFile)">
            <summary>
            Load an object from an Xml file that is in an Xml Document format, at a Isolated storage location.
            </summary>
            <param name="obj">Object to be loaded.</param>
            <param name="XmlFilePathName">File name (no path) of the Xml file containing object(s) serialized to Xml.</param>
            <param name="isolatedStorageFolder">Isolated Storage object that is a user and assembly specific folder location
            from which to Load the Xml file.</param>
            <returns>Returns an Object loaded from the Xml file. If the Object could not be loaded returns null.</returns>
        </member>
        <member name="M:Nistec.Xml.XmlFileSerializer.Save(System.Object,System.String)">
            <summary>
            Save an object to an Xml file that is in an Xml Document format.
            <newpara></newpara>
            <example>
            See Save method that uses the SerializedFormatType argument for more information.
            </example>
            </summary>
        </member>
        <member name="M:Nistec.Xml.XmlFileSerializer.Save(System.Object,System.String,Nistec.Xml.XmlFileSerializer.SerializedFormatType)">
            <summary>
            Save an object to an Xml file that is in the specified format.
            <newpara></newpara>
            </summary>
            <param name="ObjectToSave">Object to be saved.</param>
            <param name="XmlFilePathName">File Path name of the Xml file to contain the object serialized to Xml.</param>
            <param name="SerializedFormat">Xml serialized format to load the object from.</param>
            <returns>Returns success of the object save.</returns>
        </member>
        <member name="M:Nistec.Xml.XmlFileSerializer.Save(System.Object,System.String,System.IO.IsolatedStorage.IsolatedStorageFile)">
            <summary>
            Save an object to an Xml file that is in an Xml Document forward, at a Isolated storage location.
            </summary>
            <param name="ObjectToSave">Object to be saved.</param>
            <param name="XmlFilePathName">File name (no path) of the Xml file to contain the object serialized to Xml.</param>
            <param name="isolatedStorageFolder">Isolated Storage object that is a user and assembly specific folder location
            from which to save the Xml file.</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlFormatter.PropertiesToXml(System.Object,System.String)">
            <summary>
            Serialize object by PropertyDescriptor To Xml
            </summary>
            <param name="obj"></param>
            <param name="nameSpase"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlFormatter.XmlToProperties``1(System.String,System.String)">
            <summary>
            Serialize object by PropertyDescriptor To Xml
            </summary>
            <param name="xmlString"></param>
            <param name="nameSpase"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Xml.XSerializer">
            <summary>
            Custom class used as a wrapper to the Xml serialization of an object to/from an Xml file.
            </summary>
        </member>
        <member name="M:Nistec.Xml.XSerializer.Serialize(System.Object,System.Type,System.Text.Encoding)">
            <summary>
            Serialize To Xml using XmlSerializer
            </summary>
            <param name="body"></param>
            <param name="type"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XSerializer.Serialize``1(``0)">
            <summary>
            Serialize To Xml using XmlSerializer with StringWriter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XSerializer.Serialize``1(``0,System.String)">
            <summary>
            Serialize To Xml using XmlSerializer with StringWriter and specific namespace
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="nameSpace"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XSerializer.Serialize``1(``0,System.String,System.Boolean)">
            <summary>
            Serialize To Xml using XmlSerializer with StringWriter and specific namespace
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="nameSpace"></param>
            <param name="enableXMLSchema"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XSerializer.Serialize``1(``0,System.String,System.Boolean,System.Boolean)">
            <summary>
            Serialize To Xml using XmlSerializer with StringWriter and specific namespace
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="nameSpace"></param>
            <param name="enableXMLSchema"></param>
            <param name="replaceDocumentElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XSerializer.Serialize``1(``0,System.Xml.XmlWriter)">
            <summary>
            Serialize To Xml using XmlSerializer
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XSerializer.Serialize``1(``0,System.String,System.String,System.Boolean)">
            <summary>
            Serialize To Xml using XmlSerializer with MemoryStream and specific encode and namespace
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="encode"></param>
            <param name="nameSpace"></param>
            <param name="enableXMLSchema"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XSerializer.Deserialize``1(System.Xml.XmlReader)">
            <summary>
            Deserialize from Xml using XmlSerializer and XmlDocument
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XSerializer.Deserialize``1(System.String)">
            <summary>
            Deserialize from Xml using XmlSerializer with StringReader and XmlDocument
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XSerializer.Deserialize``1(System.String,System.String)">
            <summary>
            Deserialize from Xml using XmlSerializer with StringReader and specific namespace
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlString"></param>
            <param name="Namespace">Namespace or null</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XSerializer.Deserialize``1(System.String,System.String,System.Boolean)">
            <summary>
            Deserialize from Xml using XmlSerializer with StringReader and specific namespace
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlString"></param>
            <param name="Namespace">Namespace or null</param>
            <param name="removeXmlDeclaration">should remove XmlDeclaration</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XSerializer.Deserialize``1(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Deserialize from Xml using XmlSerializer with specific encoding and namespace
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlString"></param>
            <param name="encode"></param>
            <param name="Namespace">Namespace or null</param>
            <param name="removeXmlDeclaration">should remove XmlDeclaration</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Deserialize from Xml using XmlSerializer
            </summary>
            <param name="smlString"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XSerializer.Deserialize(System.String,System.Type,System.String)">
            <summary>
            Deserialize from Xml using XmlSerializer
            </summary>
            <param name="smlString"></param>
            <param name="type"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlUtil.Serialize(System.Object)">
             <summary>
            Serialize to xml using string builder and property descriptor
             </summary>
             <param name="obj"></param>
             <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlUtil.SerializeConvertible(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlUtil.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            Serialize to xml using string builder and property descriptor
            </summary>
            <param name="m"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Nistec.Xml.XmlBuilder">
            <summary>
            XmlDocument Builder Utility
            </summary>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.#ctor">
            <summary>
            Initilaize new instance of xml builder class
            </summary>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:Nistec.Xml.XmlBuilder.Document">
            <summary>
            Get the XmlDocument
            </summary>
        </member>
        <member name="P:Nistec.Xml.XmlBuilder.Item(System.Int32)">
            <summary>
            Get or Set internal XmlNode
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.CreateAttribute(System.String,System.String)">
            <summary>
            CreateAttribute
            </summary>
            <param name="Name"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.CreateAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            CreateAttribute Attribute to a specific XmlNode
            </summary>
            <param name="xNode"></param>
            <param name="Name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.CreateXmlNode(System.Xml.XmlNodeType,System.String,System.String)">
            <summary>
            CreateXmlNode
            </summary>
            <param name="Name"></param>
            <param name="Value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.CreateElement(System.String,System.String)">
            <summary>
            CreateElement
            </summary>
            <param name="Name"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.CreateNode(System.Xml.XmlNodeType,System.String)">
            <summary>
            CreateNode
            </summary>
            <param name="nodeType"></param>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.CreateNode(System.Xml.XmlNodeType,System.String,System.String)">
            <summary>
            CreateNode
            </summary>
            <param name="nodeType"></param>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.CreateEndElement(System.String)">
            <summary>
            CreateEndElement
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendNode(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Append xml node to xml document 
            </summary>
            <param name="parent"></param>
            <param name="child"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendXmlDeclaration">
            <summary>
            AppendXmlDeclaration
            </summary>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendAttribute(System.String,System.String)">
            <summary>
            Append Attribute to xml document
            </summary>
            <param name="Name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Append Attribute to a specific XmlNode
            </summary>
            <param name="xNode"></param>
            <param name="Name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendAttribute(System.Int32,System.String,System.String)">
            <summary>
            Append Attribute to a specific XmlNode
            </summary>
            <param name="parent"></param>
            <param name="Name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendCDATA(System.String,System.String)">
            <summary>
            Append CDATA section to xml document
            </summary>
            <param name="Name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendNode(System.String,System.String)">
            <summary>
            Append xml node to xml document 
            </summary>
            <param name="Name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendNode(System.String,System.String,System.Int32)">
            <summary>
            Append xml node to xml document 
            </summary>
            <param name="Name"></param>
            <param name="Value"></param>
            <param name="appendTo"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendCDATA(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Append CDATA section to a specific XmlNode
            </summary>
            <param name="xNode"></param>
            <param name="Name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendCDATA(System.Int32,System.String,System.String)">
            <summary>
            Append CDATA section to a specific XmlNode
            </summary>
            <param name="parent"></param>
            <param name="Name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendElement(System.String)">
            <summary>
            Append XmlElement to a specific XmlNode
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendElement(System.String,System.Int32)">
            <summary>
            Append XmlElement to a specific XmlNode
            </summary>
            <param name="Name"></param>
            <param name="appendTo"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendElement(System.String,System.String)">
            <summary>
            Append XmlElement to a specific XmlNode
            </summary>
            <param name="Name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendElement(System.String,System.String,System.Int32)">
            <summary>
            Append XmlElement to a specific XmlNode
            </summary>
            <param name="Name"></param>
            <param name="Value"></param>
            <param name="appendTo"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendEmptyElement(System.String,System.Int32)">
            <summary>
            Append Empty XmlElement to a specific XmlNode
            </summary>
            <param name="Name"></param>
            <param name="appendTo"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendElement(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Append XmlElement to a specific XmlNode
            </summary>
            <param name="xNode"></param>
            <param name="Name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendElement(System.Int32,System.String,System.String)">
            <summary>
            Append XmlElement to a specific XmlNode
            </summary>
            <param name="parent"></param>
            <param name="Name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendElement(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Append XmlElement to a specific XmlNode
            </summary>
            <param name="parent"></param>
            <param name="Name"></param>
            <param name="Value"></param>
            <param name="appendTo"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendElement(System.Int32,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Append XmlElement to a specific XmlNode with list of attributes
            </summary>
            <param name="parent"></param>
            <param name="Name"></param>
            <param name="Value"></param>
            <param name="attributes"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendElement(System.Xml.XmlNode,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Append XmlElement to a specific XmlNode with list of attributes
            </summary>
            <param name="xNode"></param>
            <param name="Name"></param>
            <param name="Value"></param>
            <param name="attributes"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendElementAttributes(System.Int32,System.String,System.String,System.String[])">
            <summary>
            Append XmlElement to a specific XmlNode with list of attributes
            </summary>
            <param name="parent"></param>
            <param name="Name"></param>
            <param name="Value"></param>
            <param name="attributes"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendElementAttributes(System.Xml.XmlNode,System.String,System.String,System.String[])">
            <summary>
            Append XmlElement to a specific XmlNode with list of attributes
            </summary>
            <param name="xNode"></param>
            <param name="Name"></param>
            <param name="Value"></param>
            <param name="attributes"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendEmptyElement(System.Int32,System.String,System.Int32)">
            <summary>
            Append EmptyXmlElement to a specific XmlNode
            </summary>
            <param name="parent"></param>
            <param name="Name"></param>
            <param name="appendTo"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendNodeList(System.String,System.String[],System.String[])">
            <summary>
            Create XmlElement and Append Node List
            </summary>
            <param name="NodeName"></param>
            <param name="Names"></param>
            <param name="Values"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendNodeList(System.Int32,System.String[],System.String[])">
            <summary>
            Append Node List to a spesific XmlNode
            </summary>
            <param name="parent"></param>
            <param name="Names"></param>
            <param name="Values"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendNodeList(System.Xml.XmlNode,System.String[],System.String[])">
            <summary>
            Append Node List to a spesific XmlNode
            </summary>
            <param name="xNode"></param>
            <param name="Names"></param>
            <param name="Values"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendNodeList(System.Xml.XmlNode,System.Xml.XmlNode[])">
            <summary>
            Append Node List to a spesific XmlNode
            </summary>
            <param name="xNode"></param>
            <param name="childs"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendNodeList(System.String,System.String,System.String[])">
            <summary>
            Create XmlElement and Append Node List
            </summary>
            <param name="NodeName"></param>
            <param name="Names"></param>
            <param name="Values"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendNodeList(System.Int32,System.String,System.String[])">
            <summary>
            Append Node List to a spesific XmlNode
            </summary>
            <param name="parent"></param>
            <param name="Names"></param>
            <param name="Values"></param>
        </member>
        <member name="M:Nistec.Xml.XmlBuilder.AppendNodeList(System.Xml.XmlNode,System.String,System.String[])">
            <summary>
            Append Node List to a spesific XmlNode
            </summary>
            <param name="xNode"></param>
            <param name="Names"></param>
            <param name="Values"></param>
        </member>
        <member name="T:Nistec.Xml.XmlParser">
            <summary>
            XmlParser utility that parse xml
            </summary>
        </member>
        <member name="M:Nistec.Xml.XmlParser.#ctor(System.Xml.XmlDocument)">
            <summary>
            Initilaize new instance of xml parser class
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:Nistec.Xml.XmlParser.#ctor(System.String)">
            <summary>
            Initilaize new instance of xml parser class
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:Nistec.Xml.XmlParser.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:Nistec.Xml.XmlParser.Document">
            <summary>
            Get XmlDocument
            </summary>
        </member>
        <member name="M:Nistec.Xml.XmlParser.GetAttributeValue(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            GetAttributeValue
            </summary>
            <param name="xNode"></param>
            <param name="AttributeName"></param>
            <param name="raiseError"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.GetAttributeValue(System.Xml.XmlNode,System.String,System.String,System.Boolean)">
            <summary>
            GetAttributeValue
            </summary>
            <param name="xNode"></param>
            <param name="Xpath"></param>
            <param name="AttributeName"></param>
            <param name="raiseError"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.GetAttributeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            GetAttributeValue
            </summary>
            <param name="xNode"></param>
            <param name="AttributeName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.GetAttributeValue(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            GetAttributeValue
            </summary>
            <param name="xNode"></param>
            <param name="AttributeName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.GetAttributeValue(System.Xml.XmlNode,System.String,System.String,System.String)">
            <summary>
            GetAttributeValue
            </summary>
            <param name="xNode"></param>
            <param name="Xpath"></param>
            <param name="AttributeName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.GetAttributeValue(System.Xml.XmlNode,System.String,System.String,System.Int32)">
            <summary>
            GetAttributeValue
            </summary>
            <param name="xNode"></param>
            <param name="Xpath"></param>
            <param name="AttributeName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.SelectNodes(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Get XmlNodeList SelectNodes from a specific XmlNode
            </summary>
            <param name="Node"></param>
            <param name="Xpath"></param>
            <param name="raiseError"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.GetNodeListValues(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Get All values from XmlNodeList by Select a specific XmlNode
            </summary>
            <param name="Node"></param>
            <param name="Xpath"></param>
            <param name="raiseError"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.GetNodeListValues(System.Xml.XmlNodeList,System.Boolean)">
            <summary>
            Get All values from XmlNodeList
            </summary>
            <param name="list"></param>
            <param name="raiseError"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.GetNodeListValues(System.Xml.XmlNode,System.String,System.Boolean,System.String[0:,0:]@)">
            <summary>
            Get All values with all attributes from XmlNodeList by Select a specific XmlNode
            </summary>
            <param name="Node"></param>
            <param name="Xpath"></param>
            <param name="raiseError"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.GetNodeListValues(System.Xml.XmlNodeList,System.Boolean,System.String[0:,0:]@)">
            <summary>
            Get All values from XmlNodeList with all attributes
            </summary>
            <param name="list"></param>
            <param name="raiseError"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.SelectSingleNode(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Select Single Node by xpath
            </summary>
            <param name="Node"></param>
            <param name="Xpath"></param>
            <param name="raiseError"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.SelectSingleNode(System.String,System.Boolean)">
            <summary>
            Select Single Node by xpath
            </summary>
            <param name="Xpath"></param>
            <param name="raiseError"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.GetNodeValue(System.String,System.Boolean)">
            <summary>
            Select Single Node by xpath and return the node value
            </summary>
            <param name="Xpath"></param>
            <param name="raiseError"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.GetNodeValue(System.String,System.String)">
            <summary>
            Select Single Node by xpath and return the node value
            </summary>
            <param name="Xpath"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.GetNodeValue(System.String,System.Int32)">
            <summary>
            Select Single Node by xpath and return the node value
            </summary>
            <param name="Xpath"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.GetNodeValue(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Select Single Node by xpath and return the node value
            </summary>
            <param name="Node"></param>
            <param name="Xpath"></param>
            <param name="raiseError"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.GetNodeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Select Single Node by xpath and return the node value
            </summary>
            <param name="Node"></param>
            <param name="Xpath"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.GetNodeValue(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Select Single Node by xpath and return the node value
            </summary>
            <param name="Node"></param>
            <param name="Xpath"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.GetNodeInnerText(System.String,System.Boolean)">
            <summary>
            Select Single Node by xpath and return the node InnerText
            </summary>
            <param name="Xpath"></param>
            <param name="raiseError"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.GetNodeInnerText(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Select Single Node by xpath and return the node InnerText
            </summary>
            <param name="Node"></param>
            <param name="Xpath"></param>
            <param name="raiseError"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.GetNodeInnerText(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Select Single Node by xpath and return the node InnerText
            </summary>
            <param name="Node"></param>
            <param name="Xpath"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlParser.GetNodeInnerText(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Select Single Node by xpath and return the node InnerText
            </summary>
            <param name="Node"></param>
            <param name="Xpath"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlValidator.#ctor">
            <summary>
            Ctor using default settings
            </summary>
        </member>
        <member name="P:Nistec.Xml.XmlValidator.Result">
            <summary>
            Get Validate result
            </summary>
        </member>
        <member name="M:Nistec.Xml.XmlValidator.ValidateDTD(System.String)">
            <summary>
            Validate xml 
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlValidator.ValidateDTD(System.String,System.String)">
            <summary>
            Validate xml 
            </summary>
            <param name="xml"></param>
            <param name="DTD"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Xml.XmlValidator.ValidateDTD(System.Xml.XmlTextReader)">
            <summary>
            Validate xml 
            </summary>
            <param name="tr"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Regx.IsUrl(System.String,System.String)">
            <summary>
            Validate Url
            </summary>
            <param name="prefix">http:// or other types or combination (http|https|ftp)://</param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Strings.SplitString(System.String,System.Int32,System.Int32)">
            <summary>
            Split string to segements by maxLength per segement
            </summary>
            <param name="s"></param>
            <param name="limt"></param>
            <param name="maxLengthPerSigment"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Strings.SplitString(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Split string to segements by sperator and maxLength per segement
            </summary>
            <param name="s"></param>
            <param name="limt"></param>
            <param name="maxLengthPerSigment"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Types.IsEmpty(System.Object)">
            <summary>
            IsEmpty object|string|Guid or number==0
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Types.NZorEmpty(System.Object,System.String)">
            <summary>
            Get indicate wether the value is null or empty, if yes return the given valueIfNull argument.
            </summary>
            <param name="value"></param>
            <param name="valueIfNull"></param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Types.FormatDate(System.String,System.String,System.DateTime)">
            <summary>
            Get string date and return formated string date ,on exception return defult value
            </summary>
            <param name="s">string dateTime</param>
            <param name="format">format</param>
            <param name="defaultValue">value to return if invalid cast exception</param>
            <returns>String Date Time formated</returns>
        </member>
        <member name="M:Nistec.Types.FormatDate(System.String,System.String,System.String)">
            <summary>
            Get string date and return formated string date ,on exception return defult value
            </summary>
            <param name="s">string dateTime</param>
            <param name="format">format</param>
            <param name="defaultValue">string value to return if invalid cast exception</param>
            <returns>String Date Time formated</returns>
        </member>
        <member name="M:Nistec.Types.ToEnum``1(System.Object)">
            <summary>
             Converts the string representation of the name or numeric value of one or
             more enumerated constants to an equivalent enumerated object. A string parameter
             is not case-insensitive.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Nistec.Types.IsValidTime(System.String)">
            <summary>
            IsValidTime
            </summary>
            <param name="time">12:30</param>
            <returns></returns>
        </member>
        <member name="M:Nistec.Types.IsValidMonthDay(System.String,System.Int32[]@)">
            <summary>
            IsValidMonthDay
            </summary>
            <param name="date">22/11</param>
            <returns></returns>
        </member>
    </members>
</doc>
