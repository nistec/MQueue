<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<ndoc SchemaVersion="2.0">
  <copyright text="Copyright © MControl.Net" />
  <threadsafety static="true" instance="false" />
  <namespaceHierarchies>
    <namespaceHierarchy name="MControl.Util.Configuration">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System">
        <hierarchyType id="T:MControl.Util.Configuration.Config" displayName="Config" namespace="MControl.Util.Configuration">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:MControl.Util.Configuration.IConfig" displayName="IConfig" namespace="MControl.Util.Configuration" fullName="MControl.Util.Configuration.IConfig" />
            <hierarchyInterface id="T:MControl.Util.Configuration.IConfigReadOnly" displayName="IConfigReadOnly" namespace="MControl.Util.Configuration" fullName="MControl.Util.Configuration.IConfigReadOnly" />
            <hierarchyInterface id="T:System.ICloneable" displayName="ICloneable" namespace="System" fullName="System.ICloneable" />
          </hierarchyInterfaces>
          <hierarchyType id="T:MControl.Util.Configuration.Ini" displayName="Ini" namespace="MControl.Util.Configuration" />
          <hierarchyType id="T:MControl.Util.Configuration.Registry" displayName="Registry" namespace="MControl.Util.Configuration" />
        </hierarchyType>
        <hierarchyType id="T:MControl.Util.Configuration.IConfig" displayName="IConfig" namespace="MControl.Util.Configuration">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:MControl.Util.Configuration.IConfigReadOnly" displayName="IConfigReadOnly" namespace="MControl.Util.Configuration" fullName="MControl.Util.Configuration.IConfigReadOnly" />
            <hierarchyInterface id="T:System.ICloneable" displayName="ICloneable" namespace="System" fullName="System.ICloneable" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:MControl.Util.Configuration.IConfigReadOnly" displayName="IConfigReadOnly" namespace="MControl.Util.Configuration">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.ICloneable" displayName="ICloneable" namespace="System" fullName="System.ICloneable" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:System.Delegate" displayName="Delegate" namespace="System">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.ICloneable" displayName="ICloneable" namespace="System" fullName="System.ICloneable" />
            <hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" displayName="ISerializable" namespace="System.Runtime.Serialization" fullName="System.Runtime.Serialization.ISerializable" />
          </hierarchyInterfaces>
          <hierarchyType id="T:System.MulticastDelegate" displayName="MulticastDelegate" namespace="System">
            <hierarchyType id="T:MControl.Util.Configuration.ConfigChangedHandler" displayName="ConfigChangedHandler" namespace="MControl.Util.Configuration" />
            <hierarchyType id="T:MControl.Util.Configuration.ConfigChangingHandler" displayName="ConfigChangingHandler" namespace="MControl.Util.Configuration" />
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.EventArgs" displayName="EventArgs" namespace="System">
          <hierarchyType id="T:MControl.Util.Configuration.ConfigChangedArgs" displayName="ConfigChangedArgs" namespace="MControl.Util.Configuration">
            <hierarchyType id="T:MControl.Util.Configuration.ConfigChangingArgs" displayName="ConfigChangingArgs" namespace="MControl.Util.Configuration" />
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.ValueType" displayName="ValueType" namespace="System">
          <hierarchyType id="T:System.Enum" displayName="Enum" namespace="System">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:System.IComparable" displayName="IComparable" namespace="System" fullName="System.IComparable" />
              <hierarchyInterface id="T:System.IConvertible" displayName="IConvertible" namespace="System" fullName="System.IConvertible" />
              <hierarchyInterface id="T:System.IFormattable" displayName="IFormattable" namespace="System" fullName="System.IFormattable" />
            </hierarchyInterfaces>
            <hierarchyType id="T:MControl.Util.Configuration.ConfigChangeType" displayName="ConfigChangeType" namespace="MControl.Util.Configuration" />
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="MControl.Net">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System">
        <hierarchyType id="T:MControl.Net.NetUtils" displayName="NetUtils" namespace="MControl.Net" />
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="MControl">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System">
        <hierarchyType id="T:MControl.Info" displayName="Info" namespace="MControl" />
        <hierarchyType id="T:MControl.MsgBox" displayName="MsgBox" namespace="MControl" />
        <hierarchyType id="T:MControl.RM" displayName="RM" namespace="MControl" />
        <hierarchyType id="T:MControl.Shell" displayName="Shell" namespace="MControl" />
        <hierarchyType id="T:MControl.Strings" displayName="Strings" namespace="MControl" />
        <hierarchyType id="T:MControl.StringType" displayName="StringType" namespace="MControl" />
        <hierarchyType id="T:MControl.Types" displayName="Types" namespace="MControl" />
        <hierarchyType id="T:MControl.UtilHelper" displayName="UtilHelper" namespace="MControl" />
        <hierarchyType id="T:System.ValueType" displayName="ValueType" namespace="System">
          <hierarchyType id="T:MControl.COLUMN" displayName="COLUMN" namespace="MControl" />
          <hierarchyType id="T:MControl.Range" displayName="Range" namespace="MControl" />
          <hierarchyType id="T:MControl.Types.BoolRange" displayName="Types.BoolRange" namespace="MControl" />
          <hierarchyType id="T:System.Enum" displayName="Enum" namespace="System">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:System.IComparable" displayName="IComparable" namespace="System" fullName="System.IComparable" />
              <hierarchyInterface id="T:System.IConvertible" displayName="IConvertible" namespace="System" fullName="System.IConvertible" />
              <hierarchyInterface id="T:System.IFormattable" displayName="IFormattable" namespace="System" fullName="System.IFormattable" />
            </hierarchyInterfaces>
            <hierarchyType id="T:MControl.Alignment" displayName="Alignment" namespace="MControl" />
            <hierarchyType id="T:MControl.BaseDataType" displayName="BaseDataType" namespace="MControl" />
            <hierarchyType id="T:MControl.BoolFormats" displayName="BoolFormats" namespace="MControl" />
            <hierarchyType id="T:MControl.CompareMethod" displayName="CompareMethod" namespace="MControl" />
            <hierarchyType id="T:MControl.DataTypes" displayName="DataTypes" namespace="MControl" />
            <hierarchyType id="T:MControl.DateFormats" displayName="DateFormats" namespace="MControl" />
            <hierarchyType id="T:MControl.DateInterval" displayName="DateInterval" namespace="MControl" />
            <hierarchyType id="T:MControl.DateTimeFormats" displayName="DateTimeFormats" namespace="MControl" />
            <hierarchyType id="T:MControl.Direction" displayName="Direction" namespace="MControl" />
            <hierarchyType id="T:MControl.Edge" displayName="Edge" namespace="MControl" />
            <hierarchyType id="T:MControl.EncodingType" displayName="EncodingType" namespace="MControl" />
            <hierarchyType id="T:MControl.FirstDayOfWeek" displayName="FirstDayOfWeek" namespace="MControl" />
            <hierarchyType id="T:MControl.Formats" displayName="Formats" namespace="MControl" />
            <hierarchyType id="T:MControl.NumberFormats" displayName="NumberFormats" namespace="MControl" />
            <hierarchyType id="T:MControl.PermsLevel" displayName="PermsLevel" namespace="MControl" />
            <hierarchyType id="T:MControl.UITypes" displayName="UITypes" namespace="MControl" />
            <hierarchyType id="T:MControl.VisualStyle" displayName="VisualStyle" namespace="MControl" />
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="MControl.Win32">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System">
        <hierarchyType id="T:MControl.Win32.BITMAPINFO" displayName="BITMAPINFO" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.BITMAPINFOHEADER" displayName="BITMAPINFOHEADER" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.CommonHandles" displayName="CommonHandles" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.INITCOMMONCONTROLSEX" displayName="INITCOMMONCONTROLSEX" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.IntSecurity" displayName="IntSecurity" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.WinAPI" displayName="WinAPI" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.WinAPI.DRAWITEMSTRUCT" displayName="WinAPI.DRAWITEMSTRUCT" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.WinAPI.MEASUREITEMSTRUCT" displayName="WinAPI.MEASUREITEMSTRUCT" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.WinMethods" displayName="WinMethods" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.WinMethods.COMRECT" displayName="WinMethods.COMRECT" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.WinMethods.DRAWITEMSTRUCT" displayName="WinMethods.DRAWITEMSTRUCT" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.WinMethods.INITCOMMONCONTROLSEX" displayName="WinMethods.INITCOMMONCONTROLSEX" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.WinMethods.LOGBRUSH" displayName="WinMethods.LOGBRUSH" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.WinMethods.MEASUREITEMSTRUCT" displayName="WinMethods.MEASUREITEMSTRUCT" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.WinMethods.NMDATETIMECHANGE" displayName="WinMethods.NMDATETIMECHANGE" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.WinMethods.NMDATETIMEFORMAT" displayName="WinMethods.NMDATETIMEFORMAT" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.WinMethods.POINT" displayName="WinMethods.POINT" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.WinMethods.SCROLLINFO" displayName="WinMethods.SCROLLINFO" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.WinMethods.SYSTEMTIME" displayName="WinMethods.SYSTEMTIME" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.WinMethods.SYSTEMTIMEARRAY" displayName="WinMethods.SYSTEMTIMEARRAY" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.WinMethods.TCHITTESTINFO" displayName="WinMethods.TCHITTESTINFO" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.WinMethods.TCITEM_T" displayName="WinMethods.TCITEM_T" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.WinMethods.TOOLINFO_T" displayName="WinMethods.TOOLINFO_T" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.WinMethods.TV_HITTESTINFO" displayName="WinMethods.TV_HITTESTINFO" namespace="MControl.Win32" />
        <hierarchyType id="T:MControl.Win32.WinMsgs" displayName="WinMsgs" namespace="MControl.Win32" />
        <hierarchyType id="T:System.Delegate" displayName="Delegate" namespace="System">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.ICloneable" displayName="ICloneable" namespace="System" fullName="System.ICloneable" />
            <hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" displayName="ISerializable" namespace="System.Runtime.Serialization" fullName="System.Runtime.Serialization.ISerializable" />
          </hierarchyInterfaces>
          <hierarchyType id="T:System.MulticastDelegate" displayName="MulticastDelegate" namespace="System">
            <hierarchyType id="T:MControl.Win32.WinAPI.HookProc" displayName="WinAPI.HookProc" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.WinMethods.EnumChildrenCallback" displayName="WinMethods.EnumChildrenCallback" namespace="MControl.Win32" />
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.MarshalByRefObject" displayName="MarshalByRefObject" namespace="System">
          <hierarchyType id="T:MControl.Win32.WinMethods.FontHandleWrapper" displayName="WinMethods.FontHandleWrapper" namespace="MControl.Win32" />
        </hierarchyType>
        <hierarchyType id="T:System.ValueType" displayName="ValueType" namespace="System">
          <hierarchyType id="T:MControl.Win32.BITMAP" displayName="BITMAP" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.BITMAPINFO_FLAT" displayName="BITMAPINFO_FLAT" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.BLENDFUNCTION" displayName="BLENDFUNCTION" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.CREATESTRUCT" displayName="CREATESTRUCT" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.DLLVERSIONINFO" displayName="DLLVERSIONINFO" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.HD_HITTESTINFO" displayName="HD_HITTESTINFO" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.HDITEM" displayName="HDITEM" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.LogBrush" displayName="LogBrush" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.LOGBRUSH" displayName="LOGBRUSH" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.LVITEM" displayName="LVITEM" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.MOUSEHOOKSTRUCT" displayName="MOUSEHOOKSTRUCT" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.MSG" displayName="MSG" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.NMCUSTOMDRAW" displayName="NMCUSTOMDRAW" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.NMHDR" displayName="NMHDR" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.NMLVCUSTOMDRAW" displayName="NMLVCUSTOMDRAW" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.NMREBARCHEVRON" displayName="NMREBARCHEVRON" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.NMTBCUSTOMDRAW" displayName="NMTBCUSTOMDRAW" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.NMTOOLBAR" displayName="NMTOOLBAR" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.NMTVCUSTOMDRAW" displayName="NMTVCUSTOMDRAW" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.NOTIFYICONDATA" displayName="NOTIFYICONDATA" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.PAINTSTRUCT" displayName="PAINTSTRUCT" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.PALETTEENTRY" displayName="PALETTEENTRY" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.PARAFORMAT2" displayName="PARAFORMAT2" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.POINT" displayName="POINT" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.POINTSTRUCT" displayName="POINTSTRUCT" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.REBARBANDINFO" displayName="REBARBANDINFO" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.Rect" displayName="Rect" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.RECT" displayName="RECT" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.RGBQUAD" displayName="RGBQUAD" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.SCROLLINFO" displayName="SCROLLINFO" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.SIZE" displayName="SIZE" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.STRINGBUFFER" displayName="STRINGBUFFER" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.TBBUTTON" displayName="TBBUTTON" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.TBBUTTONINFO" displayName="TBBUTTONINFO" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.TOOLTIPTEXT" displayName="TOOLTIPTEXT" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.TOOLTIPTEXTA" displayName="TOOLTIPTEXTA" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.TRACKMOUSEEVENTS" displayName="TRACKMOUSEEVENTS" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.TVITEM" displayName="TVITEM" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.TVITEMEX" displayName="TVITEMEX" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.UDACCEL" displayName="UDACCEL" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.WINDOWPLACEMENT" displayName="WINDOWPLACEMENT" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.WinMethods.NMHDR" displayName="WinMethods.NMHDR" namespace="MControl.Win32" />
          <hierarchyType id="T:MControl.Win32.WinMethods.RECT" displayName="WinMethods.RECT" namespace="MControl.Win32" />
          <hierarchyType id="T:System.Enum" displayName="Enum" namespace="System">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:System.IComparable" displayName="IComparable" namespace="System" fullName="System.IComparable" />
              <hierarchyInterface id="T:System.IConvertible" displayName="IConvertible" namespace="System" fullName="System.IConvertible" />
              <hierarchyInterface id="T:System.IFormattable" displayName="IFormattable" namespace="System" fullName="System.IFormattable" />
            </hierarchyInterfaces>
            <hierarchyType id="T:MControl.Win32.ActivateState" displayName="ActivateState" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.AlphaFlags" displayName="AlphaFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.AnimateFlags" displayName="AnimateFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.BackgroundMode" displayName="BackgroundMode" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.BrushStyles" displayName="BrushStyles" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ClipboardFormats" displayName="ClipboardFormats" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.CombineFlags" displayName="CombineFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ComboBoxMessages" displayName="ComboBoxMessages" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.CommonControlInitFlags" displayName="CommonControlInitFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.CommonControlStyles" displayName="CommonControlStyles" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.Cursors" displayName="Cursors" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.CursorType" displayName="CursorType" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.CustomDrawDrawStateFlags" displayName="CustomDrawDrawStateFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.CustomDrawItemStateFlags" displayName="CustomDrawItemStateFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.CustomDrawReturnFlags" displayName="CustomDrawReturnFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.DialogCodes" displayName="DialogCodes" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.DrawTextFormatFlags" displayName="DrawTextFormatFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.EditConrolNotifyMsg" displayName="EditConrolNotifyMsg" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.EditControlMsg" displayName="EditControlMsg" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.EditControlSetMargin" displayName="EditControlSetMargin" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.EditControlStyles" displayName="EditControlStyles" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.EnableScrollBarFlags" displayName="EnableScrollBarFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.GetDCExFlags" displayName="GetDCExFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.GetWindowLongFlags" displayName="GetWindowLongFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.HatchStyles" displayName="HatchStyles" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.HeaderControlHitTestFlags" displayName="HeaderControlHitTestFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.HeaderControlMessages" displayName="HeaderControlMessages" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.HeaderControlNotifications" displayName="HeaderControlNotifications" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.HeaderItemFlags" displayName="HeaderItemFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.HitTest" displayName="HitTest" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ImageListFlags" displayName="ImageListFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ListViewItemFlags" displayName="ListViewItemFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ListViewMessages" displayName="ListViewMessages" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ListViewNotifications" displayName="ListViewNotifications" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.MenuCharReturnValues" displayName="MenuCharReturnValues" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.MouseActivateFlags" displayName="MouseActivateFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.MouseHookFilters" displayName="MouseHookFilters" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.Msg" displayName="Msg" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.Msgs" displayName="Msgs" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.NotificationMessages" displayName="NotificationMessages" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.NotifyCommand" displayName="NotifyCommand" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.NotifyFlags" displayName="NotifyFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.NotifyInfoFlags" displayName="NotifyInfoFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.NotifyState" displayName="NotifyState" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ObjectTypes" displayName="ObjectTypes" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.PatBltTypes" displayName="PatBltTypes" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.PeekMessageFlags" displayName="PeekMessageFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.RasterOperations" displayName="RasterOperations" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.RebarInfoMask" displayName="RebarInfoMask" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.RebarMessages" displayName="RebarMessages" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.RebarNotifications" displayName="RebarNotifications" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.RebarStyles" displayName="RebarStyles" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.RebarStylesEx" displayName="RebarStylesEx" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ReflectedMessages" displayName="ReflectedMessages" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.RichEditAlignment" displayName="RichEditAlignment" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.RichEditMask" displayName="RichEditMask" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.RichEditMessages" displayName="RichEditMessages" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.RichEditNumbering" displayName="RichEditNumbering" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.RichEditNumberingStyle" displayName="RichEditNumberingStyle" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.RichEditTypography" displayName="RichEditTypography" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ScrollBarFlags" displayName="ScrollBarFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ScrollBarInfoFlags" displayName="ScrollBarInfoFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ScrollBarRequests" displayName="ScrollBarRequests" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ScrollBarTypes" displayName="ScrollBarTypes" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ScrollWindowExFlags" displayName="ScrollWindowExFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.SetWindowLongOffsets" displayName="SetWindowLongOffsets" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.SetWindowPosFlags" displayName="SetWindowPosFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.SetWindowPosZ" displayName="SetWindowPosZ" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.SetWindowPosZOrder" displayName="SetWindowPosZOrder" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ShowWindowStyles" displayName="ShowWindowStyles" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.SPIActions" displayName="SPIActions" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.SpinControlMsg" displayName="SpinControlMsg" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.SpinControlStyles" displayName="SpinControlStyles" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.SPIWinINIFlags" displayName="SPIWinINIFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.StrechModeFlags" displayName="StrechModeFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.SubItemPortion" displayName="SubItemPortion" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.SystemMetricsCodes" displayName="SystemMetricsCodes" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ToolBarButtonInfoFlags" displayName="ToolBarButtonInfoFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ToolBarButtonStates" displayName="ToolBarButtonStates" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ToolBarButtonStyles" displayName="ToolBarButtonStyles" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ToolBarExStyles" displayName="ToolBarExStyles" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ToolBarMessages" displayName="ToolBarMessages" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ToolBarNotifications" displayName="ToolBarNotifications" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ToolBarStyles" displayName="ToolBarStyles" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.ToolTipFlags" displayName="ToolTipFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.TrackerEventFlags" displayName="TrackerEventFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.TreeViewItemFlags" displayName="TreeViewItemFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.TreeViewMessages" displayName="TreeViewMessages" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.UpdateLayeredWindowsFlags" displayName="UpdateLayeredWindowsFlags" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.VirtualKeys" displayName="VirtualKeys" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.WindowExStyles" displayName="WindowExStyles" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.WindowsHookCodes" displayName="WindowsHookCodes" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.WindowStyles" displayName="WindowStyles" namespace="MControl.Win32" />
            <hierarchyType id="T:MControl.Win32.WinMethods.TabControlHitTest" displayName="WinMethods.TabControlHitTest" namespace="MControl.Win32" />
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="MControl.Util.Plugins">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System">
        <hierarchyType id="T:MControl.Util.Plugins.IPlugin" displayName="IPlugin" namespace="MControl.Util.Plugins" />
        <hierarchyType id="T:MControl.Util.Plugins.IPluginMessage" displayName="IPluginMessage" namespace="MControl.Util.Plugins" />
        <hierarchyType id="T:MControl.Util.Plugins.PluginCollection.PluginCollectionEnumerator" displayName="PluginCollection.PluginCollectionEnumerator" namespace="MControl.Util.Plugins">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.Collections.IEnumerator" displayName="IEnumerator" namespace="System.Collections" fullName="System.Collections.IEnumerator" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:System.Attribute" displayName="Attribute" namespace="System">
          <hierarchyType id="T:MControl.Util.Plugins.PluginAttribute" displayName="PluginAttribute" namespace="MControl.Util.Plugins" />
        </hierarchyType>
        <hierarchyType id="T:System.Collections.CollectionBase" displayName="CollectionBase" namespace="System.Collections">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.Collections.ICollection" displayName="ICollection" namespace="System.Collections" fullName="System.Collections.ICollection" />
            <hierarchyInterface id="T:System.Collections.IEnumerable" displayName="IEnumerable" namespace="System.Collections" fullName="System.Collections.IEnumerable" />
            <hierarchyInterface id="T:System.Collections.IList" displayName="IList" namespace="System.Collections" fullName="System.Collections.IList" />
          </hierarchyInterfaces>
          <hierarchyType id="T:MControl.Util.Plugins.PluginCollection" displayName="PluginCollection" namespace="MControl.Util.Plugins" />
        </hierarchyType>
        <hierarchyType id="T:System.Exception" displayName="Exception" namespace="System">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" displayName="ISerializable" namespace="System.Runtime.Serialization" fullName="System.Runtime.Serialization.ISerializable" />
          </hierarchyInterfaces>
          <hierarchyType id="T:System.ApplicationException" displayName="ApplicationException" namespace="System">
            <hierarchyType id="T:MControl.Util.Plugins.PluginClassificationNotFoundException" displayName="PluginClassificationNotFoundException" namespace="MControl.Util.Plugins" />
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="MControl.Threading">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System">
        <hierarchyType id="T:MControl.Threading.AsyncInvoke" displayName="AsyncInvoke" namespace="MControl.Threading">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.IDisposable" displayName="IDisposable" namespace="System" fullName="System.IDisposable" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:MControl.Threading.AsyncThreadPool" displayName="AsyncThreadPool" namespace="MControl.Threading">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.IDisposable" displayName="IDisposable" namespace="System" fullName="System.IDisposable" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:MControl.Threading.GenericThreadPool" displayName="GenericThreadPool" namespace="MControl.Threading">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.IDisposable" displayName="IDisposable" namespace="System" fullName="System.IDisposable" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:MControl.Threading.IWorkItemResult" displayName="IWorkItemResult" namespace="MControl.Threading" />
        <hierarchyType id="T:MControl.Threading.SyncMonitor" displayName="SyncMonitor" namespace="MControl.Threading" />
        <hierarchyType id="T:MControl.Threading.SyncThreadPool" displayName="SyncThreadPool" namespace="MControl.Threading" />
        <hierarchyType id="T:MControl.Threading.SyncThreadPoolConfig" displayName="SyncThreadPoolConfig" namespace="MControl.Threading" />
        <hierarchyType id="T:MControl.Threading.ThreadPoolStateInfo" displayName="ThreadPoolStateInfo" namespace="MControl.Threading" />
        <hierarchyType id="T:System.Delegate" displayName="Delegate" namespace="System">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.ICloneable" displayName="ICloneable" namespace="System" fullName="System.ICloneable" />
            <hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" displayName="ISerializable" namespace="System.Runtime.Serialization" fullName="System.Runtime.Serialization.ISerializable" />
          </hierarchyInterfaces>
          <hierarchyType id="T:System.MulticastDelegate" displayName="MulticastDelegate" namespace="System">
            <hierarchyType id="T:MControl.Threading.AsyncCallEventHandler" displayName="AsyncCallEventHandler" namespace="MControl.Threading" />
            <hierarchyType id="T:MControl.Threading.AsyncDataResultEventHandler" displayName="AsyncDataResultEventHandler" namespace="MControl.Threading" />
            <hierarchyType id="T:MControl.Threading.AsyncProgressEventHandler" displayName="AsyncProgressEventHandler" namespace="MControl.Threading" />
            <hierarchyType id="T:MControl.Threading.AsyncResultEventHandler" displayName="AsyncResultEventHandler" namespace="MControl.Threading" />
            <hierarchyType id="T:MControl.Threading.PostExecuteWorkItemCallback" displayName="PostExecuteWorkItemCallback" namespace="MControl.Threading" />
            <hierarchyType id="T:MControl.Threading.WorkItemCallback" displayName="WorkItemCallback" namespace="MControl.Threading" />
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.EventArgs" displayName="EventArgs" namespace="System">
          <hierarchyType id="T:MControl.Threading.AsyncCallEventArgs" displayName="AsyncCallEventArgs" namespace="MControl.Threading" />
          <hierarchyType id="T:MControl.Threading.AsyncDataResultEventArgs" displayName="AsyncDataResultEventArgs" namespace="MControl.Threading" />
          <hierarchyType id="T:MControl.Threading.AsyncProgressEventArgs" displayName="AsyncProgressEventArgs" namespace="MControl.Threading" />
          <hierarchyType id="T:MControl.Threading.AsyncResultEventArgs" displayName="AsyncResultEventArgs" namespace="MControl.Threading" />
        </hierarchyType>
        <hierarchyType id="T:System.Exception" displayName="Exception" namespace="System">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" displayName="ISerializable" namespace="System.Runtime.Serialization" fullName="System.Runtime.Serialization.ISerializable" />
          </hierarchyInterfaces>
          <hierarchyType id="T:System.ApplicationException" displayName="ApplicationException" namespace="System">
            <hierarchyType id="T:MControl.Threading.WorkItemCancelException" displayName="WorkItemCancelException" namespace="MControl.Threading" />
            <hierarchyType id="T:MControl.Threading.WorkItemTimeoutException" displayName="WorkItemTimeoutException" namespace="MControl.Threading" />
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.MarshalByRefObject" displayName="MarshalByRefObject" namespace="System">
          <hierarchyType id="T:System.ComponentModel.Component" displayName="Component" namespace="System.ComponentModel">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:System.ComponentModel.IComponent" displayName="IComponent" namespace="System.ComponentModel" fullName="System.ComponentModel.IComponent" />
              <hierarchyInterface id="T:System.IDisposable" displayName="IDisposable" namespace="System" fullName="System.IDisposable" />
            </hierarchyInterfaces>
            <hierarchyType id="T:System.Timers.Timer" displayName="Timer" namespace="System.Timers">
              <hierarchyInterfaces>
                <hierarchyInterface id="T:System.ComponentModel.ISupportInitialize" displayName="ISupportInitialize" namespace="System.ComponentModel" fullName="System.ComponentModel.ISupportInitialize" />
              </hierarchyInterfaces>
              <hierarchyType id="T:MControl.Threading.ThreadTimer" displayName="ThreadTimer" namespace="MControl.Threading" />
            </hierarchyType>
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.ValueType" displayName="ValueType" namespace="System">
          <hierarchyType id="T:System.Enum" displayName="Enum" namespace="System">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:System.IComparable" displayName="IComparable" namespace="System" fullName="System.IComparable" />
              <hierarchyInterface id="T:System.IConvertible" displayName="IConvertible" namespace="System" fullName="System.IConvertible" />
              <hierarchyInterface id="T:System.IFormattable" displayName="IFormattable" namespace="System" fullName="System.IFormattable" />
            </hierarchyInterfaces>
            <hierarchyType id="T:MControl.Threading.AsyncProgressLevel" displayName="AsyncProgressLevel" namespace="MControl.Threading" />
            <hierarchyType id="T:MControl.Threading.AsyncState" displayName="AsyncState" namespace="MControl.Threading" />
            <hierarchyType id="T:MControl.Threading.PostExecuteCall" displayName="PostExecuteCall" namespace="MControl.Threading" />
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="MControl.Runtime">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System">
        <hierarchyType id="T:MControl.Runtime.AssemblyExec" displayName="AssemblyExec" namespace="MControl.Runtime" />
        <hierarchyType id="T:MControl.Runtime.AssemblyResolver" displayName="AssemblyResolver" namespace="MControl.Runtime" />
        <hierarchyType id="T:MControl.Runtime.MemoryStreamUtils" displayName="MemoryStreamUtils" namespace="MControl.Runtime" />
        <hierarchyType id="T:MControl.Runtime.Serialization" displayName="Serialization" namespace="MControl.Runtime" />
        <hierarchyType id="T:System.MarshalByRefObject" displayName="MarshalByRefObject" namespace="System">
          <hierarchyType id="T:MControl.Runtime.RemoteExecAssembly" displayName="RemoteExecAssembly" namespace="MControl.Runtime" />
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="MControl.Data">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System">
        <hierarchyType id="T:MControl.Data.DataResx" displayName="DataResx" namespace="MControl.Data" />
        <hierarchyType id="T:MControl.Data.DataSourceConvertor" displayName="DataSourceConvertor" namespace="MControl.Data" />
        <hierarchyType id="T:MControl.Data.ExcelUtil" displayName="ExcelUtil" namespace="MControl.Data" />
        <hierarchyType id="T:MControl.Data.Export" displayName="Export" namespace="MControl.Data" />
        <hierarchyType id="T:MControl.Data.IColumn" displayName="IColumn" namespace="MControl.Data" />
        <hierarchyType id="T:System.Collections.CollectionBase" displayName="CollectionBase" namespace="System.Collections">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.Collections.ICollection" displayName="ICollection" namespace="System.Collections" fullName="System.Collections.ICollection" />
            <hierarchyInterface id="T:System.Collections.IEnumerable" displayName="IEnumerable" namespace="System.Collections" fullName="System.Collections.IEnumerable" />
            <hierarchyInterface id="T:System.Collections.IList" displayName="IList" namespace="System.Collections" fullName="System.Collections.IList" />
          </hierarchyInterfaces>
          <hierarchyType id="T:MControl.Data.McColumnCollection" displayName="McColumnCollection" namespace="MControl.Data" />
        </hierarchyType>
        <hierarchyType id="T:System.Delegate" displayName="Delegate" namespace="System">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.ICloneable" displayName="ICloneable" namespace="System" fullName="System.ICloneable" />
            <hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" displayName="ISerializable" namespace="System.Runtime.Serialization" fullName="System.Runtime.Serialization.ISerializable" />
          </hierarchyInterfaces>
          <hierarchyType id="T:System.MulticastDelegate" displayName="MulticastDelegate" namespace="System">
            <hierarchyType id="T:MControl.Data.AddMcColumnHandler" displayName="AddMcColumnHandler" namespace="MControl.Data" />
            <hierarchyType id="T:MControl.Data.ColumnDisplayChangedHandler" displayName="ColumnDisplayChangedHandler" namespace="MControl.Data" />
            <hierarchyType id="T:MControl.Data.RemoveMcColumnHandler" displayName="RemoveMcColumnHandler" namespace="MControl.Data" />
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.EventArgs" displayName="EventArgs" namespace="System">
          <hierarchyType id="T:MControl.Data.McColumnCollectionEventArgs" displayName="McColumnCollectionEventArgs" namespace="MControl.Data" />
          <hierarchyType id="T:MControl.Data.McColumnEventArgs" displayName="McColumnEventArgs" namespace="MControl.Data" />
        </hierarchyType>
        <hierarchyType id="T:System.MarshalByRefObject" displayName="MarshalByRefObject" namespace="System">
          <hierarchyType id="T:System.ComponentModel.Component" displayName="Component" namespace="System.ComponentModel">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:System.ComponentModel.IComponent" displayName="IComponent" namespace="System.ComponentModel" fullName="System.ComponentModel.IComponent" />
              <hierarchyInterface id="T:System.IDisposable" displayName="IDisposable" namespace="System" fullName="System.IDisposable" />
            </hierarchyInterfaces>
            <hierarchyType id="T:MControl.Data.McColumn" displayName="McColumn" namespace="MControl.Data">
              <hierarchyInterfaces>
                <hierarchyInterface id="T:MControl.Data.IColumn" displayName="IColumn" namespace="MControl.Data" fullName="MControl.Data.IColumn" />
              </hierarchyInterfaces>
            </hierarchyType>
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.ValueType" displayName="ValueType" namespace="System">
          <hierarchyType id="T:MControl.Data.ExportColumnType" displayName="ExportColumnType" namespace="MControl.Data" />
          <hierarchyType id="T:System.Enum" displayName="Enum" namespace="System">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:System.IComparable" displayName="IComparable" namespace="System" fullName="System.IComparable" />
              <hierarchyInterface id="T:System.IConvertible" displayName="IConvertible" namespace="System" fullName="System.IConvertible" />
              <hierarchyInterface id="T:System.IFormattable" displayName="IFormattable" namespace="System" fullName="System.IFormattable" />
            </hierarchyInterfaces>
            <hierarchyType id="T:MControl.Data.AppType" displayName="AppType" namespace="MControl.Data" />
            <hierarchyType id="T:MControl.Data.ExportFormat" displayName="ExportFormat" namespace="MControl.Data" />
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="MControl.Loggers">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System">
        <hierarchyType id="T:MControl.Loggers.AsyncLogger" displayName="AsyncLogger" namespace="MControl.Loggers" />
        <hierarchyType id="T:MControl.Loggers.EventLogger" displayName="EventLogger" namespace="MControl.Loggers">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:MControl.Loggers.ILogger" displayName="ILogger" namespace="MControl.Loggers" fullName="MControl.Loggers.ILogger" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:MControl.Loggers.FileLogger" displayName="FileLogger" namespace="MControl.Loggers">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:MControl.Loggers.ILogger" displayName="ILogger" namespace="MControl.Loggers" fullName="MControl.Loggers.ILogger" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:MControl.Loggers.ILogger" displayName="ILogger" namespace="MControl.Loggers" />
        <hierarchyType id="T:MControl.Loggers.ListBoxLogger" displayName="ListBoxLogger" namespace="MControl.Loggers">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:MControl.Loggers.ILogger" displayName="ILogger" namespace="MControl.Loggers" fullName="MControl.Loggers.ILogger" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:MControl.Loggers.Logger" displayName="Logger" namespace="MControl.Loggers">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.IDisposable" displayName="IDisposable" namespace="System" fullName="System.IDisposable" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:MControl.Loggers.TextBoxLogger" displayName="TextBoxLogger" namespace="MControl.Loggers">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:MControl.Loggers.ILogger" displayName="ILogger" namespace="MControl.Loggers" fullName="MControl.Loggers.ILogger" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:MControl.Loggers.TraceWindowLogger" displayName="TraceWindowLogger" namespace="MControl.Loggers">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:MControl.Loggers.ILogger" displayName="ILogger" namespace="MControl.Loggers" fullName="MControl.Loggers.ILogger" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:System.ValueType" displayName="ValueType" namespace="System">
          <hierarchyType id="T:System.Enum" displayName="Enum" namespace="System">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:System.IComparable" displayName="IComparable" namespace="System" fullName="System.IComparable" />
              <hierarchyInterface id="T:System.IConvertible" displayName="IConvertible" namespace="System" fullName="System.IConvertible" />
              <hierarchyInterface id="T:System.IFormattable" displayName="IFormattable" namespace="System" fullName="System.IFormattable" />
            </hierarchyInterfaces>
            <hierarchyType id="T:MControl.Loggers.Mode" displayName="Mode" namespace="MControl.Loggers" />
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="MControl.Util.Net">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System">
        <hierarchyType id="T:MControl.Util.Net.nf_1" displayName="nf_1" namespace="MControl.Util.Net" />
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="MControl.Util.Security">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System">
        <hierarchyType id="T:MControl.Util.Security.Cryptography" displayName="Cryptography" namespace="MControl.Util.Security" />
        <hierarchyType id="T:MControl.Util.Security.Cryptography.DES" displayName="Cryptography.DES" namespace="MControl.Util.Security" />
        <hierarchyType id="T:MControl.Util.Security.Cryptography.SHA1" displayName="Cryptography.SHA1" namespace="MControl.Util.Security" />
        <hierarchyType id="T:MControl.Util.Security.Password" displayName="Password" namespace="MControl.Util.Security" />
        <hierarchyType id="T:MControl.Util.Security.Password.SHA1" displayName="Password.SHA1" namespace="MControl.Util.Security" />
        <hierarchyType id="T:MControl.Util.Security.SymmCrypto" displayName="SymmCrypto" namespace="MControl.Util.Security" />
        <hierarchyType id="T:MControl.Util.Security.SymmetricEncryption" displayName="SymmetricEncryption" namespace="MControl.Util.Security" />
        <hierarchyType id="T:System.ValueType" displayName="ValueType" namespace="System">
          <hierarchyType id="T:System.Enum" displayName="Enum" namespace="System">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:System.IComparable" displayName="IComparable" namespace="System" fullName="System.IComparable" />
              <hierarchyInterface id="T:System.IConvertible" displayName="IConvertible" namespace="System" fullName="System.IConvertible" />
              <hierarchyInterface id="T:System.IFormattable" displayName="IFormattable" namespace="System" fullName="System.IFormattable" />
            </hierarchyInterfaces>
            <hierarchyType id="T:MControl.Util.Security.SymmCrypto.SymmProv" displayName="SymmCrypto.SymmProv" namespace="MControl.Util.Security" />
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="MControl.Caching">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System">
        <hierarchyType id="T:MControl.Caching.GenericCache" displayName="GenericCache" namespace="MControl.Caching">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.Collections.IEnumerable" displayName="IEnumerable" namespace="System.Collections" fullName="System.Collections.IEnumerable" />
            <hierarchyInterface id="T:System.IDisposable" displayName="IDisposable" namespace="System" fullName="System.IDisposable" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:System.Delegate" displayName="Delegate" namespace="System">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.ICloneable" displayName="ICloneable" namespace="System" fullName="System.ICloneable" />
            <hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" displayName="ISerializable" namespace="System.Runtime.Serialization" fullName="System.Runtime.Serialization.ISerializable" />
          </hierarchyInterfaces>
          <hierarchyType id="T:System.MulticastDelegate" displayName="MulticastDelegate" namespace="System">
            <hierarchyType id="T:MControl.Caching.CacheExceptionEventHandler" displayName="CacheExceptionEventHandler" namespace="MControl.Caching" />
            <hierarchyType id="T:MControl.Caching.SyncCacheEventHandler" displayName="SyncCacheEventHandler" namespace="MControl.Caching" />
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.EventArgs" displayName="EventArgs" namespace="System">
          <hierarchyType id="T:MControl.Caching.CacheExceptionEventArgs" displayName="CacheExceptionEventArgs" namespace="MControl.Caching" />
          <hierarchyType id="T:MControl.Caching.SyncCacheEventArgs" displayName="SyncCacheEventArgs" namespace="MControl.Caching" />
        </hierarchyType>
        <hierarchyType id="T:System.ValueType" displayName="ValueType" namespace="System">
          <hierarchyType id="T:MControl.Caching.CacheItem" displayName="CacheItem" namespace="MControl.Caching" />
          <hierarchyType id="T:MControl.Caching.SYNCTIME" displayName="SYNCTIME" namespace="MControl.Caching" />
          <hierarchyType id="T:System.Enum" displayName="Enum" namespace="System">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:System.IComparable" displayName="IComparable" namespace="System" fullName="System.IComparable" />
              <hierarchyInterface id="T:System.IConvertible" displayName="IConvertible" namespace="System" fullName="System.IConvertible" />
              <hierarchyInterface id="T:System.IFormattable" displayName="IFormattable" namespace="System" fullName="System.IFormattable" />
            </hierarchyInterfaces>
            <hierarchyType id="T:MControl.Caching.CacheAction" displayName="CacheAction" namespace="MControl.Caching" />
            <hierarchyType id="T:MControl.Caching.CacheErrors" displayName="CacheErrors" namespace="MControl.Caching" />
            <hierarchyType id="T:MControl.Caching.CacheObjType" displayName="CacheObjType" namespace="MControl.Caching" />
            <hierarchyType id="T:MControl.Caching.CacheSettingState" displayName="CacheSettingState" namespace="MControl.Caching" />
            <hierarchyType id="T:MControl.Caching.CacheSyncState" displayName="CacheSyncState" namespace="MControl.Caching" />
            <hierarchyType id="T:MControl.Caching.SyncOption" displayName="SyncOption" namespace="MControl.Caching" />
            <hierarchyType id="T:MControl.Caching.SyncType" displayName="SyncType" namespace="MControl.Caching" />
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="MControl.Util.Attributes">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System">
        <hierarchyType id="T:System.Attribute" displayName="Attribute" namespace="System">
          <hierarchyType id="T:MControl.Util.Attributes.ConfigureManuallyAttribute" displayName="ConfigureManuallyAttribute" namespace="MControl.Util.Attributes" />
          <hierarchyType id="T:MControl.Util.Attributes.UpdateAssemblyTypeAttribute" displayName="UpdateAssemblyTypeAttribute" namespace="MControl.Util.Attributes" />
          <hierarchyType id="T:MControl.Util.Attributes.UpdateDbScriptsAttribute" displayName="UpdateDbScriptsAttribute" namespace="MControl.Util.Attributes" />
          <hierarchyType id="T:MControl.Util.Attributes.UpdateDocumentationAttribute" displayName="UpdateDocumentationAttribute" namespace="MControl.Util.Attributes" />
        </hierarchyType>
        <hierarchyType id="T:System.ValueType" displayName="ValueType" namespace="System">
          <hierarchyType id="T:System.Enum" displayName="Enum" namespace="System">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:System.IComparable" displayName="IComparable" namespace="System" fullName="System.IComparable" />
              <hierarchyInterface id="T:System.IConvertible" displayName="IConvertible" namespace="System" fullName="System.IConvertible" />
              <hierarchyInterface id="T:System.IFormattable" displayName="IFormattable" namespace="System" fullName="System.IFormattable" />
            </hierarchyInterfaces>
            <hierarchyType id="T:MControl.Util.Attributes.UpdateAssemblyTypes" displayName="UpdateAssemblyTypes" namespace="MControl.Util.Attributes" />
            <hierarchyType id="T:MControl.Util.Attributes.UpdatePriority" displayName="UpdatePriority" namespace="MControl.Util.Attributes" />
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="MControl.Drawing">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System">
        <hierarchyType id="T:MControl.Drawing.ColorUtils" displayName="ColorUtils" namespace="MControl.Drawing" />
        <hierarchyType id="T:MControl.Drawing.DrawUtils" displayName="DrawUtils" namespace="MControl.Drawing" />
        <hierarchyType id="T:MControl.Drawing.LayoutUtils" displayName="LayoutUtils" namespace="MControl.Drawing" />
        <hierarchyType id="T:MControl.Drawing.LayoutUtils.MeasureTextCache" displayName="LayoutUtils.MeasureTextCache" namespace="MControl.Drawing" />
        <hierarchyType id="T:MControl.Drawing.McBrushes" displayName="McBrushes" namespace="MControl.Drawing" />
        <hierarchyType id="T:MControl.Drawing.McColors" displayName="McColors" namespace="MControl.Drawing" />
        <hierarchyType id="T:MControl.Drawing.McPaint" displayName="McPaint" namespace="MControl.Drawing" />
        <hierarchyType id="T:MControl.Drawing.McPens" displayName="McPens" namespace="MControl.Drawing" />
        <hierarchyType id="T:MControl.Drawing.TextUtils" displayName="TextUtils" namespace="MControl.Drawing" />
        <hierarchyType id="T:System.ValueType" displayName="ValueType" namespace="System">
          <hierarchyType id="T:MControl.Drawing.RoundedRectangle" displayName="RoundedRectangle" namespace="MControl.Drawing" />
          <hierarchyType id="T:System.Enum" displayName="Enum" namespace="System">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:System.IComparable" displayName="IComparable" namespace="System" fullName="System.IComparable" />
              <hierarchyInterface id="T:System.IConvertible" displayName="IConvertible" namespace="System" fullName="System.IConvertible" />
              <hierarchyInterface id="T:System.IFormattable" displayName="IFormattable" namespace="System" fullName="System.IFormattable" />
            </hierarchyInterfaces>
            <hierarchyType id="T:MControl.Drawing.ColorType" displayName="ColorType" namespace="MControl.Drawing" />
            <hierarchyType id="T:MControl.Drawing.CommandState" displayName="CommandState" namespace="MControl.Drawing" />
            <hierarchyType id="T:MControl.Drawing.FrameStyle" displayName="FrameStyle" namespace="MControl.Drawing" />
            <hierarchyType id="T:MControl.Drawing.Gradient3DBorderStyle" displayName="Gradient3DBorderStyle" namespace="MControl.Drawing" />
            <hierarchyType id="T:MControl.Drawing.McDrawMode" displayName="McDrawMode" namespace="MControl.Drawing" />
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="MControl.Util">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System">
        <hierarchyType id="T:MControl.Util.ClientUtils" displayName="ClientUtils" namespace="MControl.Util" />
        <hierarchyType id="T:MControl.Util.CommonDialog" displayName="CommonDialog" namespace="MControl.Util" />
        <hierarchyType id="T:MControl.Util.CompareValidator" displayName="CompareValidator" namespace="MControl.Util" />
        <hierarchyType id="T:MControl.Util.ExceptionBuilder" displayName="ExceptionBuilder" namespace="MControl.Util" />
        <hierarchyType id="T:MControl.Util.ExceptionHelper" displayName="ExceptionHelper" namespace="MControl.Util" />
        <hierarchyType id="T:MControl.Util.IAutoComplete2" displayName="IAutoComplete2" namespace="MControl.Util" />
        <hierarchyType id="T:MControl.Util.IoHelpers" displayName="IoHelpers" namespace="MControl.Util" />
        <hierarchyType id="T:MControl.Util.NativeMethods" displayName="NativeMethods" namespace="MControl.Util" />
        <hierarchyType id="T:MControl.Util.NativeMethods.NMDATETIMECHANGE" displayName="NativeMethods.NMDATETIMECHANGE" namespace="MControl.Util" />
        <hierarchyType id="T:MControl.Util.NativeMethods.NMDATETIMEFORMAT" displayName="NativeMethods.NMDATETIMEFORMAT" namespace="MControl.Util" />
        <hierarchyType id="T:MControl.Util.NativeMethods.POINT" displayName="NativeMethods.POINT" namespace="MControl.Util" />
        <hierarchyType id="T:MControl.Util.NativeMethods.SYSTEMTIME" displayName="NativeMethods.SYSTEMTIME" namespace="MControl.Util" />
        <hierarchyType id="T:MControl.Util.RangeType" displayName="RangeType" namespace="MControl.Util" />
        <hierarchyType id="T:MControl.Util.Regx" displayName="Regx" namespace="MControl.Util" />
        <hierarchyType id="T:MControl.Util.Regx.RegexPattern" displayName="Regx.RegexPattern" namespace="MControl.Util" />
        <hierarchyType id="T:MControl.Util.StreamHelper" displayName="StreamHelper" namespace="MControl.Util" />
        <hierarchyType id="T:MControl.Util.StringSource" displayName="StringSource" namespace="MControl.Util">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.Runtime.InteropServices.ComTypes.IEnumString" displayName="IEnumString" namespace="System.Runtime.InteropServices.ComTypes" fullName="System.Runtime.InteropServices.ComTypes.IEnumString" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:MControl.Util.StringUtil" displayName="StringUtil" namespace="MControl.Util" />
        <hierarchyType id="T:MControl.Util.Validator" displayName="Validator" namespace="MControl.Util" />
        <hierarchyType id="T:System.Attribute" displayName="Attribute" namespace="System">
          <hierarchyType id="T:MControl.Util.UseApiElementsAttribute" displayName="UseApiElementsAttribute" namespace="MControl.Util" />
        </hierarchyType>
        <hierarchyType id="T:System.ComponentModel.TypeConverter" displayName="TypeConverter" namespace="System.ComponentModel">
          <hierarchyType id="T:MControl.Util.RangeConverter" displayName="RangeConverter" namespace="MControl.Util" />
          <hierarchyType id="T:MControl.Util.RangeDateConverter" displayName="RangeDateConverter" namespace="MControl.Util" />
          <hierarchyType id="T:MControl.Util.RangeNumberConverter" displayName="RangeNumberConverter" namespace="MControl.Util" />
        </hierarchyType>
        <hierarchyType id="T:System.Delegate" displayName="Delegate" namespace="System">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.ICloneable" displayName="ICloneable" namespace="System" fullName="System.ICloneable" />
            <hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" displayName="ISerializable" namespace="System.Runtime.Serialization" fullName="System.Runtime.Serialization.ISerializable" />
          </hierarchyInterfaces>
          <hierarchyType id="T:System.MulticastDelegate" displayName="MulticastDelegate" namespace="System">
            <hierarchyType id="T:MControl.Util.DateChangedEventHandler" displayName="DateChangedEventHandler" namespace="MControl.Util" />
            <hierarchyType id="T:MControl.Util.ErrorOcurredEventHandler" displayName="ErrorOcurredEventHandler" namespace="MControl.Util" />
            <hierarchyType id="T:MControl.Util.PropertyValueChangedEventHandler" displayName="PropertyValueChangedEventHandler" namespace="MControl.Util" />
            <hierarchyType id="T:MControl.Util.ValidatingEventHandler" displayName="ValidatingEventHandler" namespace="MControl.Util" />
            <hierarchyType id="T:MControl.Util.ValueChangedEventHandler" displayName="ValueChangedEventHandler" namespace="MControl.Util" />
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.EventArgs" displayName="EventArgs" namespace="System">
          <hierarchyType id="T:MControl.Util.DateChangedEventArgs" displayName="DateChangedEventArgs" namespace="MControl.Util" />
          <hierarchyType id="T:MControl.Util.ErrorOcurredEventArgs" displayName="ErrorOcurredEventArgs" namespace="MControl.Util" />
          <hierarchyType id="T:MControl.Util.PropertyValueChangedEventArgs" displayName="PropertyValueChangedEventArgs" namespace="MControl.Util" />
          <hierarchyType id="T:MControl.Util.ValueChangedEventArgs" displayName="ValueChangedEventArgs" namespace="MControl.Util" />
          <hierarchyType id="T:System.ComponentModel.CancelEventArgs" displayName="CancelEventArgs" namespace="System.ComponentModel">
            <hierarchyType id="T:MControl.Util.ValidatingEventArgs" displayName="ValidatingEventArgs" namespace="MControl.Util" />
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.Exception" displayName="Exception" namespace="System">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" displayName="ISerializable" namespace="System.Runtime.Serialization" fullName="System.Runtime.Serialization.ISerializable" />
          </hierarchyInterfaces>
          <hierarchyType id="T:System.ApplicationException" displayName="ApplicationException" namespace="System">
            <hierarchyType id="T:MControl.Util.AppException" displayName="AppException" namespace="MControl.Util" />
            <hierarchyType id="T:MControl.Util.InvalidDataException" displayName="InvalidDataException" namespace="MControl.Util" />
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.MarshalByRefObject" displayName="MarshalByRefObject" namespace="System">
          <hierarchyType id="T:MControl.Util.NativeMethods.FontHandleWrapper" displayName="NativeMethods.FontHandleWrapper" namespace="MControl.Util" />
        </hierarchyType>
        <hierarchyType id="T:System.ValueType" displayName="ValueType" namespace="System">
          <hierarchyType id="T:MControl.Util.Currency" displayName="Currency" namespace="MControl.Util" />
          <hierarchyType id="T:MControl.Util.NativeMethods.NMHDR" displayName="NativeMethods.NMHDR" namespace="MControl.Util" />
          <hierarchyType id="T:MControl.Util.RangeDate" displayName="RangeDate" namespace="MControl.Util" />
          <hierarchyType id="T:MControl.Util.RangeNumber" displayName="RangeNumber" namespace="MControl.Util" />
          <hierarchyType id="T:System.Enum" displayName="Enum" namespace="System">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:System.IComparable" displayName="IComparable" namespace="System" fullName="System.IComparable" />
              <hierarchyInterface id="T:System.IConvertible" displayName="IConvertible" namespace="System" fullName="System.IConvertible" />
              <hierarchyInterface id="T:System.IFormattable" displayName="IFormattable" namespace="System" fullName="System.IFormattable" />
            </hierarchyInterfaces>
            <hierarchyType id="T:MControl.Util.AllowClose" displayName="AllowClose" namespace="MControl.Util" />
            <hierarchyType id="T:MControl.Util.ArrowGlyph" displayName="ArrowGlyph" namespace="MControl.Util" />
            <hierarchyType id="T:MControl.Util.CommonBorderStyle" displayName="CommonBorderStyle" namespace="MControl.Util" />
            <hierarchyType id="T:MControl.Util.DrawState" displayName="DrawState" namespace="MControl.Util" />
            <hierarchyType id="T:MControl.Util.EditableModes" displayName="EditableModes" namespace="MControl.Util" />
            <hierarchyType id="T:MControl.Util.ExceptionArgument" displayName="ExceptionArgument" namespace="MControl.Util" />
            <hierarchyType id="T:MControl.Util.ExceptionResource" displayName="ExceptionResource" namespace="MControl.Util" />
            <hierarchyType id="T:MControl.Util.GridSelectionMode" displayName="GridSelectionMode" namespace="MControl.Util" />
            <hierarchyType id="T:MControl.Util.LeftRight" displayName="LeftRight" namespace="MControl.Util" />
            <hierarchyType id="T:MControl.Util.LineDirection" displayName="LineDirection" namespace="MControl.Util" />
            <hierarchyType id="T:MControl.Util.OptionHighLight" displayName="OptionHighLight" namespace="MControl.Util" />
            <hierarchyType id="T:MControl.Util.ScrollBarEvent" displayName="ScrollBarEvent" namespace="MControl.Util" />
            <hierarchyType id="T:MControl.Util.ScrollBarHit" displayName="ScrollBarHit" namespace="MControl.Util" />
            <hierarchyType id="T:MControl.Util.ThumbDraggedFireFrequency" displayName="ThumbDraggedFireFrequency" namespace="MControl.Util" />
            <hierarchyType id="T:MControl.Util.ValidationOperator" displayName="ValidationOperator" namespace="MControl.Util" />
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="MControl.Web">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System">
        <hierarchyType id="T:MControl.Web.ATTACHMENT" displayName="ATTACHMENT" namespace="MControl.Web" />
        <hierarchyType id="T:MControl.Web.ExportUtil" displayName="ExportUtil" namespace="MControl.Web" />
        <hierarchyType id="T:MControl.Web.HttpUtil" displayName="HttpUtil" namespace="MControl.Web" />
        <hierarchyType id="T:System.Collections.CollectionBase" displayName="CollectionBase" namespace="System.Collections">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.Collections.ICollection" displayName="ICollection" namespace="System.Collections" fullName="System.Collections.ICollection" />
            <hierarchyInterface id="T:System.Collections.IEnumerable" displayName="IEnumerable" namespace="System.Collections" fullName="System.Collections.IEnumerable" />
            <hierarchyInterface id="T:System.Collections.IList" displayName="IList" namespace="System.Collections" fullName="System.Collections.IList" />
          </hierarchyInterfaces>
          <hierarchyType id="T:MControl.Web.AttchementCollection" displayName="AttchementCollection" namespace="MControl.Web" />
        </hierarchyType>
        <hierarchyType id="T:System.Net.Mail.SmtpClient" displayName="SmtpClient" namespace="System.Net.Mail">
          <hierarchyType id="T:MControl.Web.MailClient" displayName="MailClient" namespace="MControl.Web" />
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="MControl.Collections">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System">
        <hierarchyType id="T:MControl.Collections.AsyncSort" displayName="AsyncSort" namespace="MControl.Collections" />
        <hierarchyType id="T:MControl.Collections.ColorCollection" displayName="ColorCollection" namespace="MControl.Collections">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.Collections.IEnumerable" displayName="IEnumerable" namespace="System.Collections" fullName="System.Collections.IEnumerable" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:MControl.Collections.ControlCollection" displayName="ControlCollection" namespace="MControl.Collections" />
        <hierarchyType id="T:MControl.Collections.CustomColorCollection" displayName="CustomColorCollection" namespace="MControl.Collections">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:MControl.Collections.ColorCollection" displayName="ColorCollection" namespace="MControl.Collections" fullName="MControl.Collections.ColorCollection" />
            <hierarchyInterface id="T:System.Collections.IEnumerable" displayName="IEnumerable" namespace="System.Collections" fullName="System.Collections.IEnumerable" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:MControl.Collections.GenericList`2" displayName="GenericList&lt;Key,Value&gt;" namespace="MControl.Collections">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.Collections.Generic.ICollection`1" displayName="ICollection&lt;T&gt;" namespace="System.Collections.Generic" fullName="System.Collections.Generic.ICollection`1" />
            <hierarchyInterface id="T:System.Collections.Generic.IDictionary`2" displayName="IDictionary&lt;TKey,TValue&gt;" namespace="System.Collections.Generic" fullName="System.Collections.Generic.IDictionary`2" />
            <hierarchyInterface id="T:System.Collections.Generic.IEnumerable`1" displayName="IEnumerable&lt;T&gt;" namespace="System.Collections.Generic" fullName="System.Collections.Generic.IEnumerable`1" />
            <hierarchyInterface id="T:System.Collections.ICollection" displayName="ICollection" namespace="System.Collections" fullName="System.Collections.ICollection" />
            <hierarchyInterface id="T:System.Collections.IDictionary" displayName="IDictionary" namespace="System.Collections" fullName="System.Collections.IDictionary" />
            <hierarchyInterface id="T:System.Collections.IEnumerable" displayName="IEnumerable" namespace="System.Collections" fullName="System.Collections.IEnumerable" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:MControl.Collections.GenericQueue`1" displayName="GenericQueue&lt;T&gt;" namespace="MControl.Collections">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.Collections.Generic.IEnumerable`1" displayName="IEnumerable&lt;T&gt;" namespace="System.Collections.Generic" fullName="System.Collections.Generic.IEnumerable`1" />
            <hierarchyInterface id="T:System.Collections.ICollection" displayName="ICollection" namespace="System.Collections" fullName="System.Collections.ICollection" />
            <hierarchyInterface id="T:System.Collections.IEnumerable" displayName="IEnumerable" namespace="System.Collections" fullName="System.Collections.IEnumerable" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:MControl.Collections.KnownColorCollection" displayName="KnownColorCollection" namespace="MControl.Collections">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:MControl.Collections.ColorCollection" displayName="ColorCollection" namespace="MControl.Collections" fullName="MControl.Collections.ColorCollection" />
            <hierarchyInterface id="T:System.Collections.IEnumerable" displayName="IEnumerable" namespace="System.Collections" fullName="System.Collections.IEnumerable" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:MControl.Collections.LookupList" displayName="LookupList" namespace="MControl.Collections" />
        <hierarchyType id="T:MControl.Collections.LookupThreadSort" displayName="LookupThreadSort" namespace="MControl.Collections" />
        <hierarchyType id="T:System.Collections.CollectionBase" displayName="CollectionBase" namespace="System.Collections">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.Collections.ICollection" displayName="ICollection" namespace="System.Collections" fullName="System.Collections.ICollection" />
            <hierarchyInterface id="T:System.Collections.IEnumerable" displayName="IEnumerable" namespace="System.Collections" fullName="System.Collections.IEnumerable" />
            <hierarchyInterface id="T:System.Collections.IList" displayName="IList" namespace="System.Collections" fullName="System.Collections.IList" />
          </hierarchyInterfaces>
          <hierarchyType id="T:MControl.Collections.CollectionWithEvents" displayName="CollectionWithEvents" namespace="MControl.Collections">
            <hierarchyType id="T:MControl.Collections.StringCollection" displayName="StringCollection" namespace="MControl.Collections">
              <hierarchyInterfaces>
                <hierarchyInterface id="T:System.ICloneable" displayName="ICloneable" namespace="System" fullName="System.ICloneable" />
              </hierarchyInterfaces>
            </hierarchyType>
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.Delegate" displayName="Delegate" namespace="System">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.ICloneable" displayName="ICloneable" namespace="System" fullName="System.ICloneable" />
            <hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" displayName="ISerializable" namespace="System.Runtime.Serialization" fullName="System.Runtime.Serialization.ISerializable" />
          </hierarchyInterfaces>
          <hierarchyType id="T:System.MulticastDelegate" displayName="MulticastDelegate" namespace="System">
            <hierarchyType id="T:MControl.Collections.CollectionChange" displayName="CollectionChange" namespace="MControl.Collections" />
            <hierarchyType id="T:MControl.Collections.CollectionClear" displayName="CollectionClear" namespace="MControl.Collections" />
            <hierarchyType id="T:MControl.Collections.SortSyncDelegate" displayName="SortSyncDelegate" namespace="MControl.Collections" />
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.MarshalByRefObject" displayName="MarshalByRefObject" namespace="System">
          <hierarchyType id="T:System.ContextBoundObject" displayName="ContextBoundObject" namespace="System">
            <hierarchyType id="T:MControl.Collections.SortSyncronized" displayName="SortSyncronized" namespace="MControl.Collections" />
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.ValueType" displayName="ValueType" namespace="System">
          <hierarchyType id="T:MControl.Collections.GenericQueue`1.Enumerator" displayName="GenericQueue&lt;T&gt;.Enumerator" namespace="MControl.Collections">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:System.Collections.Generic.IEnumerator`1" displayName="IEnumerator&lt;T&gt;" namespace="System.Collections.Generic" fullName="System.Collections.Generic.IEnumerator`1" />
              <hierarchyInterface id="T:System.Collections.IEnumerator" displayName="IEnumerator" namespace="System.Collections" fullName="System.Collections.IEnumerator" />
              <hierarchyInterface id="T:System.IDisposable" displayName="IDisposable" namespace="System" fullName="System.IDisposable" />
            </hierarchyInterfaces>
          </hierarchyType>
          <hierarchyType id="T:System.Enum" displayName="Enum" namespace="System">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:System.IComparable" displayName="IComparable" namespace="System" fullName="System.IComparable" />
              <hierarchyInterface id="T:System.IConvertible" displayName="IConvertible" namespace="System" fullName="System.IConvertible" />
              <hierarchyInterface id="T:System.IFormattable" displayName="IFormattable" namespace="System" fullName="System.IFormattable" />
            </hierarchyInterfaces>
            <hierarchyType id="T:MControl.Collections.ComparePredicate" displayName="ComparePredicate" namespace="MControl.Collections" />
            <hierarchyType id="T:MControl.Collections.KnownColorFilter" displayName="KnownColorFilter" namespace="MControl.Collections" />
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="MControl.Xml">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System">
        <hierarchyType id="T:MControl.Xml.ObjectToXml" displayName="ObjectToXml" namespace="MControl.Xml" />
        <hierarchyType id="T:MControl.Xml.XmlBuilder" displayName="XmlBuilder" namespace="MControl.Xml">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.IDisposable" displayName="IDisposable" namespace="System" fullName="System.IDisposable" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:MControl.Xml.xmlElement" displayName="xmlElement" namespace="MControl.Xml" />
        <hierarchyType id="T:MControl.Xml.xmlParser" displayName="xmlParser" namespace="MControl.Xml" />
        <hierarchyType id="T:MControl.Xml.XmlParser" displayName="XmlParser" namespace="MControl.Xml">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.IDisposable" displayName="IDisposable" namespace="System" fullName="System.IDisposable" />
          </hierarchyInterfaces>
        </hierarchyType>
        <hierarchyType id="T:MControl.Xml.xmlReader" displayName="xmlReader" namespace="MControl.Xml" />
        <hierarchyType id="T:MControl.Xml.XMLSerializer" displayName="XMLSerializer" namespace="MControl.Xml" />
        <hierarchyType id="T:MControl.Xml.XmlSerializerBase" displayName="XmlSerializerBase" namespace="MControl.Xml">
          <hierarchyType id="T:MControl.Xml.ObjectXmlSerializer" displayName="ObjectXmlSerializer" namespace="MControl.Xml" />
          <hierarchyType id="T:MControl.Xml.StringXmlSerializer" displayName="StringXmlSerializer" namespace="MControl.Xml" />
        </hierarchyType>
        <hierarchyType id="T:MControl.Xml.XmlUtil" displayName="XmlUtil" namespace="MControl.Xml" />
        <hierarchyType id="T:MControl.Xml.xmlWriter" displayName="xmlWriter" namespace="MControl.Xml" />
        <hierarchyType id="T:System.ComponentModel.Design.Serialization.CodeDomSerializerBase" displayName="CodeDomSerializerBase" namespace="System.ComponentModel.Design.Serialization">
          <hierarchyType id="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" displayName="CodeDomSerializer" namespace="System.ComponentModel.Design.Serialization">
            <hierarchyType id="T:MControl.Xml.CodeSerializer" displayName="CodeSerializer" namespace="MControl.Xml" />
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.ValueType" displayName="ValueType" namespace="System">
          <hierarchyType id="T:System.Enum" displayName="Enum" namespace="System">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:System.IComparable" displayName="IComparable" namespace="System" fullName="System.IComparable" />
              <hierarchyInterface id="T:System.IConvertible" displayName="IConvertible" namespace="System" fullName="System.IConvertible" />
              <hierarchyInterface id="T:System.IFormattable" displayName="IFormattable" namespace="System" fullName="System.IFormattable" />
            </hierarchyInterfaces>
            <hierarchyType id="T:MControl.Xml.NODETYPE" displayName="NODETYPE" namespace="MControl.Xml" />
            <hierarchyType id="T:MControl.Xml.SerializedFormatType" displayName="SerializedFormatType" namespace="MControl.Xml" />
            <hierarchyType id="T:MControl.Xml.XmlUtil.NodeType" displayName="XmlUtil.NodeType" namespace="MControl.Xml" />
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
    <namespaceHierarchy name="MControl.Util.Exceptions">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System">
        <hierarchyType id="T:System.Exception" displayName="Exception" namespace="System">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" displayName="ISerializable" namespace="System.Runtime.Serialization" fullName="System.Runtime.Serialization.ISerializable" />
          </hierarchyInterfaces>
          <hierarchyType id="T:System.ApplicationException" displayName="ApplicationException" namespace="System">
            <hierarchyType id="T:MControl.Util.AppException" displayName="AppException" namespace="MControl.Util">
              <hierarchyType id="T:MControl.Util.Exceptions.TypeNotSupportedException" displayName="TypeNotSupportedException" namespace="MControl.Util.Exceptions" />
            </hierarchyType>
          </hierarchyType>
          <hierarchyType id="T:System.SystemException" displayName="SystemException" namespace="System">
            <hierarchyType id="T:System.FormatException" displayName="FormatException" namespace="System">
              <hierarchyType id="T:MControl.Util.Exceptions.InvalidFormatException" displayName="InvalidFormatException" namespace="MControl.Util.Exceptions" />
            </hierarchyType>
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
  </namespaceHierarchies>
  <assembly name="MControl.Net" filename="MControl.Net.dll" version="2.3.0.0">
    <attribute name="AssemblyTitleAttribute" id="T:System.Reflection.AssemblyTitleAttribute" target="assembly">
      <argument id="M:System.Reflection.AssemblyTitleAttribute.#ctor(System.String)" type="System.String" value="MControl.Net" />
    </attribute>
    <attribute name="CompilationRelaxationsAttribute" id="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" target="assembly">
      <argument id="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Int32)" type="System.Int32" value="8" />
    </attribute>
    <attribute name="RuntimeCompatibilityAttribute" id="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" target="assembly">
      <property name="WrapNonExceptionThrows" id="P:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows" type="System.Boolean" value="True" />
    </attribute>
    <attribute name="AssemblyFileVersionAttribute" id="T:System.Reflection.AssemblyFileVersionAttribute" target="assembly">
      <argument id="M:System.Reflection.AssemblyFileVersionAttribute.#ctor(System.String)" type="System.String" value="2.3.0.0" />
    </attribute>
    <attribute name="DebuggableAttribute" id="T:System.Diagnostics.DebuggableAttribute" target="assembly">
      <argument id="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Diagnostics.DebuggableAttribute.DebuggingModes)" type="System.Diagnostics.DebuggableAttribute+DebuggingModes" value="DebuggingModes.IgnoreSymbolStoreSequencePoints | DebuggingModes.EnableEditAndContinue | DebuggingModes.DisableOptimizations" />
    </attribute>
    <attribute name="AssemblyTrademarkAttribute" id="T:System.Reflection.AssemblyTrademarkAttribute" target="assembly">
      <argument id="M:System.Reflection.AssemblyTrademarkAttribute.#ctor(System.String)" type="System.String" value="" />
    </attribute>
    <attribute name="AssemblyCopyrightAttribute" id="T:System.Reflection.AssemblyCopyrightAttribute" target="assembly">
      <argument id="M:System.Reflection.AssemblyCopyrightAttribute.#ctor(System.String)" type="System.String" value="Copyright © MControl.Net 2006" />
    </attribute>
    <attribute name="AssemblyDescriptionAttribute" id="T:System.Reflection.AssemblyDescriptionAttribute" target="assembly">
      <argument id="M:System.Reflection.AssemblyDescriptionAttribute.#ctor(System.String)" type="System.String" value="Application Framework" />
    </attribute>
    <attribute name="ComVisibleAttribute" id="T:System.Runtime.InteropServices.ComVisibleAttribute" target="assembly">
      <argument id="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)" type="System.Boolean" value="True" />
    </attribute>
    <attribute name="GuidAttribute" id="T:System.Runtime.InteropServices.GuidAttribute" target="assembly">
      <argument id="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)" type="System.String" value="3be7ef6f-05b2-4225-974d-1ae3156630bb" />
    </attribute>
    <attribute name="AssemblyProductAttribute" id="T:System.Reflection.AssemblyProductAttribute" target="assembly">
      <argument id="M:System.Reflection.AssemblyProductAttribute.#ctor(System.String)" type="System.String" value="MControl.Net" />
    </attribute>
    <attribute name="AssemblyCompanyAttribute" id="T:System.Reflection.AssemblyCompanyAttribute" target="assembly">
      <argument id="M:System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)" type="System.String" value="MControl.Net" />
    </attribute>
    <attribute name="AssemblyConfigurationAttribute" id="T:System.Reflection.AssemblyConfigurationAttribute" target="assembly">
      <argument id="M:System.Reflection.AssemblyConfigurationAttribute.#ctor(System.String)" type="System.String" value="" />
    </attribute>
    <module name="MControl.Net.dll">
      <attribute name="UnverifiableCodeAttribute" id="T:System.Security.UnverifiableCodeAttribute" target="module" />
      <namespace name="MControl" id="N:MControl">
        <class name="Info" id="T:MControl.Info" access="Public" namespace="MControl" displayName="Info" sealed="true">
          <constructor name=".ctor" id="M:MControl.Info.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Info" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="CanConvertTo" id="M:MControl.Info.CanConvertTo(System.String,MControl.BaseDataType)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="s">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="dataType">
              <type name="BaseDataType" id="T:MControl.BaseDataType" valueType="true" />
            </parameter>
          </method>
          <method name="GetCultureInfo" id="M:MControl.Info.GetCultureInfo" access="Public" contract="Static">
            <type name="CultureInfo" id="T:System.Globalization.CultureInfo" />
          </method>
          <method name="GetDateTimeFormatInfo" id="M:MControl.Info.GetDateTimeFormatInfo" access="Public" contract="Static">
            <type name="DateTimeFormatInfo" id="T:System.Globalization.DateTimeFormatInfo" />
          </method>
          <method name="IsBool" id="M:MControl.Info.IsBool(System.Object)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Expression">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="IsCurrency" id="M:MControl.Info.IsCurrency(System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="s">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="IsDBNull" id="M:MControl.Info.IsDBNull(System.Object)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Expression">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="IsDate" id="M:MControl.Info.IsDate(System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="s">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="IsDateTime" id="M:MControl.Info.IsDateTime(System.Object)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Expression">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="IsDouble" id="M:MControl.Info.IsDouble(System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="s">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="IsInteger" id="M:MControl.Info.IsInteger(System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="s">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="IsNumber" id="Overload:MControl.Info.IsNumber" contract="Static">
            <method name="IsNumber" id="M:MControl.Info.IsNumber(System.String)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="s">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="IsNumber" id="M:MControl.Info.IsNumber(System.Object)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="obj">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
          </methodOverload>
          <method name="IsNumeric" id="M:MControl.Info.IsNumeric(System.Object)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Expression">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="IsString" id="M:MControl.Info.IsString(System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="s">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="IsValidType" id="M:MControl.Info.IsValidType(MControl.Formats,System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="format">
              <type name="Formats" id="T:MControl.Formats" valueType="true" />
            </parameter>
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="MsgBox" id="T:MControl.MsgBox" access="Public" namespace="MControl" displayName="MsgBox" sealed="true">
          <constructor name=".ctor" id="M:MControl.MsgBox.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.MsgBox" /> class.</autoText></summary></documentation>
          </constructor>
          <methodOverload name="Show" id="Overload:MControl.MsgBox.Show" contract="Static">
            <method name="Show" id="M:MControl.MsgBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxIcon)" access="Public" contract="Static">
              <type name="DialogResult" id="T:System.Windows.Forms.DialogResult" valueType="true" />
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="caption">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="icon">
                <type name="MessageBoxIcon" id="T:System.Windows.Forms.MessageBoxIcon" valueType="true" />
              </parameter>
            </method>
            <method name="Show" id="M:MControl.MsgBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)" access="Public" contract="Static">
              <type name="DialogResult" id="T:System.Windows.Forms.DialogResult" valueType="true" />
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="caption">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="button">
                <type name="MessageBoxButtons" id="T:System.Windows.Forms.MessageBoxButtons" valueType="true" />
              </parameter>
              <parameter name="icon">
                <type name="MessageBoxIcon" id="T:System.Windows.Forms.MessageBoxIcon" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="ShowError" id="Overload:MControl.MsgBox.ShowError" contract="Static">
            <method name="ShowError" id="M:MControl.MsgBox.ShowError(System.String)" access="Public" contract="Static">
              <type name="DialogResult" id="T:System.Windows.Forms.DialogResult" valueType="true" />
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ShowError" id="M:MControl.MsgBox.ShowError(System.String,System.String)" access="Public" contract="Static">
              <type name="DialogResult" id="T:System.Windows.Forms.DialogResult" valueType="true" />
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="caption">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ShowError" id="M:MControl.MsgBox.ShowError(System.String,System.String,System.Windows.Forms.MessageBoxButtons)" access="Public" contract="Static">
              <type name="DialogResult" id="T:System.Windows.Forms.DialogResult" valueType="true" />
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="caption">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="button">
                <type name="MessageBoxButtons" id="T:System.Windows.Forms.MessageBoxButtons" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="ShowInfo" id="Overload:MControl.MsgBox.ShowInfo" contract="Static">
            <method name="ShowInfo" id="M:MControl.MsgBox.ShowInfo(System.String)" access="Public" contract="Static">
              <type name="DialogResult" id="T:System.Windows.Forms.DialogResult" valueType="true" />
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ShowInfo" id="M:MControl.MsgBox.ShowInfo(System.String,System.String)" access="Public" contract="Static">
              <type name="DialogResult" id="T:System.Windows.Forms.DialogResult" valueType="true" />
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="caption">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="ShowQuestion" id="Overload:MControl.MsgBox.ShowQuestion" contract="Static">
            <method name="ShowQuestion" id="M:MControl.MsgBox.ShowQuestion(System.String)" access="Public" contract="Static">
              <type name="DialogResult" id="T:System.Windows.Forms.DialogResult" valueType="true" />
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ShowQuestion" id="M:MControl.MsgBox.ShowQuestion(System.String,System.String)" access="Public" contract="Static">
              <type name="DialogResult" id="T:System.Windows.Forms.DialogResult" valueType="true" />
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="caption">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ShowQuestion" id="M:MControl.MsgBox.ShowQuestion(System.String,System.String,System.Windows.Forms.MessageBoxButtons)" access="Public" contract="Static">
              <type name="DialogResult" id="T:System.Windows.Forms.DialogResult" valueType="true" />
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="caption">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="button">
                <type name="MessageBoxButtons" id="T:System.Windows.Forms.MessageBoxButtons" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="ShowQuestionYNC" id="M:MControl.MsgBox.ShowQuestionYNC(System.String,System.String)" access="Public" contract="Static">
            <type name="DialogResult" id="T:System.Windows.Forms.DialogResult" valueType="true" />
            <parameter name="text">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="caption">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="ShowWarning" id="Overload:MControl.MsgBox.ShowWarning" contract="Static">
            <method name="ShowWarning" id="M:MControl.MsgBox.ShowWarning(System.String)" access="Public" contract="Static">
              <type name="DialogResult" id="T:System.Windows.Forms.DialogResult" valueType="true" />
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ShowWarning" id="M:MControl.MsgBox.ShowWarning(System.String,System.String)" access="Public" contract="Static">
              <type name="DialogResult" id="T:System.Windows.Forms.DialogResult" valueType="true" />
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="caption">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ShowWarning" id="M:MControl.MsgBox.ShowWarning(System.String,System.String,System.Windows.Forms.MessageBoxButtons)" access="Public" contract="Static">
              <type name="DialogResult" id="T:System.Windows.Forms.DialogResult" valueType="true" />
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="caption">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="button">
                <type name="MessageBoxButtons" id="T:System.Windows.Forms.MessageBoxButtons" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
        </class>
        <class name="RM" id="T:MControl.RM" access="Public" namespace="MControl" displayName="RM" sealed="true">
          <constructorOverload name=".ctor" id="Overload:MControl.RM.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.RM" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.RM.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.RM" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.RM.#ctor(System.String,System.Reflection.Assembly)" access="Public" contract="Normal">
              <parameter name="resource">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="assembly">
                <type name="Assembly" id="T:System.Reflection.Assembly" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.RM.#ctor(System.Resources.ResourceManager)" access="Public" contract="Normal">
              <parameter name="resource">
                <type name="ResourceManager" id="T:System.Resources.ResourceManager" />
              </parameter>
            </constructor>
          </constructorOverload>
          <field name="Abort" id="F:MControl.RM.Abort" access="Public" contract="Static" literal="true" value="Abort">
            <type name="String" id="T:System.String" />
          </field>
          <field name="CalculateAgain" id="F:MControl.RM.CalculateAgain" access="Public" contract="Static" literal="true" value="CalculateAgain">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Cancel" id="F:MControl.RM.Cancel" access="Public" contract="Static" literal="true" value="Cancel">
            <type name="String" id="T:System.String" />
          </field>
          <field name="CantInsert" id="F:MControl.RM.CantInsert" access="Public" contract="Static" literal="true" value="CantInsert">
            <type name="String" id="T:System.String" />
          </field>
          <field name="CantRemove" id="F:MControl.RM.CantRemove" access="Public" contract="Static" literal="true" value="CantRemove">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Close" id="F:MControl.RM.Close" access="Public" contract="Static" literal="true" value="Close">
            <type name="String" id="T:System.String" />
          </field>
          <field name="CloseWizard" id="F:MControl.RM.CloseWizard" access="Public" contract="Static" literal="true" value="CloseWizard">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Confirmation" id="F:MControl.RM.Confirmation" access="Public" contract="Static" literal="true" value="Confirmation">
            <type name="String" id="T:System.String" />
          </field>
          <field name="ContentNotExistInList" id="F:MControl.RM.ContentNotExistInList" access="Public" contract="Static" literal="true" value="ContentNotExistInList">
            <type name="String" id="T:System.String" />
          </field>
          <field name="DefualtCulture" id="F:MControl.RM.DefualtCulture" access="Public" contract="Static" initOnly="true">
            <type name="CultureInfo" id="T:System.Globalization.CultureInfo" />
          </field>
          <field name="ElementNotFound_v" id="F:MControl.RM.ElementNotFound_v" access="Public" contract="Static" literal="true" value="ElementNotFound">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Error" id="F:MControl.RM.Error" access="Public" contract="Static" literal="true" value="Error">
            <type name="String" id="T:System.String" />
          </field>
          <field name="ErrorConvertToDate" id="F:MControl.RM.ErrorConvertToDate" access="Public" contract="Static" literal="true" value="ErrorConvertToDate">
            <type name="String" id="T:System.String" />
          </field>
          <field name="ErrorConvertToNumber" id="F:MControl.RM.ErrorConvertToNumber" access="Public" contract="Static" literal="true" value="ErrorConvertToNumber">
            <type name="String" id="T:System.String" />
          </field>
          <field name="ErrorDataType" id="F:MControl.RM.ErrorDataType" access="Public" contract="Static" literal="true" value="ErrorDataType">
            <type name="String" id="T:System.String" />
          </field>
          <field name="ErrorIncorrectFormat" id="F:MControl.RM.ErrorIncorrectFormat" access="Public" contract="Static" literal="true" value="ErrorIncorrectFormat">
            <type name="String" id="T:System.String" />
          </field>
          <field name="ErrorNotExpected_v" id="F:MControl.RM.ErrorNotExpected_v" access="Public" contract="Static" literal="true" value="ErrorNotExpected">
            <type name="String" id="T:System.String" />
          </field>
          <field name="ErrorValidating" id="F:MControl.RM.ErrorValidating" access="Public" contract="Static" literal="true" value="ErrorValidating">
            <type name="String" id="T:System.String" />
          </field>
          <field name="False" id="F:MControl.RM.False" access="Public" contract="Static" literal="true" value="False">
            <type name="String" id="T:System.String" />
          </field>
          <field name="FileNotFound_v" id="F:MControl.RM.FileNotFound_v" access="Public" contract="Static" literal="true" value="FileNotFound">
            <type name="String" id="T:System.String" />
          </field>
          <field name="FinalElementNotFound" id="F:MControl.RM.FinalElementNotFound" access="Public" contract="Static" literal="true" value="FinalElementNotFound">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Finish" id="F:MControl.RM.Finish" access="Public" contract="Static" literal="true" value="Finish">
            <type name="String" id="T:System.String" />
          </field>
          <field name="FirstStepCannotBeNull" id="F:MControl.RM.FirstStepCannotBeNull" access="Public" contract="Static" literal="true" value="FirstStepCannotBeNull">
            <type name="String" id="T:System.String" />
          </field>
          <field name="HideAll" id="F:MControl.RM.HideAll" access="Public" contract="Static" literal="true" value="HideAll">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Ignore" id="F:MControl.RM.Ignore" access="Public" contract="Static" literal="true" value="Ignore">
            <type name="String" id="T:System.String" />
          </field>
          <field name="IlegalChar" id="F:MControl.RM.IlegalChar" access="Public" contract="Static" literal="true" value="IlegalChar">
            <type name="String" id="T:System.String" />
          </field>
          <field name="InaccessibleNode" id="F:MControl.RM.InaccessibleNode" access="Public" contract="Static" literal="true" value="InaccessibleNode">
            <type name="String" id="T:System.String" />
          </field>
          <field name="IncorrectNodeName" id="F:MControl.RM.IncorrectNodeName" access="Public" contract="Static" literal="true" value="IncorrectNodeName">
            <type name="String" id="T:System.String" />
          </field>
          <field name="IndexOutBounds" id="F:MControl.RM.IndexOutBounds" access="Public" contract="Static" literal="true" value="IndexOutBounds">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Information" id="F:MControl.RM.Information" access="Public" contract="Static" literal="true" value="Information">
            <type name="String" id="T:System.String" />
          </field>
          <field name="InvalidAreaCode" id="F:MControl.RM.InvalidAreaCode" access="Public" contract="Static" literal="true" value="InvalidAreaCode">
            <type name="String" id="T:System.String" />
          </field>
          <field name="InvalidCast_v" id="F:MControl.RM.InvalidCast_v" access="Public" contract="Static" literal="true" value="InvalidCast">
            <type name="String" id="T:System.String" />
          </field>
          <field name="InvalidDate" id="F:MControl.RM.InvalidDate" access="Public" contract="Static" literal="true" value="InvalidDate">
            <type name="String" id="T:System.String" />
          </field>
          <field name="InvalidDateFormat_v" id="F:MControl.RM.InvalidDateFormat_v" access="Public" contract="Static" literal="true" value="InvalidDateFormat">
            <type name="String" id="T:System.String" />
          </field>
          <field name="InvalidDirectory" id="F:MControl.RM.InvalidDirectory" access="Public" contract="Static" literal="true" value="InvalidDirectory">
            <type name="String" id="T:System.String" />
          </field>
          <field name="InvalidEmail" id="F:MControl.RM.InvalidEmail" access="Public" contract="Static" literal="true" value="InvalidEmail">
            <type name="String" id="T:System.String" />
          </field>
          <field name="InvalidInscription" id="F:MControl.RM.InvalidInscription" access="Public" contract="Static" literal="true" value="InvalidInscription">
            <type name="String" id="T:System.String" />
          </field>
          <field name="InvalidInscriptionFormat" id="F:MControl.RM.InvalidInscriptionFormat" access="Public" contract="Static" literal="true" value="InvalidInscriptionFormat">
            <type name="String" id="T:System.String" />
          </field>
          <field name="InvalidIp" id="F:MControl.RM.InvalidIp" access="Public" contract="Static" literal="true" value="InvalidIp">
            <type name="String" id="T:System.String" />
          </field>
          <field name="InvalidNumber" id="F:MControl.RM.InvalidNumber" access="Public" contract="Static" literal="true" value="InvalidNumber">
            <type name="String" id="T:System.String" />
          </field>
          <field name="InvalidRegx" id="F:MControl.RM.InvalidRegx" access="Public" contract="Static" literal="true" value="InvalidRegx">
            <type name="String" id="T:System.String" />
          </field>
          <field name="InvalidTelephoneAreaFormat" id="F:MControl.RM.InvalidTelephoneAreaFormat" access="Public" contract="Static" literal="true" value="InvalidTelephoneAreaFormat">
            <type name="String" id="T:System.String" />
          </field>
          <field name="InvalidTelephoneFormat" id="F:MControl.RM.InvalidTelephoneFormat" access="Public" contract="Static" literal="true" value="InvalidTelephoneFormat">
            <type name="String" id="T:System.String" />
          </field>
          <field name="InvalidTime" id="F:MControl.RM.InvalidTime" access="Public" contract="Static" literal="true" value="InvalidTime">
            <type name="String" id="T:System.String" />
          </field>
          <field name="InvalidTimeFormat_v" id="F:MControl.RM.InvalidTimeFormat_v" access="Public" contract="Static" literal="true" value="InvalidTimeFormat">
            <type name="String" id="T:System.String" />
          </field>
          <field name="InvalidZip" id="F:MControl.RM.InvalidZip" access="Public" contract="Static" literal="true" value="InvalidZip">
            <type name="String" id="T:System.String" />
          </field>
          <field name="InvalidZipFormat" id="F:MControl.RM.InvalidZipFormat" access="Public" contract="Static" literal="true" value="InvalidZipFormat">
            <type name="String" id="T:System.String" />
          </field>
          <field name="LargerIndexThanZero" id="F:MControl.RM.LargerIndexThanZero" access="Public" contract="Static" literal="true" value="LargerIndexThanZero">
            <type name="String" id="T:System.String" />
          </field>
          <field name="MessageToLeaveAssistant" id="F:MControl.RM.MessageToLeaveAssistant" access="Public" contract="Static" literal="true" value="MessageToLeaveAssistant">
            <type name="String" id="T:System.String" />
          </field>
          <field name="MistakeConfigRemoting" id="F:MControl.RM.MistakeConfigRemoting" access="Public" contract="Static" literal="true" value="MistakeConfigRemoting">
            <type name="String" id="T:System.String" />
          </field>
          <field name="NewPageHorizontal" id="F:MControl.RM.NewPageHorizontal" access="Public" contract="Static" literal="true" value="NewPageHorizontal">
            <type name="String" id="T:System.String" />
          </field>
          <field name="NewPageVertical" id="F:MControl.RM.NewPageVertical" access="Public" contract="Static" literal="true" value="NewPageVertical">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Next" id="F:MControl.RM.Next" access="Public" contract="Static" literal="true" value="Next">
            <type name="String" id="T:System.String" />
          </field>
          <field name="NextPage" id="F:MControl.RM.NextPage" access="Public" contract="Static" literal="true" value="NextPage">
            <type name="String" id="T:System.String" />
          </field>
          <field name="No" id="F:MControl.RM.No" access="Public" contract="Static" literal="true" value="No">
            <type name="String" id="T:System.String" />
          </field>
          <field name="NoExistTaskPanels" id="F:MControl.RM.NoExistTaskPanels" access="Public" contract="Static" literal="true" value="NoExistTaskPanels">
            <type name="String" id="T:System.String" />
          </field>
          <field name="NodeNotFound_v" id="F:MControl.RM.NodeNotFound_v" access="Public" contract="Static" literal="true" value="NodeNotFound">
            <type name="String" id="T:System.String" />
          </field>
          <field name="NullArgument" id="F:MControl.RM.NullArgument" access="Public" contract="Static" literal="true" value="NullArgument">
            <type name="String" id="T:System.String" />
          </field>
          <field name="OK" id="F:MControl.RM.OK" access="Public" contract="Static" literal="true" value="OK">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Off" id="F:MControl.RM.Off" access="Public" contract="Static" literal="true" value="Off">
            <type name="String" id="T:System.String" />
          </field>
          <field name="On" id="F:MControl.RM.On" access="Public" contract="Static" literal="true" value="On">
            <type name="String" id="T:System.String" />
          </field>
          <field name="OnlyDigitsAccepted" id="F:MControl.RM.OnlyDigitsAccepted" access="Public" contract="Static" literal="true" value="OnlyDigitsAccepted">
            <type name="String" id="T:System.String" />
          </field>
          <field name="OnlyDigitsBarAccepted" id="F:MControl.RM.OnlyDigitsBarAccepted" access="Public" contract="Static" literal="true" value="OnlyDigitsBarAccepted">
            <type name="String" id="T:System.String" />
          </field>
          <field name="OnlyDigitsMinusAccepted" id="F:MControl.RM.OnlyDigitsMinusAccepted" access="Public" contract="Static" literal="true" value="OnlyDigitsMinusAccepted">
            <type name="String" id="T:System.String" />
          </field>
          <field name="OnlyDigitsMinusBarsAccepted" id="F:MControl.RM.OnlyDigitsMinusBarsAccepted" access="Public" contract="Static" literal="true" value="OnlyDigitsMinusBarsAccepted">
            <type name="String" id="T:System.String" />
          </field>
          <field name="OnlyDigitsMinusParenthesesAccepted" id="F:MControl.RM.OnlyDigitsMinusParenthesesAccepted" access="Public" contract="Static" literal="true" value="OnlyDigitsMinusParenthesesAccepted">
            <type name="String" id="T:System.String" />
          </field>
          <field name="OnlyDigitsMinusPointsAccepted" id="F:MControl.RM.OnlyDigitsMinusPointsAccepted" access="Public" contract="Static" literal="true" value="OnlyDigitsMinusPointsAccepted">
            <type name="String" id="T:System.String" />
          </field>
          <field name="OnlyDigitsMinusPointsBarsAccepted" id="F:MControl.RM.OnlyDigitsMinusPointsBarsAccepted" access="Public" contract="Static" literal="true" value="OnlyDigitsMinusPointsBarsAccepted">
            <type name="String" id="T:System.String" />
          </field>
          <field name="OnlyDigitsMinusSpaceAccepted" id="F:MControl.RM.OnlyDigitsMinusSpaceAccepted" access="Public" contract="Static" literal="true" value="OnlyDigitsMinusSpaceAccepted">
            <type name="String" id="T:System.String" />
          </field>
          <field name="OnlyDigitsPointsAccepted" id="F:MControl.RM.OnlyDigitsPointsAccepted" access="Public" contract="Static" literal="true" value="OnlyDigitsPointsAccepted">
            <type name="String" id="T:System.String" />
          </field>
          <field name="OnlyDigitsPointsBarsAccepted" id="F:MControl.RM.OnlyDigitsPointsBarsAccepted" access="Public" contract="Static" literal="true" value="OnlyDigitsPointsBarsAccepted">
            <type name="String" id="T:System.String" />
          </field>
          <field name="OnlyDigitsTwoPointsAccepted" id="F:MControl.RM.OnlyDigitsTwoPointsAccepted" access="Public" contract="Static" literal="true" value="OnlyDigitsTwoPointsAccepted">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Previous" id="F:MControl.RM.Previous" access="Public" contract="Static" literal="true" value="Previous">
            <type name="String" id="T:System.String" />
          </field>
          <field name="PreviousPage" id="F:MControl.RM.PreviousPage" access="Public" contract="Static" literal="true" value="PreviousPage">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Progress" id="F:MControl.RM.Progress" access="Public" contract="Static" literal="true" value="Progress">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Prominent" id="F:MControl.RM.Prominent" access="Public" contract="Static" literal="true" value="Prominent">
            <type name="String" id="T:System.String" />
          </field>
          <field name="RequiredField" id="F:MControl.RM.RequiredField" access="Public" contract="Static" literal="true" value="RequiredField">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Retry" id="F:MControl.RM.Retry" access="Public" contract="Static" literal="true" value="Retry">
            <type name="String" id="T:System.String" />
          </field>
          <field name="ShowAll" id="F:MControl.RM.ShowAll" access="Public" contract="Static" literal="true" value="ShowAll">
            <type name="String" id="T:System.String" />
          </field>
          <field name="StepNotFound" id="F:MControl.RM.StepNotFound" access="Public" contract="Static" literal="true" value="StepNotFound">
            <type name="String" id="T:System.String" />
          </field>
          <field name="True" id="F:MControl.RM.True" access="Public" contract="Static" literal="true" value="True">
            <type name="String" id="T:System.String" />
          </field>
          <field name="ValueNotMatchMask_v" id="F:MControl.RM.ValueNotMatchMask_v" access="Public" contract="Static" literal="true" value="ValueNotMatchMask">
            <type name="String" id="T:System.String" />
          </field>
          <field name="ValueOutOfRange_v2" id="F:MControl.RM.ValueOutOfRange_v2" access="Public" contract="Static" literal="true" value="OutOfRange">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Yes" id="F:MControl.RM.Yes" access="Public" contract="Static" literal="true" value="Yes">
            <type name="String" id="T:System.String" />
          </field>
          <property name="Cultures" id="P:MControl.RM.Cultures" access="Public" contract="Static">
            <type name="Hashtable" id="T:System.Collections.Hashtable" />
            <get access="Public" />
          </property>
          <methodOverload name="GetBoolean" id="Overload:MControl.RM.GetBoolean" contract="Static">
            <method name="GetBoolean" id="M:MControl.RM.GetBoolean(System.String)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetBoolean" id="M:MControl.RM.GetBoolean(System.Globalization.CultureInfo,System.String)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="culture">
                <type name="CultureInfo" id="T:System.Globalization.CultureInfo" />
              </parameter>
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="GetByte" id="Overload:MControl.RM.GetByte" contract="Static">
            <method name="GetByte" id="M:MControl.RM.GetByte(System.String)" access="Public" contract="Static">
              <type name="Byte" id="T:System.Byte" valueType="true" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetByte" id="M:MControl.RM.GetByte(System.Globalization.CultureInfo,System.String)" access="Public" contract="Static">
              <type name="Byte" id="T:System.Byte" valueType="true" />
              <parameter name="culture">
                <type name="CultureInfo" id="T:System.Globalization.CultureInfo" />
              </parameter>
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="GetChar" id="Overload:MControl.RM.GetChar" contract="Static">
            <method name="GetChar" id="M:MControl.RM.GetChar(System.String)" access="Public" contract="Static">
              <type name="Char" id="T:System.Char" valueType="true" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetChar" id="M:MControl.RM.GetChar(System.Globalization.CultureInfo,System.String)" access="Public" contract="Static">
              <type name="Char" id="T:System.Char" valueType="true" />
              <parameter name="culture">
                <type name="CultureInfo" id="T:System.Globalization.CultureInfo" />
              </parameter>
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="GetDouble" id="Overload:MControl.RM.GetDouble" contract="Static">
            <method name="GetDouble" id="M:MControl.RM.GetDouble(System.String)" access="Public" contract="Static">
              <type name="Double" id="T:System.Double" valueType="true" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetDouble" id="M:MControl.RM.GetDouble(System.Globalization.CultureInfo,System.String)" access="Public" contract="Static">
              <type name="Double" id="T:System.Double" valueType="true" />
              <parameter name="culture">
                <type name="CultureInfo" id="T:System.Globalization.CultureInfo" />
              </parameter>
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="GetFloat" id="Overload:MControl.RM.GetFloat" contract="Static">
            <method name="GetFloat" id="M:MControl.RM.GetFloat(System.String)" access="Public" contract="Static">
              <type name="Single" id="T:System.Single" valueType="true" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetFloat" id="M:MControl.RM.GetFloat(System.Globalization.CultureInfo,System.String)" access="Public" contract="Static">
              <type name="Single" id="T:System.Single" valueType="true" />
              <parameter name="culture">
                <type name="CultureInfo" id="T:System.Globalization.CultureInfo" />
              </parameter>
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="GetInt" id="Overload:MControl.RM.GetInt" contract="Static">
            <method name="GetInt" id="M:MControl.RM.GetInt(System.String)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetInt" id="M:MControl.RM.GetInt(System.Globalization.CultureInfo,System.String)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="culture">
                <type name="CultureInfo" id="T:System.Globalization.CultureInfo" />
              </parameter>
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="GetLong" id="Overload:MControl.RM.GetLong" contract="Static">
            <method name="GetLong" id="M:MControl.RM.GetLong(System.String)" access="Public" contract="Static">
              <type name="Int64" id="T:System.Int64" valueType="true" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetLong" id="M:MControl.RM.GetLong(System.Globalization.CultureInfo,System.String)" access="Public" contract="Static">
              <type name="Int64" id="T:System.Int64" valueType="true" />
              <parameter name="culture">
                <type name="CultureInfo" id="T:System.Globalization.CultureInfo" />
              </parameter>
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="GetObject" id="Overload:MControl.RM.GetObject" contract="Static">
            <method name="GetObject" id="M:MControl.RM.GetObject(System.String)" access="Public" contract="Static">
              <type name="Object" id="T:System.Object" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetObject" id="M:MControl.RM.GetObject(System.Globalization.CultureInfo,System.String)" access="Public" contract="Static">
              <type name="Object" id="T:System.Object" />
              <parameter name="culture">
                <type name="CultureInfo" id="T:System.Globalization.CultureInfo" />
              </parameter>
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="GetShort" id="Overload:MControl.RM.GetShort" contract="Static">
            <method name="GetShort" id="M:MControl.RM.GetShort(System.String)" access="Public" contract="Static">
              <type name="Int16" id="T:System.Int16" valueType="true" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetShort" id="M:MControl.RM.GetShort(System.Globalization.CultureInfo,System.String)" access="Public" contract="Static">
              <type name="Int16" id="T:System.Int16" valueType="true" />
              <parameter name="culture">
                <type name="CultureInfo" id="T:System.Globalization.CultureInfo" />
              </parameter>
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="GetString" id="Overload:MControl.RM.GetString" contract="Static">
            <method name="GetString" id="M:MControl.RM.GetString(System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetString" id="M:MControl.RM.GetString(System.Globalization.CultureInfo,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="culture">
                <type name="CultureInfo" id="T:System.Globalization.CultureInfo" />
              </parameter>
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetString" id="M:MControl.RM.GetString(System.String,System.Object[])" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="args" isParamArray="true">
                <type name="Object" id="T:System.Object">
                  <array rank="1" />
                </type>
                <attribute name="ParamArrayAttribute" id="T:System.ParamArrayAttribute" />
              </parameter>
            </method>
            <method name="GetString" id="M:MControl.RM.GetString(System.Globalization.CultureInfo,System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="culture">
                <type name="CultureInfo" id="T:System.Globalization.CultureInfo" />
              </parameter>
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="args">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetString" id="M:MControl.RM.GetString(System.Globalization.CultureInfo,System.String,System.Object[])" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="culture">
                <type name="CultureInfo" id="T:System.Globalization.CultureInfo" />
              </parameter>
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="args" isParamArray="true">
                <type name="Object" id="T:System.Object">
                  <array rank="1" />
                </type>
                <attribute name="ParamArrayAttribute" id="T:System.ParamArrayAttribute" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="ShowError" id="Overload:MControl.RM.ShowError" contract="Static">
            <method name="ShowError" id="M:MControl.RM.ShowError(System.String)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ShowError" id="M:MControl.RM.ShowError(System.String,System.String)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="args">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="ShowInfo" id="Overload:MControl.RM.ShowInfo" contract="Static">
            <method name="ShowInfo" id="M:MControl.RM.ShowInfo(System.String)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ShowInfo" id="M:MControl.RM.ShowInfo(System.String,System.String)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="args">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="ShowQuestion" id="Overload:MControl.RM.ShowQuestion" contract="Static">
            <method name="ShowQuestion" id="M:MControl.RM.ShowQuestion(System.String)" access="Public" contract="Static">
              <type name="DialogResult" id="T:System.Windows.Forms.DialogResult" valueType="true" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ShowQuestion" id="M:MControl.RM.ShowQuestion(System.String,System.String)" access="Public" contract="Static">
              <type name="DialogResult" id="T:System.Windows.Forms.DialogResult" valueType="true" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="args">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="ShowWarning" id="Overload:MControl.RM.ShowWarning" contract="Static">
            <method name="ShowWarning" id="M:MControl.RM.ShowWarning(System.String)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ShowWarning" id="M:MControl.RM.ShowWarning(System.String,System.String)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="args">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="isCultureSopperted" id="M:MControl.RM.isCultureSopperted(System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="clt">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="Shell" id="T:MControl.Shell" access="Public" namespace="MControl" displayName="Shell">
          <constructor name=".ctor" id="M:MControl.Shell.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Shell" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="Execute" id="M:MControl.Shell.Execute(System.String)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="command">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="OpenFile" id="M:MControl.Shell.OpenFile(System.String)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="file">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="SendMail" id="Overload:MControl.Shell.SendMail" contract="Static">
            <method name="SendMail" id="M:MControl.Shell.SendMail(System.String[])" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="_To">
                <type name="String" id="T:System.String">
                  <array rank="1" />
                </type>
              </parameter>
            </method>
            <method name="SendMail" id="M:MControl.Shell.SendMail(System.String[],System.String)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="_To">
                <type name="String" id="T:System.String">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="_Subject">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="SendMail" id="M:MControl.Shell.SendMail(System.String[],System.String[],System.String[],System.String,System.String)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="_To">
                <type name="String" id="T:System.String">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="_Cc">
                <type name="String" id="T:System.String">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="_Bcc">
                <type name="String" id="T:System.String">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="_Subject">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="_Body">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
        </class>
        <class name="Strings" id="T:MControl.Strings" access="Public" namespace="MControl" displayName="Strings" sealed="true">
          <constructor name=".ctor" id="M:MControl.Strings.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Strings" /> class.</autoText></summary></documentation>
          </constructor>
          <methodOverload name="Asc" id="Overload:MControl.Strings.Asc" contract="Static">
            <method name="Asc" id="M:MControl.Strings.Asc(System.Char)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="String">
                <type name="Char" id="T:System.Char" valueType="true" />
              </parameter>
            </method>
            <method name="Asc" id="M:MControl.Strings.Asc(System.String)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="String">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="AscW" id="Overload:MControl.Strings.AscW" contract="Static">
            <method name="AscW" id="M:MControl.Strings.AscW(System.String)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="String">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="AscW" id="M:MControl.Strings.AscW(System.Char)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="String">
                <type name="Char" id="T:System.Char" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="Chr" id="M:MControl.Strings.Chr(System.Int32)" access="Public" contract="Static">
            <type name="Char" id="T:System.Char" valueType="true" />
            <parameter name="CharCode">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="ChrW" id="M:MControl.Strings.ChrW(System.Int32)" access="Public" contract="Static">
            <type name="Char" id="T:System.Char" valueType="true" />
            <parameter name="CharCode">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="Split" id="M:MControl.Strings.Split(System.String,System.String,System.Int32,MControl.CompareMethod)" access="Public" contract="Static">
            <type name="String" id="T:System.String">
              <array rank="1" />
            </type>
            <parameter name="Expression">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="Delimiter">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="Limit">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="Compare">
              <type name="CompareMethod" id="T:MControl.CompareMethod" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="SplitString" id="Overload:MControl.Strings.SplitString" contract="Static">
            <method name="SplitString" id="M:MControl.Strings.SplitString(System.String,System.Int32,System.Int32)" access="Public" contract="Static">
              <type name="String" id="T:System.String">
                <array rank="1" />
              </type>
              <parameter name="s">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="limt">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="maxLengthPerSigment">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
            <method name="SplitString" id="M:MControl.Strings.SplitString(System.String,System.Int32,System.Int32,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String">
                <array rank="1" />
              </type>
              <parameter name="s">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="limt">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="maxLengthPerSigment">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="separator">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="StrCmp" id="M:MControl.Strings.StrCmp(System.String,System.String,System.Boolean)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="sLeft">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="sRight">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="TextCompare">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="StrReverse" id="M:MControl.Strings.StrReverse(System.String)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="Expression">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="StringType" id="T:MControl.StringType" access="Public" namespace="MControl" displayName="StringType" sealed="true">
          <constructor name=".ctor" id="M:MControl.StringType.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.StringType" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="CharFromObject" id="M:MControl.StringType.CharFromObject(System.Object)" access="Public" contract="Static">
            <type name="Char" id="T:System.Char" valueType="true">
              <array rank="1" />
            </type>
            <parameter name="Value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="CompareByLength" id="M:MControl.StringType.CompareByLength(System.String,System.String)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="x">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="y">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="FromBoolean" id="M:MControl.StringType.FromBoolean(System.Boolean)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="Value">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="FromByte" id="M:MControl.StringType.FromByte(System.Byte)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="Value">
              <type name="Byte" id="T:System.Byte" valueType="true" />
            </parameter>
          </method>
          <method name="FromChar" id="M:MControl.StringType.FromChar(System.Char)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="Value">
              <type name="Char" id="T:System.Char" valueType="true" />
            </parameter>
          </method>
          <method name="FromDate" id="M:MControl.StringType.FromDate(System.DateTime)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="Value">
              <type name="DateTime" id="T:System.DateTime" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="FromDecimal" id="Overload:MControl.StringType.FromDecimal" contract="Static">
            <method name="FromDecimal" id="M:MControl.StringType.FromDecimal(System.Decimal)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Value">
                <type name="Decimal" id="T:System.Decimal" valueType="true" />
              </parameter>
            </method>
            <method name="FromDecimal" id="M:MControl.StringType.FromDecimal(System.Decimal,System.Globalization.NumberFormatInfo)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Value">
                <type name="Decimal" id="T:System.Decimal" valueType="true" />
              </parameter>
              <parameter name="NumberFormat">
                <type name="NumberFormatInfo" id="T:System.Globalization.NumberFormatInfo" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="FromDouble" id="Overload:MControl.StringType.FromDouble" contract="Static">
            <method name="FromDouble" id="M:MControl.StringType.FromDouble(System.Double)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Value">
                <type name="Double" id="T:System.Double" valueType="true" />
              </parameter>
            </method>
            <method name="FromDouble" id="M:MControl.StringType.FromDouble(System.Double,System.Globalization.NumberFormatInfo)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Value">
                <type name="Double" id="T:System.Double" valueType="true" />
              </parameter>
              <parameter name="NumberFormat">
                <type name="NumberFormatInfo" id="T:System.Globalization.NumberFormatInfo" />
              </parameter>
            </method>
          </methodOverload>
          <method name="FromInteger" id="M:MControl.StringType.FromInteger(System.Int32)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="Value">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="FromLong" id="M:MControl.StringType.FromLong(System.Int64)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="Value">
              <type name="Int64" id="T:System.Int64" valueType="true" />
            </parameter>
          </method>
          <method name="FromObject" id="M:MControl.StringType.FromObject(System.Object)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="Value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="FromShort" id="M:MControl.StringType.FromShort(System.Int16)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="Value">
              <type name="Int16" id="T:System.Int16" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="FromSingle" id="Overload:MControl.StringType.FromSingle" contract="Static">
            <method name="FromSingle" id="M:MControl.StringType.FromSingle(System.Single)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Value">
                <type name="Single" id="T:System.Single" valueType="true" />
              </parameter>
            </method>
            <method name="FromSingle" id="M:MControl.StringType.FromSingle(System.Single,System.Globalization.NumberFormatInfo)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Value">
                <type name="Single" id="T:System.Single" valueType="true" />
              </parameter>
              <parameter name="NumberFormat">
                <type name="NumberFormatInfo" id="T:System.Globalization.NumberFormatInfo" />
              </parameter>
            </method>
          </methodOverload>
          <method name="MidStmtStr" id="M:MControl.StringType.MidStmtStr(System.String@,System.Int32,System.Int32,System.String)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="sDest" direction="ref">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="StartPosition">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="MaxInsertLength">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="sInsert">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="StrCmp" id="M:MControl.StringType.StrCmp(System.String,System.String,System.Boolean)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="sLeft">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="sRight">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="TextCompare">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="StrLike" id="M:MControl.StringType.StrLike(System.String,System.String,MControl.CompareMethod)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Source">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="Pattern">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="CompareOption">
              <type name="CompareMethod" id="T:MControl.CompareMethod" valueType="true" />
            </parameter>
          </method>
          <method name="StrLikeBinary" id="M:MControl.StringType.StrLikeBinary(System.String,System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Source">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="Pattern">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="StrLikeText" id="M:MControl.StringType.StrLikeText(System.String,System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Source">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="Pattern">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="splitString" id="M:MControl.StringType.splitString(System.String,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="String" id="T:System.String">
              <array rank="1" />
            </type>
            <parameter name="s">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="limt">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="maxCharPerSigment">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
        </class>
        <class name="Types" id="T:MControl.Types" access="Public" namespace="MControl" displayName="Types" sealed="true">
          <methodOverload name="BytesFromString" id="Overload:MControl.Types.BytesFromString" contract="Static">
            <method name="BytesFromString" id="M:MControl.Types.BytesFromString(MControl.EncodingType,System.String)" access="Public" contract="Static">
              <type name="Byte" id="T:System.Byte" valueType="true">
                <array rank="1" />
              </type>
              <parameter name="encoding">
                <type name="EncodingType" id="T:MControl.EncodingType" valueType="true" />
              </parameter>
              <parameter name="stringValue">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="BytesFromString" id="M:MControl.Types.BytesFromString(System.String)" access="Public" contract="Static">
              <type name="Byte" id="T:System.Byte" valueType="true">
                <array rank="1" />
              </type>
              <parameter name="stringValue">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="BytesToHexString" id="M:MControl.Types.BytesToHexString(System.Byte[])" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="byteArray">
              <type name="Byte" id="T:System.Byte" valueType="true">
                <array rank="1" />
              </type>
            </parameter>
          </method>
          <methodOverload name="BytesToString" id="Overload:MControl.Types.BytesToString" contract="Static">
            <method name="BytesToString" id="M:MControl.Types.BytesToString(MControl.EncodingType,System.Byte[])" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="encoding">
                <type name="EncodingType" id="T:MControl.EncodingType" valueType="true" />
              </parameter>
              <parameter name="byteArray">
                <type name="Byte" id="T:System.Byte" valueType="true">
                  <array rank="1" />
                </type>
              </parameter>
            </method>
            <method name="BytesToString" id="M:MControl.Types.BytesToString(System.Byte[])" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="byteArray">
                <type name="Byte" id="T:System.Byte" valueType="true">
                  <array rank="1" />
                </type>
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="Compare" id="Overload:MControl.Types.Compare" contract="Static">
            <method name="Compare" id="M:MControl.Types.Compare(System.Object,System.Object)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="objA">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="objB">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
            <method name="Compare" id="M:MControl.Types.Compare(MControl.DataTypes,System.Object,System.Object)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="mDataType">
                <type name="DataTypes" id="T:MControl.DataTypes" valueType="true" />
              </parameter>
              <parameter name="objA">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="objB">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="DataTypeOf" id="Overload:MControl.Types.DataTypeOf" contract="Static">
            <method name="DataTypeOf" id="M:MControl.Types.DataTypeOf(System.Type)" access="Public" contract="Static">
              <type name="DataTypes" id="T:MControl.DataTypes" valueType="true" />
              <parameter name="type">
                <type name="Type" id="T:System.Type" />
              </parameter>
            </method>
            <method name="DataTypeOf" id="M:MControl.Types.DataTypeOf(System.String)" access="Public" contract="Static">
              <type name="DataTypes" id="T:MControl.DataTypes" valueType="true" />
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="DateDiff" id="Overload:MControl.Types.DateDiff" contract="Static">
            <method name="DateDiff" id="M:MControl.Types.DateDiff(MControl.DateInterval,System.DateTime,System.DateTime)" access="Public" contract="Static">
              <type name="Int64" id="T:System.Int64" valueType="true" />
              <parameter name="Interval">
                <type name="DateInterval" id="T:MControl.DateInterval" valueType="true" />
              </parameter>
              <parameter name="Date1">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
              <parameter name="Date2">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
            </method>
            <method name="DateDiff" id="M:MControl.Types.DateDiff(MControl.DateInterval,System.DateTime,System.DateTime,MControl.FirstDayOfWeek)" access="Public" contract="Static">
              <type name="Int64" id="T:System.Int64" valueType="true" />
              <parameter name="Interval">
                <type name="DateInterval" id="T:MControl.DateInterval" valueType="true" />
              </parameter>
              <parameter name="Date1">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
              <parameter name="Date2">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
              <parameter name="DayOfWeek">
                <type name="FirstDayOfWeek" id="T:MControl.FirstDayOfWeek" valueType="true" />
              </parameter>
            </method>
            <method name="DateDiff" id="M:MControl.Types.DateDiff(System.String,System.Object,System.Object)" access="Public" contract="Static">
              <type name="Int64" id="T:System.Int64" valueType="true" />
              <parameter name="Interval">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="Date1">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="Date2">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
          </methodOverload>
          <method name="DateFromString" id="M:MControl.Types.DateFromString(System.String)" access="Public" contract="Static">
            <type name="DateTime" id="T:System.DateTime" valueType="true" />
            <parameter name="Value">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="DateTimeFormat" id="M:MControl.Types.DateTimeFormat(System.String)" access="Public" contract="Static">
            <type name="DateTimeFormats" id="T:MControl.DateTimeFormats" valueType="true" />
            <parameter name="dateTimeFormat">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="DateTimeFormatToString" id="M:MControl.Types.DateTimeFormatToString(MControl.DateTimeFormats)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="dateTimeFormat">
              <type name="DateTimeFormats" id="T:MControl.DateTimeFormats" valueType="true" />
            </parameter>
          </method>
          <method name="DateTimeToInt" id="M:MControl.Types.DateTimeToInt(System.DateTime)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="value">
              <type name="DateTime" id="T:System.DateTime" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="DateToString" id="Overload:MControl.Types.DateToString" contract="Static">
            <method name="DateToString" id="M:MControl.Types.DateToString(System.DateTime,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="value">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="DateToString" id="M:MControl.Types.DateToString(System.DateTime)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="value">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="DateValue" id="M:MControl.Types.DateValue(System.String)" access="Public" contract="Static">
            <type name="DateTime" id="T:System.DateTime" valueType="true" />
            <parameter name="StringDate">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="Fix" id="M:MControl.Types.Fix(System.Double)" access="Public" contract="Static">
            <type name="Double" id="T:System.Double" valueType="true" />
            <parameter name="Number">
              <type name="Double" id="T:System.Double" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="FormatDate" id="Overload:MControl.Types.FormatDate" contract="Static">
            <method name="FormatDate" id="M:MControl.Types.FormatDate(System.String,System.String,System.DateTime)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="s">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
            </method>
            <method name="FormatDate" id="M:MControl.Types.FormatDate(System.String,System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="s">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="FormatDecimal" id="M:MControl.Types.FormatDecimal(System.String,System.String,System.Int32,System.Decimal)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="value">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="format">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="decimalPlaces">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="defaultValue">
              <type name="Decimal" id="T:System.Decimal" valueType="true" />
            </parameter>
          </method>
          <method name="FormatDouble" id="M:MControl.Types.FormatDouble(System.String,System.String,System.Int32,System.Double)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="value">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="format">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="decimalPlaces">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="defaultValue">
              <type name="Double" id="T:System.Double" valueType="true" />
            </parameter>
          </method>
          <method name="FormatInt" id="M:MControl.Types.FormatInt(System.String,System.String,System.Int32)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="value">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="format">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="defaultValue">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="GetBaseFormat" id="M:MControl.Types.GetBaseFormat(MControl.Formats)" access="Public" contract="Static">
            <type name="DataTypes" id="T:MControl.DataTypes" valueType="true" />
            <parameter name="format">
              <type name="Formats" id="T:MControl.Formats" valueType="true" />
            </parameter>
          </method>
          <method name="GetBoolFormat" id="M:MControl.Types.GetBoolFormat(MControl.BoolFormats)" access="Public" contract="Static">
            <type name="Types.BoolRange" id="T:MControl.Types.BoolRange" valueType="true" />
            <parameter name="formatType">
              <type name="BoolFormats" id="T:MControl.BoolFormats" valueType="true" />
            </parameter>
          </method>
          <method name="GetBoolRange" id="M:MControl.Types.GetBoolRange(MControl.BoolFormats)" access="Public" contract="Static">
            <type name="Object" id="T:System.Object">
              <array rank="1" />
            </type>
            <parameter name="formatType">
              <type name="BoolFormats" id="T:MControl.BoolFormats" valueType="true" />
            </parameter>
          </method>
          <method name="GetDateFormat" id="M:MControl.Types.GetDateFormat(MControl.Formats)" access="Public" contract="Static">
            <type name="DateFormats" id="T:MControl.DateFormats" valueType="true" />
            <parameter name="format">
              <type name="Formats" id="T:MControl.Formats" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="GetFormat" id="Overload:MControl.Types.GetFormat" contract="Static">
            <method name="GetFormat" id="M:MControl.Types.GetFormat(MControl.Formats,MControl.Util.RangeType@)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="formatType">
                <type name="Formats" id="T:MControl.Formats" valueType="true" />
              </parameter>
              <parameter name="range" direction="ref">
                <type name="RangeType" id="T:MControl.Util.RangeType" />
              </parameter>
            </method>
            <method name="GetFormat" id="M:MControl.Types.GetFormat(MControl.Formats)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="formatType">
                <type name="Formats" id="T:MControl.Formats" valueType="true" />
              </parameter>
            </method>
            <method name="GetFormat" id="M:MControl.Types.GetFormat(MControl.DateFormats,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="formatType">
                <type name="DateFormats" id="T:MControl.DateFormats" valueType="true" />
              </parameter>
              <parameter name="custom">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetFormat" id="M:MControl.Types.GetFormat(MControl.NumberFormats,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="formatType">
                <type name="NumberFormats" id="T:MControl.NumberFormats" valueType="true" />
              </parameter>
              <parameter name="custom">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetFormat" id="M:MControl.Types.GetFormat(MControl.DateFormats)" access="Public" contract="Static">
              <type name="Formats" id="T:MControl.Formats" valueType="true" />
              <parameter name="format">
                <type name="DateFormats" id="T:MControl.DateFormats" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="GetNextDozen" id="M:MControl.Types.GetNextDozen(System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="value">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="GetNumberFormat" id="M:MControl.Types.GetNumberFormat(MControl.Formats)" access="Public" contract="Static">
            <type name="NumberFormats" id="T:MControl.NumberFormats" valueType="true" />
            <parameter name="format">
              <type name="Formats" id="T:MControl.Formats" valueType="true" />
            </parameter>
          </method>
          <method name="GetOnlyDigits" id="M:MControl.Types.GetOnlyDigits(System.String)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="sourceValue">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="IsPercentString" id="M:MControl.Types.IsPercentString(System.String,System.IFormatProvider)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="val">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="provider">
              <type name="IFormatProvider" id="T:System.IFormatProvider" />
            </parameter>
          </method>
          <methodOverload name="NZ" id="Overload:MControl.Types.NZ" contract="Static">
            <method name="NZ" id="M:MControl.Types.NZ(System.Object,System.Object)" access="Public" contract="Static">
              <type name="Object" id="T:System.Object" />
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="valueIfNull">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
            <method name="NZ" id="M:MControl.Types.NZ(System.Object,System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="valueIfNull">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
            <method name="NZ" id="M:MControl.Types.NZ(System.Object,System.Double)" access="Public" contract="Static">
              <type name="Double" id="T:System.Double" valueType="true" />
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="valueIfNull">
                <type name="Double" id="T:System.Double" valueType="true" />
              </parameter>
            </method>
            <method name="NZ" id="M:MControl.Types.NZ(System.Object,System.Decimal)" access="Public" contract="Static">
              <type name="Decimal" id="T:System.Decimal" valueType="true" />
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="valueIfNull">
                <type name="Decimal" id="T:System.Decimal" valueType="true" />
              </parameter>
            </method>
            <method name="NZ" id="M:MControl.Types.NZ(System.Object,System.DateTime)" access="Public" contract="Static">
              <type name="DateTime" id="T:System.DateTime" valueType="true" />
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="valueIfNull">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
            </method>
            <method name="NZ" id="M:MControl.Types.NZ(System.Object,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="valueIfNull">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="NZ" id="M:MControl.Types.NZ(System.Object,System.Boolean)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="valueIfNull">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="NumberFromObject" id="Overload:MControl.Types.NumberFromObject" contract="Static">
            <method name="NumberFromObject" id="M:MControl.Types.NumberFromObject(System.Object)" access="Public" contract="Static">
              <type name="Double" id="T:System.Double" valueType="true" />
              <parameter name="Value">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
            <method name="NumberFromObject" id="M:MControl.Types.NumberFromObject(System.Object,System.Globalization.NumberFormatInfo)" access="Public" contract="Static">
              <type name="Double" id="T:System.Double" valueType="true" />
              <parameter name="Value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="NumberFormat">
                <type name="NumberFormatInfo" id="T:System.Globalization.NumberFormatInfo" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="NumberFromString" id="Overload:MControl.Types.NumberFromString" contract="Static">
            <method name="NumberFromString" id="M:MControl.Types.NumberFromString(System.String)" access="Public" contract="Static">
              <type name="Double" id="T:System.Double" valueType="true" />
              <parameter name="Value">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="NumberFromString" id="M:MControl.Types.NumberFromString(System.String,System.Globalization.NumberFormatInfo)" access="Public" contract="Static">
              <type name="Double" id="T:System.Double" valueType="true" />
              <parameter name="Value">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="NumberFormat">
                <type name="NumberFormatInfo" id="T:System.Globalization.NumberFormatInfo" />
              </parameter>
            </method>
          </methodOverload>
          <method name="Parse" id="M:MControl.Types.Parse(System.String,System.Globalization.NumberFormatInfo)" access="Public" contract="Static">
            <type name="Double" id="T:System.Double" valueType="true" />
            <parameter name="Value">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="NumberFormat">
              <type name="NumberFormatInfo" id="T:System.Globalization.NumberFormatInfo" />
            </parameter>
          </method>
          <method name="ParseDateLongFormat" id="M:MControl.Types.ParseDateLongFormat(System.String,System.String)" access="Public" contract="Static">
            <type name="DateTime" id="T:System.DateTime" valueType="true" />
            <parameter name="Value">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="format">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ParseDateShortFormat" id="M:MControl.Types.ParseDateShortFormat(System.String,System.String)" access="Public" contract="Static">
            <type name="DateTime" id="T:System.DateTime" valueType="true" />
            <parameter name="Value">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="format">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ParseTimeLongFormat" id="M:MControl.Types.ParseTimeLongFormat(System.String,System.String)" access="Public" contract="Static">
            <type name="DateTime" id="T:System.DateTime" valueType="true" />
            <parameter name="Value">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="format">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ParseTimeShortFormat" id="M:MControl.Types.ParseTimeShortFormat(System.String,System.String)" access="Public" contract="Static">
            <type name="DateTime" id="T:System.DateTime" valueType="true" />
            <parameter name="Value">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="format">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="StringToBool" id="M:MControl.Types.StringToBool(System.String,System.Boolean)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="value">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="defaultValue">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="StringToByte" id="M:MControl.Types.StringToByte(System.String,System.Globalization.NumberStyles,System.Byte)" access="Public" contract="Static">
            <type name="Byte" id="T:System.Byte" valueType="true" />
            <parameter name="value">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="style">
              <type name="NumberStyles" id="T:System.Globalization.NumberStyles" valueType="true" />
            </parameter>
            <parameter name="defaultValue">
              <type name="Byte" id="T:System.Byte" valueType="true" />
            </parameter>
          </method>
          <method name="StringToDecimal" id="M:MControl.Types.StringToDecimal(System.String,System.Globalization.NumberStyles,System.Decimal)" access="Public" contract="Static">
            <type name="Decimal" id="T:System.Decimal" valueType="true" />
            <parameter name="value">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="style">
              <type name="NumberStyles" id="T:System.Globalization.NumberStyles" valueType="true" />
            </parameter>
            <parameter name="defaultValue">
              <type name="Decimal" id="T:System.Decimal" valueType="true" />
            </parameter>
          </method>
          <method name="StringToDouble" id="M:MControl.Types.StringToDouble(System.String,System.Globalization.NumberStyles,System.Double)" access="Public" contract="Static">
            <type name="Double" id="T:System.Double" valueType="true" />
            <parameter name="value">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="style">
              <type name="NumberStyles" id="T:System.Globalization.NumberStyles" valueType="true" />
            </parameter>
            <parameter name="defaultValue">
              <type name="Double" id="T:System.Double" valueType="true" />
            </parameter>
          </method>
          <method name="StringToFloat" id="M:MControl.Types.StringToFloat(System.String,System.Globalization.NumberStyles,System.Single)" access="Public" contract="Static">
            <type name="Single" id="T:System.Single" valueType="true" />
            <parameter name="value">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="style">
              <type name="NumberStyles" id="T:System.Globalization.NumberStyles" valueType="true" />
            </parameter>
            <parameter name="defaultValue">
              <type name="Single" id="T:System.Single" valueType="true" />
            </parameter>
          </method>
          <method name="StringToInt" id="M:MControl.Types.StringToInt(System.String,System.Globalization.NumberStyles,System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="value">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="style">
              <type name="NumberStyles" id="T:System.Globalization.NumberStyles" valueType="true" />
            </parameter>
            <parameter name="defaultValue">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="StringToPercentDecimal" id="M:MControl.Types.StringToPercentDecimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Boolean)" access="Public" contract="Static">
            <type name="Decimal" id="T:System.Decimal" valueType="true" />
            <parameter name="val">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="style">
              <type name="NumberStyles" id="T:System.Globalization.NumberStyles" valueType="true" />
            </parameter>
            <parameter name="provider">
              <type name="IFormatProvider" id="T:System.IFormatProvider" />
            </parameter>
            <parameter name="p_ConsiderAllStringAsPercent">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="StringToPercentDouble" id="M:MControl.Types.StringToPercentDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Boolean)" access="Public" contract="Static">
            <type name="Double" id="T:System.Double" valueType="true" />
            <parameter name="val">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="style">
              <type name="NumberStyles" id="T:System.Globalization.NumberStyles" valueType="true" />
            </parameter>
            <parameter name="provider">
              <type name="IFormatProvider" id="T:System.IFormatProvider" />
            </parameter>
            <parameter name="p_ConsiderAllStringAsPercent">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="StringToPercentFloat" id="M:MControl.Types.StringToPercentFloat(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Boolean)" access="Public" contract="Static">
            <type name="Single" id="T:System.Single" valueType="true" />
            <parameter name="val">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="style">
              <type name="NumberStyles" id="T:System.Globalization.NumberStyles" valueType="true" />
            </parameter>
            <parameter name="provider">
              <type name="IFormatProvider" id="T:System.IFormatProvider" />
            </parameter>
            <parameter name="p_ConsiderAllStringAsPercent">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="ToBool" id="M:MControl.Types.ToBool(System.Object,System.Boolean)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
            <parameter name="defaultValue">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="ToByte" id="Overload:MControl.Types.ToByte" contract="Static">
            <method name="ToByte" id="M:MControl.Types.ToByte(System.Object,System.Byte)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Byte" id="T:System.Byte" valueType="true" />
              </parameter>
            </method>
            <method name="ToByte" id="M:MControl.Types.ToByte(System.Object,System.Globalization.NumberStyles,System.Byte)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="style">
                <type name="NumberStyles" id="T:System.Globalization.NumberStyles" valueType="true" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Byte" id="T:System.Byte" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="ToDateTime" id="Overload:MControl.Types.ToDateTime" contract="Static">
            <method name="ToDateTime" id="M:MControl.Types.ToDateTime(System.String,System.DateTime)" access="Public" contract="Static">
              <type name="DateTime" id="T:System.DateTime" valueType="true" />
              <parameter name="Value">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
            </method>
            <method name="ToDateTime" id="M:MControl.Types.ToDateTime(System.String,System.String,System.DateTime)" access="Public" contract="Static">
              <type name="DateTime" id="T:System.DateTime" valueType="true" />
              <parameter name="Value">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
            </method>
            <method name="ToDateTime" id="M:MControl.Types.ToDateTime(System.String,System.String)" access="Public" contract="Static">
              <type name="DateTime" id="T:System.DateTime" valueType="true" />
              <parameter name="Value">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ToDateTime" id="M:MControl.Types.ToDateTime(System.String,System.Globalization.DateTimeFormatInfo)" access="Public" contract="Static">
              <type name="DateTime" id="T:System.DateTime" valueType="true" />
              <parameter name="Value">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="dtf">
                <type name="DateTimeFormatInfo" id="T:System.Globalization.DateTimeFormatInfo" />
              </parameter>
            </method>
            <method name="ToDateTime" id="M:MControl.Types.ToDateTime(System.String,System.Globalization.CultureInfo)" access="Public" contract="Static">
              <type name="DateTime" id="T:System.DateTime" valueType="true" />
              <parameter name="Value">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="culture">
                <type name="CultureInfo" id="T:System.Globalization.CultureInfo" />
              </parameter>
            </method>
            <method name="ToDateTime" id="M:MControl.Types.ToDateTime(System.Object)" access="Public" contract="Static">
              <type name="DateTime" id="T:System.DateTime" valueType="true" />
              <parameter name="Value">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
            <method name="ToDateTime" id="M:MControl.Types.ToDateTime(System.Object,System.DateTime)" access="Public" contract="Static">
              <type name="DateTime" id="T:System.DateTime" valueType="true" />
              <parameter name="Value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="defaultValue">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="ToDecimal" id="Overload:MControl.Types.ToDecimal" contract="Static">
            <method name="ToDecimal" id="M:MControl.Types.ToDecimal(System.Object,System.Decimal)" access="Public" contract="Static">
              <type name="Decimal" id="T:System.Decimal" valueType="true" />
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Decimal" id="T:System.Decimal" valueType="true" />
              </parameter>
            </method>
            <method name="ToDecimal" id="M:MControl.Types.ToDecimal(System.Object,System.Globalization.NumberStyles,System.Decimal)" access="Public" contract="Static">
              <type name="Decimal" id="T:System.Decimal" valueType="true" />
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="style">
                <type name="NumberStyles" id="T:System.Globalization.NumberStyles" valueType="true" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Decimal" id="T:System.Decimal" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="ToDouble" id="Overload:MControl.Types.ToDouble" contract="Static">
            <method name="ToDouble" id="M:MControl.Types.ToDouble(System.Object,System.Double)" access="Public" contract="Static">
              <type name="Double" id="T:System.Double" valueType="true" />
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Double" id="T:System.Double" valueType="true" />
              </parameter>
            </method>
            <method name="ToDouble" id="M:MControl.Types.ToDouble(System.Object,System.Globalization.NumberStyles,System.Double)" access="Public" contract="Static">
              <type name="Double" id="T:System.Double" valueType="true" />
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="style">
                <type name="NumberStyles" id="T:System.Globalization.NumberStyles" valueType="true" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Double" id="T:System.Double" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="ToFloat" id="Overload:MControl.Types.ToFloat" contract="Static">
            <method name="ToFloat" id="M:MControl.Types.ToFloat(System.Object,System.Single)" access="Public" contract="Static">
              <type name="Single" id="T:System.Single" valueType="true" />
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Single" id="T:System.Single" valueType="true" />
              </parameter>
            </method>
            <method name="ToFloat" id="M:MControl.Types.ToFloat(System.Object,System.Globalization.NumberStyles,System.Single)" access="Public" contract="Static">
              <type name="Single" id="T:System.Single" valueType="true" />
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="style">
                <type name="NumberStyles" id="T:System.Globalization.NumberStyles" valueType="true" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Single" id="T:System.Single" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="ToInt" id="Overload:MControl.Types.ToInt" contract="Static">
            <method name="ToInt" id="M:MControl.Types.ToInt(System.Object,System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
            <method name="ToInt" id="M:MControl.Types.ToInt(System.Object,System.Globalization.NumberStyles,System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="style">
                <type name="NumberStyles" id="T:System.Globalization.NumberStyles" valueType="true" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
        </class>
        <class name="UtilHelper" id="T:MControl.UtilHelper" access="Public" namespace="MControl" displayName="UtilHelper">
          <constructor name=".ctor" id="M:MControl.UtilHelper.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.UtilHelper" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="CopyArray" id="M:MControl.UtilHelper.CopyArray(System.Array,System.Array)" access="Public" contract="Static">
            <type name="Array" id="T:System.Array" />
            <parameter name="arySrc">
              <type name="Array" id="T:System.Array" />
            </parameter>
            <parameter name="aryDest">
              <type name="Array" id="T:System.Array" />
            </parameter>
          </method>
        </class>
        <structure name="COLUMN" id="T:MControl.COLUMN" access="Public" namespace="MControl" displayName="COLUMN">
          <field name="Caption" id="F:MControl.COLUMN.Caption" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </field>
          <field name="ColumnOrdinal" id="F:MControl.COLUMN.ColumnOrdinal" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="Range" id="T:MControl.Range" access="Public" namespace="MControl" displayName="Range">
          <constructor name=".ctor" id="M:MControl.Range.#ctor(System.Int32,System.Int32)" access="Public" contract="Normal">
            <parameter name="min">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="max">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </constructor>
          <property name="Count" id="P:MControl.Range.Count" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
          <property name="IsNull" id="P:MControl.Range.IsNull" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
          </property>
          <property name="Max" id="P:MControl.Range.Max" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
          <property name="Min" id="P:MControl.Range.Min" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
        </structure>
        <structure name="Types.BoolRange" id="T:MControl.Types.BoolRange" access="NestedPublic" namespace="MControl" displayName="Types.BoolRange" declaringType="Types">
          <field name="F" id="F:MControl.Types.BoolRange.F" access="Public" contract="Normal">
            <type name="Object" id="T:System.Object" />
          </field>
          <field name="T" id="F:MControl.Types.BoolRange.T" access="Public" contract="Normal">
            <type name="Object" id="T:System.Object" />
          </field>
        </structure>
        <enumeration name="Alignment" id="T:MControl.Alignment" displayName="Alignment" namespace="MControl" access="Public">
          <field name="Center" id="F:MControl.Alignment.Center" value="0" />
          <field name="Left" id="F:MControl.Alignment.Left" value="1" />
          <field name="Right" id="F:MControl.Alignment.Right" value="2" />
        </enumeration>
        <enumeration name="BaseDataType" id="T:MControl.BaseDataType" displayName="BaseDataType" namespace="MControl" access="Public">
          <field name="Currency" id="F:MControl.BaseDataType.Currency" value="0" />
          <field name="Date" id="F:MControl.BaseDataType.Date" value="1" />
          <field name="Double" id="F:MControl.BaseDataType.Double" value="2" />
          <field name="Integer" id="F:MControl.BaseDataType.Integer" value="3" />
          <field name="String" id="F:MControl.BaseDataType.String" value="4" />
        </enumeration>
        <enumeration name="BoolFormats" id="T:MControl.BoolFormats" displayName="BoolFormats" namespace="MControl" access="Public">
          <field name="TrueFalse" id="F:MControl.BoolFormats.TrueFalse" value="0" />
          <field name="YesNo" id="F:MControl.BoolFormats.YesNo" value="1" />
          <field name="OnOff" id="F:MControl.BoolFormats.OnOff" value="2" />
        </enumeration>
        <enumeration name="CompareMethod" id="T:MControl.CompareMethod" displayName="CompareMethod" namespace="MControl" access="Public">
          <field name="Binary" id="F:MControl.CompareMethod.Binary" value="0" />
          <field name="Text" id="F:MControl.CompareMethod.Text" value="1" />
        </enumeration>
        <enumeration name="DataTypes" id="T:MControl.DataTypes" displayName="DataTypes" namespace="MControl" access="Public">
          <field name="Text" id="F:MControl.DataTypes.Text" value="0" />
          <field name="Number" id="F:MControl.DataTypes.Number" value="1" />
          <field name="Date" id="F:MControl.DataTypes.Date" value="2" />
          <field name="Bool" id="F:MControl.DataTypes.Bool" value="3" />
        </enumeration>
        <enumeration name="DateFormats" id="T:MControl.DateFormats" displayName="DateFormats" namespace="MControl" access="Public">
          <field name="GeneralDate" id="F:MControl.DateFormats.GeneralDate" value="0" />
          <field name="LongDate" id="F:MControl.DateFormats.LongDate" value="1" />
          <field name="ShortDate" id="F:MControl.DateFormats.ShortDate" value="2" />
          <field name="LongTime" id="F:MControl.DateFormats.LongTime" value="3" />
          <field name="ShortTime" id="F:MControl.DateFormats.ShortTime" value="4" />
          <field name="CustomDate" id="F:MControl.DateFormats.CustomDate" value="5" />
        </enumeration>
        <enumeration name="DateInterval" id="T:MControl.DateInterval" displayName="DateInterval" namespace="MControl" access="Public">
          <field name="Year" id="F:MControl.DateInterval.Year" value="0" />
          <field name="Quarter" id="F:MControl.DateInterval.Quarter" value="1" />
          <field name="Month" id="F:MControl.DateInterval.Month" value="2" />
          <field name="DayOfYear" id="F:MControl.DateInterval.DayOfYear" value="3" />
          <field name="Day" id="F:MControl.DateInterval.Day" value="4" />
          <field name="WeekOfYear" id="F:MControl.DateInterval.WeekOfYear" value="5" />
          <field name="Weekday" id="F:MControl.DateInterval.Weekday" value="6" />
          <field name="Hour" id="F:MControl.DateInterval.Hour" value="7" />
          <field name="Minute" id="F:MControl.DateInterval.Minute" value="8" />
          <field name="Second" id="F:MControl.DateInterval.Second" value="9" />
        </enumeration>
        <enumeration name="DateTimeFormats" id="T:MControl.DateTimeFormats" displayName="DateTimeFormats" namespace="MControl" access="Public">
          <field name="ShortDatePattern" id="F:MControl.DateTimeFormats.ShortDatePattern" value="0" />
          <field name="LongDatePattern" id="F:MControl.DateTimeFormats.LongDatePattern" value="1" />
          <field name="FullDateAndShortTimePattern" id="F:MControl.DateTimeFormats.FullDateAndShortTimePattern" value="2" />
          <field name="FullDateAndLongTimePattern" id="F:MControl.DateTimeFormats.FullDateAndLongTimePattern" value="3" />
          <field name="GeneralShortTime" id="F:MControl.DateTimeFormats.GeneralShortTime" value="4" />
          <field name="GeneralLongTime" id="F:MControl.DateTimeFormats.GeneralLongTime" value="5" />
          <field name="MonthDayPattern" id="F:MControl.DateTimeFormats.MonthDayPattern" value="6" />
          <field name="RFC1123Pattern" id="F:MControl.DateTimeFormats.RFC1123Pattern" value="7" />
          <field name="SortableDateTimePattern" id="F:MControl.DateTimeFormats.SortableDateTimePattern" value="8" />
          <field name="ShortTimePattern" id="F:MControl.DateTimeFormats.ShortTimePattern" value="9" />
          <field name="LongTimePattern" id="F:MControl.DateTimeFormats.LongTimePattern" value="10" />
          <field name="UniversalSortableDateTimePattern" id="F:MControl.DateTimeFormats.UniversalSortableDateTimePattern" value="11" />
          <field name="FullLongDateAndLongTime" id="F:MControl.DateTimeFormats.FullLongDateAndLongTime" value="12" />
          <field name="YearMonthPattern" id="F:MControl.DateTimeFormats.YearMonthPattern" value="13" />
        </enumeration>
        <enumeration name="Direction" id="T:MControl.Direction" displayName="Direction" namespace="MControl" access="Public">
          <field name="Vertical" id="F:MControl.Direction.Vertical" value="0" />
          <field name="Horizontal" id="F:MControl.Direction.Horizontal" value="1" />
        </enumeration>
        <enumeration name="Edge" id="T:MControl.Edge" displayName="Edge" namespace="MControl" access="Public">
          <field name="Top" id="F:MControl.Edge.Top" value="0" />
          <field name="Left" id="F:MControl.Edge.Left" value="1" />
          <field name="Bottom" id="F:MControl.Edge.Bottom" value="2" />
          <field name="Right" id="F:MControl.Edge.Right" value="3" />
          <field name="None" id="F:MControl.Edge.None" value="4" />
        </enumeration>
        <enumeration name="EncodingType" id="T:MControl.EncodingType" displayName="EncodingType" namespace="MControl" access="Public">
          <field name="ASCII" id="F:MControl.EncodingType.ASCII" value="0" />
          <field name="Unicode" id="F:MControl.EncodingType.Unicode" value="1" />
          <field name="UTF7" id="F:MControl.EncodingType.UTF7" value="2" />
          <field name="UTF8" id="F:MControl.EncodingType.UTF8" value="3" />
        </enumeration>
        <enumeration name="FirstDayOfWeek" id="T:MControl.FirstDayOfWeek" displayName="FirstDayOfWeek" namespace="MControl" access="Public">
          <field name="System" id="F:MControl.FirstDayOfWeek.System" value="0" />
          <field name="Sunday" id="F:MControl.FirstDayOfWeek.Sunday" value="1" />
          <field name="Monday" id="F:MControl.FirstDayOfWeek.Monday" value="2" />
          <field name="Tuesday" id="F:MControl.FirstDayOfWeek.Tuesday" value="3" />
          <field name="Wednesday" id="F:MControl.FirstDayOfWeek.Wednesday" value="4" />
          <field name="Thursday" id="F:MControl.FirstDayOfWeek.Thursday" value="5" />
          <field name="Friday" id="F:MControl.FirstDayOfWeek.Friday" value="6" />
          <field name="Saturday" id="F:MControl.FirstDayOfWeek.Saturday" value="7" />
        </enumeration>
        <enumeration name="Formats" id="T:MControl.Formats" displayName="Formats" namespace="MControl" access="Public">
          <field name="None" id="F:MControl.Formats.None" value="0" />
          <field name="GeneralNumber" id="F:MControl.Formats.GeneralNumber" value="1" />
          <field name="FixNumber" id="F:MControl.Formats.FixNumber" value="2" />
          <field name="StandadNumber" id="F:MControl.Formats.StandadNumber" value="3" />
          <field name="Money" id="F:MControl.Formats.Money" value="4" />
          <field name="GeneralDate" id="F:MControl.Formats.GeneralDate" value="5" />
          <field name="LongDate" id="F:MControl.Formats.LongDate" value="6" />
          <field name="ShortDate" id="F:MControl.Formats.ShortDate" value="7" />
          <field name="LongTime" id="F:MControl.Formats.LongTime" value="8" />
          <field name="ShortTime" id="F:MControl.Formats.ShortTime" value="9" />
          <field name="Percent" id="F:MControl.Formats.Percent" value="10" />
        </enumeration>
        <enumeration name="NumberFormats" id="T:MControl.NumberFormats" displayName="NumberFormats" namespace="MControl" access="Public">
          <field name="GeneralNumber" id="F:MControl.NumberFormats.GeneralNumber" value="0" />
          <field name="FixNumber" id="F:MControl.NumberFormats.FixNumber" value="1" />
          <field name="StandadNumber" id="F:MControl.NumberFormats.StandadNumber" value="2" />
          <field name="Money" id="F:MControl.NumberFormats.Money" value="3" />
          <field name="Percent" id="F:MControl.NumberFormats.Percent" value="4" />
          <field name="CustomNumber" id="F:MControl.NumberFormats.CustomNumber" value="5" />
        </enumeration>
        <enumeration name="PermsLevel" id="T:MControl.PermsLevel" displayName="PermsLevel" namespace="MControl" access="Public">
          <field name="DenyAll" id="F:MControl.PermsLevel.DenyAll" value="0" />
          <field name="ReadOnly" id="F:MControl.PermsLevel.ReadOnly" value="1" />
          <field name="EditOnly" id="F:MControl.PermsLevel.EditOnly" value="2" />
          <field name="FullControl" id="F:MControl.PermsLevel.FullControl" value="3" />
        </enumeration>
        <enumeration name="UITypes" id="T:MControl.UITypes" displayName="UITypes" namespace="MControl" access="Public">
          <field name="Form" id="F:MControl.UITypes.Form" value="1" />
          <field name="Menu" id="F:MControl.UITypes.Menu" value="2" />
          <field name="Button" id="F:MControl.UITypes.Button" value="3" />
          <field name="Report" id="F:MControl.UITypes.Report" value="4" />
          <field name="EditBox" id="F:MControl.UITypes.EditBox" value="5" />
        </enumeration>
        <enumeration name="VisualStyle" id="T:MControl.VisualStyle" displayName="VisualStyle" namespace="MControl" access="Public">
          <field name="IDE" id="F:MControl.VisualStyle.IDE" value="0" />
          <field name="Plain" id="F:MControl.VisualStyle.Plain" value="1" />
        </enumeration>
      </namespace>
      <namespace name="MControl.Caching" id="N:MControl.Caching">
        <class name="CacheExceptionEventArgs" id="T:MControl.Caching.CacheExceptionEventArgs" access="Public" namespace="MControl.Caching" displayName="CacheExceptionEventArgs">
          <base name="EventArgs" id="T:System.EventArgs" displayName="System.EventArgs" />
          <constructor name=".ctor" id="M:MControl.Caching.CacheExceptionEventArgs.#ctor(System.String,MControl.Caching.CacheErrors)" access="Public" contract="Normal">
            <parameter name="msg">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="error">
              <type name="CacheErrors" id="T:MControl.Caching.CacheErrors" valueType="true" />
            </parameter>
          </constructor>
          <field name="Error" id="F:MControl.Caching.CacheExceptionEventArgs.Error" access="Public" contract="Normal" initOnly="true">
            <type name="CacheErrors" id="T:MControl.Caching.CacheErrors" valueType="true" />
          </field>
          <field name="ErrorMessage" id="F:MControl.Caching.CacheExceptionEventArgs.ErrorMessage" access="Public" contract="Normal" initOnly="true">
            <type name="String" id="T:System.String" />
          </field>
        </class>
        <class name="GenericCache" id="T:MControl.Caching.GenericCache" access="Public" namespace="MControl.Caching" displayName="GenericCache">
          <attribute name="SerializableAttribute" id="T:System.SerializableAttribute" />
          <attribute name="DefaultMemberAttribute" id="T:System.Reflection.DefaultMemberAttribute">
            <argument id="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)" type="System.String" value="Item" />
          </attribute>
          <implements name="IEnumerable" id="T:System.Collections.IEnumerable" />
          <implements name="IDisposable" id="T:System.IDisposable" />
          <constructor name=".ctor" id="M:MControl.Caching.GenericCache.#ctor(System.String)" access="Public" contract="Normal">
            <parameter name="cacheName">
              <type name="String" id="T:System.String" />
            </parameter>
          </constructor>
          <property name="CacheSyncState" id="P:MControl.Caching.GenericCache.CacheSyncState" access="Public" contract="Normal">
            <type name="CacheSyncState" id="T:MControl.Caching.CacheSyncState" valueType="true" />
            <get access="Public" />
          </property>
          <property name="Count" id="P:MControl.Caching.GenericCache.Count" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
          <property name="Initilaized" id="P:MControl.Caching.GenericCache.Initilaized" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
          </property>
          <property name="Item" id="P:MControl.Caching.GenericCache.Item(System.String)" access="Public" contract="Normal">
            <type name="Object" id="T:System.Object" />
            <get access="Public" />
            <set access="Public" />
            <parameter name="key">
              <type name="String" id="T:System.String" />
            </parameter>
          </property>
          <property name="LastSyncTime" id="P:MControl.Caching.GenericCache.LastSyncTime" access="Public" contract="Normal">
            <type name="DateTime" id="T:System.DateTime" valueType="true" />
            <get access="Public" />
          </property>
          <property name="NextSyncTime" id="P:MControl.Caching.GenericCache.NextSyncTime" access="Public" contract="Normal">
            <type name="DateTime" id="T:System.DateTime" valueType="true" />
            <get access="Public" />
          </property>
          <property name="SleepTime" id="P:MControl.Caching.GenericCache.SleepTime" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="SyncCacheItems" id="P:MControl.Caching.GenericCache.SyncCacheItems" access="Public" contract="Normal">
            <type name="List`1" id="T:System.Collections.Generic.List`1">
              <typeparam name="CacheItem" id="T:MControl.Caching.CacheItem" />
            </type>
            <get access="Public" />
          </property>
          <property name="SyncOption" id="P:MControl.Caching.GenericCache.SyncOption" access="Public" contract="Normal">
            <type name="SyncOption" id="T:MControl.Caching.SyncOption" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="SyncTime" id="P:MControl.Caching.GenericCache.SyncTime" access="Public" contract="Normal">
            <type name="SYNCTIME" id="T:MControl.Caching.SYNCTIME" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <method name="AddItem" id="M:MControl.Caching.GenericCache.AddItem(MControl.Caching.CacheItem)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="item">
              <type name="CacheItem" id="T:MControl.Caching.CacheItem" valueType="true" />
            </parameter>
          </method>
          <method name="Clear" id="M:MControl.Caching.GenericCache.Clear" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <methodOverload name="Contains" id="Overload:MControl.Caching.GenericCache.Contains">
            <method name="Contains" id="M:MControl.Caching.GenericCache.Contains(MControl.Caching.CacheItem)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="item">
                <type name="CacheItem" id="T:MControl.Caching.CacheItem" valueType="true" />
              </parameter>
            </method>
            <method name="Contains" id="M:MControl.Caching.GenericCache.Contains(System.String)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="key">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="Dispose" id="M:MControl.Caching.GenericCache.Dispose" access="Public" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="Dispose" id="M:System.IDisposable.Dispose" interface="IDisposable" interfaceId="T:System.IDisposable" declaringType="System.IDisposable" />
          </method>
          <method name="Finalize" id="M:MControl.Caching.GenericCache.Finalize" access="Family" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="GetAllItems" id="M:MControl.Caching.GenericCache.GetAllItems" access="Public" contract="Normal">
            <type name="IList`1" id="T:System.Collections.Generic.IList`1">
              <typeparam name="CacheItem" id="T:MControl.Caching.CacheItem" />
            </type>
          </method>
          <method name="GetEnumerator" id="M:MControl.Caching.GenericCache.GetEnumerator" access="Public" contract="Normal">
            <type name="IDictionaryEnumerator" id="T:System.Collections.IDictionaryEnumerator" />
          </method>
          <methodOverload name="GetItem" id="Overload:MControl.Caching.GenericCache.GetItem">
            <method name="GetItem" id="M:MControl.Caching.GenericCache.GetItem(System.String)" access="Public" contract="Normal">
              <type name="CacheItem" id="T:MControl.Caching.CacheItem" valueType="true" />
              <parameter name="cacheKey">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetItem" id="M:MControl.Caching.GenericCache.GetItem(System.String,System.Object)" access="Public" contract="Normal">
              <type name="Object" id="T:System.Object" />
              <parameter name="cacheKey">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
            <method name="GetItem" id="M:MControl.Caching.GenericCache.GetItem(System.String,System.String)" access="Public" contract="Normal">
              <type name="String" id="T:System.String" />
              <parameter name="cacheKey">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetItem" id="M:MControl.Caching.GenericCache.GetItem(System.String,System.Int32)" access="Public" contract="Normal">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="cacheKey">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
            <method name="GetItem" id="M:MControl.Caching.GenericCache.GetItem(System.String,System.Double)" access="Public" contract="Normal">
              <type name="Double" id="T:System.Double" valueType="true" />
              <parameter name="cacheKey">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Double" id="T:System.Double" valueType="true" />
              </parameter>
            </method>
            <method name="GetItem" id="M:MControl.Caching.GenericCache.GetItem(System.String,System.Decimal)" access="Public" contract="Normal">
              <type name="Decimal" id="T:System.Decimal" valueType="true" />
              <parameter name="cacheKey">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Decimal" id="T:System.Decimal" valueType="true" />
              </parameter>
            </method>
            <method name="GetItem" id="M:MControl.Caching.GenericCache.GetItem(System.String,System.Boolean)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="cacheKey">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
            <method name="GetItem" id="M:MControl.Caching.GenericCache.GetItem(System.String,System.DateTime)" access="Public" contract="Normal">
              <type name="DateTime" id="T:System.DateTime" valueType="true" />
              <parameter name="cacheKey">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="GetItems" id="M:MControl.Caching.GenericCache.GetItems(MControl.Caching.CacheObjType)" access="Public" contract="Normal">
            <type name="IList`1" id="T:System.Collections.Generic.IList`1">
              <typeparam name="CacheItem" id="T:MControl.Caching.CacheItem" />
            </type>
            <parameter name="objectType">
              <type name="CacheObjType" id="T:MControl.Caching.CacheObjType" valueType="true" />
            </parameter>
          </method>
          <method name="OnCacheException" id="M:MControl.Caching.GenericCache.OnCacheException(MControl.Caching.CacheExceptionEventArgs)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="CacheExceptionEventArgs" id="T:MControl.Caching.CacheExceptionEventArgs" />
            </parameter>
          </method>
          <method name="OnCacheStateChanged" id="M:MControl.Caching.GenericCache.OnCacheStateChanged(System.EventArgs)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="EventArgs" id="T:System.EventArgs" />
            </parameter>
          </method>
          <method name="OnLoadRemotingData" id="M:MControl.Caching.GenericCache.OnLoadRemotingData(MControl.Caching.CacheItem@)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="item" direction="ref">
              <type name="CacheItem" id="T:MControl.Caching.CacheItem" valueType="true" />
            </parameter>
          </method>
          <method name="OnSyncCacheSource" id="M:MControl.Caching.GenericCache.OnSyncCacheSource(MControl.Caching.SyncCacheEventArgs)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="SyncCacheEventArgs" id="T:MControl.Caching.SyncCacheEventArgs" />
            </parameter>
          </method>
          <method name="OnSyncTimeStart" id="M:MControl.Caching.GenericCache.OnSyncTimeStart(System.EventArgs)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="EventArgs" id="T:System.EventArgs" />
            </parameter>
          </method>
          <method name="RemoveItem" id="M:MControl.Caching.GenericCache.RemoveItem(System.String)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="cacheKey">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="RestartThreadSetting" id="M:MControl.Caching.GenericCache.RestartThreadSetting" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="Start" id="M:MControl.Caching.GenericCache.Start" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="Stop" id="M:MControl.Caching.GenericCache.Stop" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="SyncAllCacheItems" id="M:MControl.Caching.GenericCache.SyncAllCacheItems" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="SyncAllItemSource" id="M:MControl.Caching.GenericCache.SyncAllItemSource" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="SyncAllItems" id="M:MControl.Caching.GenericCache.SyncAllItems" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="SyncContains" id="M:MControl.Caching.GenericCache.SyncContains(System.String)" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="key">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="SyncItemSource" id="M:MControl.Caching.GenericCache.SyncItemSource(MControl.Caching.CacheItem)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="itm">
              <type name="CacheItem" id="T:MControl.Caching.CacheItem" valueType="true" />
            </parameter>
          </method>
          <method name="ThreadSettingState" id="M:MControl.Caching.GenericCache.ThreadSettingState" access="Public" contract="Normal">
            <type name="CacheSettingState" id="T:MControl.Caching.CacheSettingState" valueType="true" />
          </method>
          <method name="TryGetValue" id="M:MControl.Caching.GenericCache.TryGetValue(System.String,MControl.Caching.CacheItem@)" access="Family" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="cacheKey">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="item" direction="out">
              <type name="CacheItem" id="T:MControl.Caching.CacheItem" valueType="true" />
              <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
            </parameter>
          </method>
          <event name="CacheException" id="E:MControl.Caching.GenericCache.CacheException" access="Public" contract="Normal" multicast="true">
            <type name="CacheExceptionEventHandler" id="T:MControl.Caching.CacheExceptionEventHandler" />
            <eventArgs name="CacheExceptionEventArgs" id="T:MControl.Caching.CacheExceptionEventArgs" />
          </event>
          <event name="CacheStateChanged" id="E:MControl.Caching.GenericCache.CacheStateChanged" access="Public" contract="Normal" multicast="true">
            <type name="EventHandler" id="T:System.EventHandler" />
          </event>
          <event name="SyncCacheSource" id="E:MControl.Caching.GenericCache.SyncCacheSource" access="Public" contract="Normal" multicast="true">
            <type name="SyncCacheEventHandler" id="T:MControl.Caching.SyncCacheEventHandler" />
            <eventArgs name="SyncCacheEventArgs" id="T:MControl.Caching.SyncCacheEventArgs">
              <property name="SourceName" id="P:MControl.Caching.SyncCacheEventArgs.SourceName" access="Public" contract="Normal">
                <type name="String" id="T:System.String" />
                <get access="Public" />
              </property>
            </eventArgs>
          </event>
          <event name="SyncTimeStart" id="E:MControl.Caching.GenericCache.SyncTimeStart" access="Public" contract="Normal" multicast="true">
            <type name="EventHandler" id="T:System.EventHandler" />
          </event>
        </class>
        <class name="SyncCacheEventArgs" id="T:MControl.Caching.SyncCacheEventArgs" access="Public" namespace="MControl.Caching" displayName="SyncCacheEventArgs">
          <base name="EventArgs" id="T:System.EventArgs" displayName="System.EventArgs" />
          <constructor name=".ctor" id="M:MControl.Caching.SyncCacheEventArgs.#ctor(System.String)" access="Public" contract="Normal">
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
          </constructor>
          <property name="SourceName" id="P:MControl.Caching.SyncCacheEventArgs.SourceName" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
          </property>
        </class>
        <structure name="CacheItem" id="T:MControl.Caching.CacheItem" access="Public" namespace="MControl.Caching" displayName="CacheItem">
          <constructorOverload name=".ctor" id="Overload:MControl.Caching.CacheItem.#ctor" explicitInterfaceImplementation="true">
            <constructor name=".ctor" id="M:MControl.Caching.CacheItem.#ctor(System.String,System.Object,MControl.Caching.CacheObjType,System.String)" access="Public" contract="Normal">
              <parameter name="key">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="cacheObjType">
                <type name="CacheObjType" id="T:MControl.Caching.CacheObjType" valueType="true" />
              </parameter>
              <parameter name="source">
                <type name="String" id="T:System.String" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Caching.CacheItem.#ctor(System.String,System.Object)" access="Public" contract="Normal">
              <parameter name="key">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Caching.CacheItem.#ctor(MControl.Caching.CacheItem)" access="Public" contract="Normal">
              <parameter name="itm">
                <type name="CacheItem" id="T:MControl.Caching.CacheItem" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
          <field name="CacheObjType" id="F:MControl.Caching.CacheItem.CacheObjType" access="Public" contract="Normal">
            <type name="CacheObjType" id="T:MControl.Caching.CacheObjType" valueType="true" />
          </field>
          <field name="Key" id="F:MControl.Caching.CacheItem.Key" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Source" id="F:MControl.Caching.CacheItem.Source" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Value" id="F:MControl.Caching.CacheItem.Value" access="Public" contract="Normal">
            <type name="Object" id="T:System.Object" />
          </field>
          <property name="Empty" id="P:MControl.Caching.CacheItem.Empty" access="Public" contract="Static">
            <type name="CacheItem" id="T:MControl.Caching.CacheItem" valueType="true" />
            <get access="Public" />
          </property>
          <property name="IsEmpty" id="P:MControl.Caching.CacheItem.IsEmpty" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
          </property>
        </structure>
        <structure name="SYNCTIME" id="T:MControl.Caching.SYNCTIME" access="Public" namespace="MControl.Caching" displayName="SYNCTIME">
          <constructorOverload name=".ctor" id="Overload:MControl.Caching.SYNCTIME.#ctor" explicitInterfaceImplementation="true">
            <constructor name=".ctor" id="M:MControl.Caching.SYNCTIME.#ctor(System.Int32,System.Int32)" access="Public" contract="Normal">
              <parameter name="hour">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="minute">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Caching.SYNCTIME.#ctor(System.Int32,System.Int32,MControl.Caching.SyncType)" access="Public" contract="Normal">
              <parameter name="hour">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="minute">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="syncType">
                <type name="SyncType" id="T:MControl.Caching.SyncType" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
          <field name="SyncType" id="F:MControl.Caching.SYNCTIME.SyncType" access="Public" contract="Normal">
            <type name="SyncType" id="T:MControl.Caching.SyncType" valueType="true" />
          </field>
          <property name="Empty" id="P:MControl.Caching.SYNCTIME.Empty" access="Public" contract="Static">
            <type name="SYNCTIME" id="T:MControl.Caching.SYNCTIME" valueType="true" />
            <get access="Public" />
          </property>
          <property name="Hour" id="P:MControl.Caching.SYNCTIME.Hour" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="IsEmpty" id="P:MControl.Caching.SYNCTIME.IsEmpty" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
          </property>
          <property name="Minute" id="P:MControl.Caching.SYNCTIME.Minute" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <methodOverload name="Equals" id="Overload:MControl.Caching.SYNCTIME.Equals">
            <documentation><summary><inheritSource>Overload:System.ValueType.Equals</inheritSource><inheritDoc>Indicates whether this instance and a specified object are equal.</inheritDoc></summary></documentation>
            <method name="Equals" id="M:MControl.Caching.SYNCTIME.Equals(System.Object)" access="Public" contract="Override">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="obj">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
            <method name="Equals" id="M:MControl.Caching.SYNCTIME.Equals(MControl.Caching.SYNCTIME)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="obj">
                <type name="SYNCTIME" id="T:MControl.Caching.SYNCTIME" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="GetHashCode" id="M:MControl.Caching.SYNCTIME.GetHashCode" access="Public" contract="Override">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </method>
          <method name="GetLastTime" id="M:MControl.Caching.SYNCTIME.GetLastTime" access="Public" contract="Normal">
            <type name="DateTime" id="T:System.DateTime" valueType="true" />
          </method>
          <methodOverload name="GetNextValidTime" id="Overload:MControl.Caching.SYNCTIME.GetNextValidTime">
            <method name="GetNextValidTime" id="M:MControl.Caching.SYNCTIME.GetNextValidTime(System.DateTime)" access="Public" contract="Normal">
              <type name="DateTime" id="T:System.DateTime" valueType="true" />
              <parameter name="d">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
            </method>
            <method name="GetNextValidTime" id="M:MControl.Caching.SYNCTIME.GetNextValidTime" access="Public" contract="Normal">
              <type name="DateTime" id="T:System.DateTime" valueType="true" />
            </method>
          </methodOverload>
          <method name="GetValidTime" id="M:MControl.Caching.SYNCTIME.GetValidTime(System.DateTime)" access="Public" contract="Normal">
            <type name="DateTime" id="T:System.DateTime" valueType="true" />
            <parameter name="d">
              <type name="DateTime" id="T:System.DateTime" valueType="true" />
            </parameter>
          </method>
          <method name="HasTimeToRun" id="M:MControl.Caching.SYNCTIME.HasTimeToRun" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
          </method>
          <method name="ToDouble" id="M:MControl.Caching.SYNCTIME.ToDouble" access="Public" contract="Normal">
            <type name="Double" id="T:System.Double" valueType="true" />
          </method>
          <method name="ToString" id="M:MControl.Caching.SYNCTIME.ToString" access="Public" contract="Override">
            <type name="String" id="T:System.String" />
          </method>
          <event name="TimeElapsed" id="E:MControl.Caching.SYNCTIME.TimeElapsed" access="Public" contract="Normal" multicast="true">
            <type name="EventHandler" id="T:System.EventHandler" />
          </event>
        </structure>
        <enumeration name="CacheAction" id="T:MControl.Caching.CacheAction" displayName="CacheAction" namespace="MControl.Caching" access="Public">
          <attribute name="SerializableAttribute" id="T:System.SerializableAttribute" />
          <field name="AddItem" id="F:MControl.Caching.CacheAction.AddItem" value="2" />
          <field name="AllocateCache" id="F:MControl.Caching.CacheAction.AllocateCache" value="1" />
          <field name="ClearCache" id="F:MControl.Caching.CacheAction.ClearCache" value="3" />
          <field name="GrowCache" id="F:MControl.Caching.CacheAction.GrowCache" value="6" />
          <field name="LookupItemHit" id="F:MControl.Caching.CacheAction.LookupItemHit" value="4" />
          <field name="LookupItemMiss" id="F:MControl.Caching.CacheAction.LookupItemMiss" value="5" />
          <field name="ReplaceFailed" id="F:MControl.Caching.CacheAction.ReplaceFailed" value="8" />
          <field name="SetItemReplace" id="F:MControl.Caching.CacheAction.SetItemReplace" value="7" />
        </enumeration>
        <enumeration name="CacheErrors" id="T:MControl.Caching.CacheErrors" displayName="CacheErrors" namespace="MControl.Caching" access="Public">
          <field name="ErrorUnexpected" id="F:MControl.Caching.CacheErrors.ErrorUnexpected" value="-1000" />
          <field name="ErrorInitilaized" id="F:MControl.Caching.CacheErrors.ErrorInitilaized" value="-1001" />
          <field name="ErrorCreateStorage" id="F:MControl.Caching.CacheErrors.ErrorCreateStorage" value="-1002" />
          <field name="ErrorStoreData" id="F:MControl.Caching.CacheErrors.ErrorStoreData" value="-1003" />
          <field name="ErrorFileNotFound" id="F:MControl.Caching.CacheErrors.ErrorFileNotFound" value="-1004" />
          <field name="ErrorReadFromXml" id="F:MControl.Caching.CacheErrors.ErrorReadFromXml" value="-1005" />
          <field name="ErrorWriteToXml" id="F:MControl.Caching.CacheErrors.ErrorWriteToXml" value="-1006" />
          <field name="ErrorSyncStorage" id="F:MControl.Caching.CacheErrors.ErrorSyncStorage" value="-1007" />
          <field name="ErrorSetValue" id="F:MControl.Caching.CacheErrors.ErrorSetValue" value="-1008" />
          <field name="ErrorReadValue" id="F:MControl.Caching.CacheErrors.ErrorReadValue" value="-1009" />
          <field name="ErrorTableNotExist" id="F:MControl.Caching.CacheErrors.ErrorTableNotExist" value="-1010" />
          <field name="ErrorColumnNotExist" id="F:MControl.Caching.CacheErrors.ErrorColumnNotExist" value="-1011" />
          <field name="ErrorInFilterExspression" id="F:MControl.Caching.CacheErrors.ErrorInFilterExspression" value="-1012" />
          <field name="ErrorCastingValue" id="F:MControl.Caching.CacheErrors.ErrorCastingValue" value="-1013" />
          <field name="ErrorGetValue" id="F:MControl.Caching.CacheErrors.ErrorGetValue" value="-1014" />
        </enumeration>
        <enumeration name="CacheObjType" id="T:MControl.Caching.CacheObjType" displayName="CacheObjType" namespace="MControl.Caching" access="Public">
          <attribute name="SerializableAttribute" id="T:System.SerializableAttribute" />
          <field name="EmptyElement" id="F:MControl.Caching.CacheObjType.EmptyElement" value="0" />
          <field name="DataType" id="F:MControl.Caching.CacheObjType.DataType" value="1" />
          <field name="RemotingData" id="F:MControl.Caching.CacheObjType.RemotingData" value="2" />
          <field name="TextFile" id="F:MControl.Caching.CacheObjType.TextFile" value="3" />
          <field name="BinaryFile" id="F:MControl.Caching.CacheObjType.BinaryFile" value="4" />
          <field name="Xml" id="F:MControl.Caching.CacheObjType.Xml" value="5" />
        </enumeration>
        <enumeration name="CacheSettingState" id="T:MControl.Caching.CacheSettingState" displayName="CacheSettingState" namespace="MControl.Caching" access="Public">
          <field name="Started" id="F:MControl.Caching.CacheSettingState.Started" value="0" />
          <field name="Stoped" id="F:MControl.Caching.CacheSettingState.Stoped" value="1" />
        </enumeration>
        <enumeration name="CacheSyncState" id="T:MControl.Caching.CacheSyncState" displayName="CacheSyncState" namespace="MControl.Caching" access="Public">
          <field name="Idle" id="F:MControl.Caching.CacheSyncState.Idle" value="0" />
          <field name="ShouldStart" id="F:MControl.Caching.CacheSyncState.ShouldStart" value="1" />
          <field name="Started" id="F:MControl.Caching.CacheSyncState.Started" value="2" />
          <field name="Finished" id="F:MControl.Caching.CacheSyncState.Finished" value="3" />
        </enumeration>
        <enumeration name="SyncOption" id="T:MControl.Caching.SyncOption" displayName="SyncOption" namespace="MControl.Caching" access="Public">
          <field name="Manual" id="F:MControl.Caching.SyncOption.Manual" value="0" />
          <field name="Auto" id="F:MControl.Caching.SyncOption.Auto" value="1" />
        </enumeration>
        <enumeration name="SyncType" id="T:MControl.Caching.SyncType" displayName="SyncType" namespace="MControl.Caching" access="Public">
          <field name="None" id="F:MControl.Caching.SyncType.None" value="0" />
          <field name="Daily" id="F:MControl.Caching.SyncType.Daily" value="1" />
          <field name="Interval" id="F:MControl.Caching.SyncType.Interval" value="2" />
        </enumeration>
        <delegate name="CacheExceptionEventHandler" displayName="CacheExceptionEventHandler" namespace="MControl.Caching" id="T:MControl.Caching.CacheExceptionEventHandler" access="Public">
          <type name="Void" id="T:System.Void" valueType="true" />
          <parameter name="sender">
            <type name="Object" id="T:System.Object" />
          </parameter>
          <parameter name="e">
            <type name="CacheExceptionEventArgs" id="T:MControl.Caching.CacheExceptionEventArgs" />
          </parameter>
        </delegate>
        <delegate name="SyncCacheEventHandler" displayName="SyncCacheEventHandler" namespace="MControl.Caching" id="T:MControl.Caching.SyncCacheEventHandler" access="Public">
          <type name="Void" id="T:System.Void" valueType="true" />
          <parameter name="sender">
            <type name="Object" id="T:System.Object" />
          </parameter>
          <parameter name="e">
            <type name="SyncCacheEventArgs" id="T:MControl.Caching.SyncCacheEventArgs" />
          </parameter>
        </delegate>
      </namespace>
      <namespace name="MControl.Collections" id="N:MControl.Collections">
        <class name="AsyncSort" id="T:MControl.Collections.AsyncSort" access="Public" namespace="MControl.Collections" displayName="AsyncSort">
          <constructor name=".ctor" id="M:MControl.Collections.AsyncSort.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Collections.AsyncSort" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="Start" id="M:MControl.Collections.AsyncSort.Start(System.Data.DataView,System.String)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="dv">
              <type name="DataView" id="T:System.Data.DataView" />
            </parameter>
            <parameter name="colView">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="CollectionWithEvents" id="T:MControl.Collections.CollectionWithEvents" access="Public" namespace="MControl.Collections" displayName="CollectionWithEvents">
          <base name="CollectionBase" id="T:System.Collections.CollectionBase" displayName="System.Collections.CollectionBase" />
          <derivedBy id="T:MControl.Collections.StringCollection" displayName="MControl.Collections.StringCollection" />
          <implements name="IList" id="T:System.Collections.IList" inherited="true" />
          <implements name="ICollection" id="T:System.Collections.ICollection" inherited="true" />
          <implements name="IEnumerable" id="T:System.Collections.IEnumerable" inherited="true" />
          <constructor name=".ctor" id="M:MControl.Collections.CollectionWithEvents.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Collections.CollectionWithEvents" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="IndexOf" id="M:MControl.Collections.CollectionWithEvents.IndexOf(System.Object)" access="Family" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="OnClear" id="M:MControl.Collections.CollectionWithEvents.OnClear" access="Family" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="OnClearComplete" id="M:MControl.Collections.CollectionWithEvents.OnClearComplete" access="Family" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="OnInsert" id="M:MControl.Collections.CollectionWithEvents.OnInsert(System.Int32,System.Object)" access="Family" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="OnInsertComplete" id="M:MControl.Collections.CollectionWithEvents.OnInsertComplete(System.Int32,System.Object)" access="Family" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="OnRemove" id="M:MControl.Collections.CollectionWithEvents.OnRemove(System.Int32,System.Object)" access="Family" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="OnRemoveComplete" id="M:MControl.Collections.CollectionWithEvents.OnRemoveComplete(System.Int32,System.Object)" access="Family" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <event name="Cleared" id="E:MControl.Collections.CollectionWithEvents.Cleared" access="Public" contract="Normal" multicast="true">
            <type name="CollectionClear" id="T:MControl.Collections.CollectionClear" />
          </event>
          <event name="Clearing" id="E:MControl.Collections.CollectionWithEvents.Clearing" access="Public" contract="Normal" multicast="true">
            <type name="CollectionClear" id="T:MControl.Collections.CollectionClear" />
          </event>
          <event name="Inserted" id="E:MControl.Collections.CollectionWithEvents.Inserted" access="Public" contract="Normal" multicast="true">
            <type name="CollectionChange" id="T:MControl.Collections.CollectionChange" />
          </event>
          <event name="Inserting" id="E:MControl.Collections.CollectionWithEvents.Inserting" access="Public" contract="Normal" multicast="true">
            <type name="CollectionChange" id="T:MControl.Collections.CollectionChange" />
          </event>
          <event name="Removed" id="E:MControl.Collections.CollectionWithEvents.Removed" access="Public" contract="Normal" multicast="true">
            <type name="CollectionChange" id="T:MControl.Collections.CollectionChange" />
          </event>
          <event name="Removing" id="E:MControl.Collections.CollectionWithEvents.Removing" access="Public" contract="Normal" multicast="true">
            <type name="CollectionChange" id="T:MControl.Collections.CollectionChange" />
          </event>
        </class>
        <class name="ControlCollection" id="T:MControl.Collections.ControlCollection" access="Public" namespace="MControl.Collections" displayName="ControlCollection">
          <constructor name=".ctor" id="M:MControl.Collections.ControlCollection.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Collections.ControlCollection" /> class.</autoText></summary></documentation>
          </constructor>
          <methodOverload name="ListControls" id="Overload:MControl.Collections.ControlCollection.ListControls" contract="Static">
            <method name="ListControls" id="M:MControl.Collections.ControlCollection.ListControls(System.Windows.Forms.Control.ControlCollection)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="controls">
                <type name="Control.ControlCollection" id="T:System.Windows.Forms.Control.ControlCollection" />
              </parameter>
            </method>
            <method name="ListControls" id="M:MControl.Collections.ControlCollection.ListControls(System.String,System.Windows.Forms.Control.ControlCollection)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="title">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="controls">
                <type name="Control.ControlCollection" id="T:System.Windows.Forms.Control.ControlCollection" />
              </parameter>
            </method>
            <method name="ListControls" id="M:MControl.Collections.ControlCollection.ListControls(System.String,System.Windows.Forms.Control.ControlCollection,System.Boolean)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="title">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="controls">
                <type name="Control.ControlCollection" id="T:System.Windows.Forms.Control.ControlCollection" />
              </parameter>
              <parameter name="fullName">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="Remove" id="M:MControl.Collections.ControlCollection.Remove(System.Windows.Forms.Control.ControlCollection,System.Windows.Forms.Control)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="coll">
              <type name="Control.ControlCollection" id="T:System.Windows.Forms.Control.ControlCollection" />
            </parameter>
            <parameter name="item">
              <type name="Control" id="T:System.Windows.Forms.Control" />
            </parameter>
          </method>
          <method name="RemoveAll" id="M:MControl.Collections.ControlCollection.RemoveAll(System.Windows.Forms.Control)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="control">
              <type name="Control" id="T:System.Windows.Forms.Control" />
            </parameter>
          </method>
          <method name="RemoveAt" id="M:MControl.Collections.ControlCollection.RemoveAt(System.Windows.Forms.Control.ControlCollection,System.Int32)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="coll">
              <type name="Control.ControlCollection" id="T:System.Windows.Forms.Control.ControlCollection" />
            </parameter>
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="RemoveForm" id="M:MControl.Collections.ControlCollection.RemoveForm(System.Windows.Forms.Control,System.Windows.Forms.Form)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="source">
              <type name="Control" id="T:System.Windows.Forms.Control" />
            </parameter>
            <parameter name="form">
              <type name="Form" id="T:System.Windows.Forms.Form" />
            </parameter>
          </method>
        </class>
        <class name="CustomColorCollection" id="T:MControl.Collections.CustomColorCollection" access="Public" namespace="MControl.Collections" displayName="CustomColorCollection">
          <attribute name="DefaultMemberAttribute" id="T:System.Reflection.DefaultMemberAttribute">
            <argument id="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)" type="System.String" value="Item" />
          </attribute>
          <implements name="ColorCollection" id="T:MControl.Collections.ColorCollection" />
          <implements name="IEnumerable" id="T:System.Collections.IEnumerable" />
          <constructor name=".ctor" id="M:MControl.Collections.CustomColorCollection.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Collections.CustomColorCollection" /> class.</autoText></summary></documentation>
          </constructor>
          <property name="Count" id="P:MControl.Collections.CustomColorCollection.Count" access="Public" contract="Final">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
            <implements name="Count" id="P:MControl.Collections.ColorCollection.Count" interface="ColorCollection" interfaceId="T:MControl.Collections.ColorCollection" declaringType="MControl.Collections.ColorCollection" />
          </property>
          <propertyOverload name="Item" id="Overload:MControl.Collections.CustomColorCollection.Item">
            <property name="Item" id="P:MControl.Collections.CustomColorCollection.Item(System.Int32)" access="Public" contract="Final">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              <get access="Public" />
              <implements name="Item" id="P:MControl.Collections.ColorCollection.Item(System.Int32)" interface="ColorCollection" interfaceId="T:MControl.Collections.ColorCollection" declaringType="MControl.Collections.ColorCollection" />
              <parameter name="iColor">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </property>
            <property name="Item" id="P:MControl.Collections.CustomColorCollection.Item(System.String)" access="Public" contract="Final">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              <get access="Public" />
              <implements name="Item" id="P:MControl.Collections.ColorCollection.Item(System.String)" interface="ColorCollection" interfaceId="T:MControl.Collections.ColorCollection" declaringType="MControl.Collections.ColorCollection" />
              <parameter name="szColor">
                <type name="String" id="T:System.String" />
              </parameter>
            </property>
          </propertyOverload>
          <method name="Add" id="M:MControl.Collections.CustomColorCollection.Add(System.Drawing.Color)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="color">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
          </method>
          <method name="GetEnumerator" id="M:MControl.Collections.CustomColorCollection.GetEnumerator" access="Public" contract="Final">
            <type name="IEnumerator" id="T:System.Collections.IEnumerator" />
            <implements name="GetEnumerator" id="M:MControl.Collections.ColorCollection.GetEnumerator" interface="ColorCollection" interfaceId="T:MControl.Collections.ColorCollection" declaringType="MControl.Collections.ColorCollection" />
            <implements name="GetEnumerator" id="M:System.Collections.IEnumerable.GetEnumerator" interface="IEnumerable" interfaceId="T:System.Collections.IEnumerable" declaringType="System.Collections.IEnumerable" />
          </method>
          <method name="IndexOf" id="M:MControl.Collections.CustomColorCollection.IndexOf(System.String)" access="Public" contract="Final">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <implements name="IndexOf" id="M:MControl.Collections.ColorCollection.IndexOf(System.String)" interface="ColorCollection" interfaceId="T:MControl.Collections.ColorCollection" declaringType="MControl.Collections.ColorCollection" />
            <parameter name="ColorName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="Remove" id="M:MControl.Collections.CustomColorCollection.Remove(System.Drawing.Color)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="color">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
          </method>
          <method name="RemoveAt" id="M:MControl.Collections.CustomColorCollection.RemoveAt(System.Int32)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
        </class>
        <class name="GenericList`2" id="T:MControl.Collections.GenericList`2" access="Public" namespace="MControl.Collections" displayName="GenericList&lt;Key,Value&gt;">
          <typeparam name="Key" attributes="None" />
          <typeparam name="Value" attributes="None" />
          <attribute name="SerializableAttribute" id="T:System.SerializableAttribute" />
          <attribute name="DefaultMemberAttribute" id="T:System.Reflection.DefaultMemberAttribute">
            <argument id="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)" type="System.String" value="Item" />
          </attribute>
          <implements name="IDictionary`2" id="T:System.Collections.Generic.IDictionary`2">
            <typeparam name="Key" attributes="None" />
            <typeparam name="Value" attributes="None" />
          </implements>
          <implements name="ICollection`1" id="T:System.Collections.Generic.ICollection`1">
            <typeparam name="KeyValuePair`2" id="T:System.Collections.Generic.KeyValuePair`2">
              <typeparam name="Key" attributes="None" />
              <typeparam name="Value" attributes="None" />
            </typeparam>
          </implements>
          <implements name="IEnumerable`1" id="T:System.Collections.Generic.IEnumerable`1">
            <typeparam name="KeyValuePair`2" id="T:System.Collections.Generic.KeyValuePair`2">
              <typeparam name="Key" attributes="None" />
              <typeparam name="Value" attributes="None" />
            </typeparam>
          </implements>
          <implements name="IEnumerable" id="T:System.Collections.IEnumerable" />
          <implements name="IDictionary" id="T:System.Collections.IDictionary" />
          <implements name="ICollection" id="T:System.Collections.ICollection" />
          <constructorOverload name=".ctor" id="Overload:MControl.Collections.GenericList`2.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Collections.GenericList`2" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Collections.GenericList`2.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Collections.GenericList`2" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Collections.GenericList`2.#ctor(System.Collections.Generic.IComparer{`0})" access="Public" contract="Normal">
              <parameter name="comparer">
                <type name="IComparer`1" id="T:System.Collections.Generic.IComparer`1">
                  <typeparam name="Key" attributes="None" />
                </type>
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Collections.GenericList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})" access="Public" contract="Normal">
              <parameter name="dictionary">
                <type name="IDictionary`2" id="T:System.Collections.Generic.IDictionary`2">
                  <typeparam name="Key" attributes="None" />
                  <typeparam name="Value" attributes="None" />
                </type>
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Collections.GenericList`2.#ctor(System.Int32)" access="Public" contract="Normal">
              <parameter name="capacity">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Collections.GenericList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})" access="Public" contract="Normal">
              <parameter name="dictionary">
                <type name="IDictionary`2" id="T:System.Collections.Generic.IDictionary`2">
                  <typeparam name="Key" attributes="None" />
                  <typeparam name="Value" attributes="None" />
                </type>
              </parameter>
              <parameter name="comparer">
                <type name="IComparer`1" id="T:System.Collections.Generic.IComparer`1">
                  <typeparam name="Key" attributes="None" />
                </type>
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Collections.GenericList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})" access="Public" contract="Normal">
              <parameter name="capacity">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="comparer">
                <type name="IComparer`1" id="T:System.Collections.Generic.IComparer`1">
                  <typeparam name="Key" attributes="None" />
                </type>
              </parameter>
            </constructor>
          </constructorOverload>
          <property name="Capacity" id="P:MControl.Collections.GenericList`2.Capacity" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="Comparer" id="P:MControl.Collections.GenericList`2.Comparer" access="Public" contract="Normal">
            <type name="IComparer`1" id="T:System.Collections.Generic.IComparer`1">
              <typeparam name="Key" attributes="None" />
            </type>
            <get access="Public" />
          </property>
          <property name="Count" id="P:MControl.Collections.GenericList`2.Count" access="Public" contract="Final">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
            <implements name="Count" id="P:System.Collections.Generic.ICollection`1.Count" interface="ICollection&lt;KeyValuePair`2&gt;" interfaceId="T:System.Collections.Generic.ICollection`1" declaringType="System.Collections.Generic.ICollection`1" />
            <implements name="Count" id="P:System.Collections.ICollection.Count" interface="ICollection" interfaceId="T:System.Collections.ICollection" declaringType="System.Collections.ICollection" />
          </property>
          <property name="Item" id="P:MControl.Collections.GenericList`2.Item(`0)" access="Public" contract="Final">
            <type name="Value" />
            <get access="Public" />
            <set access="Public" />
            <implements name="Item" id="P:System.Collections.Generic.IDictionary`2.Item(`0)" interface="IDictionary&lt;Key,Value&gt;" interfaceId="T:System.Collections.Generic.IDictionary`2" declaringType="System.Collections.Generic.IDictionary`2" />
            <parameter name="key">
              <type name="Key" />
            </parameter>
          </property>
          <property name="Keys" id="P:MControl.Collections.GenericList`2.Keys" access="Public" contract="Normal">
            <type name="IList`1" id="T:System.Collections.Generic.IList`1">
              <typeparam name="Key" attributes="None" />
            </type>
            <get access="Public" />
          </property>
          <property name="Values" id="P:MControl.Collections.GenericList`2.Values" access="Public" contract="Normal">
            <type name="IList`1" id="T:System.Collections.Generic.IList`1">
              <typeparam name="Value" attributes="None" />
            </type>
            <get access="Public" />
          </property>
          <method name="Add" id="M:MControl.Collections.GenericList`2.Add(`0,`1)" access="Public" contract="Final">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="Add" id="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" interface="IDictionary&lt;Key,Value&gt;" interfaceId="T:System.Collections.Generic.IDictionary`2" declaringType="System.Collections.Generic.IDictionary`2" />
            <parameter name="key">
              <type name="Key" />
            </parameter>
            <parameter name="value">
              <type name="Value" />
            </parameter>
          </method>
          <method name="Clear" id="M:MControl.Collections.GenericList`2.Clear" access="Public" contract="Final">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="Clear" id="M:System.Collections.Generic.ICollection`1.Clear" interface="ICollection&lt;KeyValuePair`2&gt;" interfaceId="T:System.Collections.Generic.ICollection`1" declaringType="System.Collections.Generic.ICollection`1" />
            <implements name="Clear" id="M:System.Collections.IDictionary.Clear" interface="IDictionary" interfaceId="T:System.Collections.IDictionary" declaringType="System.Collections.IDictionary" />
          </method>
          <method name="ContainsKey" id="M:MControl.Collections.GenericList`2.ContainsKey(`0)" access="Public" contract="Final">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <implements name="ContainsKey" id="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" interface="IDictionary&lt;Key,Value&gt;" interfaceId="T:System.Collections.Generic.IDictionary`2" declaringType="System.Collections.Generic.IDictionary`2" />
            <parameter name="key">
              <type name="Key" />
            </parameter>
          </method>
          <method name="ContainsValue" id="M:MControl.Collections.GenericList`2.ContainsValue(`1)" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="value">
              <type name="Value" />
            </parameter>
          </method>
          <method name="GetEnumerator" id="M:MControl.Collections.GenericList`2.GetEnumerator" access="Public" contract="Normal">
            <type name="IEnumerator`1" id="T:System.Collections.Generic.IEnumerator`1">
              <typeparam name="KeyValuePair`2" id="T:System.Collections.Generic.KeyValuePair`2">
                <typeparam name="Key" attributes="None" />
                <typeparam name="Value" attributes="None" />
              </typeparam>
            </type>
          </method>
          <method name="IndexOfKey" id="M:MControl.Collections.GenericList`2.IndexOfKey(`0)" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="key">
              <type name="Key" />
            </parameter>
          </method>
          <method name="IndexOfValue" id="M:MControl.Collections.GenericList`2.IndexOfValue(`1)" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="value">
              <type name="Value" />
            </parameter>
          </method>
          <method name="Remove" id="M:MControl.Collections.GenericList`2.Remove(`0)" access="Public" contract="Final">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <implements name="Remove" id="M:System.Collections.Generic.IDictionary`2.Remove(`0)" interface="IDictionary&lt;Key,Value&gt;" interfaceId="T:System.Collections.Generic.IDictionary`2" declaringType="System.Collections.Generic.IDictionary`2" />
            <parameter name="key">
              <type name="Key" />
            </parameter>
          </method>
          <method name="RemoveAt" id="M:MControl.Collections.GenericList`2.RemoveAt(System.Int32)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="TrimExcess" id="M:MControl.Collections.GenericList`2.TrimExcess" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="TryGetValue" id="M:MControl.Collections.GenericList`2.TryGetValue(`0,`1@)" access="Public" contract="Final">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <implements name="TryGetValue" id="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)" interface="IDictionary&lt;Key,Value&gt;" interfaceId="T:System.Collections.Generic.IDictionary`2" declaringType="System.Collections.Generic.IDictionary`2" />
            <parameter name="key">
              <type name="Key" />
            </parameter>
            <parameter name="value" direction="out">
              <type name="Value" />
              <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
            </parameter>
          </method>
        </class>
        <class name="GenericQueue`1" id="T:MControl.Collections.GenericQueue`1" access="Public" namespace="MControl.Collections" displayName="GenericQueue&lt;T&gt;">
          <typeparam name="T" attributes="None" />
          <attribute name="SerializableAttribute" id="T:System.SerializableAttribute" />
          <attribute name="DebuggerDisplayAttribute" id="T:System.Diagnostics.DebuggerDisplayAttribute">
            <argument id="M:System.Diagnostics.DebuggerDisplayAttribute.#ctor(System.String)" type="System.String" value="Count = {Count}" />
          </attribute>
          <implements name="IEnumerable`1" id="T:System.Collections.Generic.IEnumerable`1">
            <typeparam name="T" attributes="None" />
          </implements>
          <implements name="IEnumerable" id="T:System.Collections.IEnumerable" />
          <implements name="ICollection" id="T:System.Collections.ICollection" />
          <constructorOverload name=".ctor" id="Overload:MControl.Collections.GenericQueue`1.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Collections.GenericQueue`1" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Collections.GenericQueue`1.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Collections.GenericQueue`1" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Collections.GenericQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})" access="Public" contract="Normal">
              <parameter name="collection">
                <type name="IEnumerable`1" id="T:System.Collections.Generic.IEnumerable`1">
                  <typeparam name="T" attributes="None" />
                </type>
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Collections.GenericQueue`1.#ctor(System.Int32)" access="Public" contract="Normal">
              <parameter name="capacity">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
          <property name="Count" id="P:MControl.Collections.GenericQueue`1.Count" access="Public" contract="Final">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
            <implements name="Count" id="P:System.Collections.ICollection.Count" interface="ICollection" interfaceId="T:System.Collections.ICollection" declaringType="System.Collections.ICollection" />
          </property>
          <property name="HasItems" id="P:MControl.Collections.GenericQueue`1.HasItems" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
          </property>
          <property name="SyncRoot" id="P:MControl.Collections.GenericQueue`1.SyncRoot" access="Public" contract="Normal">
            <type name="Object" id="T:System.Object" />
            <get access="Public" />
          </property>
          <method name="Clear" id="M:MControl.Collections.GenericQueue`1.Clear" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="Contains" id="M:MControl.Collections.GenericQueue`1.Contains(`0)" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="item">
              <type name="T" />
            </parameter>
          </method>
          <method name="CopyTo" id="M:MControl.Collections.GenericQueue`1.CopyTo(`0[],System.Int32)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="array">
              <type name="T">
                <array rank="1" />
              </type>
            </parameter>
            <parameter name="arrayIndex">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="Dequeue" id="M:MControl.Collections.GenericQueue`1.Dequeue" access="Public" contract="Virtual">
            <type name="T" />
          </method>
          <method name="Enqueue" id="M:MControl.Collections.GenericQueue`1.Enqueue(`0)" access="Public" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="item">
              <type name="T" />
            </parameter>
          </method>
          <method name="GetEnumerator" id="M:MControl.Collections.GenericQueue`1.GetEnumerator" access="Public" contract="Normal">
            <type name="GenericQueue`1.Enumerator" id="T:MControl.Collections.GenericQueue`1.Enumerator" valueType="true">
              <typeparam name="T" attributes="None" />
            </type>
          </method>
          <method name="Peek" id="M:MControl.Collections.GenericQueue`1.Peek" access="Public" contract="Normal">
            <type name="T" />
          </method>
          <method name="SyncDequeue" id="M:MControl.Collections.GenericQueue`1.SyncDequeue" access="Public" contract="Virtual">
            <type name="T" />
          </method>
          <method name="ToArray" id="M:MControl.Collections.GenericQueue`1.ToArray" access="Public" contract="Normal">
            <type name="T">
              <array rank="1" />
            </type>
          </method>
          <method name="TrimExcess" id="M:MControl.Collections.GenericQueue`1.TrimExcess" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
        </class>
        <class name="KnownColorCollection" id="T:MControl.Collections.KnownColorCollection" access="Public" namespace="MControl.Collections" displayName="KnownColorCollection">
          <attribute name="DefaultMemberAttribute" id="T:System.Reflection.DefaultMemberAttribute">
            <argument id="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)" type="System.String" value="Item" />
          </attribute>
          <implements name="ColorCollection" id="T:MControl.Collections.ColorCollection" />
          <implements name="IEnumerable" id="T:System.Collections.IEnumerable" />
          <constructor name=".ctor" id="M:MControl.Collections.KnownColorCollection.#ctor(MControl.Collections.KnownColorFilter)" access="Public" contract="Normal">
            <parameter name="filter">
              <type name="KnownColorFilter" id="T:MControl.Collections.KnownColorFilter" valueType="true" />
            </parameter>
          </constructor>
          <field name="COUNT" id="F:MControl.Collections.KnownColorCollection.COUNT" access="Family" contract="Normal" initOnly="true">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="FIRST" id="F:MControl.Collections.KnownColorCollection.FIRST" access="Family" contract="Normal" initOnly="true">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="LAST" id="F:MControl.Collections.KnownColorCollection.LAST" access="Family" contract="Normal" initOnly="true">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <property name="Count" id="P:MControl.Collections.KnownColorCollection.Count" access="Public" contract="Final">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
            <implements name="Count" id="P:MControl.Collections.ColorCollection.Count" interface="ColorCollection" interfaceId="T:MControl.Collections.ColorCollection" declaringType="MControl.Collections.ColorCollection" />
          </property>
          <propertyOverload name="Item" id="Overload:MControl.Collections.KnownColorCollection.Item">
            <property name="Item" id="P:MControl.Collections.KnownColorCollection.Item(System.Int32)" access="Public" contract="Final">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              <get access="Public" />
              <implements name="Item" id="P:MControl.Collections.ColorCollection.Item(System.Int32)" interface="ColorCollection" interfaceId="T:MControl.Collections.ColorCollection" declaringType="MControl.Collections.ColorCollection" />
              <parameter name="iColor">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </property>
            <property name="Item" id="P:MControl.Collections.KnownColorCollection.Item(System.String)" access="Public" contract="Final">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              <get access="Public" />
              <implements name="Item" id="P:MControl.Collections.ColorCollection.Item(System.String)" interface="ColorCollection" interfaceId="T:MControl.Collections.ColorCollection" declaringType="MControl.Collections.ColorCollection" />
              <parameter name="szColor">
                <type name="String" id="T:System.String" />
              </parameter>
            </property>
          </propertyOverload>
          <method name="GetEnumerator" id="M:MControl.Collections.KnownColorCollection.GetEnumerator" access="Public" contract="Final">
            <type name="IEnumerator" id="T:System.Collections.IEnumerator" />
            <implements name="GetEnumerator" id="M:MControl.Collections.ColorCollection.GetEnumerator" interface="ColorCollection" interfaceId="T:MControl.Collections.ColorCollection" declaringType="MControl.Collections.ColorCollection" />
            <implements name="GetEnumerator" id="M:System.Collections.IEnumerable.GetEnumerator" interface="IEnumerable" interfaceId="T:System.Collections.IEnumerable" declaringType="System.Collections.IEnumerable" />
          </method>
          <method name="IndexOf" id="M:MControl.Collections.KnownColorCollection.IndexOf(System.String)" access="Public" contract="Final">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <implements name="IndexOf" id="M:MControl.Collections.ColorCollection.IndexOf(System.String)" interface="ColorCollection" interfaceId="T:MControl.Collections.ColorCollection" declaringType="MControl.Collections.ColorCollection" />
            <parameter name="ColorName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="LookupList" id="T:MControl.Collections.LookupList" access="Public" namespace="MControl.Collections" displayName="LookupList">
          <attribute name="DefaultMemberAttribute" id="T:System.Reflection.DefaultMemberAttribute">
            <argument id="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)" type="System.String" value="Item" />
          </attribute>
          <constructor name=".ctor" id="M:MControl.Collections.LookupList.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Collections.LookupList" /> class.</autoText></summary></documentation>
          </constructor>
          <property name="AddCompleted" id="P:MControl.Collections.LookupList.AddCompleted" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
          </property>
          <property name="AlowDuplicate" id="P:MControl.Collections.LookupList.AlowDuplicate" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="Count" id="P:MControl.Collections.LookupList.Count" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
          <property name="Item" id="P:MControl.Collections.LookupList.Item(System.Int32)" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </property>
          <property name="SelectedIndex" id="P:MControl.Collections.LookupList.SelectedIndex" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="Sorted" id="P:MControl.Collections.LookupList.Sorted" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <method name="Add" id="M:MControl.Collections.LookupList.Add(System.String)" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="s">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="AddNoDuplicate" id="M:MControl.Collections.LookupList.AddNoDuplicate(System.String)" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="s">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="AddRange" id="Overload:MControl.Collections.LookupList.AddRange">
            <method name="AddRange" id="M:MControl.Collections.LookupList.AddRange(MControl.Collections.LookupList)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="sl">
                <type name="LookupList" id="T:MControl.Collections.LookupList" />
              </parameter>
            </method>
            <method name="AddRange" id="M:MControl.Collections.LookupList.AddRange(System.Data.DataView,System.String,System.Boolean)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="dataSource">
                <type name="DataView" id="T:System.Data.DataView" />
              </parameter>
              <parameter name="displayMember">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="async">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="AsyncSort" id="M:MControl.Collections.LookupList.AsyncSort" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="Clear" id="M:MControl.Collections.LookupList.Clear" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="Finalize" id="M:MControl.Collections.LookupList.Finalize" access="Family" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <methodOverload name="Find" id="Overload:MControl.Collections.LookupList.Find">
            <method name="Find" id="M:MControl.Collections.LookupList.Find(System.String)" access="Public" contract="Normal">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="Find" id="M:MControl.Collections.LookupList.Find(System.String,System.Int32)" access="Public" contract="Normal">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="start">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="FindAll" id="M:MControl.Collections.LookupList.FindAll(System.String,MControl.Collections.ComparePredicate)" access="Public" contract="Normal">
            <type name="List`1" id="T:System.Collections.Generic.List`1">
              <typeparam name="String" id="T:System.String" />
            </type>
            <parameter name="text">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="predicate">
              <type name="ComparePredicate" id="T:MControl.Collections.ComparePredicate" valueType="true" />
            </parameter>
          </method>
          <method name="FindFirst" id="M:MControl.Collections.LookupList.FindFirst(System.String,MControl.Collections.ComparePredicate)" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <parameter name="text">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="predicate">
              <type name="ComparePredicate" id="T:MControl.Collections.ComparePredicate" valueType="true" />
            </parameter>
          </method>
          <method name="FindIndex" id="M:MControl.Collections.LookupList.FindIndex(System.Int32,System.String,MControl.Collections.ComparePredicate)" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="startIndex">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="text">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="predicate">
              <type name="ComparePredicate" id="T:MControl.Collections.ComparePredicate" valueType="true" />
            </parameter>
          </method>
          <method name="FindLast" id="M:MControl.Collections.LookupList.FindLast(System.String,MControl.Collections.ComparePredicate)" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <parameter name="text">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="predicate">
              <type name="ComparePredicate" id="T:MControl.Collections.ComparePredicate" valueType="true" />
            </parameter>
          </method>
          <method name="FindLastIndex" id="M:MControl.Collections.LookupList.FindLastIndex(System.Int32,System.String,MControl.Collections.ComparePredicate)" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="startIndex">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="text">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="predicate">
              <type name="ComparePredicate" id="T:MControl.Collections.ComparePredicate" valueType="true" />
            </parameter>
          </method>
          <method name="FindNext" id="M:MControl.Collections.LookupList.FindNext(System.String)" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="text">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="IndexOf" id="M:MControl.Collections.LookupList.IndexOf(System.String)" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="text">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="Insert" id="M:MControl.Collections.LookupList.Insert(System.Int32,System.String)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="s">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="Remove" id="M:MControl.Collections.LookupList.Remove(System.String)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="s">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="RemoveAt" id="M:MControl.Collections.LookupList.RemoveAt(System.Int32)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="Replace" id="M:MControl.Collections.LookupList.Replace(System.String,System.String)" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="sFind">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="sReplace">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="Sort" id="M:MControl.Collections.LookupList.Sort" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <methodOverload name="ToString" id="Overload:MControl.Collections.LookupList.ToString">
            <method name="ToString" id="M:MControl.Collections.LookupList.ToString" access="Public" contract="Override">
              <type name="String" id="T:System.String" />
            </method>
            <method name="ToString" id="M:MControl.Collections.LookupList.ToString(System.String)" access="Public" contract="Normal">
              <type name="String" id="T:System.String" />
              <parameter name="sSeperator">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <operatorOverload name="op_Implicit" id="Overload:MControl.Collections.LookupList.op_Implicit" contract="Static">
            <operator name="op_Implicit" id="M:MControl.Collections.LookupList.op_Implicit(MControl.Collections.LookupList)~System.String" access="Public" contract="Static">
              <type name="String" id="T:System.String">
                <array rank="1" />
              </type>
              <parameter name="sl">
                <type name="LookupList" id="T:MControl.Collections.LookupList" />
              </parameter>
            </operator>
            <operator name="op_Implicit" id="M:MControl.Collections.LookupList.op_Implicit(System.String[])~MControl.Collections.LookupList" access="Public" contract="Static">
              <type name="LookupList" id="T:MControl.Collections.LookupList" />
              <parameter name="sa">
                <type name="String" id="T:System.String">
                  <array rank="1" />
                </type>
              </parameter>
            </operator>
            <operator name="op_Implicit" id="M:MControl.Collections.LookupList.op_Implicit(System.Object[])~MControl.Collections.LookupList" access="Public" contract="Static">
              <type name="LookupList" id="T:MControl.Collections.LookupList" />
              <parameter name="sa">
                <type name="Object" id="T:System.Object">
                  <array rank="1" />
                </type>
              </parameter>
            </operator>
          </operatorOverload>
        </class>
        <class name="LookupThreadSort" id="T:MControl.Collections.LookupThreadSort" access="Public" namespace="MControl.Collections" displayName="LookupThreadSort">
          <constructor name=".ctor" id="M:MControl.Collections.LookupThreadSort.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Collections.LookupThreadSort" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="Start" id="M:MControl.Collections.LookupThreadSort.Start(System.Data.DataView,System.String)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="dv">
              <type name="DataView" id="T:System.Data.DataView" />
            </parameter>
            <parameter name="col">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="SortSyncronized" id="T:MControl.Collections.SortSyncronized" access="Public" namespace="MControl.Collections" displayName="SortSyncronized">
          <attribute name="SynchronizationAttribute" id="T:System.Runtime.Remoting.Contexts.SynchronizationAttribute" />
          <base name="ContextBoundObject" id="T:System.ContextBoundObject" displayName="System.ContextBoundObject">
            <base name="MarshalByRefObject" id="T:System.MarshalByRefObject" displayName="System.MarshalByRefObject" />
          </base>
          <constructor name=".ctor" id="M:MControl.Collections.SortSyncronized.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Collections.SortSyncronized" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="Sort" id="M:MControl.Collections.SortSyncronized.Sort(System.Data.DataView,System.String)" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <parameter name="dv">
              <type name="DataView" id="T:System.Data.DataView" />
            </parameter>
            <parameter name="colView">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="StringCollection" id="T:MControl.Collections.StringCollection" access="Public" namespace="MControl.Collections" displayName="StringCollection">
          <attribute name="DefaultMemberAttribute" id="T:System.Reflection.DefaultMemberAttribute">
            <argument id="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)" type="System.String" value="Item" />
          </attribute>
          <base name="CollectionWithEvents" id="T:MControl.Collections.CollectionWithEvents" displayName="MControl.Collections.CollectionWithEvents">
            <base name="CollectionBase" id="T:System.Collections.CollectionBase" displayName="System.Collections.CollectionBase" />
          </base>
          <implements name="IList" id="T:System.Collections.IList" inherited="true" />
          <implements name="ICollection" id="T:System.Collections.ICollection" inherited="true" />
          <implements name="IEnumerable" id="T:System.Collections.IEnumerable" inherited="true" />
          <implements name="ICloneable" id="T:System.ICloneable" />
          <constructor name=".ctor" id="M:MControl.Collections.StringCollection.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Collections.StringCollection" /> class.</autoText></summary></documentation>
          </constructor>
          <propertyOverload name="Item" id="Overload:MControl.Collections.StringCollection.Item">
            <property name="Item" id="P:MControl.Collections.StringCollection.Item(System.Int32)" access="Public" contract="Normal">
              <type name="String" id="T:System.String" />
              <get access="Public" />
              <set access="Public" />
              <parameter name="index">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </property>
            <property name="Item" id="P:MControl.Collections.StringCollection.Item(System.String)" access="Public" contract="Normal">
              <type name="String" id="T:System.String" />
              <get access="Public" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </property>
          </propertyOverload>
          <method name="Add" id="M:MControl.Collections.StringCollection.Add(System.String)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="str">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="AddRange" id="Overload:MControl.Collections.StringCollection.AddRange">
            <method name="AddRange" id="M:MControl.Collections.StringCollection.AddRange(System.String[])" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="values">
                <type name="String" id="T:System.String">
                  <array rank="1" />
                </type>
              </parameter>
            </method>
            <method name="AddRange" id="M:MControl.Collections.StringCollection.AddRange(MControl.Collections.StringCollection)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="values">
                <type name="StringCollection" id="T:MControl.Collections.StringCollection" />
              </parameter>
            </method>
          </methodOverload>
          <method name="Clone" id="M:MControl.Collections.StringCollection.Clone" access="Public" contract="Final">
            <type name="Object" id="T:System.Object" />
            <implements name="Clone" id="M:System.ICloneable.Clone" interface="ICloneable" interfaceId="T:System.ICloneable" declaringType="System.ICloneable" />
          </method>
          <methodOverload name="Contains" id="Overload:MControl.Collections.StringCollection.Contains">
            <method name="Contains" id="M:MControl.Collections.StringCollection.Contains(System.String)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="str">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="Contains" id="M:MControl.Collections.StringCollection.Contains(MControl.Collections.StringCollection)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="values">
                <type name="StringCollection" id="T:MControl.Collections.StringCollection" />
              </parameter>
            </method>
          </methodOverload>
          <method name="CopyTo" id="M:MControl.Collections.StringCollection.CopyTo(MControl.Collections.StringCollection,System.Int32)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="array">
              <type name="StringCollection" id="T:MControl.Collections.StringCollection" />
            </parameter>
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="IndexOf" id="Overload:MControl.Collections.StringCollection.IndexOf">
            <method name="IndexOf" id="M:MControl.Collections.StringCollection.IndexOf(System.String)" access="Public" contract="Normal">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="str">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="IndexOf" id="M:MControl.Collections.CollectionWithEvents.IndexOf(System.Object)" access="Family" contract="Normal" declaringType="T:MControl.Collections.CollectionWithEvents">
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
          </methodOverload>
          <method name="Insert" id="M:MControl.Collections.StringCollection.Insert(System.Int32,System.String)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="value">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="LoadFromXml" id="M:MControl.Collections.StringCollection.LoadFromXml(System.String,System.Xml.XmlTextReader)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="xmlIn">
              <type name="XmlTextReader" id="T:System.Xml.XmlTextReader" />
            </parameter>
          </method>
          <method name="OnClear" id="M:MControl.Collections.CollectionWithEvents.OnClear" access="Family" contract="Override" declaringType="T:MControl.Collections.CollectionWithEvents" />
          <method name="OnClearComplete" id="M:MControl.Collections.CollectionWithEvents.OnClearComplete" access="Family" contract="Override" declaringType="T:MControl.Collections.CollectionWithEvents" />
          <method name="OnInsert" id="M:MControl.Collections.CollectionWithEvents.OnInsert(System.Int32,System.Object)" access="Family" contract="Override" declaringType="T:MControl.Collections.CollectionWithEvents">
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="OnInsertComplete" id="M:MControl.Collections.CollectionWithEvents.OnInsertComplete(System.Int32,System.Object)" access="Family" contract="Override" declaringType="T:MControl.Collections.CollectionWithEvents">
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="OnRemove" id="M:MControl.Collections.CollectionWithEvents.OnRemove(System.Int32,System.Object)" access="Family" contract="Override" declaringType="T:MControl.Collections.CollectionWithEvents">
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="OnRemoveComplete" id="M:MControl.Collections.CollectionWithEvents.OnRemoveComplete(System.Int32,System.Object)" access="Family" contract="Override" declaringType="T:MControl.Collections.CollectionWithEvents">
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="Remove" id="M:MControl.Collections.StringCollection.Remove(System.String)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="str">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="SaveToXml" id="M:MControl.Collections.StringCollection.SaveToXml(System.String,System.Xml.XmlTextWriter)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="xmlOut">
              <type name="XmlTextWriter" id="T:System.Xml.XmlTextWriter" />
            </parameter>
          </method>
          <event name="Cleared" id="E:MControl.Collections.StringCollection.Cleared" access="Public" contract="Normal" multicast="true" declaringType="T:MControl.Collections.CollectionWithEvents">
            <type name="CollectionClear" id="T:MControl.Collections.CollectionClear" />
          </event>
          <event name="Clearing" id="E:MControl.Collections.StringCollection.Clearing" access="Public" contract="Normal" multicast="true" declaringType="T:MControl.Collections.CollectionWithEvents">
            <type name="CollectionClear" id="T:MControl.Collections.CollectionClear" />
          </event>
          <event name="Inserted" id="E:MControl.Collections.StringCollection.Inserted" access="Public" contract="Normal" multicast="true" declaringType="T:MControl.Collections.CollectionWithEvents">
            <type name="CollectionChange" id="T:MControl.Collections.CollectionChange" />
          </event>
          <event name="Inserting" id="E:MControl.Collections.StringCollection.Inserting" access="Public" contract="Normal" multicast="true" declaringType="T:MControl.Collections.CollectionWithEvents">
            <type name="CollectionChange" id="T:MControl.Collections.CollectionChange" />
          </event>
          <event name="Removed" id="E:MControl.Collections.StringCollection.Removed" access="Public" contract="Normal" multicast="true" declaringType="T:MControl.Collections.CollectionWithEvents">
            <type name="CollectionChange" id="T:MControl.Collections.CollectionChange" />
          </event>
          <event name="Removing" id="E:MControl.Collections.StringCollection.Removing" access="Public" contract="Normal" multicast="true" declaringType="T:MControl.Collections.CollectionWithEvents">
            <type name="CollectionChange" id="T:MControl.Collections.CollectionChange" />
          </event>
        </class>
        <structure name="GenericQueue`1.Enumerator" id="T:MControl.Collections.GenericQueue`1.Enumerator" access="NestedPublic" namespace="MControl.Collections" displayName="GenericQueue&lt;T&gt;.Enumerator" declaringType="GenericQueue`1">
          <typeparam name="T" attributes="None" />
          <attribute name="SerializableAttribute" id="T:System.SerializableAttribute" />
          <implements name="IEnumerator`1" id="T:System.Collections.Generic.IEnumerator`1">
            <typeparam name="T" attributes="None" />
          </implements>
          <implements name="IDisposable" id="T:System.IDisposable" />
          <implements name="IEnumerator" id="T:System.Collections.IEnumerator" />
          <property name="Current" id="P:MControl.Collections.GenericQueue`1.Enumerator.Current" access="Public" contract="Final">
            <type name="T" />
            <get access="Public" />
            <implements name="Current" id="P:System.Collections.Generic.IEnumerator`1.Current" interface="IEnumerator&lt;T&gt;" interfaceId="T:System.Collections.Generic.IEnumerator`1" declaringType="System.Collections.Generic.IEnumerator`1" />
          </property>
          <method name="Dispose" id="M:MControl.Collections.GenericQueue`1.Enumerator.Dispose" access="Public" contract="Final">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="Dispose" id="M:System.IDisposable.Dispose" interface="IDisposable" interfaceId="T:System.IDisposable" declaringType="System.IDisposable" />
          </method>
          <method name="MoveNext" id="M:MControl.Collections.GenericQueue`1.Enumerator.MoveNext" access="Public" contract="Final">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <implements name="MoveNext" id="M:System.Collections.IEnumerator.MoveNext" interface="IEnumerator" interfaceId="T:System.Collections.IEnumerator" declaringType="System.Collections.IEnumerator" />
          </method>
        </structure>
        <interface name="ColorCollection" id="T:MControl.Collections.ColorCollection" access="Public" namespace="MControl.Collections" displayName="ColorCollection">
          <attribute name="DefaultMemberAttribute" id="T:System.Reflection.DefaultMemberAttribute">
            <argument id="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)" type="System.String" value="Item" />
          </attribute>
          <implements name="IEnumerable" id="T:System.Collections.IEnumerable" />
          <implementedBy id="T:MControl.Collections.CustomColorCollection" displayName="MControl.Collections.CustomColorCollection" />
          <implementedBy id="T:MControl.Collections.KnownColorCollection" displayName="MControl.Collections.KnownColorCollection" />
          <property name="Count" id="P:MControl.Collections.ColorCollection.Count" access="Public" contract="Abstract">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
          <propertyOverload name="Item" id="Overload:MControl.Collections.ColorCollection.Item">
            <property name="Item" id="P:MControl.Collections.ColorCollection.Item(System.Int32)" access="Public" contract="Abstract">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              <get access="Public" />
              <parameter name="i">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </property>
            <property name="Item" id="P:MControl.Collections.ColorCollection.Item(System.String)" access="Public" contract="Abstract">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              <get access="Public" />
              <parameter name="s">
                <type name="String" id="T:System.String" />
              </parameter>
            </property>
          </propertyOverload>
          <method name="GetEnumerator" id="M:MControl.Collections.ColorCollection.GetEnumerator" access="Public" contract="Abstract">
            <type name="IEnumerator" id="T:System.Collections.IEnumerator" />
          </method>
          <method name="IndexOf" id="M:MControl.Collections.ColorCollection.IndexOf(System.String)" access="Public" contract="Abstract">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="ColorName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </interface>
        <enumeration name="ComparePredicate" id="T:MControl.Collections.ComparePredicate" displayName="ComparePredicate" namespace="MControl.Collections" access="Public">
          <field name="Exact" id="F:MControl.Collections.ComparePredicate.Exact" value="0" />
          <field name="Start" id="F:MControl.Collections.ComparePredicate.Start" value="1" />
          <field name="Last" id="F:MControl.Collections.ComparePredicate.Last" value="2" />
          <field name="In" id="F:MControl.Collections.ComparePredicate.In" value="3" />
        </enumeration>
        <enumeration name="KnownColorFilter" id="T:MControl.Collections.KnownColorFilter" displayName="KnownColorFilter" namespace="MControl.Collections" access="Public">
          <field name="System" id="F:MControl.Collections.KnownColorFilter.System" value="0" />
          <field name="Web" id="F:MControl.Collections.KnownColorFilter.Web" value="1" />
          <field name="All" id="F:MControl.Collections.KnownColorFilter.All" value="2" />
        </enumeration>
        <delegate name="CollectionChange" displayName="CollectionChange" namespace="MControl.Collections" id="T:MControl.Collections.CollectionChange" access="Public">
          <type name="Void" id="T:System.Void" valueType="true" />
          <parameter name="index">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </parameter>
          <parameter name="value">
            <type name="Object" id="T:System.Object" />
          </parameter>
        </delegate>
        <delegate name="CollectionClear" displayName="CollectionClear" namespace="MControl.Collections" id="T:MControl.Collections.CollectionClear" access="Public">
          <type name="Void" id="T:System.Void" valueType="true" />
        </delegate>
        <delegate name="SortSyncDelegate" displayName="SortSyncDelegate" namespace="MControl.Collections" id="T:MControl.Collections.SortSyncDelegate" access="Public">
          <type name="String" id="T:System.String" />
          <parameter name="dv">
            <type name="DataView" id="T:System.Data.DataView" />
          </parameter>
          <parameter name="colView">
            <type name="String" id="T:System.String" />
          </parameter>
        </delegate>
      </namespace>
      <namespace name="MControl.Data" id="N:MControl.Data">
        <class name="DataResx" id="T:MControl.Data.DataResx" access="Public" namespace="MControl.Data" displayName="DataResx" sealed="true">
          <property name="Resources" id="P:MControl.Data.DataResx.Resources" access="Public" contract="Static">
            <type name="ResourceManager" id="T:System.Resources.ResourceManager" />
            <get access="Public" />
          </property>
          <method name="GetObject" id="M:MControl.Data.DataResx.GetObject(System.String)" access="Public" contract="Static">
            <type name="Object" id="T:System.Object" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="GetString" id="Overload:MControl.Data.DataResx.GetString" contract="Static">
            <method name="GetString" id="M:MControl.Data.DataResx.GetString(System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetString" id="M:MControl.Data.DataResx.GetString(System.String,System.Object[])" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="args" isParamArray="true">
                <type name="Object" id="T:System.Object">
                  <array rank="1" />
                </type>
                <attribute name="ParamArrayAttribute" id="T:System.ParamArrayAttribute" />
              </parameter>
            </method>
          </methodOverload>
        </class>
        <class name="DataSourceConvertor" id="T:MControl.Data.DataSourceConvertor" access="Public" namespace="MControl.Data" displayName="DataSourceConvertor">
          <constructor name=".ctor" id="M:MControl.Data.DataSourceConvertor.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Data.DataSourceConvertor" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="GetDataTable" id="M:MControl.Data.DataSourceConvertor.GetDataTable(System.Object,System.String)" access="Public" contract="Static">
            <type name="DataTable" id="T:System.Data.DataTable" />
            <parameter name="dataSource">
              <type name="Object" id="T:System.Object" />
            </parameter>
            <parameter name="dataMember">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="GetDataView" id="M:MControl.Data.DataSourceConvertor.GetDataView(System.Object,System.String)" access="Public" contract="Static">
            <type name="DataView" id="T:System.Data.DataView" />
            <parameter name="dataSource">
              <type name="Object" id="T:System.Object" />
            </parameter>
            <parameter name="dataMember">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="ExcelUtil" id="T:MControl.Data.ExcelUtil" access="Public" namespace="MControl.Data" displayName="ExcelUtil">
          <constructor name=".ctor" id="M:MControl.Data.ExcelUtil.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Data.ExcelUtil" /> class.</autoText></summary></documentation>
          </constructor>
          <methodOverload name="CopyCSVToClipBoard" id="Overload:MControl.Data.ExcelUtil.CopyCSVToClipBoard">
            <method name="CopyCSVToClipBoard" id="M:MControl.Data.ExcelUtil.CopyCSVToClipBoard(System.String)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="csv">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="CopyCSVToClipBoard" id="M:MControl.Data.ExcelUtil.CopyCSVToClipBoard(System.String,System.Text.Encoding)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="csv">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="encode">
                <type name="Encoding" id="T:System.Text.Encoding" />
              </parameter>
            </method>
          </methodOverload>
          <method name="GetCSVFromClipBoard" id="M:MControl.Data.ExcelUtil.GetCSVFromClipBoard" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </method>
          <method name="GetDataClipboard" id="M:MControl.Data.ExcelUtil.GetDataClipboard" access="Public" contract="Static">
            <type name="DataTable" id="T:System.Data.DataTable" />
          </method>
          <method name="GetIsCommaSeparatedValueClipboard" id="M:MControl.Data.ExcelUtil.GetIsCommaSeparatedValueClipboard" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
          </method>
          <method name="ImportData" id="M:MControl.Data.ExcelUtil.ImportData(System.String,System.String)" access="Public" contract="Static">
            <type name="DataSet" id="T:System.Data.DataSet" />
            <parameter name="excelFile">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="sheetName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="Export" id="T:MControl.Data.Export" access="Public" namespace="MControl.Data" displayName="Export">
          <constructorOverload name=".ctor" id="Overload:MControl.Data.Export.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Data.Export" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Data.Export.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Data.Export" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Data.Export.#ctor(MControl.Data.AppType)" access="Public" contract="Normal">
              <parameter name="ApplicationType">
                <type name="AppType" id="T:MControl.Data.AppType" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
          <property name="Silent" id="P:MControl.Data.Export.Silent" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <method name="CreateMailMessage" id="M:MControl.Data.Export.CreateMailMessage(System.String,System.String,System.String,System.String)" access="Public" contract="Static">
            <type name="MailMessage" id="T:System.Net.Mail.MailMessage" />
            <parameter name="FromAddress">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="ToAddress">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="Subject">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="body">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="ExportData" id="Overload:MControl.Data.Export.ExportData">
            <method name="ExportData" id="M:MControl.Data.Export.ExportData(System.Object,System.String,MControl.Data.ExportFormat,System.String)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="dataSource">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="dataMember">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="FormatType">
                <type name="ExportFormat" id="T:MControl.Data.ExportFormat" valueType="true" />
              </parameter>
              <parameter name="FileName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ExportData" id="M:MControl.Data.Export.ExportData(System.Object,System.String,System.Int32[],MControl.Data.ExportFormat,System.String)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="dataSource">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="dataMember">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="ColumnList">
                <type name="Int32" id="T:System.Int32" valueType="true">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="FormatType">
                <type name="ExportFormat" id="T:MControl.Data.ExportFormat" valueType="true" />
              </parameter>
              <parameter name="FileName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ExportData" id="M:MControl.Data.Export.ExportData(System.Object,System.String,System.Int32[],System.String[],MControl.Data.ExportFormat,System.String)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="dataSource">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="dataMember">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="ColumnList">
                <type name="Int32" id="T:System.Int32" valueType="true">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="Headers">
                <type name="String" id="T:System.String">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="FormatType">
                <type name="ExportFormat" id="T:MControl.Data.ExportFormat" valueType="true" />
              </parameter>
              <parameter name="FileName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ExportData" id="M:MControl.Data.Export.ExportData(System.Data.DataTable,MControl.Data.ExportFormat,System.String)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="dataSource">
                <type name="DataTable" id="T:System.Data.DataTable" />
              </parameter>
              <parameter name="FormatType">
                <type name="ExportFormat" id="T:MControl.Data.ExportFormat" valueType="true" />
              </parameter>
              <parameter name="FileName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ExportData" id="M:MControl.Data.Export.ExportData(System.Data.DataTable,System.Int32[],MControl.Data.ExportFormat,System.String)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="dataSource">
                <type name="DataTable" id="T:System.Data.DataTable" />
              </parameter>
              <parameter name="ColumnList">
                <type name="Int32" id="T:System.Int32" valueType="true">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="FormatType">
                <type name="ExportFormat" id="T:MControl.Data.ExportFormat" valueType="true" />
              </parameter>
              <parameter name="FileName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ExportData" id="M:MControl.Data.Export.ExportData(System.Data.DataTable,MControl.Data.ExportColumnType[],MControl.Data.ExportFormat,System.String)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="dataSource">
                <type name="DataTable" id="T:System.Data.DataTable" />
              </parameter>
              <parameter name="columnTypes">
                <type name="ExportColumnType" id="T:MControl.Data.ExportColumnType" valueType="true">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="FormatType">
                <type name="ExportFormat" id="T:MControl.Data.ExportFormat" valueType="true" />
              </parameter>
              <parameter name="FileName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ExportData" id="M:MControl.Data.Export.ExportData(System.Data.DataTable,System.Int32[],System.String[],MControl.Data.ExportFormat,System.String)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="dataSource">
                <type name="DataTable" id="T:System.Data.DataTable" />
              </parameter>
              <parameter name="ColumnList">
                <type name="Int32" id="T:System.Int32" valueType="true">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="Headers">
                <type name="String" id="T:System.String">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="FormatType">
                <type name="ExportFormat" id="T:MControl.Data.ExportFormat" valueType="true" />
              </parameter>
              <parameter name="FileName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="ExportHtml" id="Overload:MControl.Data.Export.ExportHtml" contract="Static">
            <method name="ExportHtml" id="M:MControl.Data.Export.ExportHtml(System.String,System.Data.DataTable)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="fileName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="dataSource">
                <type name="DataTable" id="T:System.Data.DataTable" />
              </parameter>
            </method>
            <method name="ExportHtml" id="M:MControl.Data.Export.ExportHtml(System.String,System.Data.DataSet)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="fileName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="ds">
                <type name="DataSet" id="T:System.Data.DataSet" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="ExportXml" id="Overload:MControl.Data.Export.ExportXml" contract="Static">
            <method name="ExportXml" id="M:MControl.Data.Export.ExportXml(System.String,System.Data.DataSet)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="fileName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="ds">
                <type name="DataSet" id="T:System.Data.DataSet" />
              </parameter>
            </method>
            <method name="ExportXml" id="M:MControl.Data.Export.ExportXml(System.String,System.Data.DataTable)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="fileName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="dt">
                <type name="DataTable" id="T:System.Data.DataTable" />
              </parameter>
            </method>
          </methodOverload>
          <method name="ExportXml" id="M:MControl.Data.Export.ExportXml(System.String,System.Object,System.String)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="fileName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="dataSource">
              <type name="Object" id="T:System.Object" />
            </parameter>
            <parameter name="dataMember">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="GetExportFileName" id="M:MControl.Data.Export.GetExportFileName(System.String)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="filter">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="GetFileExportName" id="M:MControl.Data.Export.GetFileExportName" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
          </method>
          <methodOverload name="ImportXml" id="Overload:MControl.Data.Export.ImportXml" contract="Static">
            <method name="ImportXml" id="M:MControl.Data.Export.ImportXml" access="Public" contract="Static">
              <type name="DataSet" id="T:System.Data.DataSet" />
            </method>
            <method name="ImportXml" id="M:MControl.Data.Export.ImportXml(System.String,System.Data.XmlReadMode)" access="Public" contract="Static">
              <type name="DataSet" id="T:System.Data.DataSet" />
              <parameter name="FileName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="mode">
                <type name="XmlReadMode" id="T:System.Data.XmlReadMode" valueType="true" />
              </parameter>
            </method>
            <method name="ImportXml" id="M:MControl.Data.Export.ImportXml(System.String)" access="Public" contract="Static">
              <type name="DataSet" id="T:System.Data.DataSet" />
              <parameter name="fileName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="SendEMail" id="Overload:MControl.Data.Export.SendEMail" contract="Static">
            <method name="SendEMail" id="M:MControl.Data.Export.SendEMail(System.String,System.String,System.Data.DataTable)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="FromAddress">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="ToAddress">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="dataSource">
                <type name="DataTable" id="T:System.Data.DataTable" />
              </parameter>
            </method>
            <method name="SendEMail" id="M:MControl.Data.Export.SendEMail(System.String,System.String,System.Data.DataSet)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="FromAddress">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="ToAddress">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="ds">
                <type name="DataSet" id="T:System.Data.DataSet" />
              </parameter>
            </method>
            <method name="SendEMail" id="M:MControl.Data.Export.SendEMail(System.String,System.String,System.String,System.String,System.Data.DataSet)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="FromAddress">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="ToAddress">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="Subject">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="body">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="ds">
                <type name="DataSet" id="T:System.Data.DataSet" />
              </parameter>
            </method>
            <method name="SendEMail" id="M:MControl.Data.Export.SendEMail(System.String,System.String,System.String,System.String,System.Data.DataTable,MControl.Data.ExportFormat)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="FromAddress">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="ToAddress">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="Subject">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="body">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="dt">
                <type name="DataTable" id="T:System.Data.DataTable" />
              </parameter>
              <parameter name="FormatType">
                <type name="ExportFormat" id="T:MControl.Data.ExportFormat" valueType="true" />
              </parameter>
            </method>
            <method name="SendEMail" id="M:MControl.Data.Export.SendEMail(System.Net.Mail.MailMessage,System.Data.DataTable,MControl.Data.ExportFormat)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="mail">
                <type name="MailMessage" id="T:System.Net.Mail.MailMessage" />
              </parameter>
              <parameter name="dt">
                <type name="DataTable" id="T:System.Data.DataTable" />
              </parameter>
              <parameter name="FormatType">
                <type name="ExportFormat" id="T:MControl.Data.ExportFormat" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="WinExport" id="Overload:MControl.Data.Export.WinExport" contract="Static">
            <method name="WinExport" id="M:MControl.Data.Export.WinExport(System.Data.DataTable)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="dataSource">
                <type name="DataTable" id="T:System.Data.DataTable" />
              </parameter>
            </method>
            <method name="WinExport" id="M:MControl.Data.Export.WinExport(System.Data.DataTable,MControl.Data.ExportColumnType[])" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="dataSource">
                <type name="DataTable" id="T:System.Data.DataTable" />
              </parameter>
              <parameter name="columnTypes">
                <type name="ExportColumnType" id="T:MControl.Data.ExportColumnType" valueType="true">
                  <array rank="1" />
                </type>
              </parameter>
            </method>
          </methodOverload>
        </class>
        <class name="McColumn" id="T:MControl.Data.McColumn" access="Public" namespace="MControl.Data" displayName="McColumn">
          <attribute name="ToolboxItemAttribute" id="T:System.ComponentModel.ToolboxItemAttribute">
            <argument id="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)" type="System.Boolean" value="False" />
          </attribute>
          <attribute name="DesignTimeVisibleAttribute" id="T:System.ComponentModel.DesignTimeVisibleAttribute">
            <argument id="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)" type="System.Boolean" value="False" />
          </attribute>
          <base name="Component" id="T:System.ComponentModel.Component" displayName="System.ComponentModel.Component">
            <base name="MarshalByRefObject" id="T:System.MarshalByRefObject" displayName="System.MarshalByRefObject" />
          </base>
          <implements name="IComponent" id="T:System.ComponentModel.IComponent" inherited="true" />
          <implements name="IDisposable" id="T:System.IDisposable" inherited="true" />
          <implements name="IColumn" id="T:MControl.Data.IColumn" />
          <constructorOverload name=".ctor" id="Overload:MControl.Data.McColumn.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Data.McColumn" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Data.McColumn.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Data.McColumn" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Data.McColumn.#ctor(System.String)" access="Public" contract="Normal">
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Data.McColumn.#ctor(System.String,System.Int32)" access="Public" contract="Normal">
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="width">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Data.McColumn.#ctor(System.String,System.String,System.Int32)" access="Public" contract="Normal">
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="caption">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="width">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Data.McColumn.#ctor(System.String,System.String,System.Int32,MControl.DataTypes)" access="Public" contract="Normal">
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="caption">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="width">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="dataType">
                <type name="DataTypes" id="T:MControl.DataTypes" valueType="true" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Data.McColumn.#ctor(System.String,System.Boolean)" access="Public" contract="Normal">
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="display">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
          <field name="DefaultWidth" id="F:MControl.Data.McColumn.DefaultWidth" access="Public" contract="Static" literal="true" value="80">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <property name="Alignment" id="P:MControl.Data.McColumn.Alignment" access="Public" contract="Final">
            <type name="HorizontalAlignment" id="T:System.Windows.Forms.HorizontalAlignment" valueType="true" />
            <get access="Public" />
            <set access="Public" />
            <implements name="Alignment" id="P:MControl.Data.IColumn.Alignment" interface="IColumn" interfaceId="T:MControl.Data.IColumn" declaringType="MControl.Data.IColumn" />
            <attribute name="DefaultValueAttribute" id="T:System.ComponentModel.DefaultValueAttribute">
              <argument id="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)" type="System.Windows.Forms.HorizontalAlignment" value="HorizontalAlignment.Left" />
            </attribute>
          </property>
          <property name="Caption" id="P:MControl.Data.McColumn.Caption" access="Public" contract="Final">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
            <implements name="Caption" id="P:MControl.Data.IColumn.Caption" interface="IColumn" interfaceId="T:MControl.Data.IColumn" declaringType="MControl.Data.IColumn" />
          </property>
          <property name="ColumnName" id="P:MControl.Data.McColumn.ColumnName" access="Public" contract="Final">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
            <implements name="ColumnName" id="P:MControl.Data.IColumn.ColumnName" interface="IColumn" interfaceId="T:MControl.Data.IColumn" declaringType="MControl.Data.IColumn" />
          </property>
          <property name="ColumnOrdinal" id="P:MControl.Data.McColumn.ColumnOrdinal" access="Public" contract="Final">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
            <set access="Public" />
            <implements name="ColumnOrdinal" id="P:MControl.Data.IColumn.ColumnOrdinal" interface="IColumn" interfaceId="T:MControl.Data.IColumn" declaringType="MControl.Data.IColumn" />
            <attribute name="DesignerSerializationVisibilityAttribute" id="T:System.ComponentModel.DesignerSerializationVisibilityAttribute">
              <argument id="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.#ctor(System.ComponentModel.DesignerSerializationVisibility)" type="System.ComponentModel.DesignerSerializationVisibility" value="DesignerSerializationVisibility.Hidden" />
            </attribute>
            <attribute name="BrowsableAttribute" id="T:System.ComponentModel.BrowsableAttribute">
              <argument id="M:System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="EditorBrowsableAttribute" id="T:System.ComponentModel.EditorBrowsableAttribute">
              <argument id="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)" type="System.ComponentModel.EditorBrowsableState" value="EditorBrowsableState.Advanced" />
            </attribute>
          </property>
          <property name="DataType" id="P:MControl.Data.McColumn.DataType" access="Public" contract="Final">
            <type name="DataTypes" id="T:MControl.DataTypes" valueType="true" />
            <get access="Public" />
            <set access="Public" />
            <implements name="DataType" id="P:MControl.Data.IColumn.DataType" interface="IColumn" interfaceId="T:MControl.Data.IColumn" declaringType="MControl.Data.IColumn" />
            <attribute name="DefaultValueAttribute" id="T:System.ComponentModel.DefaultValueAttribute">
              <argument id="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)" type="MControl.DataTypes" value="DataTypes.Text" />
            </attribute>
          </property>
          <property name="Display" id="P:MControl.Data.McColumn.Display" access="Public" contract="Final">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
            <set access="Public" />
            <implements name="Display" id="P:MControl.Data.IColumn.Display" interface="IColumn" interfaceId="T:MControl.Data.IColumn" declaringType="MControl.Data.IColumn" />
            <attribute name="DefaultValueAttribute" id="T:System.ComponentModel.DefaultValueAttribute">
              <argument id="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)" type="System.Boolean" value="True" />
            </attribute>
          </property>
          <property name="SortOrder" id="P:MControl.Data.McColumn.SortOrder" access="Public" contract="Final">
            <type name="SortOrder" id="T:System.Windows.Forms.SortOrder" valueType="true" />
            <get access="Public" />
            <set access="Public" />
            <implements name="SortOrder" id="P:MControl.Data.IColumn.SortOrder" interface="IColumn" interfaceId="T:MControl.Data.IColumn" declaringType="MControl.Data.IColumn" />
            <attribute name="DefaultValueAttribute" id="T:System.ComponentModel.DefaultValueAttribute">
              <argument id="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)" type="System.Windows.Forms.SortOrder" value="SortOrder.None" />
            </attribute>
          </property>
          <property name="Width" id="P:MControl.Data.McColumn.Width" access="Public" contract="Final">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
            <set access="Public" />
            <implements name="Width" id="P:MControl.Data.IColumn.Width" interface="IColumn" interfaceId="T:MControl.Data.IColumn" declaringType="MControl.Data.IColumn" />
            <attribute name="DefaultValueAttribute" id="T:System.ComponentModel.DefaultValueAttribute">
              <argument id="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)" type="System.Int32" value="80" />
            </attribute>
          </property>
          <method name="OnColumnDisplayChanged" id="M:MControl.Data.McColumn.OnColumnDisplayChanged(MControl.Data.McColumnEventArgs)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="McColumnEventArgs" id="T:MControl.Data.McColumnEventArgs" />
            </parameter>
          </method>
          <method name="ToggelSortOrder" id="M:MControl.Data.McColumn.ToggelSortOrder" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <event name="ColumnDisplayChanged" id="E:MControl.Data.McColumn.ColumnDisplayChanged" access="Public" contract="Normal" multicast="true">
            <type name="ColumnDisplayChangedHandler" id="T:MControl.Data.ColumnDisplayChangedHandler" />
            <eventArgs name="McColumnEventArgs" id="T:MControl.Data.McColumnEventArgs" />
          </event>
        </class>
        <class name="McColumnCollection" id="T:MControl.Data.McColumnCollection" access="Public" namespace="MControl.Data" displayName="McColumnCollection">
          <attribute name="DefaultMemberAttribute" id="T:System.Reflection.DefaultMemberAttribute">
            <argument id="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)" type="System.String" value="Item" />
          </attribute>
          <base name="CollectionBase" id="T:System.Collections.CollectionBase" displayName="System.Collections.CollectionBase" />
          <implements name="IList" id="T:System.Collections.IList" inherited="true" />
          <implements name="ICollection" id="T:System.Collections.ICollection" inherited="true" />
          <implements name="IEnumerable" id="T:System.Collections.IEnumerable" inherited="true" />
          <constructorOverload name=".ctor" id="Overload:MControl.Data.McColumnCollection.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Data.McColumnCollection" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Data.McColumnCollection.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Data.McColumnCollection" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Data.McColumnCollection.#ctor(System.Windows.Forms.Control)" access="Public" contract="Normal">
              <parameter name="parent">
                <type name="Control" id="T:System.Windows.Forms.Control" />
              </parameter>
            </constructor>
          </constructorOverload>
          <property name="Count" id="P:MControl.Data.McColumnCollection.Count" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
          <propertyOverload name="Item" id="Overload:MControl.Data.McColumnCollection.Item">
            <property name="Item" id="P:MControl.Data.McColumnCollection.Item(System.Int32)" access="Public" contract="Normal">
              <type name="McColumn" id="T:MControl.Data.McColumn" />
              <get access="Public" />
              <parameter name="index">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </property>
            <property name="Item" id="P:MControl.Data.McColumnCollection.Item(System.String)" access="Public" contract="Normal">
              <type name="McColumn" id="T:MControl.Data.McColumn" />
              <get access="Public" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </property>
          </propertyOverload>
          <method name="Add" id="M:MControl.Data.McColumnCollection.Add(MControl.Data.McColumn)" access="Public" contract="Normal">
            <type name="McColumn" id="T:MControl.Data.McColumn" />
            <parameter name="column">
              <type name="McColumn" id="T:MControl.Data.McColumn" />
            </parameter>
          </method>
          <method name="AddNoDuplicate" id="M:MControl.Data.McColumnCollection.AddNoDuplicate(MControl.Data.McColumn)" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="column">
              <type name="McColumn" id="T:MControl.Data.McColumn" />
            </parameter>
          </method>
          <methodOverload name="AddRange" id="Overload:MControl.Data.McColumnCollection.AddRange">
            <method name="AddRange" id="M:MControl.Data.McColumnCollection.AddRange(MControl.Data.McColumn[])" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="cols">
                <type name="McColumn" id="T:MControl.Data.McColumn">
                  <array rank="1" />
                </type>
              </parameter>
            </method>
            <method name="AddRange" id="M:MControl.Data.McColumnCollection.AddRange(System.String[])" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="cols">
                <type name="String" id="T:System.String">
                  <array rank="1" />
                </type>
              </parameter>
            </method>
          </methodOverload>
          <method name="Clear" id="M:MControl.Data.McColumnCollection.Clear" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="Contains" id="M:MControl.Data.McColumnCollection.Contains(MControl.Data.McColumn)" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="column">
              <type name="McColumn" id="T:MControl.Data.McColumn" />
            </parameter>
          </method>
          <method name="GetColumnsArray" id="M:MControl.Data.McColumnCollection.GetColumnsArray" access="Public" contract="Normal">
            <type name="McColumn" id="T:MControl.Data.McColumn">
              <array rank="1" />
            </type>
          </method>
          <method name="GetExportColumns" id="M:MControl.Data.McColumnCollection.GetExportColumns" access="Public" contract="Normal">
            <type name="ExportColumnType" id="T:MControl.Data.ExportColumnType" valueType="true">
              <array rank="1" />
            </type>
          </method>
          <method name="GetVisibleColumns" id="M:MControl.Data.McColumnCollection.GetVisibleColumns" access="Public" contract="Normal">
            <type name="McColumn" id="T:MControl.Data.McColumn">
              <array rank="1" />
            </type>
          </method>
          <method name="IndexOf" id="M:MControl.Data.McColumnCollection.IndexOf(MControl.Data.McColumn)" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="value">
              <type name="McColumn" id="T:MControl.Data.McColumn" />
            </parameter>
          </method>
          <method name="Insert" id="M:MControl.Data.McColumnCollection.Insert(MControl.Data.McColumn,System.Int32)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="column">
              <type name="McColumn" id="T:MControl.Data.McColumn" />
            </parameter>
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="ItemAdded" id="M:MControl.Data.McColumnCollection.ItemAdded(System.Object,MControl.Data.McColumnCollectionEventArgs)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="sender">
              <type name="Object" id="T:System.Object" />
            </parameter>
            <parameter name="e">
              <type name="McColumnCollectionEventArgs" id="T:MControl.Data.McColumnCollectionEventArgs" />
            </parameter>
          </method>
          <method name="OnCollectionChanged" id="M:MControl.Data.McColumnCollection.OnCollectionChanged(System.EventArgs)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="EventArgs" id="T:System.EventArgs" />
            </parameter>
          </method>
          <method name="OnInsert" id="M:MControl.Data.McColumnCollection.OnInsert(System.Int32,System.Object)" access="Family" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="OnInsertComplete" id="M:MControl.Data.McColumnCollection.OnInsertComplete(System.Int32,System.Object)" access="Family" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="Remove" id="M:MControl.Data.McColumnCollection.Remove(MControl.Data.McColumn)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="column">
              <type name="McColumn" id="T:MControl.Data.McColumn" />
            </parameter>
          </method>
          <method name="RemoveAt" id="M:MControl.Data.McColumnCollection.RemoveAt(System.Int32)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <event name="AddColumnEvent" id="E:MControl.Data.McColumnCollection.AddColumnEvent" access="Public" contract="Normal" multicast="true">
            <type name="AddMcColumnHandler" id="T:MControl.Data.AddMcColumnHandler" />
            <eventArgs name="McColumnCollectionEventArgs" id="T:MControl.Data.McColumnCollectionEventArgs" />
          </event>
          <event name="CollectionChanged" id="E:MControl.Data.McColumnCollection.CollectionChanged" access="Public" contract="Normal" multicast="true">
            <type name="EventHandler" id="T:System.EventHandler" />
          </event>
          <event name="RemoveColumnEvent" id="E:MControl.Data.McColumnCollection.RemoveColumnEvent" access="Public" contract="Normal" multicast="true">
            <type name="RemoveMcColumnHandler" id="T:MControl.Data.RemoveMcColumnHandler" />
            <eventArgs name="McColumnCollectionEventArgs" id="T:MControl.Data.McColumnCollectionEventArgs" />
          </event>
        </class>
        <class name="McColumnCollectionEventArgs" id="T:MControl.Data.McColumnCollectionEventArgs" access="Public" namespace="MControl.Data" displayName="McColumnCollectionEventArgs">
          <base name="EventArgs" id="T:System.EventArgs" displayName="System.EventArgs" />
          <constructor name=".ctor" id="M:MControl.Data.McColumnCollectionEventArgs.#ctor(System.Int32,MControl.Data.McColumn)" access="Public" contract="Normal">
            <parameter name="count">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="col">
              <type name="McColumn" id="T:MControl.Data.McColumn" />
            </parameter>
          </constructor>
          <field name="Count" id="F:MControl.Data.McColumnCollectionEventArgs.Count" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="column" id="F:MControl.Data.McColumnCollectionEventArgs.column" access="Public" contract="Normal">
            <type name="McColumn" id="T:MControl.Data.McColumn" />
          </field>
        </class>
        <class name="McColumnEventArgs" id="T:MControl.Data.McColumnEventArgs" access="Public" namespace="MControl.Data" displayName="McColumnEventArgs">
          <base name="EventArgs" id="T:System.EventArgs" displayName="System.EventArgs" />
          <constructor name=".ctor" id="M:MControl.Data.McColumnEventArgs.#ctor(MControl.Data.McColumn)" access="Public" contract="Normal">
            <parameter name="col">
              <type name="McColumn" id="T:MControl.Data.McColumn" />
            </parameter>
          </constructor>
          <field name="Column" id="F:MControl.Data.McColumnEventArgs.Column" access="Public" contract="Normal">
            <type name="McColumn" id="T:MControl.Data.McColumn" />
          </field>
        </class>
        <structure name="ExportColumnType" id="T:MControl.Data.ExportColumnType" access="Public" namespace="MControl.Data" displayName="ExportColumnType">
          <field name="Caption" id="F:MControl.Data.ExportColumnType.Caption" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </field>
          <field name="ColumnOrdinal" id="F:MControl.Data.ExportColumnType.ColumnOrdinal" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <interface name="IColumn" id="T:MControl.Data.IColumn" access="Public" namespace="MControl.Data" displayName="IColumn">
          <implementedBy id="T:MControl.Data.McColumn" displayName="MControl.Data.McColumn" />
          <property name="Alignment" id="P:MControl.Data.IColumn.Alignment" access="Public" contract="Abstract">
            <type name="HorizontalAlignment" id="T:System.Windows.Forms.HorizontalAlignment" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="Caption" id="P:MControl.Data.IColumn.Caption" access="Public" contract="Abstract">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ColumnName" id="P:MControl.Data.IColumn.ColumnName" access="Public" contract="Abstract">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ColumnOrdinal" id="P:MControl.Data.IColumn.ColumnOrdinal" access="Public" contract="Abstract">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="DataType" id="P:MControl.Data.IColumn.DataType" access="Public" contract="Abstract">
            <type name="DataTypes" id="T:MControl.DataTypes" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="Display" id="P:MControl.Data.IColumn.Display" access="Public" contract="Abstract">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="SortOrder" id="P:MControl.Data.IColumn.SortOrder" access="Public" contract="Abstract">
            <type name="SortOrder" id="T:System.Windows.Forms.SortOrder" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="Width" id="P:MControl.Data.IColumn.Width" access="Public" contract="Abstract">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
        </interface>
        <enumeration name="AppType" id="T:MControl.Data.AppType" displayName="AppType" namespace="MControl.Data" access="Public">
          <field name="Win" id="F:MControl.Data.AppType.Win" value="0" />
          <field name="Web" id="F:MControl.Data.AppType.Web" value="1" />
        </enumeration>
        <enumeration name="ExportFormat" id="T:MControl.Data.ExportFormat" displayName="ExportFormat" namespace="MControl.Data" access="Public">
          <field name="CSV" id="F:MControl.Data.ExportFormat.CSV" value="0" />
          <field name="Excel" id="F:MControl.Data.ExportFormat.Excel" value="1" />
          <field name="Xml" id="F:MControl.Data.ExportFormat.Xml" value="2" />
          <field name="Html" id="F:MControl.Data.ExportFormat.Html" value="3" />
        </enumeration>
        <delegate name="AddMcColumnHandler" displayName="AddMcColumnHandler" namespace="MControl.Data" id="T:MControl.Data.AddMcColumnHandler" access="Public">
          <type name="Void" id="T:System.Void" valueType="true" />
          <parameter name="sender">
            <type name="Object" id="T:System.Object" />
          </parameter>
          <parameter name="e">
            <type name="McColumnCollectionEventArgs" id="T:MControl.Data.McColumnCollectionEventArgs" />
          </parameter>
        </delegate>
        <delegate name="ColumnDisplayChangedHandler" displayName="ColumnDisplayChangedHandler" namespace="MControl.Data" id="T:MControl.Data.ColumnDisplayChangedHandler" access="Public">
          <type name="Void" id="T:System.Void" valueType="true" />
          <parameter name="sender">
            <type name="Object" id="T:System.Object" />
          </parameter>
          <parameter name="e">
            <type name="McColumnEventArgs" id="T:MControl.Data.McColumnEventArgs" />
          </parameter>
        </delegate>
        <delegate name="RemoveMcColumnHandler" displayName="RemoveMcColumnHandler" namespace="MControl.Data" id="T:MControl.Data.RemoveMcColumnHandler" access="Public">
          <type name="Void" id="T:System.Void" valueType="true" />
          <parameter name="sender">
            <type name="Object" id="T:System.Object" />
          </parameter>
          <parameter name="e">
            <type name="McColumnCollectionEventArgs" id="T:MControl.Data.McColumnCollectionEventArgs" />
          </parameter>
        </delegate>
      </namespace>
      <namespace name="MControl.Drawing" id="N:MControl.Drawing">
        <class name="ColorUtils" id="T:MControl.Drawing.ColorUtils" access="Public" namespace="MControl.Drawing" displayName="ColorUtils">
          <field name="KnownColorNames" id="F:MControl.Drawing.ColorUtils.KnownColorNames" access="Public" contract="Static">
            <type name="String" id="T:System.String">
              <array rank="1" />
            </type>
          </field>
          <field name="SystemColorNames" id="F:MControl.Drawing.ColorUtils.SystemColorNames" access="Public" contract="Static">
            <type name="String" id="T:System.String">
              <array rank="1" />
            </type>
          </field>
          <property name="UsingCustomColor" id="P:MControl.Drawing.ColorUtils.UsingCustomColor" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
          </property>
          <property name="VSNetBackgroundColor" id="P:MControl.Drawing.ColorUtils.VSNetBackgroundColor" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="VSNetBorderColor" id="P:MControl.Drawing.ColorUtils.VSNetBorderColor" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="VSNetCheckedColor" id="P:MControl.Drawing.ColorUtils.VSNetCheckedColor" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="VSNetControlColor" id="P:MControl.Drawing.ColorUtils.VSNetControlColor" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="VSNetPressedColor" id="P:MControl.Drawing.ColorUtils.VSNetPressedColor" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="VSNetSelectionColor" id="P:MControl.Drawing.ColorUtils.VSNetSelectionColor" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <method name="ColorFromPoint" id="M:MControl.Drawing.ColorUtils.ColorFromPoint(System.Drawing.Graphics,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <parameter name="g">
              <type name="Graphics" id="T:System.Drawing.Graphics" />
            </parameter>
            <parameter name="x">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="y">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="ColorFromRGBString" id="M:MControl.Drawing.ColorUtils.ColorFromRGBString(System.String)" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <parameter name="text">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="GetBValue" id="M:MControl.Drawing.ColorUtils.GetBValue(System.UInt32)" access="Public" contract="Static">
            <type name="Byte" id="T:System.Byte" valueType="true" />
            <parameter name="color">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
          </method>
          <method name="GetCOLORREF" id="M:MControl.Drawing.ColorUtils.GetCOLORREF(System.Drawing.Color)" access="Public" contract="Static">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
            <parameter name="color">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
          </method>
          <method name="GetGValue" id="M:MControl.Drawing.ColorUtils.GetGValue(System.UInt32)" access="Public" contract="Static">
            <type name="Byte" id="T:System.Byte" valueType="true" />
            <parameter name="color">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
          </method>
          <method name="GetRValue" id="M:MControl.Drawing.ColorUtils.GetRValue(System.UInt32)" access="Public" contract="Static">
            <type name="Byte" id="T:System.Byte" valueType="true" />
            <parameter name="color">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
          </method>
          <method name="HSLToRGB" id="M:MControl.Drawing.ColorUtils.HSLToRGB(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="h">
              <type name="Single" id="T:System.Single" valueType="true" />
            </parameter>
            <parameter name="s">
              <type name="Single" id="T:System.Single" valueType="true" />
            </parameter>
            <parameter name="l">
              <type name="Single" id="T:System.Single" valueType="true" />
            </parameter>
            <parameter name="r" direction="ref">
              <type name="Single" id="T:System.Single" valueType="true" />
            </parameter>
            <parameter name="g" direction="ref">
              <type name="Single" id="T:System.Single" valueType="true" />
            </parameter>
            <parameter name="b" direction="ref">
              <type name="Single" id="T:System.Single" valueType="true" />
            </parameter>
          </method>
          <method name="IsKnownColor" id="M:MControl.Drawing.ColorUtils.IsKnownColor(System.Drawing.Color,System.Drawing.Color@,System.Boolean)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="color">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
            <parameter name="knownColor" direction="ref">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
            <parameter name="useTransparent">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="IsSystemColor" id="M:MControl.Drawing.ColorUtils.IsSystemColor(System.Drawing.Color,System.Drawing.Color@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="color">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
            <parameter name="knownColor" direction="ref">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
          </method>
          <method name="RGB" id="M:MControl.Drawing.ColorUtils.RGB(System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
            <parameter name="r">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="g">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="b">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="RGBToHSL" id="M:MControl.Drawing.ColorUtils.RGBToHSL(System.Int32,System.Int32,System.Int32,System.Single@,System.Single@,System.Single@)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="r">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="g">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="b">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="h" direction="ref">
              <type name="Single" id="T:System.Single" valueType="true" />
            </parameter>
            <parameter name="s" direction="ref">
              <type name="Single" id="T:System.Single" valueType="true" />
            </parameter>
            <parameter name="l" direction="ref">
              <type name="Single" id="T:System.Single" valueType="true" />
            </parameter>
          </method>
        </class>
        <class name="DrawUtils" id="T:MControl.Drawing.DrawUtils" access="Public" namespace="MControl.Drawing" displayName="DrawUtils">
          <field name="_halfToneBrush" id="F:MControl.Drawing.DrawUtils._halfToneBrush" access="Family" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <method name="ApplyContentAlignmentToStringFormat" id="M:MControl.Drawing.DrawUtils.ApplyContentAlignmentToStringFormat(System.Drawing.ContentAlignment,System.Drawing.StringFormat)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="pAlignment">
              <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            </parameter>
            <parameter name="stringFormat">
              <type name="StringFormat" id="T:System.Drawing.StringFormat" />
            </parameter>
          </method>
          <method name="BytesToImage" id="M:MControl.Drawing.DrawUtils.BytesToImage(System.Byte[])" access="Public" contract="Static">
            <type name="Image" id="T:System.Drawing.Image" />
            <parameter name="bytes">
              <type name="Byte" id="T:System.Byte" valueType="true">
                <array rank="1" />
              </type>
            </parameter>
          </method>
          <method name="CalculateColorGradient" id="M:MControl.Drawing.DrawUtils.CalculateColorGradient(System.Drawing.Color,System.Drawing.Color,System.Int32)" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true">
              <array rank="1" />
            </type>
            <parameter name="p_StartColor">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
            <parameter name="p_EndColor">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
            <parameter name="p_NumberOfGradients">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="CalculateContentLocation" id="M:MControl.Drawing.DrawUtils.CalculateContentLocation(System.Drawing.ContentAlignment,System.Drawing.Rectangle,System.Drawing.Size)" access="Public" contract="Static">
            <type name="Point" id="T:System.Drawing.Point" valueType="true" />
            <parameter name="align">
              <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            </parameter>
            <parameter name="clientRect">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="objectSize">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
          </method>
          <method name="CalculateContentRectangle" id="M:MControl.Drawing.DrawUtils.CalculateContentRectangle(System.Drawing.ContentAlignment,System.Drawing.Rectangle,System.Drawing.Size)" access="Public" contract="Static">
            <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            <parameter name="align">
              <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            </parameter>
            <parameter name="clientRect">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="objectSize">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
          </method>
          <method name="CalculateTextRectangleWithContent" id="M:MControl.Drawing.DrawUtils.CalculateTextRectangleWithContent(System.Drawing.Rectangle,System.String,System.Drawing.StringFormat,System.Drawing.Rectangle,System.Drawing.ContentAlignment)" access="Public" contract="Static">
            <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            <parameter name="pClientRectangle">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="pText">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="pStringFormat">
              <type name="StringFormat" id="T:System.Drawing.StringFormat" />
            </parameter>
            <parameter name="pOtherContentRect">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="pOtherContentAlignment">
              <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            </parameter>
          </method>
          <method name="CreateDisabledImage" id="M:MControl.Drawing.DrawUtils.CreateDisabledImage(System.Drawing.Image,System.Drawing.Color)" access="Public" contract="Static">
            <type name="Image" id="T:System.Drawing.Image" />
            <parameter name="image">
              <type name="Image" id="T:System.Drawing.Image" />
            </parameter>
            <parameter name="background">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
          </method>
          <method name="CreateRectangleRegion" id="M:MControl.Drawing.DrawUtils.CreateRectangleRegion(System.Drawing.Rectangle,System.Int32)" access="Family" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="rect">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="indent">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="Draw3DRect" id="Overload:MControl.Drawing.DrawUtils.Draw3DRect" contract="Static">
            <method name="Draw3DRect" id="M:MControl.Drawing.DrawUtils.Draw3DRect(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="g">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="rc">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="topLeft">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
              <parameter name="bottomRight">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
            </method>
            <method name="Draw3DRect" id="M:MControl.Drawing.DrawUtils.Draw3DRect(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="g">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="x">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="y">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="width">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="height">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="topLeft">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
              <parameter name="bottomRight">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="DrawArrowGlyph" id="Overload:MControl.Drawing.DrawUtils.DrawArrowGlyph" contract="Static">
            <method name="DrawArrowGlyph" id="M:MControl.Drawing.DrawUtils.DrawArrowGlyph(System.Drawing.Graphics,System.Drawing.Rectangle,MControl.Util.ArrowGlyph,System.Drawing.Brush)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="g">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="rc">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="arrowGlyph">
                <type name="ArrowGlyph" id="T:MControl.Util.ArrowGlyph" valueType="true" />
              </parameter>
              <parameter name="brush">
                <type name="Brush" id="T:System.Drawing.Brush" />
              </parameter>
            </method>
            <method name="DrawArrowGlyph" id="M:MControl.Drawing.DrawUtils.DrawArrowGlyph(System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32,System.Int32,MControl.Util.ArrowGlyph,System.Drawing.Brush)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="g">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="rc">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="arrowWidth">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="arrowHeight">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="arrowGlyph">
                <type name="ArrowGlyph" id="T:MControl.Util.ArrowGlyph" valueType="true" />
              </parameter>
              <parameter name="brush">
                <type name="Brush" id="T:System.Drawing.Brush" />
              </parameter>
            </method>
            <method name="DrawArrowGlyph" id="M:MControl.Drawing.DrawUtils.DrawArrowGlyph(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Drawing.Brush)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="g">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="rc">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="up">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="brush">
                <type name="Brush" id="T:System.Drawing.Brush" />
              </parameter>
            </method>
            <method name="DrawArrowGlyph" id="M:MControl.Drawing.DrawUtils.DrawArrowGlyph(System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32,System.Int32,System.Boolean,System.Drawing.Brush)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="g">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="rc">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="arrowWidth">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="arrowHeight">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="up">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="brush">
                <type name="Brush" id="T:System.Drawing.Brush" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="DrawBorder" id="Overload:MControl.Drawing.DrawUtils.DrawBorder" contract="Static">
            <method name="DrawBorder" id="M:MControl.Drawing.DrawUtils.DrawBorder(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Color,System.Drawing.Rectangle,System.Boolean)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="g">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="borderColor">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
              <parameter name="borderHotColor">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
              <parameter name="controlRect">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="hot">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
            <method name="DrawBorder" id="M:MControl.Drawing.DrawUtils.DrawBorder(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Rectangle,System.Boolean,System.Boolean)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="g">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="borderColor">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
              <parameter name="borderHotColor">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
              <parameter name="FocusedColor">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
              <parameter name="controlRect">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="hot">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="Focused">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="DrawButton" id="M:MControl.Drawing.DrawUtils.DrawButton(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Boolean)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="g">
              <type name="Graphics" id="T:System.Drawing.Graphics" />
            </parameter>
            <parameter name="buttonColor">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
            <parameter name="buttonHotColor">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
            <parameter name="ButtonClickColor">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
            <parameter name="borderColor">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
            <parameter name="borderHotColor">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
            <parameter name="buttonRect">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="border_hot">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="btn_hot">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="btn_pressed">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="DrawDragRectangle" id="M:MControl.Drawing.DrawUtils.DrawDragRectangle(System.Drawing.Rectangle,System.Int32)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="newRect">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="indent">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="DrawDragRectangles" id="M:MControl.Drawing.DrawUtils.DrawDragRectangles(System.Drawing.Rectangle[],System.Int32)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="newRects">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true">
                <array rank="1" />
              </type>
            </parameter>
            <parameter name="indent">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="DrawGradient3DBorder" id="M:MControl.Drawing.DrawUtils.DrawGradient3DBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32,MControl.Drawing.Gradient3DBorderStyle)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="g">
              <type name="Graphics" id="T:System.Drawing.Graphics" />
            </parameter>
            <parameter name="p_HeaderRectangle">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="p_BackColor">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
            <parameter name="p_DarkColor">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
            <parameter name="p_LightColor">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
            <parameter name="p_DarkGradientNumber">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="p_LightGradientNumber">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="p_Style">
              <type name="Gradient3DBorderStyle" id="T:MControl.Drawing.Gradient3DBorderStyle" valueType="true" />
            </parameter>
          </method>
          <method name="DrawIcon" id="M:MControl.Drawing.DrawUtils.DrawIcon(System.Drawing.Graphics,System.Drawing.Icon,System.Drawing.Rectangle,System.Boolean,System.Boolean)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="g">
              <type name="Graphics" id="T:System.Drawing.Graphics" />
            </parameter>
            <parameter name="icon">
              <type name="Icon" id="T:System.Drawing.Icon" />
            </parameter>
            <parameter name="drawRect">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="grayed">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="pushed">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="DrawImage" id="M:MControl.Drawing.DrawUtils.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Boolean,System.Boolean)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="g">
              <type name="Graphics" id="T:System.Drawing.Graphics" />
            </parameter>
            <parameter name="image">
              <type name="Image" id="T:System.Drawing.Image" />
            </parameter>
            <parameter name="drawRect">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="grayed">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="pushed">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="DrawPlainRaised" id="M:MControl.Drawing.DrawUtils.DrawPlainRaised(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="g">
              <type name="Graphics" id="T:System.Drawing.Graphics" />
            </parameter>
            <parameter name="boxRect">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="baseColor">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
          </method>
          <method name="DrawPlainSunken" id="M:MControl.Drawing.DrawUtils.DrawPlainSunken(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="g">
              <type name="Graphics" id="T:System.Drawing.Graphics" />
            </parameter>
            <parameter name="boxRect">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="baseColor">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
          </method>
          <method name="DrawRectangleWithExternBound" id="M:MControl.Drawing.DrawUtils.DrawRectangleWithExternBound(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Rectangle)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="g">
              <type name="Graphics" id="T:System.Drawing.Graphics" />
            </parameter>
            <parameter name="p">
              <type name="Pen" id="T:System.Drawing.Pen" />
            </parameter>
            <parameter name="r">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
          </method>
          <method name="DrawReverseString" id="M:MControl.Drawing.DrawUtils.DrawReverseString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Rectangle,System.Drawing.Brush,System.Drawing.StringFormat)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="g">
              <type name="Graphics" id="T:System.Drawing.Graphics" />
            </parameter>
            <parameter name="drawText">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="drawFont">
              <type name="Font" id="T:System.Drawing.Font" />
            </parameter>
            <parameter name="drawRect">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="drawBrush">
              <type name="Brush" id="T:System.Drawing.Brush" />
            </parameter>
            <parameter name="drawFormat">
              <type name="StringFormat" id="T:System.Drawing.StringFormat" />
            </parameter>
          </method>
          <method name="DrawRoundedRectangle" id="M:MControl.Drawing.DrawUtils.DrawRoundedRectangle(System.Drawing.Graphics,MControl.Drawing.RoundedRectangle,System.Drawing.Pen)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="g">
              <type name="Graphics" id="T:System.Drawing.Graphics" />
            </parameter>
            <parameter name="roundRect">
              <type name="RoundedRectangle" id="T:MControl.Drawing.RoundedRectangle" valueType="true" />
            </parameter>
            <parameter name="pen">
              <type name="Pen" id="T:System.Drawing.Pen" />
            </parameter>
          </method>
          <method name="DrawString" id="M:MControl.Drawing.DrawUtils.DrawString(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.StringFormat,System.Drawing.Color,System.Drawing.Font)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="g">
              <type name="Graphics" id="T:System.Drawing.Graphics" />
            </parameter>
            <parameter name="pDestination">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="pText">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="pStringFormat">
              <type name="StringFormat" id="T:System.Drawing.StringFormat" />
            </parameter>
            <parameter name="pTextColor">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
            <parameter name="pTextFont">
              <type name="Font" id="T:System.Drawing.Font" />
            </parameter>
          </method>
          <method name="DrawTextAndImage" id="M:MControl.Drawing.DrawUtils.DrawTextAndImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image,System.Drawing.ContentAlignment,System.Boolean,System.Boolean,System.String,System.Drawing.StringFormat,System.Boolean,System.Drawing.Color,System.Drawing.Font,System.Boolean)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="g">
              <type name="Graphics" id="T:System.Drawing.Graphics" />
            </parameter>
            <parameter name="pDisplayRectangle">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="pImage">
              <type name="Image" id="T:System.Drawing.Image" />
            </parameter>
            <parameter name="pImageAlignment">
              <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            </parameter>
            <parameter name="pImageStretch">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="pImageDisabled">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="pText">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="pStringFormat">
              <type name="StringFormat" id="T:System.Drawing.StringFormat" />
            </parameter>
            <parameter name="pAlignTextToImage">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="pTextColor">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
            <parameter name="pTextFont">
              <type name="Font" id="T:System.Drawing.Font" />
            </parameter>
            <parameter name="pTextDisabled">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="ExtractImage" id="M:MControl.Drawing.DrawUtils.ExtractImage(System.String)" access="Public" contract="Static">
            <type name="Image" id="T:System.Drawing.Image" />
            <parameter name="p_Image">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="FillRoundedRectangle" id="M:MControl.Drawing.DrawUtils.FillRoundedRectangle(System.Drawing.Graphics,MControl.Drawing.RoundedRectangle,System.Drawing.Brush)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="g">
              <type name="Graphics" id="T:System.Drawing.Graphics" />
            </parameter>
            <parameter name="roundRect">
              <type name="RoundedRectangle" id="T:MControl.Drawing.RoundedRectangle" valueType="true" />
            </parameter>
            <parameter name="brush">
              <type name="Brush" id="T:System.Drawing.Brush" />
            </parameter>
          </method>
          <method name="GetHalfToneBrush" id="M:MControl.Drawing.DrawUtils.GetHalfToneBrush" access="Family" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </method>
          <method name="GetRoundedRect" id="M:MControl.Drawing.DrawUtils.GetRoundedRect(System.Drawing.RectangleF,System.Single)" access="Public" contract="Static">
            <type name="GraphicsPath" id="T:System.Drawing.Drawing2D.GraphicsPath" />
            <parameter name="baseRect">
              <type name="RectangleF" id="T:System.Drawing.RectangleF" valueType="true" />
            </parameter>
            <parameter name="radius">
              <type name="Single" id="T:System.Single" valueType="true" />
            </parameter>
          </method>
          <method name="GetStrechedBitmap" id="M:MControl.Drawing.DrawUtils.GetStrechedBitmap(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Bitmap)" access="Public" contract="Static">
            <type name="Bitmap" id="T:System.Drawing.Bitmap" />
            <parameter name="gDest">
              <type name="Graphics" id="T:System.Drawing.Graphics" />
            </parameter>
            <parameter name="rcDest">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="bitmap">
              <type name="Bitmap" id="T:System.Drawing.Bitmap" />
            </parameter>
          </method>
          <method name="GetTileBitmap" id="M:MControl.Drawing.DrawUtils.GetTileBitmap(System.Drawing.Rectangle,System.Drawing.Bitmap)" access="Public" contract="Static">
            <type name="Bitmap" id="T:System.Drawing.Bitmap" />
            <parameter name="rcDest">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="bitmap">
              <type name="Bitmap" id="T:System.Drawing.Bitmap" />
            </parameter>
          </method>
          <method name="GettRoundedBottomRect" id="M:MControl.Drawing.DrawUtils.GettRoundedBottomRect(System.Drawing.RectangleF,System.Single)" access="Public" contract="Static">
            <type name="GraphicsPath" id="T:System.Drawing.Drawing2D.GraphicsPath" />
            <parameter name="baseRect">
              <type name="RectangleF" id="T:System.Drawing.RectangleF" valueType="true" />
            </parameter>
            <parameter name="radius">
              <type name="Single" id="T:System.Single" valueType="true" />
            </parameter>
          </method>
          <method name="GettRoundedTopRect" id="M:MControl.Drawing.DrawUtils.GettRoundedTopRect(System.Drawing.RectangleF,System.Single)" access="Public" contract="Static">
            <type name="GraphicsPath" id="T:System.Drawing.Drawing2D.GraphicsPath" />
            <parameter name="baseRect">
              <type name="RectangleF" id="T:System.Drawing.RectangleF" valueType="true" />
            </parameter>
            <parameter name="radius">
              <type name="Single" id="T:System.Single" valueType="true" />
            </parameter>
          </method>
          <method name="ImageToBytes" id="M:MControl.Drawing.DrawUtils.ImageToBytes(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)" access="Public" contract="Static">
            <type name="Byte" id="T:System.Byte" valueType="true">
              <array rank="1" />
            </type>
            <parameter name="img">
              <type name="Image" id="T:System.Drawing.Image" />
            </parameter>
            <parameter name="imgFormat">
              <type name="ImageFormat" id="T:System.Drawing.Imaging.ImageFormat" />
            </parameter>
          </method>
          <methodOverload name="IsBottom" id="Overload:MControl.Drawing.DrawUtils.IsBottom" contract="Static">
            <method name="IsBottom" id="M:MControl.Drawing.DrawUtils.IsBottom(System.Drawing.ContentAlignment)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="a">
                <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
              </parameter>
            </method>
            <method name="IsBottom" id="M:MControl.Drawing.DrawUtils.IsBottom(System.Drawing.StringFormat)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="a">
                <type name="StringFormat" id="T:System.Drawing.StringFormat" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="IsCenter" id="Overload:MControl.Drawing.DrawUtils.IsCenter" contract="Static">
            <method name="IsCenter" id="M:MControl.Drawing.DrawUtils.IsCenter(System.Drawing.ContentAlignment)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="a">
                <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
              </parameter>
            </method>
            <method name="IsCenter" id="M:MControl.Drawing.DrawUtils.IsCenter(System.Drawing.StringFormat)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="a">
                <type name="StringFormat" id="T:System.Drawing.StringFormat" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="IsLeft" id="Overload:MControl.Drawing.DrawUtils.IsLeft" contract="Static">
            <method name="IsLeft" id="M:MControl.Drawing.DrawUtils.IsLeft(System.Drawing.ContentAlignment)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="a">
                <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
              </parameter>
            </method>
            <method name="IsLeft" id="M:MControl.Drawing.DrawUtils.IsLeft(System.Drawing.StringFormat)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="a">
                <type name="StringFormat" id="T:System.Drawing.StringFormat" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="IsMiddle" id="Overload:MControl.Drawing.DrawUtils.IsMiddle" contract="Static">
            <method name="IsMiddle" id="M:MControl.Drawing.DrawUtils.IsMiddle(System.Drawing.ContentAlignment)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="a">
                <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
              </parameter>
            </method>
            <method name="IsMiddle" id="M:MControl.Drawing.DrawUtils.IsMiddle(System.Drawing.StringFormat)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="a">
                <type name="StringFormat" id="T:System.Drawing.StringFormat" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="IsRight" id="Overload:MControl.Drawing.DrawUtils.IsRight" contract="Static">
            <method name="IsRight" id="M:MControl.Drawing.DrawUtils.IsRight(System.Drawing.ContentAlignment)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="a">
                <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
              </parameter>
            </method>
            <method name="IsRight" id="M:MControl.Drawing.DrawUtils.IsRight(System.Drawing.StringFormat)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="a">
                <type name="StringFormat" id="T:System.Drawing.StringFormat" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="IsTop" id="Overload:MControl.Drawing.DrawUtils.IsTop" contract="Static">
            <method name="IsTop" id="M:MControl.Drawing.DrawUtils.IsTop(System.Drawing.ContentAlignment)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="a">
                <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
              </parameter>
            </method>
            <method name="IsTop" id="M:MControl.Drawing.DrawUtils.IsTop(System.Drawing.StringFormat)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="a">
                <type name="StringFormat" id="T:System.Drawing.StringFormat" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="LoadBitmap" id="Overload:MControl.Drawing.DrawUtils.LoadBitmap" contract="Static">
            <method name="LoadBitmap" id="M:MControl.Drawing.DrawUtils.LoadBitmap(System.Type,System.String)" access="Public" contract="Static">
              <type name="Bitmap" id="T:System.Drawing.Bitmap" />
              <parameter name="assemblyType">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="imageName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="LoadBitmap" id="M:MControl.Drawing.DrawUtils.LoadBitmap(System.Type,System.String,System.Drawing.Point)" access="Public" contract="Static">
              <type name="Bitmap" id="T:System.Drawing.Bitmap" />
              <parameter name="assemblyType">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="imageName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="transparentPixel">
                <type name="Point" id="T:System.Drawing.Point" valueType="true" />
              </parameter>
            </method>
            <method name="LoadBitmap" id="M:MControl.Drawing.DrawUtils.LoadBitmap(System.Type,System.String,System.Boolean,System.Drawing.Point)" access="Family" contract="Static">
              <type name="Bitmap" id="T:System.Drawing.Bitmap" />
              <parameter name="assemblyType">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="imageName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="makeTransparent">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="transparentPixel">
                <type name="Point" id="T:System.Drawing.Point" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="LoadBitmapResource" id="M:MControl.Drawing.DrawUtils.LoadBitmapResource(System.Type,System.String,System.String)" access="Public" contract="Static">
            <type name="Bitmap" id="T:System.Drawing.Bitmap" />
            <parameter name="assemblyType">
              <type name="Type" id="T:System.Type" />
            </parameter>
            <parameter name="resourceHolder">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="imageName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="LoadBitmapStream" id="Overload:MControl.Drawing.DrawUtils.LoadBitmapStream" contract="Static">
            <method name="LoadBitmapStream" id="M:MControl.Drawing.DrawUtils.LoadBitmapStream(System.Type,System.String)" access="Public" contract="Static">
              <type name="Bitmap" id="T:System.Drawing.Bitmap" />
              <parameter name="assemblyType">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="imageName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="LoadBitmapStream" id="M:MControl.Drawing.DrawUtils.LoadBitmapStream(System.Type,System.String,System.Drawing.Point)" access="Public" contract="Static">
              <type name="Bitmap" id="T:System.Drawing.Bitmap" />
              <parameter name="assemblyType">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="imageName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="transparentPixel">
                <type name="Point" id="T:System.Drawing.Point" valueType="true" />
              </parameter>
            </method>
            <method name="LoadBitmapStream" id="M:MControl.Drawing.DrawUtils.LoadBitmapStream(System.Type,System.String,System.Boolean,System.Drawing.Point)" access="Family" contract="Static">
              <type name="Bitmap" id="T:System.Drawing.Bitmap" />
              <parameter name="assemblyType">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="imageName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="makeTransparent">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="transparentPixel">
                <type name="Point" id="T:System.Drawing.Point" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="LoadBitmapStrip" id="Overload:MControl.Drawing.DrawUtils.LoadBitmapStrip" contract="Static">
            <method name="LoadBitmapStrip" id="M:MControl.Drawing.DrawUtils.LoadBitmapStrip(System.Type,System.String,System.Drawing.Size)" access="Public" contract="Static">
              <type name="ImageList" id="T:System.Windows.Forms.ImageList" />
              <parameter name="assemblyType">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="imageName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="imageSize">
                <type name="Size" id="T:System.Drawing.Size" valueType="true" />
              </parameter>
            </method>
            <method name="LoadBitmapStrip" id="M:MControl.Drawing.DrawUtils.LoadBitmapStrip(System.Type,System.String,System.Drawing.Size,System.Drawing.Point)" access="Public" contract="Static">
              <type name="ImageList" id="T:System.Windows.Forms.ImageList" />
              <parameter name="assemblyType">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="imageName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="imageSize">
                <type name="Size" id="T:System.Drawing.Size" valueType="true" />
              </parameter>
              <parameter name="transparentPixel">
                <type name="Point" id="T:System.Drawing.Point" valueType="true" />
              </parameter>
            </method>
            <method name="LoadBitmapStrip" id="M:MControl.Drawing.DrawUtils.LoadBitmapStrip(System.Type,System.String,System.Drawing.Size,System.Boolean,System.Drawing.Point)" access="Family" contract="Static">
              <type name="ImageList" id="T:System.Windows.Forms.ImageList" />
              <parameter name="assemblyType">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="imageName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="imageSize">
                <type name="Size" id="T:System.Drawing.Size" valueType="true" />
              </parameter>
              <parameter name="makeTransparent">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="transparentPixel">
                <type name="Point" id="T:System.Drawing.Point" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="LoadCursor" id="M:MControl.Drawing.DrawUtils.LoadCursor(System.Type,System.String)" access="Public" contract="Static">
            <type name="Cursor" id="T:System.Windows.Forms.Cursor" />
            <parameter name="assemblyType">
              <type name="Type" id="T:System.Type" />
            </parameter>
            <parameter name="cursorName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="LoadIcon" id="Overload:MControl.Drawing.DrawUtils.LoadIcon" contract="Static">
            <method name="LoadIcon" id="M:MControl.Drawing.DrawUtils.LoadIcon(System.String)" access="Public" contract="Static">
              <type name="Icon" id="T:System.Drawing.Icon" />
              <parameter name="iconName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="LoadIcon" id="M:MControl.Drawing.DrawUtils.LoadIcon(System.Type,System.String)" access="Public" contract="Static">
              <type name="Icon" id="T:System.Drawing.Icon" />
              <parameter name="assemblyType">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="iconName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="LoadIcon" id="M:MControl.Drawing.DrawUtils.LoadIcon(System.Type,System.String,System.Drawing.Size)" access="Public" contract="Static">
              <type name="Icon" id="T:System.Drawing.Icon" />
              <parameter name="assemblyType">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="iconName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="iconSize">
                <type name="Size" id="T:System.Drawing.Size" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="LoadIconResource" id="M:MControl.Drawing.DrawUtils.LoadIconResource(System.Type,System.String,System.String)" access="Public" contract="Static">
            <type name="Icon" id="T:System.Drawing.Icon" />
            <parameter name="assemblyType">
              <type name="Type" id="T:System.Type" />
            </parameter>
            <parameter name="resourceHolder">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="imageName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="LoadIconStream" id="Overload:MControl.Drawing.DrawUtils.LoadIconStream" contract="Static">
            <method name="LoadIconStream" id="M:MControl.Drawing.DrawUtils.LoadIconStream(System.Type,System.String)" access="Public" contract="Static">
              <type name="Icon" id="T:System.Drawing.Icon" />
              <parameter name="assemblyType">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="iconName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="LoadIconStream" id="M:MControl.Drawing.DrawUtils.LoadIconStream(System.Type,System.String,System.Drawing.Size)" access="Public" contract="Static">
              <type name="Icon" id="T:System.Drawing.Icon" />
              <parameter name="assemblyType">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="iconName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="iconSize">
                <type name="Size" id="T:System.Drawing.Size" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="LoadImage" id="M:MControl.Drawing.DrawUtils.LoadImage(System.String)" access="Public" contract="Static">
            <type name="Image" id="T:System.Drawing.Image" />
            <parameter name="imageName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="LoadImageListResource" id="Overload:MControl.Drawing.DrawUtils.LoadImageListResource" contract="Static">
            <method name="LoadImageListResource" id="M:MControl.Drawing.DrawUtils.LoadImageListResource(System.Type,System.String,System.String,System.Drawing.Size)" access="Public" contract="Static">
              <type name="ImageList" id="T:System.Windows.Forms.ImageList" />
              <parameter name="assemblyType">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="resourceHolder">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="imageName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="imageSize">
                <type name="Size" id="T:System.Drawing.Size" valueType="true" />
              </parameter>
            </method>
            <method name="LoadImageListResource" id="M:MControl.Drawing.DrawUtils.LoadImageListResource(System.Type,System.String,System.String,System.Drawing.Size,System.Boolean,System.Drawing.Point)" access="Public" contract="Static">
              <type name="ImageList" id="T:System.Windows.Forms.ImageList" />
              <parameter name="assemblyType">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="resourceHolder">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="imageName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="imageSize">
                <type name="Size" id="T:System.Drawing.Size" valueType="true" />
              </parameter>
              <parameter name="makeTransparent">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="transparentPixel">
                <type name="Point" id="T:System.Drawing.Point" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="LoadImageListStream" id="Overload:MControl.Drawing.DrawUtils.LoadImageListStream" contract="Static">
            <method name="LoadImageListStream" id="M:MControl.Drawing.DrawUtils.LoadImageListStream(System.Type,System.String,System.Drawing.Size)" access="Public" contract="Static">
              <type name="ImageList" id="T:System.Windows.Forms.ImageList" />
              <parameter name="assemblyType">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="imageName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="imageSize">
                <type name="Size" id="T:System.Drawing.Size" valueType="true" />
              </parameter>
            </method>
            <method name="LoadImageListStream" id="M:MControl.Drawing.DrawUtils.LoadImageListStream(System.Type,System.String,System.Drawing.Size,System.Drawing.Point)" access="Public" contract="Static">
              <type name="ImageList" id="T:System.Windows.Forms.ImageList" />
              <parameter name="assemblyType">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="imageName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="imageSize">
                <type name="Size" id="T:System.Drawing.Size" valueType="true" />
              </parameter>
              <parameter name="transparentPixel">
                <type name="Point" id="T:System.Drawing.Point" valueType="true" />
              </parameter>
            </method>
            <method name="LoadImageListStream" id="M:MControl.Drawing.DrawUtils.LoadImageListStream(System.Type,System.String,System.Drawing.Size,System.Boolean,System.Drawing.Point)" access="Public" contract="Static">
              <type name="ImageList" id="T:System.Windows.Forms.ImageList" />
              <parameter name="assemblyType">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="imageName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="imageSize">
                <type name="Size" id="T:System.Drawing.Size" valueType="true" />
              </parameter>
              <parameter name="makeTransparent">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="transparentPixel">
                <type name="Point" id="T:System.Drawing.Point" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="LoadToolboxBitmap" id="M:MControl.Drawing.DrawUtils.LoadToolboxBitmap(System.String)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="imageName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="StrechBitmap" id="Overload:MControl.Drawing.DrawUtils.StrechBitmap" contract="Static">
            <method name="StrechBitmap" id="M:MControl.Drawing.DrawUtils.StrechBitmap(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Bitmap)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="gDest">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="rcDest">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="bitmap">
                <type name="Bitmap" id="T:System.Drawing.Bitmap" />
              </parameter>
            </method>
            <method name="StrechBitmap" id="M:MControl.Drawing.DrawUtils.StrechBitmap(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Bitmap)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="gDest">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="rcDest">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="rcSource">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="bitmap">
                <type name="Bitmap" id="T:System.Drawing.Bitmap" />
              </parameter>
            </method>
          </methodOverload>
          <method name="StringFormatToContentAlignment" id="M:MControl.Drawing.DrawUtils.StringFormatToContentAlignment(System.Drawing.StringFormat)" access="Public" contract="Static">
            <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            <parameter name="p_StringFormat">
              <type name="StringFormat" id="T:System.Drawing.StringFormat" />
            </parameter>
          </method>
        </class>
        <class name="LayoutUtils" id="T:MControl.Drawing.LayoutUtils" access="Public" namespace="MControl.Drawing" displayName="LayoutUtils">
          <constructor name=".ctor" id="M:MControl.Drawing.LayoutUtils.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Drawing.LayoutUtils" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="AnyBottom" id="F:MControl.Drawing.LayoutUtils.AnyBottom" access="Public" contract="Static" literal="true" value="ContentAlignment.1792">
            <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
          </field>
          <field name="AnyCenter" id="F:MControl.Drawing.LayoutUtils.AnyCenter" access="Public" contract="Static" literal="true" value="ContentAlignment.546">
            <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
          </field>
          <field name="AnyLeft" id="F:MControl.Drawing.LayoutUtils.AnyLeft" access="Public" contract="Static" literal="true" value="ContentAlignment.273">
            <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
          </field>
          <field name="AnyMiddle" id="F:MControl.Drawing.LayoutUtils.AnyMiddle" access="Public" contract="Static" literal="true" value="ContentAlignment.112">
            <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
          </field>
          <field name="AnyRight" id="F:MControl.Drawing.LayoutUtils.AnyRight" access="Public" contract="Static" literal="true" value="ContentAlignment.1092">
            <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
          </field>
          <field name="AnyTop" id="F:MControl.Drawing.LayoutUtils.AnyTop" access="Public" contract="Static" literal="true" value="ContentAlignment.7">
            <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
          </field>
          <field name="HorizontalAnchorStyles" id="F:MControl.Drawing.LayoutUtils.HorizontalAnchorStyles" access="Public" contract="Static" literal="true" value="(AnchorStyles.Left | AnchorStyles.Right)">
            <type name="AnchorStyles" id="T:System.Windows.Forms.AnchorStyles" valueType="true" />
          </field>
          <field name="InvalidSize" id="F:MControl.Drawing.LayoutUtils.InvalidSize" access="Public" contract="Static" initOnly="true">
            <type name="Size" id="T:System.Drawing.Size" valueType="true" />
          </field>
          <field name="MaxRectangle" id="F:MControl.Drawing.LayoutUtils.MaxRectangle" access="Public" contract="Static" initOnly="true">
            <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
          </field>
          <field name="MaxSize" id="F:MControl.Drawing.LayoutUtils.MaxSize" access="Public" contract="Static" initOnly="true">
            <type name="Size" id="T:System.Drawing.Size" valueType="true" />
          </field>
          <field name="TestString" id="F:MControl.Drawing.LayoutUtils.TestString" access="Public" contract="Static" initOnly="true">
            <type name="String" id="T:System.String" />
          </field>
          <field name="VerticalAnchorStyles" id="F:MControl.Drawing.LayoutUtils.VerticalAnchorStyles" access="Public" contract="Static" literal="true" value="(AnchorStyles.Top | AnchorStyles.Bottom)">
            <type name="AnchorStyles" id="T:System.Windows.Forms.AnchorStyles" valueType="true" />
          </field>
          <method name="AddAlignedRegion" id="M:MControl.Drawing.LayoutUtils.AddAlignedRegion(System.Drawing.Size,System.Drawing.Size,System.Windows.Forms.TextImageRelation)" access="Public" contract="Static">
            <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            <parameter name="textSize">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
            <parameter name="imageSize">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
            <parameter name="relation">
              <type name="TextImageRelation" id="T:System.Windows.Forms.TextImageRelation" valueType="true" />
            </parameter>
          </method>
          <method name="AddAlignedRegionCore" id="M:MControl.Drawing.LayoutUtils.AddAlignedRegionCore(System.Drawing.Size,System.Drawing.Size,System.Boolean)" access="Public" contract="Static">
            <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            <parameter name="currentSize">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
            <parameter name="contentSize">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
            <parameter name="vertical">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="Align" id="Overload:MControl.Drawing.LayoutUtils.Align" contract="Static">
            <method name="Align" id="M:MControl.Drawing.LayoutUtils.Align(System.Drawing.Size,System.Drawing.Rectangle,System.Drawing.ContentAlignment)" access="Public" contract="Static">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              <parameter name="alignThis">
                <type name="Size" id="T:System.Drawing.Size" valueType="true" />
              </parameter>
              <parameter name="withinThis">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="align">
                <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
              </parameter>
            </method>
            <method name="Align" id="M:MControl.Drawing.LayoutUtils.Align(System.Drawing.Size,System.Drawing.Rectangle,System.Windows.Forms.AnchorStyles)" access="Public" contract="Static">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              <parameter name="alignThis">
                <type name="Size" id="T:System.Drawing.Size" valueType="true" />
              </parameter>
              <parameter name="withinThis">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="anchorStyles">
                <type name="AnchorStyles" id="T:System.Windows.Forms.AnchorStyles" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="AlignAndStretch" id="M:MControl.Drawing.LayoutUtils.AlignAndStretch(System.Drawing.Size,System.Drawing.Rectangle,System.Windows.Forms.AnchorStyles)" access="Public" contract="Static">
            <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            <parameter name="fitThis">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
            <parameter name="withinThis">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="anchorStyles">
              <type name="AnchorStyles" id="T:System.Windows.Forms.AnchorStyles" valueType="true" />
            </parameter>
          </method>
          <method name="AreWidthAndHeightLarger" id="M:MControl.Drawing.LayoutUtils.AreWidthAndHeightLarger(System.Drawing.Size,System.Drawing.Size)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="size1">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
            <parameter name="size2">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
          </method>
          <method name="CalcImageRenderBounds" id="M:MControl.Drawing.LayoutUtils.CalcImageRenderBounds(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.ContentAlignment)" access="Public" contract="Static">
            <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            <parameter name="image">
              <type name="Image" id="T:System.Drawing.Image" />
            </parameter>
            <parameter name="r">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="align">
              <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            </parameter>
          </method>
          <method name="ClampNegativePaddingToZero" id="M:MControl.Drawing.LayoutUtils.ClampNegativePaddingToZero(System.Windows.Forms.Padding)" access="Public" contract="Static">
            <type name="Padding" id="T:System.Windows.Forms.Padding" valueType="true" />
            <parameter name="padding">
              <type name="Padding" id="T:System.Windows.Forms.Padding" valueType="true" />
            </parameter>
          </method>
          <method name="ContentAlignmentToIndex" id="M:MControl.Drawing.LayoutUtils.ContentAlignmentToIndex(System.Drawing.ContentAlignment)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="alignment">
              <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            </parameter>
          </method>
          <method name="ConvertZeroToUnbounded" id="M:MControl.Drawing.LayoutUtils.ConvertZeroToUnbounded(System.Drawing.Size)" access="Public" contract="Static">
            <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            <parameter name="size">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
          </method>
          <method name="CreateStringFormat" id="M:MControl.Drawing.LayoutUtils.CreateStringFormat(System.Windows.Forms.Control,System.Drawing.ContentAlignment,System.Boolean,System.Boolean,System.Boolean)" access="Public" contract="Static">
            <type name="StringFormat" id="T:System.Drawing.StringFormat" />
            <parameter name="ctl">
              <type name="Control" id="T:System.Windows.Forms.Control" />
            </parameter>
            <parameter name="textAlign">
              <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            </parameter>
            <parameter name="showEllipsis">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="useMnemonic">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="designMode">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="CreateTextFormatFlags" id="M:MControl.Drawing.LayoutUtils.CreateTextFormatFlags(System.Windows.Forms.Control,System.Drawing.ContentAlignment,System.Boolean,System.Boolean,System.Boolean)" access="Public" contract="Static">
            <type name="TextFormatFlags" id="T:System.Windows.Forms.TextFormatFlags" valueType="true" />
            <parameter name="ctl">
              <type name="Control" id="T:System.Windows.Forms.Control" />
            </parameter>
            <parameter name="textAlign">
              <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            </parameter>
            <parameter name="showEllipsis">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="useMnemonic">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="designMode">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="DeflateRect" id="M:MControl.Drawing.LayoutUtils.DeflateRect(System.Drawing.Rectangle,System.Windows.Forms.Padding)" access="Public" contract="Static">
            <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            <parameter name="rect">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="padding">
              <type name="Padding" id="T:System.Windows.Forms.Padding" valueType="true" />
            </parameter>
          </method>
          <method name="ExpandRegionsToFillBounds" id="M:MControl.Drawing.LayoutUtils.ExpandRegionsToFillBounds(System.Drawing.Rectangle,System.Windows.Forms.AnchorStyles,System.Drawing.Rectangle@,System.Drawing.Rectangle@)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="bounds">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="region1Align">
              <type name="AnchorStyles" id="T:System.Windows.Forms.AnchorStyles" valueType="true" />
            </parameter>
            <parameter name="region1" direction="ref">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="region2" direction="ref">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
          </method>
          <method name="FlipPadding" id="M:MControl.Drawing.LayoutUtils.FlipPadding(System.Windows.Forms.Padding)" access="Public" contract="Static">
            <type name="Padding" id="T:System.Windows.Forms.Padding" valueType="true" />
            <parameter name="padding">
              <type name="Padding" id="T:System.Windows.Forms.Padding" valueType="true" />
            </parameter>
          </method>
          <method name="FlipPoint" id="M:MControl.Drawing.LayoutUtils.FlipPoint(System.Drawing.Point)" access="Public" contract="Static">
            <type name="Point" id="T:System.Drawing.Point" valueType="true" />
            <parameter name="point">
              <type name="Point" id="T:System.Drawing.Point" valueType="true" />
            </parameter>
          </method>
          <method name="FlipRectangle" id="M:MControl.Drawing.LayoutUtils.FlipRectangle(System.Drawing.Rectangle)" access="Public" contract="Static">
            <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            <parameter name="rect">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
          </method>
          <method name="FlipRectangleIf" id="M:MControl.Drawing.LayoutUtils.FlipRectangleIf(System.Boolean,System.Drawing.Rectangle)" access="Public" contract="Static">
            <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            <parameter name="condition">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="rect">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
          </method>
          <method name="FlipSize" id="M:MControl.Drawing.LayoutUtils.FlipSize(System.Drawing.Size)" access="Public" contract="Static">
            <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            <parameter name="size">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
          </method>
          <method name="FlipSizeIf" id="M:MControl.Drawing.LayoutUtils.FlipSizeIf(System.Boolean,System.Drawing.Size)" access="Public" contract="Static">
            <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            <parameter name="condition">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="size">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
          </method>
          <method name="GetOppositeTextImageRelation" id="M:MControl.Drawing.LayoutUtils.GetOppositeTextImageRelation(System.Windows.Forms.TextImageRelation)" access="Public" contract="Static">
            <type name="TextImageRelation" id="T:System.Windows.Forms.TextImageRelation" valueType="true" />
            <parameter name="relation">
              <type name="TextImageRelation" id="T:System.Windows.Forms.TextImageRelation" valueType="true" />
            </parameter>
          </method>
          <method name="HAlign" id="M:MControl.Drawing.LayoutUtils.HAlign(System.Drawing.Size,System.Drawing.Rectangle,System.Windows.Forms.AnchorStyles)" access="Public" contract="Static">
            <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            <parameter name="alignThis">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
            <parameter name="withinThis">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="anchorStyles">
              <type name="AnchorStyles" id="T:System.Windows.Forms.AnchorStyles" valueType="true" />
            </parameter>
          </method>
          <method name="InflateRect" id="M:MControl.Drawing.LayoutUtils.InflateRect(System.Drawing.Rectangle,System.Windows.Forms.Padding)" access="Public" contract="Static">
            <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            <parameter name="rect">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="padding">
              <type name="Padding" id="T:System.Windows.Forms.Padding" valueType="true" />
            </parameter>
          </method>
          <method name="IntersectSizes" id="M:MControl.Drawing.LayoutUtils.IntersectSizes(System.Drawing.Size,System.Drawing.Size)" access="Public" contract="Static">
            <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            <parameter name="a">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
            <parameter name="b">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
          </method>
          <method name="IsHorizontalAlignment" id="M:MControl.Drawing.LayoutUtils.IsHorizontalAlignment(System.Drawing.ContentAlignment)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="align">
              <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            </parameter>
          </method>
          <method name="IsHorizontalRelation" id="M:MControl.Drawing.LayoutUtils.IsHorizontalRelation(System.Windows.Forms.TextImageRelation)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="relation">
              <type name="TextImageRelation" id="T:System.Windows.Forms.TextImageRelation" valueType="true" />
            </parameter>
          </method>
          <method name="IsIntersectHorizontally" id="M:MControl.Drawing.LayoutUtils.IsIntersectHorizontally(System.Drawing.Rectangle,System.Drawing.Rectangle)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="rect1">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="rect2">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
          </method>
          <method name="IsIntersectVertically" id="M:MControl.Drawing.LayoutUtils.IsIntersectVertically(System.Drawing.Rectangle,System.Drawing.Rectangle)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="rect1">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="rect2">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
          </method>
          <method name="IsVerticalAlignment" id="M:MControl.Drawing.LayoutUtils.IsVerticalAlignment(System.Drawing.ContentAlignment)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="align">
              <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            </parameter>
          </method>
          <method name="IsVerticalRelation" id="M:MControl.Drawing.LayoutUtils.IsVerticalRelation(System.Windows.Forms.TextImageRelation)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="relation">
              <type name="TextImageRelation" id="T:System.Windows.Forms.TextImageRelation" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="IsZeroWidthOrHeight" id="Overload:MControl.Drawing.LayoutUtils.IsZeroWidthOrHeight" contract="Static">
            <method name="IsZeroWidthOrHeight" id="M:MControl.Drawing.LayoutUtils.IsZeroWidthOrHeight(System.Drawing.Rectangle)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="rectangle">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
            </method>
            <method name="IsZeroWidthOrHeight" id="M:MControl.Drawing.LayoutUtils.IsZeroWidthOrHeight(System.Drawing.Size)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="size">
                <type name="Size" id="T:System.Drawing.Size" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="OldGetLargestStringSizeInCollection" id="M:MControl.Drawing.LayoutUtils.OldGetLargestStringSizeInCollection(System.Drawing.Font,System.Collections.ICollection)" access="Public" contract="Static">
            <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            <parameter name="font">
              <type name="Font" id="T:System.Drawing.Font" />
            </parameter>
            <parameter name="objects">
              <type name="ICollection" id="T:System.Collections.ICollection" />
            </parameter>
          </method>
          <method name="RTLTranslate" id="M:MControl.Drawing.LayoutUtils.RTLTranslate(System.Drawing.Rectangle,System.Drawing.Rectangle)" access="Public" contract="Static">
            <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            <parameter name="bounds">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="withinBounds">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
          </method>
          <method name="RtlTranslateContent" id="M:MControl.Drawing.LayoutUtils.RtlTranslateContent(System.Windows.Forms.Control,System.Drawing.ContentAlignment)" access="Public" contract="Static">
            <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            <parameter name="ctl">
              <type name="Control" id="T:System.Windows.Forms.Control" />
            </parameter>
            <parameter name="align">
              <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            </parameter>
          </method>
          <method name="SplitRegion" id="M:MControl.Drawing.LayoutUtils.SplitRegion(System.Drawing.Rectangle,System.Drawing.Size,System.Windows.Forms.AnchorStyles,System.Drawing.Rectangle@,System.Drawing.Rectangle@)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="bounds">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="specifiedContent">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
            <parameter name="region1Align">
              <type name="AnchorStyles" id="T:System.Windows.Forms.AnchorStyles" valueType="true" />
            </parameter>
            <parameter name="region1" direction="out">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
            </parameter>
            <parameter name="region2" direction="out">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
            </parameter>
          </method>
          <method name="Stretch" id="M:MControl.Drawing.LayoutUtils.Stretch(System.Drawing.Size,System.Drawing.Size,System.Windows.Forms.AnchorStyles)" access="Public" contract="Static">
            <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            <parameter name="stretchThis">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
            <parameter name="withinThis">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
            <parameter name="anchorStyles">
              <type name="AnchorStyles" id="T:System.Windows.Forms.AnchorStyles" valueType="true" />
            </parameter>
          </method>
          <method name="StringFormatForAlignment" id="M:MControl.Drawing.LayoutUtils.StringFormatForAlignment(System.Drawing.ContentAlignment)" access="Public" contract="Static">
            <type name="StringFormat" id="T:System.Drawing.StringFormat" />
            <parameter name="align">
              <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            </parameter>
          </method>
          <method name="SubAlignedRegion" id="M:MControl.Drawing.LayoutUtils.SubAlignedRegion(System.Drawing.Size,System.Drawing.Size,System.Windows.Forms.TextImageRelation)" access="Public" contract="Static">
            <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            <parameter name="currentSize">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
            <parameter name="contentSize">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
            <parameter name="relation">
              <type name="TextImageRelation" id="T:System.Windows.Forms.TextImageRelation" valueType="true" />
            </parameter>
          </method>
          <method name="SubAlignedRegionCore" id="M:MControl.Drawing.LayoutUtils.SubAlignedRegionCore(System.Drawing.Size,System.Drawing.Size,System.Boolean)" access="Public" contract="Static">
            <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            <parameter name="currentSize">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
            <parameter name="contentSize">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
            <parameter name="vertical">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="TextFormatFlagsForAlignmentGDI" id="M:MControl.Drawing.LayoutUtils.TextFormatFlagsForAlignmentGDI(System.Drawing.ContentAlignment)" access="Public" contract="Static">
            <type name="TextFormatFlags" id="T:System.Windows.Forms.TextFormatFlags" valueType="true" />
            <parameter name="align">
              <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            </parameter>
          </method>
          <method name="TranslateAlignment" id="M:MControl.Drawing.LayoutUtils.TranslateAlignment(System.Drawing.ContentAlignment)" access="Public" contract="Static">
            <type name="StringAlignment" id="T:System.Drawing.StringAlignment" valueType="true" />
            <parameter name="align">
              <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            </parameter>
          </method>
          <method name="TranslateAlignmentForGDI" id="M:MControl.Drawing.LayoutUtils.TranslateAlignmentForGDI(System.Drawing.ContentAlignment)" access="Public" contract="Static">
            <type name="TextFormatFlags" id="T:System.Windows.Forms.TextFormatFlags" valueType="true" />
            <parameter name="align">
              <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            </parameter>
          </method>
          <method name="TranslateLineAlignment" id="M:MControl.Drawing.LayoutUtils.TranslateLineAlignment(System.Drawing.ContentAlignment)" access="Public" contract="Static">
            <type name="StringAlignment" id="T:System.Drawing.StringAlignment" valueType="true" />
            <parameter name="align">
              <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            </parameter>
          </method>
          <method name="TranslateLineAlignmentForGDI" id="M:MControl.Drawing.LayoutUtils.TranslateLineAlignmentForGDI(System.Drawing.ContentAlignment)" access="Public" contract="Static">
            <type name="TextFormatFlags" id="T:System.Windows.Forms.TextFormatFlags" valueType="true" />
            <parameter name="align">
              <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            </parameter>
          </method>
          <method name="UnionSizes" id="M:MControl.Drawing.LayoutUtils.UnionSizes(System.Drawing.Size,System.Drawing.Size)" access="Public" contract="Static">
            <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            <parameter name="a">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
            <parameter name="b">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="VAlign" id="Overload:MControl.Drawing.LayoutUtils.VAlign" contract="Static">
            <method name="VAlign" id="M:MControl.Drawing.LayoutUtils.VAlign(System.Drawing.Size,System.Drawing.Rectangle,System.Drawing.ContentAlignment)" access="Public" contract="Static">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              <parameter name="alignThis">
                <type name="Size" id="T:System.Drawing.Size" valueType="true" />
              </parameter>
              <parameter name="withinThis">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="align">
                <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
              </parameter>
            </method>
            <method name="VAlign" id="M:MControl.Drawing.LayoutUtils.VAlign(System.Drawing.Size,System.Drawing.Rectangle,System.Windows.Forms.AnchorStyles)" access="Public" contract="Static">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              <parameter name="alignThis">
                <type name="Size" id="T:System.Drawing.Size" valueType="true" />
              </parameter>
              <parameter name="withinThis">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="anchorStyles">
                <type name="AnchorStyles" id="T:System.Windows.Forms.AnchorStyles" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
        </class>
        <class name="LayoutUtils.MeasureTextCache" id="T:MControl.Drawing.LayoutUtils.MeasureTextCache" access="NestedPublic" namespace="MControl.Drawing" displayName="LayoutUtils.MeasureTextCache" declaringType="LayoutUtils" sealed="true">
          <constructor name=".ctor" id="M:MControl.Drawing.LayoutUtils.MeasureTextCache.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Drawing.LayoutUtils.MeasureTextCache" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="GetTextSize" id="M:MControl.Drawing.LayoutUtils.MeasureTextCache.GetTextSize(System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" access="Public" contract="Normal">
            <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            <parameter name="text">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="font">
              <type name="Font" id="T:System.Drawing.Font" />
            </parameter>
            <parameter name="proposedConstraints">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
            <parameter name="flags">
              <type name="TextFormatFlags" id="T:System.Windows.Forms.TextFormatFlags" valueType="true" />
            </parameter>
          </method>
          <method name="InvalidateCache" id="M:MControl.Drawing.LayoutUtils.MeasureTextCache.InvalidateCache" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="TextRequiresWordBreak" id="M:MControl.Drawing.LayoutUtils.MeasureTextCache.TextRequiresWordBreak(System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="text">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="font">
              <type name="Font" id="T:System.Drawing.Font" />
            </parameter>
            <parameter name="size">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
            </parameter>
            <parameter name="flags">
              <type name="TextFormatFlags" id="T:System.Windows.Forms.TextFormatFlags" valueType="true" />
            </parameter>
          </method>
        </class>
        <class name="McBrushes" id="T:MControl.Drawing.McBrushes" access="Public" namespace="MControl.Drawing" displayName="McBrushes" sealed="true">
          <property name="Content" id="P:MControl.Drawing.McBrushes.Content" access="Public" contract="Static">
            <type name="Brush" id="T:System.Drawing.Brush" />
            <get access="Public" />
          </property>
          <property name="ContentDark" id="P:MControl.Drawing.McBrushes.ContentDark" access="Public" contract="Static">
            <type name="Brush" id="T:System.Drawing.Brush" />
            <get access="Public" />
          </property>
          <property name="Focus" id="P:MControl.Drawing.McBrushes.Focus" access="Public" contract="Static">
            <type name="Brush" id="T:System.Drawing.Brush" />
            <get access="Public" />
          </property>
          <property name="HatchStyles" id="P:MControl.Drawing.McBrushes.HatchStyles" access="Public" contract="Static">
            <type name="HatchStyle" id="T:System.Drawing.Drawing2D.HatchStyle" valueType="true">
              <array rank="1" />
            </type>
            <get access="Public" />
          </property>
          <property name="LocalizedHatchStyles" id="P:MControl.Drawing.McBrushes.LocalizedHatchStyles" access="Public" contract="Static">
            <type name="Hashtable" id="T:System.Collections.Hashtable" />
            <get access="Public" />
          </property>
          <property name="Selected" id="P:MControl.Drawing.McBrushes.Selected" access="Public" contract="Static">
            <type name="Brush" id="T:System.Drawing.Brush" />
            <get access="Public" />
          </property>
          <property name="SelectedText" id="P:MControl.Drawing.McBrushes.SelectedText" access="Public" contract="Static">
            <type name="Brush" id="T:System.Drawing.Brush" />
            <get access="Public" />
          </property>
          <method name="GetActiveCaptionBrush" id="M:MControl.Drawing.McBrushes.GetActiveCaptionBrush(System.Drawing.Rectangle,System.Single)" access="Public" contract="Static">
            <type name="Brush" id="T:System.Drawing.Brush" />
            <parameter name="rectangle">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="angle">
              <type name="Single" id="T:System.Single" valueType="true" />
            </parameter>
          </method>
          <method name="GetActiveCaptionLightBrush" id="M:MControl.Drawing.McBrushes.GetActiveCaptionLightBrush(System.Drawing.Rectangle,System.Single)" access="Public" contract="Static">
            <type name="Brush" id="T:System.Drawing.Brush" />
            <parameter name="rectangle">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="angle">
              <type name="Single" id="T:System.Single" valueType="true" />
            </parameter>
          </method>
          <method name="GetControlBrush" id="M:MControl.Drawing.McBrushes.GetControlBrush(System.Drawing.Rectangle,System.Single)" access="Public" contract="Static">
            <type name="Brush" id="T:System.Drawing.Brush" />
            <parameter name="rectangle">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="angle">
              <type name="Single" id="T:System.Single" valueType="true" />
            </parameter>
          </method>
          <method name="GetControlDarkBrush" id="M:MControl.Drawing.McBrushes.GetControlDarkBrush(System.Drawing.Rectangle,System.Single)" access="Public" contract="Static">
            <type name="Brush" id="T:System.Drawing.Brush" />
            <parameter name="rectangle">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="angle">
              <type name="Single" id="T:System.Single" valueType="true" />
            </parameter>
          </method>
          <method name="GetControlLightBrush" id="M:MControl.Drawing.McBrushes.GetControlLightBrush(System.Drawing.Rectangle,System.Single)" access="Public" contract="Static">
            <type name="Brush" id="T:System.Drawing.Brush" />
            <parameter name="rectangle">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="angle">
              <type name="Single" id="T:System.Single" valueType="true" />
            </parameter>
          </method>
          <method name="HatchStyleFromName" id="M:MControl.Drawing.McBrushes.HatchStyleFromName(System.String)" access="Public" contract="Static">
            <type name="HatchStyle" id="T:System.Drawing.Drawing2D.HatchStyle" valueType="true" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="McColors" id="T:MControl.Drawing.McColors" access="Public" namespace="MControl.Drawing" displayName="McColors" sealed="true">
          <property name="ActiveCaptionEnd" id="P:MControl.Drawing.McColors.ActiveCaptionEnd" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ActiveCaptionStart" id="P:MControl.Drawing.McColors.ActiveCaptionStart" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ColorName" id="P:MControl.Drawing.McColors.ColorName" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="Colors" id="P:MControl.Drawing.McColors.Colors" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true">
              <array rank="1" />
            </type>
            <get access="Public" />
          </property>
          <property name="Content" id="P:MControl.Drawing.McColors.Content" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ContentDark" id="P:MControl.Drawing.McColors.ContentDark" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ControlEnd" id="P:MControl.Drawing.McColors.ControlEnd" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ControlEndDark" id="P:MControl.Drawing.McColors.ControlEndDark" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ControlEndLight" id="P:MControl.Drawing.McColors.ControlEndLight" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ControlStart" id="P:MControl.Drawing.McColors.ControlStart" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ControlStartDark" id="P:MControl.Drawing.McColors.ControlStartDark" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ControlStartLight" id="P:MControl.Drawing.McColors.ControlStartLight" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ControlText" id="P:MControl.Drawing.McColors.ControlText" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="CustomColors" id="P:MControl.Drawing.McColors.CustomColors" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true">
              <array rank="1" />
            </type>
            <get access="Public" />
          </property>
          <property name="CustomStr" id="P:MControl.Drawing.McColors.CustomStr" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="Focus" id="P:MControl.Drawing.McColors.Focus" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="InactiveCaptionEnd" id="P:MControl.Drawing.McColors.InactiveCaptionEnd" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="InactiveCaptionStart" id="P:MControl.Drawing.McColors.InactiveCaptionStart" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="LocalizableColors" id="P:MControl.Drawing.McColors.LocalizableColors" access="Public" contract="Static">
            <type name="Hashtable" id="T:System.Collections.Hashtable" />
            <get access="Public" />
          </property>
          <property name="LocalizableSystemColors" id="P:MControl.Drawing.McColors.LocalizableSystemColors" access="Public" contract="Static">
            <type name="Hashtable" id="T:System.Collections.Hashtable" />
            <get access="Public" />
          </property>
          <property name="McSystemColors" id="P:MControl.Drawing.McColors.McSystemColors" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true">
              <array rank="1" />
            </type>
            <get access="Public" />
          </property>
          <property name="OtherStr" id="P:MControl.Drawing.McColors.OtherStr" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="Selected" id="P:MControl.Drawing.McColors.Selected" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="SelectedText" id="P:MControl.Drawing.McColors.SelectedText" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="SystemStr" id="P:MControl.Drawing.McColors.SystemStr" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="WebStr" id="P:MControl.Drawing.McColors.WebStr" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <method name="InitColors" id="M:MControl.Drawing.McColors.InitColors" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
        </class>
        <class name="McPaint" id="T:MControl.Drawing.McPaint" access="Public" namespace="MControl.Drawing" displayName="McPaint" sealed="true">
          <method name="ConvertToDisabled" id="M:MControl.Drawing.McPaint.ConvertToDisabled(System.Drawing.Bitmap)" access="Public" contract="Static">
            <type name="Bitmap" id="T:System.Drawing.Bitmap" />
            <parameter name="bmp">
              <type name="Bitmap" id="T:System.Drawing.Bitmap" />
            </parameter>
          </method>
          <method name="ConvertToGrayscale" id="M:MControl.Drawing.McPaint.ConvertToGrayscale(System.Drawing.Bitmap)" access="Public" contract="Static">
            <type name="Bitmap" id="T:System.Drawing.Bitmap" />
            <parameter name="bmp">
              <type name="Bitmap" id="T:System.Drawing.Bitmap" />
            </parameter>
          </method>
          <method name="Dark" id="M:MControl.Drawing.McPaint.Dark(System.Drawing.Color,System.Byte)" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <parameter name="baseColor">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
            <parameter name="value">
              <type name="Byte" id="T:System.Byte" valueType="true" />
            </parameter>
          </method>
          <method name="DrawBorder" id="M:MControl.Drawing.McPaint.DrawBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Boolean)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="graphics">
              <type name="Graphics" id="T:System.Drawing.Graphics" />
            </parameter>
            <parameter name="bounds">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="isFocused">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="flat">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="DrawButton" id="M:MControl.Drawing.McPaint.DrawButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="graphics">
              <type name="Graphics" id="T:System.Drawing.Graphics" />
            </parameter>
            <parameter name="bounds">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="image">
              <type name="Image" id="T:System.Drawing.Image" />
            </parameter>
            <parameter name="isPressed">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="isFocused">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="isMouseOverButton">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="enabled">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="flat">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="DrawCheck" id="M:MControl.Drawing.McPaint.DrawCheck(System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="graphics">
              <type name="Graphics" id="T:System.Drawing.Graphics" />
            </parameter>
            <parameter name="x">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="y">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="enabled">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="DrawFocus" id="Overload:MControl.Drawing.McPaint.DrawFocus" contract="Static">
            <method name="DrawFocus" id="M:MControl.Drawing.McPaint.DrawFocus(System.Drawing.Graphics,System.Drawing.Rectangle)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="graphics">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="bounds">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
            </method>
            <method name="DrawFocus" id="M:MControl.Drawing.McPaint.DrawFocus(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="graphics">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="bounds">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="buttonBounds">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="DrawImageDisabled" id="Overload:MControl.Drawing.McPaint.DrawImageDisabled" contract="Static">
            <method name="DrawImageDisabled" id="M:MControl.Drawing.McPaint.DrawImageDisabled(System.Drawing.Graphics,System.Drawing.Bitmap,System.Int32,System.Int32)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="graphics">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="bmp">
                <type name="Bitmap" id="T:System.Drawing.Bitmap" />
              </parameter>
              <parameter name="x">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="y">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
            <method name="DrawImageDisabled" id="M:MControl.Drawing.McPaint.DrawImageDisabled(System.Drawing.Graphics,System.Drawing.Image,System.Int32,System.Int32)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="graphics">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="image">
                <type name="Image" id="T:System.Drawing.Image" />
              </parameter>
              <parameter name="x">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="y">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="DrawItem" id="Overload:MControl.Drawing.McPaint.DrawItem" contract="Static">
            <method name="DrawItem" id="M:MControl.Drawing.McPaint.DrawItem(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.DrawItemState,System.Drawing.Color,System.Drawing.Color)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="graphics">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="bounds">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="state">
                <type name="DrawItemState" id="T:System.Windows.Forms.DrawItemState" valueType="true" />
              </parameter>
              <parameter name="backColor">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
              <parameter name="foreColor">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
            </method>
            <method name="DrawItem" id="M:MControl.Drawing.McPaint.DrawItem(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.DrawItemState,System.String,System.Windows.Forms.ImageList,System.Int32,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Windows.Forms.RightToLeft)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="graphics">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="bounds">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="state">
                <type name="DrawItemState" id="T:System.Windows.Forms.DrawItemState" valueType="true" />
              </parameter>
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="imageList">
                <type name="ImageList" id="T:System.Windows.Forms.ImageList" />
              </parameter>
              <parameter name="imageIndex">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="font">
                <type name="Font" id="T:System.Drawing.Font" />
              </parameter>
              <parameter name="backColor">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
              <parameter name="foreColor">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
              <parameter name="rightToLeft">
                <type name="RightToLeft" id="T:System.Windows.Forms.RightToLeft" valueType="true" />
              </parameter>
            </method>
            <method name="DrawItem" id="M:MControl.Drawing.McPaint.DrawItem(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.DrawItemState,System.String,System.Windows.Forms.ImageList,System.Int32,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Windows.Forms.RightToLeft)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="graphics">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="bounds">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="state">
                <type name="DrawItemState" id="T:System.Windows.Forms.DrawItemState" valueType="true" />
              </parameter>
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="imageList">
                <type name="ImageList" id="T:System.Windows.Forms.ImageList" />
              </parameter>
              <parameter name="imageIndex">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="font">
                <type name="Font" id="T:System.Drawing.Font" />
              </parameter>
              <parameter name="backColor">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
              <parameter name="foreColor">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
              <parameter name="textStartPos">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="rightToLeft">
                <type name="RightToLeft" id="T:System.Windows.Forms.RightToLeft" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="DrawReversibleFrame" id="Overload:MControl.Drawing.McPaint.DrawReversibleFrame" contract="Static">
            <method name="DrawReversibleFrame" id="M:MControl.Drawing.McPaint.DrawReversibleFrame(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,MControl.Drawing.FrameStyle)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="graphics">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="rectangle">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="backColor">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
              <parameter name="style">
                <type name="FrameStyle" id="T:MControl.Drawing.FrameStyle" valueType="true" />
              </parameter>
            </method>
            <method name="DrawReversibleFrame" id="M:MControl.Drawing.McPaint.DrawReversibleFrame(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,MControl.Drawing.FrameStyle)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="graphics">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="x">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="y">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="width">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="height">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="backColor">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
              <parameter name="style">
                <type name="FrameStyle" id="T:MControl.Drawing.FrameStyle" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="DrawReversibleLine" id="Overload:MControl.Drawing.McPaint.DrawReversibleLine" contract="Static">
            <method name="DrawReversibleLine" id="M:MControl.Drawing.McPaint.DrawReversibleLine(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,MControl.Drawing.FrameStyle)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="graphics">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="start">
                <type name="Point" id="T:System.Drawing.Point" valueType="true" />
              </parameter>
              <parameter name="end">
                <type name="Point" id="T:System.Drawing.Point" valueType="true" />
              </parameter>
              <parameter name="backColor">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
              <parameter name="style">
                <type name="FrameStyle" id="T:MControl.Drawing.FrameStyle" valueType="true" />
              </parameter>
            </method>
            <method name="DrawReversibleLine" id="M:MControl.Drawing.McPaint.DrawReversibleLine(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color,MControl.Drawing.FrameStyle)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="graphics">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="startX">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="startY">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="endX">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="endY">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="backColor">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
              <parameter name="style">
                <type name="FrameStyle" id="T:MControl.Drawing.FrameStyle" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="DrawString" id="M:MControl.Drawing.McPaint.DrawString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Rectangle,System.Drawing.StringFormat,System.Single)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="graphics">
              <type name="Graphics" id="T:System.Drawing.Graphics" />
            </parameter>
            <parameter name="text">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="font">
              <type name="Font" id="T:System.Drawing.Font" />
            </parameter>
            <parameter name="brush">
              <type name="Brush" id="T:System.Drawing.Brush" />
            </parameter>
            <parameter name="layoutRectangle">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="format">
              <type name="StringFormat" id="T:System.Drawing.StringFormat" />
            </parameter>
            <parameter name="angle">
              <type name="Single" id="T:System.Single" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="FillReversibleRectangle" id="Overload:MControl.Drawing.McPaint.FillReversibleRectangle" contract="Static">
            <method name="FillReversibleRectangle" id="M:MControl.Drawing.McPaint.FillReversibleRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="graphics">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="bounds">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="backColor">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
            </method>
            <method name="FillReversibleRectangle" id="M:MControl.Drawing.McPaint.FillReversibleRectangle(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="graphics">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="x">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="y">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="width">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="height">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="backColor">
                <type name="Color" id="T:System.Drawing.Color" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="GetButtonRect" id="Overload:MControl.Drawing.McPaint.GetButtonRect" contract="Static">
            <method name="GetButtonRect" id="M:MControl.Drawing.McPaint.GetButtonRect(System.Drawing.Rectangle,System.Boolean)" access="Public" contract="Static">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              <parameter name="bounds">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="flat">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
            <method name="GetButtonRect" id="M:MControl.Drawing.McPaint.GetButtonRect(System.Drawing.Rectangle,System.Boolean,System.Int32)" access="Public" contract="Static">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              <parameter name="bounds">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="flat">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="buttonWidth">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="GetColorRop" id="M:MControl.Drawing.McPaint.GetColorRop(System.Drawing.Color,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="color">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
            <parameter name="darkROP">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="lightROP">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="GetContentRect" id="M:MControl.Drawing.McPaint.GetContentRect(System.Drawing.Rectangle,System.Boolean)" access="Public" contract="Static">
            <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            <parameter name="bounds">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="flat">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="GetCursor" id="Overload:MControl.Drawing.McPaint.GetCursor" contract="Static">
            <method name="GetCursor" id="M:MControl.Drawing.McPaint.GetCursor(System.Reflection.Assembly,System.String)" access="Public" contract="Static">
              <type name="Cursor" id="T:System.Windows.Forms.Cursor" />
              <parameter name="cursorAssembly">
                <type name="Assembly" id="T:System.Reflection.Assembly" />
              </parameter>
              <parameter name="cursorName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetCursor" id="M:MControl.Drawing.McPaint.GetCursor(System.String,System.String)" access="Public" contract="Static">
              <type name="Cursor" id="T:System.Windows.Forms.Cursor" />
              <parameter name="assemblyName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="cursorName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetCursor" id="M:MControl.Drawing.McPaint.GetCursor(System.Type,System.String)" access="Public" contract="Static">
              <type name="Cursor" id="T:System.Windows.Forms.Cursor" />
              <parameter name="type">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="cursorName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="GetImage" id="Overload:MControl.Drawing.McPaint.GetImage" contract="Static">
            <method name="GetImage" id="M:MControl.Drawing.McPaint.GetImage(System.Reflection.Assembly,System.String)" access="Public" contract="Static">
              <type name="Bitmap" id="T:System.Drawing.Bitmap" />
              <parameter name="imageAssembly">
                <type name="Assembly" id="T:System.Reflection.Assembly" />
              </parameter>
              <parameter name="imageName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetImage" id="M:MControl.Drawing.McPaint.GetImage(System.String,System.String)" access="Public" contract="Static">
              <type name="Bitmap" id="T:System.Drawing.Bitmap" />
              <parameter name="assemblyName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="imageName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetImage" id="M:MControl.Drawing.McPaint.GetImage(System.Type,System.String)" access="Public" contract="Static">
              <type name="Bitmap" id="T:System.Drawing.Bitmap" />
              <parameter name="type">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="imageName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="GetSysColor" id="M:MControl.Drawing.McPaint.GetSysColor(MControl.Drawing.ColorType)" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <parameter name="colorType">
              <type name="ColorType" id="T:MControl.Drawing.ColorType" valueType="true" />
            </parameter>
          </method>
          <method name="Light" id="M:MControl.Drawing.McPaint.Light(System.Drawing.Color,System.Byte)" access="Public" contract="Static">
            <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            <parameter name="baseColor">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
            <parameter name="value">
              <type name="Byte" id="T:System.Byte" valueType="true" />
            </parameter>
          </method>
          <method name="MakeImageBackgroundAlphaZero" id="M:MControl.Drawing.McPaint.MakeImageBackgroundAlphaZero(System.Drawing.Bitmap)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="image">
              <type name="Bitmap" id="T:System.Drawing.Bitmap" />
            </parameter>
          </method>
          <method name="ReplaceImageColor" id="M:MControl.Drawing.McPaint.ReplaceImageColor(System.Drawing.Bitmap,System.Drawing.Color,System.Drawing.Color)" access="Public" contract="Static">
            <type name="Bitmap" id="T:System.Drawing.Bitmap" />
            <parameter name="bmp">
              <type name="Bitmap" id="T:System.Drawing.Bitmap" />
            </parameter>
            <parameter name="colorForReplace">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
            <parameter name="replacedColor">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
          </method>
          <method name="ScrollWindow" id="M:MControl.Drawing.McPaint.ScrollWindow(System.IntPtr,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="xAmount">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="yAmount">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
        </class>
        <class name="McPens" id="T:MControl.Drawing.McPens" access="Public" namespace="MControl.Drawing" displayName="McPens" sealed="true">
          <property name="ControlText" id="P:MControl.Drawing.McPens.ControlText" access="Public" contract="Static">
            <type name="Pen" id="T:System.Drawing.Pen" />
            <get access="Public" />
          </property>
          <property name="Selected" id="P:MControl.Drawing.McPens.Selected" access="Public" contract="Static">
            <type name="Pen" id="T:System.Drawing.Pen" />
            <get access="Public" />
          </property>
          <property name="SelectedText" id="P:MControl.Drawing.McPens.SelectedText" access="Public" contract="Static">
            <type name="Pen" id="T:System.Drawing.Pen" />
            <get access="Public" />
          </property>
        </class>
        <class name="TextUtils" id="T:MControl.Drawing.TextUtils" access="Public" namespace="MControl.Drawing" displayName="TextUtils">
          <method name="DrawReverseString" id="M:MControl.Drawing.TextUtils.DrawReverseString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Rectangle,System.Drawing.Brush,System.Drawing.StringFormat)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="g">
              <type name="Graphics" id="T:System.Drawing.Graphics" />
            </parameter>
            <parameter name="drawText">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="drawFont">
              <type name="Font" id="T:System.Drawing.Font" />
            </parameter>
            <parameter name="drawRect">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="drawBrush">
              <type name="Brush" id="T:System.Drawing.Brush" />
            </parameter>
            <parameter name="drawFormat">
              <type name="StringFormat" id="T:System.Drawing.StringFormat" />
            </parameter>
          </method>
          <method name="DrawText" id="M:MControl.Drawing.TextUtils.DrawText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Rectangle)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="graphics">
              <type name="Graphics" id="T:System.Drawing.Graphics" />
            </parameter>
            <parameter name="text">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="font">
              <type name="Font" id="T:System.Drawing.Font" />
            </parameter>
            <parameter name="rect">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="GetTextSize" id="Overload:MControl.Drawing.TextUtils.GetTextSize" contract="Static">
            <method name="GetTextSize" id="M:MControl.Drawing.TextUtils.GetTextSize(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Size)" access="Public" contract="Static">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
              <parameter name="graphics">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="font">
                <type name="Font" id="T:System.Drawing.Font" />
              </parameter>
              <parameter name="size">
                <type name="Size" id="T:System.Drawing.Size" valueType="true" />
              </parameter>
            </method>
            <method name="GetTextSize" id="M:MControl.Drawing.TextUtils.GetTextSize(System.Drawing.Graphics,System.String,System.Drawing.Font)" access="Public" contract="Static">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
              <parameter name="graphics">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="font">
                <type name="Font" id="T:System.Drawing.Font" />
              </parameter>
            </method>
            <method name="GetTextSize" id="M:MControl.Drawing.TextUtils.GetTextSize(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Rectangle@,MControl.Win32.DrawTextFormatFlags)" access="Public" contract="Static">
              <type name="Size" id="T:System.Drawing.Size" valueType="true" />
              <parameter name="graphics">
                <type name="Graphics" id="T:System.Drawing.Graphics" />
              </parameter>
              <parameter name="text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="font">
                <type name="Font" id="T:System.Drawing.Font" />
              </parameter>
              <parameter name="rc" direction="ref">
                <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
              </parameter>
              <parameter name="drawFlags">
                <type name="DrawTextFormatFlags" id="T:MControl.Win32.DrawTextFormatFlags" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
        </class>
        <structure name="RoundedRectangle" id="T:MControl.Drawing.RoundedRectangle" access="Public" namespace="MControl.Drawing" displayName="RoundedRectangle">
          <constructor name=".ctor" id="M:MControl.Drawing.RoundedRectangle.#ctor(System.Drawing.Rectangle,System.Double)" access="Public" contract="Normal">
            <parameter name="rect">
              <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            </parameter>
            <parameter name="roundValue">
              <type name="Double" id="T:System.Double" valueType="true" />
            </parameter>
          </constructor>
          <property name="Rectangle" id="P:MControl.Drawing.RoundedRectangle.Rectangle" access="Public" contract="Normal">
            <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="RoundValue" id="P:MControl.Drawing.RoundedRectangle.RoundValue" access="Public" contract="Normal">
            <type name="Double" id="T:System.Double" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <method name="ToGraphicsPath" id="M:MControl.Drawing.RoundedRectangle.ToGraphicsPath" access="Public" contract="Normal">
            <type name="GraphicsPath" id="T:System.Drawing.Drawing2D.GraphicsPath" />
          </method>
        </structure>
        <enumeration name="ColorType" id="T:MControl.Drawing.ColorType" displayName="ColorType" namespace="MControl.Drawing" access="Public">
          <field name="COLOR_3DDKSHADOW" id="F:MControl.Drawing.ColorType.COLOR_3DDKSHADOW" value="21" />
          <field name="COLOR_3DLIGHT" id="F:MControl.Drawing.ColorType.COLOR_3DLIGHT" value="22" />
          <field name="COLOR_ACTIVEBORDER" id="F:MControl.Drawing.ColorType.COLOR_ACTIVEBORDER" value="10" />
          <field name="COLOR_ACTIVECAPTION" id="F:MControl.Drawing.ColorType.COLOR_ACTIVECAPTION" value="2" />
          <field name="COLOR_APPWORKSPACE" id="F:MControl.Drawing.ColorType.COLOR_APPWORKSPACE" value="12" />
          <field name="COLOR_BACKGROUND" id="F:MControl.Drawing.ColorType.COLOR_BACKGROUND" value="1" />
          <field name="COLOR_BTNFACE" id="F:MControl.Drawing.ColorType.COLOR_BTNFACE" value="15" />
          <field name="COLOR_BTNHIGHLIGHT" id="F:MControl.Drawing.ColorType.COLOR_BTNHIGHLIGHT" value="20" />
          <field name="COLOR_BTNSHADOW" id="F:MControl.Drawing.ColorType.COLOR_BTNSHADOW" value="16" />
          <field name="COLOR_BTNTEXT" id="F:MControl.Drawing.ColorType.COLOR_BTNTEXT" value="18" />
          <field name="COLOR_CAPTIONTEXT" id="F:MControl.Drawing.ColorType.COLOR_CAPTIONTEXT" value="9" />
          <field name="COLOR_GRADIENTACTIVECAPTION" id="F:MControl.Drawing.ColorType.COLOR_GRADIENTACTIVECAPTION" value="27" />
          <field name="COLOR_GRADIENTINACTIVECAPTION" id="F:MControl.Drawing.ColorType.COLOR_GRADIENTINACTIVECAPTION" value="28" />
          <field name="COLOR_GRAYTEXT" id="F:MControl.Drawing.ColorType.COLOR_GRAYTEXT" value="17" />
          <field name="COLOR_HIGHLIGHT" id="F:MControl.Drawing.ColorType.COLOR_HIGHLIGHT" value="13" />
          <field name="COLOR_HIGHLIGHTTEXT" id="F:MControl.Drawing.ColorType.COLOR_HIGHLIGHTTEXT" value="14" />
          <field name="COLOR_HOTLIGHT" id="F:MControl.Drawing.ColorType.COLOR_HOTLIGHT" value="26" />
          <field name="COLOR_INACTIVEBORDER" id="F:MControl.Drawing.ColorType.COLOR_INACTIVEBORDER" value="11" />
          <field name="COLOR_INACTIVECAPTION" id="F:MControl.Drawing.ColorType.COLOR_INACTIVECAPTION" value="3" />
          <field name="COLOR_INACTIVECAPTIONTEXT" id="F:MControl.Drawing.ColorType.COLOR_INACTIVECAPTIONTEXT" value="19" />
          <field name="COLOR_INFOBK" id="F:MControl.Drawing.ColorType.COLOR_INFOBK" value="24" />
          <field name="COLOR_INFOTEXT" id="F:MControl.Drawing.ColorType.COLOR_INFOTEXT" value="23" />
          <field name="COLOR_MENU" id="F:MControl.Drawing.ColorType.COLOR_MENU" value="4" />
          <field name="COLOR_MENUBAR" id="F:MControl.Drawing.ColorType.COLOR_MENUBAR" value="30" />
          <field name="COLOR_MENUHILIGHT" id="F:MControl.Drawing.ColorType.COLOR_MENUHILIGHT" value="29" />
          <field name="COLOR_MENUTEXT" id="F:MControl.Drawing.ColorType.COLOR_MENUTEXT" value="7" />
          <field name="COLOR_SCROLLBAR" id="F:MControl.Drawing.ColorType.COLOR_SCROLLBAR" value="0" />
          <field name="COLOR_WINDOW" id="F:MControl.Drawing.ColorType.COLOR_WINDOW" value="5" />
          <field name="COLOR_WINDOWFRAME" id="F:MControl.Drawing.ColorType.COLOR_WINDOWFRAME" value="6" />
          <field name="COLOR_WINDOWTEXT" id="F:MControl.Drawing.ColorType.COLOR_WINDOWTEXT" value="8" />
        </enumeration>
        <enumeration name="CommandState" id="T:MControl.Drawing.CommandState" displayName="CommandState" namespace="MControl.Drawing" access="Public">
          <field name="Normal" id="F:MControl.Drawing.CommandState.Normal" value="0" />
          <field name="HotTrack" id="F:MControl.Drawing.CommandState.HotTrack" value="1" />
          <field name="Pushed" id="F:MControl.Drawing.CommandState.Pushed" value="2" />
        </enumeration>
        <enumeration name="FrameStyle" id="T:MControl.Drawing.FrameStyle" displayName="FrameStyle" namespace="MControl.Drawing" access="Public">
          <field name="Dashed" id="F:MControl.Drawing.FrameStyle.Dashed" value="0" />
          <field name="Thick" id="F:MControl.Drawing.FrameStyle.Thick" value="1" />
        </enumeration>
        <enumeration name="Gradient3DBorderStyle" id="T:MControl.Drawing.Gradient3DBorderStyle" displayName="Gradient3DBorderStyle" namespace="MControl.Drawing" access="Public">
          <field name="Raised" id="F:MControl.Drawing.Gradient3DBorderStyle.Raised" value="1" />
          <field name="Sunken" id="F:MControl.Drawing.Gradient3DBorderStyle.Sunken" value="2" />
        </enumeration>
        <enumeration name="McDrawMode" id="T:MControl.Drawing.McDrawMode" displayName="McDrawMode" namespace="MControl.Drawing" access="Public">
          <field name="R2_BLACK" id="F:MControl.Drawing.McDrawMode.R2_BLACK" value="1" />
          <field name="R2_COPYPEN" id="F:MControl.Drawing.McDrawMode.R2_COPYPEN" value="13" />
          <field name="R2_MASKNOTPEN" id="F:MControl.Drawing.McDrawMode.R2_MASKNOTPEN" value="3" />
          <field name="R2_MASKPEN" id="F:MControl.Drawing.McDrawMode.R2_MASKPEN" value="9" />
          <field name="R2_MASKPENNOT" id="F:MControl.Drawing.McDrawMode.R2_MASKPENNOT" value="5" />
          <field name="R2_MERGENOTPEN" id="F:MControl.Drawing.McDrawMode.R2_MERGENOTPEN" value="12" />
          <field name="R2_MERGEPEN" id="F:MControl.Drawing.McDrawMode.R2_MERGEPEN" value="15" />
          <field name="R2_MERGEPENNOT" id="F:MControl.Drawing.McDrawMode.R2_MERGEPENNOT" value="14" />
          <field name="R2_NOP" id="F:MControl.Drawing.McDrawMode.R2_NOP" value="11" />
          <field name="R2_NOT" id="F:MControl.Drawing.McDrawMode.R2_NOT" value="6" />
          <field name="R2_NOTCOPYPEN" id="F:MControl.Drawing.McDrawMode.R2_NOTCOPYPEN" value="4" />
          <field name="R2_NOTMASKPEN" id="F:MControl.Drawing.McDrawMode.R2_NOTMASKPEN" value="8" />
          <field name="R2_NOTMERGEPEN" id="F:MControl.Drawing.McDrawMode.R2_NOTMERGEPEN" value="2" />
          <field name="R2_NOTXORPEN" id="F:MControl.Drawing.McDrawMode.R2_NOTXORPEN" value="10" />
          <field name="R2_WHITE" id="F:MControl.Drawing.McDrawMode.R2_WHITE" value="16" />
          <field name="R2_XORPEN" id="F:MControl.Drawing.McDrawMode.R2_XORPEN" value="7" />
        </enumeration>
      </namespace>
      <namespace name="MControl.Loggers" id="N:MControl.Loggers">
        <class name="AsyncLogger" id="T:MControl.Loggers.AsyncLogger" access="Public" namespace="MControl.Loggers" displayName="AsyncLogger">
          <property name="Instance" id="P:MControl.Loggers.AsyncLogger.Instance" access="Public" contract="Static">
            <type name="AsyncLogger" id="T:MControl.Loggers.AsyncLogger" />
            <get access="Public" />
          </property>
          <property name="Pattern" id="P:MControl.Loggers.AsyncLogger.Pattern" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <method name="Dispose" id="M:MControl.Loggers.AsyncLogger.Dispose" access="Public" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="Finalize" id="M:MControl.Loggers.AsyncLogger.Finalize" access="Family" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="RegisterServer" id="M:MControl.Loggers.AsyncLogger.RegisterServer(MControl.Loggers.ILogger)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="server">
              <type name="ILogger" id="T:MControl.Loggers.ILogger" />
            </parameter>
          </method>
          <method name="WriteError" id="M:MControl.Loggers.AsyncLogger.WriteError(System.Exception)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="ex">
              <type name="Exception" id="T:System.Exception" />
            </parameter>
          </method>
          <methodOverload name="WriteLoge" id="Overload:MControl.Loggers.AsyncLogger.WriteLoge">
            <method name="WriteLoge" id="M:MControl.Loggers.AsyncLogger.WriteLoge(System.String)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="message">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="WriteLoge" id="M:MControl.Loggers.AsyncLogger.WriteLoge(System.String,MControl.Loggers.Mode)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="message">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="mode">
                <type name="Mode" id="T:MControl.Loggers.Mode" valueType="true" />
              </parameter>
            </method>
            <method name="WriteLoge" id="M:MControl.Loggers.AsyncLogger.WriteLoge(System.String,MControl.Loggers.Mode,System.String[])" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="message">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="mode">
                <type name="Mode" id="T:MControl.Loggers.Mode" valueType="true" />
              </parameter>
              <parameter name="param" isParamArray="true">
                <type name="String" id="T:System.String">
                  <array rank="1" />
                </type>
                <attribute name="ParamArrayAttribute" id="T:System.ParamArrayAttribute" />
              </parameter>
            </method>
            <method name="WriteLoge" id="M:MControl.Loggers.AsyncLogger.WriteLoge(System.String,System.String[])" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="message">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="param" isParamArray="true">
                <type name="String" id="T:System.String">
                  <array rank="1" />
                </type>
                <attribute name="ParamArrayAttribute" id="T:System.ParamArrayAttribute" />
              </parameter>
            </method>
          </methodOverload>
        </class>
        <class name="EventLogger" id="T:MControl.Loggers.EventLogger" access="Public" namespace="MControl.Loggers" displayName="EventLogger">
          <implements name="ILogger" id="T:MControl.Loggers.ILogger" />
          <constructor name=".ctor" id="M:MControl.Loggers.EventLogger.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Loggers.EventLogger" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="Close" id="M:MControl.Loggers.EventLogger.Close" access="Public" contract="Final">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="Close" id="M:MControl.Loggers.ILogger.Close" interface="ILogger" interfaceId="T:MControl.Loggers.ILogger" declaringType="MControl.Loggers.ILogger" />
          </method>
          <method name="Dispose" id="M:MControl.Loggers.EventLogger.Dispose" access="Public" contract="Final">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="Dispose" id="M:MControl.Loggers.ILogger.Dispose" interface="ILogger" interfaceId="T:MControl.Loggers.ILogger" declaringType="MControl.Loggers.ILogger" />
          </method>
          <method name="WriteLoge" id="M:MControl.Loggers.EventLogger.WriteLoge(System.String)" access="Public" contract="Final">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="WriteLoge" id="M:MControl.Loggers.ILogger.WriteLoge(System.String)" interface="ILogger" interfaceId="T:MControl.Loggers.ILogger" declaringType="MControl.Loggers.ILogger" />
            <parameter name="message">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="FileLogger" id="T:MControl.Loggers.FileLogger" access="Public" namespace="MControl.Loggers" displayName="FileLogger">
          <implements name="ILogger" id="T:MControl.Loggers.ILogger" />
          <constructor name=".ctor" id="M:MControl.Loggers.FileLogger.#ctor(System.String,System.Boolean)" access="Public" contract="Normal">
            <parameter name="fileName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="autoFlush">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </constructor>
          <property name="FileName" id="P:MControl.Loggers.FileLogger.FileName" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
          </property>
          <method name="Close" id="M:MControl.Loggers.FileLogger.Close" access="Public" contract="Final">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="Close" id="M:MControl.Loggers.ILogger.Close" interface="ILogger" interfaceId="T:MControl.Loggers.ILogger" declaringType="MControl.Loggers.ILogger" />
          </method>
          <method name="Dispose" id="M:MControl.Loggers.FileLogger.Dispose" access="Public" contract="Final">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="Dispose" id="M:MControl.Loggers.ILogger.Dispose" interface="ILogger" interfaceId="T:MControl.Loggers.ILogger" declaringType="MControl.Loggers.ILogger" />
          </method>
          <method name="Init" id="M:MControl.Loggers.FileLogger.Init" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="WriteLoge" id="M:MControl.Loggers.FileLogger.WriteLoge(System.String)" access="Public" contract="Final">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="WriteLoge" id="M:MControl.Loggers.ILogger.WriteLoge(System.String)" interface="ILogger" interfaceId="T:MControl.Loggers.ILogger" declaringType="MControl.Loggers.ILogger" />
            <parameter name="message">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="ListBoxLogger" id="T:MControl.Loggers.ListBoxLogger" access="Public" namespace="MControl.Loggers" displayName="ListBoxLogger">
          <implements name="ILogger" id="T:MControl.Loggers.ILogger" />
          <constructor name=".ctor" id="M:MControl.Loggers.ListBoxLogger.#ctor(System.Windows.Forms.ListBox)" access="Public" contract="Normal">
            <parameter name="listBox">
              <type name="ListBox" id="T:System.Windows.Forms.ListBox" />
            </parameter>
          </constructor>
          <method name="Close" id="M:MControl.Loggers.ListBoxLogger.Close" access="Public" contract="Final">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="Close" id="M:MControl.Loggers.ILogger.Close" interface="ILogger" interfaceId="T:MControl.Loggers.ILogger" declaringType="MControl.Loggers.ILogger" />
          </method>
          <method name="Dispose" id="M:MControl.Loggers.ListBoxLogger.Dispose" access="Public" contract="Final">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="Dispose" id="M:MControl.Loggers.ILogger.Dispose" interface="ILogger" interfaceId="T:MControl.Loggers.ILogger" declaringType="MControl.Loggers.ILogger" />
          </method>
          <method name="WriteLoge" id="M:MControl.Loggers.ListBoxLogger.WriteLoge(System.String)" access="Public" contract="Final">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="WriteLoge" id="M:MControl.Loggers.ILogger.WriteLoge(System.String)" interface="ILogger" interfaceId="T:MControl.Loggers.ILogger" declaringType="MControl.Loggers.ILogger" />
            <parameter name="message">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="Logger" id="T:MControl.Loggers.Logger" access="Public" namespace="MControl.Loggers" displayName="Logger">
          <implements name="IDisposable" id="T:System.IDisposable" />
          <property name="Instance" id="P:MControl.Loggers.Logger.Instance" access="Public" contract="Static">
            <type name="Logger" id="T:MControl.Loggers.Logger" />
            <get access="Public" />
          </property>
          <property name="Pattern" id="P:MControl.Loggers.Logger.Pattern" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <method name="Close" id="M:MControl.Loggers.Logger.Close" access="Public" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="Dispose" id="M:MControl.Loggers.Logger.Dispose" access="Public" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="Dispose" id="M:System.IDisposable.Dispose" interface="IDisposable" interfaceId="T:System.IDisposable" declaringType="System.IDisposable" />
          </method>
          <method name="Finalize" id="M:MControl.Loggers.Logger.Finalize" access="Family" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="RegisterLoggers" id="M:MControl.Loggers.Logger.RegisterLoggers(MControl.Loggers.ILogger)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="logger">
              <type name="ILogger" id="T:MControl.Loggers.ILogger" />
            </parameter>
          </method>
          <method name="WriteError" id="M:MControl.Loggers.Logger.WriteError(System.Exception)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="ex">
              <type name="Exception" id="T:System.Exception" />
            </parameter>
          </method>
          <methodOverload name="WriteLoge" id="Overload:MControl.Loggers.Logger.WriteLoge">
            <method name="WriteLoge" id="M:MControl.Loggers.Logger.WriteLoge(System.String)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="message">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="WriteLoge" id="M:MControl.Loggers.Logger.WriteLoge(System.String,MControl.Loggers.Mode)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="message">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="mode">
                <type name="Mode" id="T:MControl.Loggers.Mode" valueType="true" />
              </parameter>
            </method>
            <method name="WriteLoge" id="M:MControl.Loggers.Logger.WriteLoge(System.String,MControl.Loggers.Mode,System.String[])" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="message">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="mode">
                <type name="Mode" id="T:MControl.Loggers.Mode" valueType="true" />
              </parameter>
              <parameter name="param" isParamArray="true">
                <type name="String" id="T:System.String">
                  <array rank="1" />
                </type>
                <attribute name="ParamArrayAttribute" id="T:System.ParamArrayAttribute" />
              </parameter>
            </method>
            <method name="WriteLoge" id="M:MControl.Loggers.Logger.WriteLoge(System.String,System.String[])" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="message">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="param" isParamArray="true">
                <type name="String" id="T:System.String">
                  <array rank="1" />
                </type>
                <attribute name="ParamArrayAttribute" id="T:System.ParamArrayAttribute" />
              </parameter>
            </method>
          </methodOverload>
        </class>
        <class name="TextBoxLogger" id="T:MControl.Loggers.TextBoxLogger" access="Public" namespace="MControl.Loggers" displayName="TextBoxLogger">
          <implements name="ILogger" id="T:MControl.Loggers.ILogger" />
          <constructor name=".ctor" id="M:MControl.Loggers.TextBoxLogger.#ctor(System.Windows.Forms.TextBox)" access="Public" contract="Normal">
            <parameter name="txtBox">
              <type name="TextBox" id="T:System.Windows.Forms.TextBox" />
            </parameter>
          </constructor>
          <method name="Close" id="M:MControl.Loggers.TextBoxLogger.Close" access="Public" contract="Final">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="Close" id="M:MControl.Loggers.ILogger.Close" interface="ILogger" interfaceId="T:MControl.Loggers.ILogger" declaringType="MControl.Loggers.ILogger" />
          </method>
          <method name="Dispose" id="M:MControl.Loggers.TextBoxLogger.Dispose" access="Public" contract="Final">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="Dispose" id="M:MControl.Loggers.ILogger.Dispose" interface="ILogger" interfaceId="T:MControl.Loggers.ILogger" declaringType="MControl.Loggers.ILogger" />
          </method>
          <method name="WriteLoge" id="M:MControl.Loggers.TextBoxLogger.WriteLoge(System.String)" access="Public" contract="Final">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="WriteLoge" id="M:MControl.Loggers.ILogger.WriteLoge(System.String)" interface="ILogger" interfaceId="T:MControl.Loggers.ILogger" declaringType="MControl.Loggers.ILogger" />
            <parameter name="message">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="TraceWindowLogger" id="T:MControl.Loggers.TraceWindowLogger" access="Public" namespace="MControl.Loggers" displayName="TraceWindowLogger">
          <implements name="ILogger" id="T:MControl.Loggers.ILogger" />
          <constructor name=".ctor" id="M:MControl.Loggers.TraceWindowLogger.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Loggers.TraceWindowLogger" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="Close" id="M:MControl.Loggers.TraceWindowLogger.Close" access="Public" contract="Final">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="Close" id="M:MControl.Loggers.ILogger.Close" interface="ILogger" interfaceId="T:MControl.Loggers.ILogger" declaringType="MControl.Loggers.ILogger" />
          </method>
          <method name="Dispose" id="M:MControl.Loggers.TraceWindowLogger.Dispose" access="Public" contract="Final">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="Dispose" id="M:MControl.Loggers.ILogger.Dispose" interface="ILogger" interfaceId="T:MControl.Loggers.ILogger" declaringType="MControl.Loggers.ILogger" />
          </method>
          <method name="WriteLoge" id="M:MControl.Loggers.TraceWindowLogger.WriteLoge(System.String)" access="Public" contract="Final">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="WriteLoge" id="M:MControl.Loggers.ILogger.WriteLoge(System.String)" interface="ILogger" interfaceId="T:MControl.Loggers.ILogger" declaringType="MControl.Loggers.ILogger" />
            <parameter name="message">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <interface name="ILogger" id="T:MControl.Loggers.ILogger" access="Public" namespace="MControl.Loggers" displayName="ILogger">
          <implementedBy id="T:MControl.Loggers.EventLogger" displayName="MControl.Loggers.EventLogger" />
          <implementedBy id="T:MControl.Loggers.FileLogger" displayName="MControl.Loggers.FileLogger" />
          <implementedBy id="T:MControl.Loggers.ListBoxLogger" displayName="MControl.Loggers.ListBoxLogger" />
          <implementedBy id="T:MControl.Loggers.TextBoxLogger" displayName="MControl.Loggers.TextBoxLogger" />
          <implementedBy id="T:MControl.Loggers.TraceWindowLogger" displayName="MControl.Loggers.TraceWindowLogger" />
          <method name="Close" id="M:MControl.Loggers.ILogger.Close" access="Public" contract="Abstract">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="Dispose" id="M:MControl.Loggers.ILogger.Dispose" access="Public" contract="Abstract">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="WriteLoge" id="M:MControl.Loggers.ILogger.WriteLoge(System.String)" access="Public" contract="Abstract">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="message">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </interface>
        <enumeration name="Mode" id="T:MControl.Loggers.Mode" displayName="Mode" namespace="MControl.Loggers" access="Public">
          <field name="INFO" id="F:MControl.Loggers.Mode.INFO" value="0" />
          <field name="DEBUG" id="F:MControl.Loggers.Mode.DEBUG" value="1" />
          <field name="WARNING" id="F:MControl.Loggers.Mode.WARNING" value="2" />
          <field name="ERROR" id="F:MControl.Loggers.Mode.ERROR" value="3" />
        </enumeration>
      </namespace>
      <namespace name="MControl.Net" id="N:MControl.Net">
        <class name="NetUtils" id="T:MControl.Net.NetUtils" access="Public" namespace="MControl.Net" displayName="NetUtils" abstract="true" />
      </namespace>
      <namespace name="MControl.Runtime" id="N:MControl.Runtime">
        <class name="AssemblyExec" id="T:MControl.Runtime.AssemblyExec" access="Public" namespace="MControl.Runtime" displayName="AssemblyExec">
          <constructor name=".ctor" id="M:MControl.Runtime.AssemblyExec.#ctor(System.String,System.String)" access="Public" contract="Normal">
            <parameter name="fileNname">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="domainName">
              <type name="String" id="T:System.String" />
            </parameter>
          </constructor>
          <method name="Execute" id="M:MControl.Runtime.AssemblyExec.Execute(System.String[])" access="Public" contract="Normal">
            <type name="Object" id="T:System.Object" />
            <parameter name="args">
              <type name="String" id="T:System.String">
                <array rank="1" />
              </type>
            </parameter>
          </method>
          <method name="InvokeAssembly" id="M:MControl.Runtime.AssemblyExec.InvokeAssembly(System.String,System.String,System.String,System.Object[])" access="Public" contract="Static">
            <type name="Object" id="T:System.Object" />
            <parameter name="fileName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="ClassName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="methodName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="Params">
              <type name="Object" id="T:System.Object">
                <array rank="1" />
              </type>
            </parameter>
          </method>
          <method name="Unload" id="M:MControl.Runtime.AssemblyExec.Unload" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
        </class>
        <class name="AssemblyResolver" id="T:MControl.Runtime.AssemblyResolver" access="Public" namespace="MControl.Runtime" displayName="AssemblyResolver">
          <constructor name=".ctor" id="M:MControl.Runtime.AssemblyResolver.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Runtime.AssemblyResolver" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="ignoreFileName" id="F:MControl.Runtime.AssemblyResolver.ignoreFileName" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
          </field>
          <method name="FindAssembly" id="M:MControl.Runtime.AssemblyResolver.FindAssembly(System.String,System.String)" access="Public" contract="Static">
            <type name="String" id="T:System.String">
              <array rank="1" />
            </type>
            <parameter name="nmSpace">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="workingDir">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="FindGlobalAssembly" id="M:MControl.Runtime.AssemblyResolver.FindGlobalAssembly(System.String)" access="Public" contract="Static">
            <type name="String" id="T:System.String">
              <array rank="1" />
            </type>
            <parameter name="namespaceStr">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="FindLocalAssembly" id="M:MControl.Runtime.AssemblyResolver.FindLocalAssembly(System.String,System.String)" access="Public" contract="Static">
            <type name="String" id="T:System.String">
              <array rank="1" />
            </type>
            <parameter name="refNamespace">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="workingDir">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ResolveAssembly" id="M:MControl.Runtime.AssemblyResolver.ResolveAssembly(System.String,System.String)" access="Public" contract="Static">
            <type name="Assembly" id="T:System.Reflection.Assembly" />
            <parameter name="assemblyName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="workingDir">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="MemoryStreamUtils" id="T:MControl.Runtime.MemoryStreamUtils" access="Public" namespace="MControl.Runtime" displayName="MemoryStreamUtils">
          <constructor name=".ctor" id="M:MControl.Runtime.MemoryStreamUtils.#ctor(System.Collections.Hashtable)" access="Public" contract="Normal">
            <parameter name="hashTabl">
              <type name="Hashtable" id="T:System.Collections.Hashtable" />
            </parameter>
          </constructor>
          <method name="Load" id="M:MControl.Runtime.MemoryStreamUtils.Load(System.String)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="filename">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="Save" id="M:MControl.Runtime.MemoryStreamUtils.Save(System.String)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="filename">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="RemoteExecAssembly" id="T:MControl.Runtime.RemoteExecAssembly" access="Public" namespace="MControl.Runtime" displayName="RemoteExecAssembly">
          <base name="MarshalByRefObject" id="T:System.MarshalByRefObject" displayName="System.MarshalByRefObject" />
          <constructor name=".ctor" id="M:MControl.Runtime.RemoteExecAssembly.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Runtime.RemoteExecAssembly" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="ExecuteAssembly" id="M:MControl.Runtime.RemoteExecAssembly.ExecuteAssembly(System.String,System.String[])" access="Public" contract="Normal">
            <type name="Object" id="T:System.Object" />
            <parameter name="filename">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="args">
              <type name="String" id="T:System.String">
                <array rank="1" />
              </type>
            </parameter>
          </method>
          <method name="ResolveEventHandler" id="M:MControl.Runtime.RemoteExecAssembly.ResolveEventHandler(System.Object,System.ResolveEventArgs)" access="Public" contract="Normal">
            <type name="Assembly" id="T:System.Reflection.Assembly" />
            <parameter name="sender">
              <type name="Object" id="T:System.Object" />
            </parameter>
            <parameter name="args">
              <type name="ResolveEventArgs" id="T:System.ResolveEventArgs" />
            </parameter>
          </method>
        </class>
        <class name="Serialization" id="T:MControl.Runtime.Serialization" access="Public" namespace="MControl.Runtime" displayName="Serialization">
          <constructor name=".ctor" id="M:MControl.Runtime.Serialization.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Runtime.Serialization" /> class.</autoText></summary></documentation>
          </constructor>
          <methodOverload name="BinDeserialize" id="Overload:MControl.Runtime.Serialization.BinDeserialize" contract="Static">
            <method name="BinDeserialize" id="M:MControl.Runtime.Serialization.BinDeserialize(System.IO.Stream)" access="Public" contract="Static">
              <type name="Object" id="T:System.Object" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
            </method>
            <method name="BinDeserialize" id="M:MControl.Runtime.Serialization.BinDeserialize(System.String)" access="Public" contract="Static">
              <type name="Object" id="T:System.Object" />
              <parameter name="p_strFileName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="BinSerialize" id="Overload:MControl.Runtime.Serialization.BinSerialize" contract="Static">
            <method name="BinSerialize" id="M:MControl.Runtime.Serialization.BinSerialize(System.IO.Stream,System.Object)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Object">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
            <method name="BinSerialize" id="M:MControl.Runtime.Serialization.BinSerialize(System.String,System.Object)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_strFileName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="p_Object">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
          </methodOverload>
          <method name="DeserializeFromBase64" id="M:MControl.Runtime.Serialization.DeserializeFromBase64(System.String)" access="Public" contract="Static">
            <type name="Object" id="T:System.Object" />
            <parameter name="base64String">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="DeserializeFromXml" id="Overload:MControl.Runtime.Serialization.DeserializeFromXml" contract="Static">
            <method name="DeserializeFromXml" id="M:MControl.Runtime.Serialization.DeserializeFromXml(System.String,System.Type)" access="Public" contract="Static">
              <type name="Object" id="T:System.Object" />
              <parameter name="smlString">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="type">
                <type name="Type" id="T:System.Type" />
              </parameter>
            </method>
            <method name="DeserializeFromXml" id="M:MControl.Runtime.Serialization.DeserializeFromXml(System.String,System.Type,System.String)" access="Public" contract="Static">
              <type name="Object" id="T:System.Object" />
              <parameter name="smlString">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="type">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="encode">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="SerializeToBase64" id="M:MControl.Runtime.Serialization.SerializeToBase64(System.Object)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="body">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <methodOverload name="SerializeToXml" id="Overload:MControl.Runtime.Serialization.SerializeToXml" contract="Static">
            <method name="SerializeToXml" id="M:MControl.Runtime.Serialization.SerializeToXml(System.Object)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="CodeObject">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
            <method name="SerializeToXml" id="M:MControl.Runtime.Serialization.SerializeToXml(System.Object,System.Type)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="body">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="type">
                <type name="Type" id="T:System.Type" />
              </parameter>
            </method>
            <method name="SerializeToXml" id="M:MControl.Runtime.Serialization.SerializeToXml(System.Object,System.Type,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="body">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="type">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="encode">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
        </class>
      </namespace>
      <namespace name="MControl.Threading" id="N:MControl.Threading">
        <class name="AsyncCallEventArgs" id="T:MControl.Threading.AsyncCallEventArgs" access="Public" namespace="MControl.Threading" displayName="AsyncCallEventArgs">
          <base name="EventArgs" id="T:System.EventArgs" displayName="System.EventArgs" />
          <constructor name=".ctor" id="M:MControl.Threading.AsyncCallEventArgs.#ctor(System.Object)" access="Public" contract="Normal">
            <parameter name="result">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </constructor>
          <property name="Result" id="P:MControl.Threading.AsyncCallEventArgs.Result" access="Public" contract="Normal">
            <type name="Object" id="T:System.Object" />
            <get access="Public" />
          </property>
        </class>
        <class name="AsyncDataResultEventArgs" id="T:MControl.Threading.AsyncDataResultEventArgs" access="Public" namespace="MControl.Threading" displayName="AsyncDataResultEventArgs">
          <base name="EventArgs" id="T:System.EventArgs" displayName="System.EventArgs" />
          <constructor name=".ctor" id="M:MControl.Threading.AsyncDataResultEventArgs.#ctor(System.Data.DataTable)" access="Public" contract="Normal">
            <parameter name="dt">
              <type name="DataTable" id="T:System.Data.DataTable" />
            </parameter>
          </constructor>
          <property name="Table" id="P:MControl.Threading.AsyncDataResultEventArgs.Table" access="Public" contract="Normal">
            <type name="DataTable" id="T:System.Data.DataTable" />
            <get access="Public" />
          </property>
        </class>
        <class name="AsyncInvoke" id="T:MControl.Threading.AsyncInvoke" access="Public" namespace="MControl.Threading" displayName="AsyncInvoke">
          <implements name="IDisposable" id="T:System.IDisposable" />
          <constructor name=".ctor" id="M:MControl.Threading.AsyncInvoke.#ctor(MControl.Threading.AsyncProgressLevel)" access="Public" contract="Normal">
            <parameter name="level">
              <type name="AsyncProgressLevel" id="T:MControl.Threading.AsyncProgressLevel" valueType="true" />
            </parameter>
          </constructor>
          <field name="ExecutionTimer" id="F:MControl.Threading.AsyncInvoke.ExecutionTimer" access="Family" contract="Normal">
            <type name="Timer" id="T:System.Windows.Forms.Timer" />
          </field>
          <field name="_asyncResult" id="F:MControl.Threading.AsyncInvoke._asyncResult" access="Family" contract="Normal">
            <type name="IAsyncResult" id="T:System.IAsyncResult" />
          </field>
          <field name="_currentAsyncState" id="F:MControl.Threading.AsyncInvoke._currentAsyncState" access="Family" contract="Normal">
            <type name="AsyncState" id="T:MControl.Threading.AsyncState" valueType="true" />
          </field>
          <field name="_currentException" id="F:MControl.Threading.AsyncInvoke._currentException" access="Family" contract="Normal">
            <type name="Exception" id="T:System.Exception" />
          </field>
          <field name="_currentExecutionEnd" id="F:MControl.Threading.AsyncInvoke._currentExecutionEnd" access="Family" contract="Normal">
            <type name="DateTime" id="T:System.DateTime" valueType="true" />
          </field>
          <field name="_currentExecutionStart" id="F:MControl.Threading.AsyncInvoke._currentExecutionStart" access="Family" contract="Normal">
            <type name="DateTime" id="T:System.DateTime" valueType="true" />
          </field>
          <field name="_currentExecutionTime" id="F:MControl.Threading.AsyncInvoke._currentExecutionTime" access="Family" contract="Normal">
            <type name="TimeSpan" id="T:System.TimeSpan" valueType="true" />
          </field>
          <field name="_currentMessage" id="F:MControl.Threading.AsyncInvoke._currentMessage" access="Family" contract="Normal">
            <type name="String" id="T:System.String" />
          </field>
          <field name="_currentResult" id="F:MControl.Threading.AsyncInvoke._currentResult" access="Family" contract="Normal">
            <type name="Object" id="T:System.Object" />
          </field>
          <field name="_currentTime" id="F:MControl.Threading.AsyncInvoke._currentTime" access="Family" contract="Normal">
            <type name="String" id="T:System.String" />
          </field>
          <property name="AsyncProgressLevel" id="P:MControl.Threading.AsyncInvoke.AsyncProgressLevel" access="Public" contract="Normal">
            <type name="AsyncProgressLevel" id="T:MControl.Threading.AsyncProgressLevel" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="AsyncResult" id="P:MControl.Threading.AsyncInvoke.AsyncResult" access="Public" contract="Normal">
            <type name="IAsyncResult" id="T:System.IAsyncResult" />
            <get access="Public" />
          </property>
          <property name="AsyncState" id="P:MControl.Threading.AsyncInvoke.AsyncState" access="Public" contract="Normal">
            <type name="AsyncState" id="T:MControl.Threading.AsyncState" valueType="true" />
            <get access="Public" />
          </property>
          <property name="CurrentException" id="P:MControl.Threading.AsyncInvoke.CurrentException" access="Public" contract="Normal">
            <type name="Exception" id="T:System.Exception" />
            <get access="Public" />
          </property>
          <property name="CurrentMessage" id="P:MControl.Threading.AsyncInvoke.CurrentMessage" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
          </property>
          <property name="CurrentResult" id="P:MControl.Threading.AsyncInvoke.CurrentResult" access="Public" contract="Normal">
            <type name="Object" id="T:System.Object" />
            <get access="Public" />
          </property>
          <property name="CurrentTime" id="P:MControl.Threading.AsyncInvoke.CurrentTime" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
          </property>
          <method name="AsyncBeginInvoke" id="M:MControl.Threading.AsyncInvoke.AsyncBeginInvoke(System.Object)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="args">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="Dispose" id="M:MControl.Threading.AsyncInvoke.Dispose" access="Public" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="Dispose" id="M:System.IDisposable.Dispose" interface="IDisposable" interfaceId="T:System.IDisposable" declaringType="System.IDisposable" />
          </method>
          <method name="ExecutionResult" id="M:MControl.Threading.AsyncInvoke.ExecutionResult(System.TimeSpan)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="_currentExecutionTime">
              <type name="TimeSpan" id="T:System.TimeSpan" valueType="true" />
            </parameter>
          </method>
          <method name="OnAsyncCompleted" id="M:MControl.Threading.AsyncInvoke.OnAsyncCompleted(MControl.Threading.AsyncCallEventArgs)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="AsyncCallEventArgs" id="T:MControl.Threading.AsyncCallEventArgs" />
            </parameter>
          </method>
          <method name="OnAsyncProgress" id="M:MControl.Threading.AsyncInvoke.OnAsyncProgress(MControl.Threading.AsyncProgressEventArgs)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="AsyncProgressEventArgs" id="T:MControl.Threading.AsyncProgressEventArgs" />
            </parameter>
          </method>
          <method name="OnCancelExecuting" id="M:MControl.Threading.AsyncInvoke.OnCancelExecuting(System.EventArgs)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="EventArgs" id="T:System.EventArgs" />
            </parameter>
          </method>
          <method name="OnExecuting" id="M:MControl.Threading.AsyncInvoke.OnExecuting" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="OnExecutionTimerTick" id="M:MControl.Threading.AsyncInvoke.OnExecutionTimerTick(System.EventArgs)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="EventArgs" id="T:System.EventArgs" />
            </parameter>
          </method>
          <method name="OnStartProgress" id="M:MControl.Threading.AsyncInvoke.OnStartProgress(System.EventArgs)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="EventArgs" id="T:System.EventArgs" />
            </parameter>
          </method>
          <method name="OnStopProgress" id="M:MControl.Threading.AsyncInvoke.OnStopProgress(System.EventArgs)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="EventArgs" id="T:System.EventArgs" />
            </parameter>
          </method>
          <method name="RunAsyncCall" id="M:MControl.Threading.AsyncInvoke.RunAsyncCall(System.Object)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="args">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="StopCurrentExecution" id="M:MControl.Threading.AsyncInvoke.StopCurrentExecution" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <event name="AsyncCancelExecuting" id="E:MControl.Threading.AsyncInvoke.AsyncCancelExecuting" access="Public" contract="Normal" multicast="true">
            <type name="EventHandler" id="T:System.EventHandler" />
          </event>
          <event name="AsyncCompleted" id="E:MControl.Threading.AsyncInvoke.AsyncCompleted" access="Public" contract="Normal" multicast="true">
            <type name="AsyncCallEventHandler" id="T:MControl.Threading.AsyncCallEventHandler" />
            <eventArgs name="AsyncCallEventArgs" id="T:MControl.Threading.AsyncCallEventArgs">
              <property name="Result" id="P:MControl.Threading.AsyncCallEventArgs.Result" access="Public" contract="Normal">
                <type name="Object" id="T:System.Object" />
                <get access="Public" />
              </property>
            </eventArgs>
          </event>
          <event name="AsyncExecutingWorker" id="E:MControl.Threading.AsyncInvoke.AsyncExecutingWorker" access="Public" contract="Normal" multicast="true">
            <type name="AsyncCallEventHandler" id="T:MControl.Threading.AsyncCallEventHandler" />
            <eventArgs name="AsyncCallEventArgs" id="T:MControl.Threading.AsyncCallEventArgs">
              <property name="Result" id="P:MControl.Threading.AsyncCallEventArgs.Result" access="Public" contract="Normal">
                <type name="Object" id="T:System.Object" />
                <get access="Public" />
              </property>
            </eventArgs>
          </event>
          <event name="AsyncProgress" id="E:MControl.Threading.AsyncInvoke.AsyncProgress" access="Public" contract="Normal" multicast="true">
            <type name="AsyncProgressEventHandler" id="T:MControl.Threading.AsyncProgressEventHandler" />
            <eventArgs name="AsyncProgressEventArgs" id="T:MControl.Threading.AsyncProgressEventArgs" />
          </event>
          <event name="StartProgressEvent" id="E:MControl.Threading.AsyncInvoke.StartProgressEvent" access="Public" contract="Normal" multicast="true">
            <type name="EventHandler" id="T:System.EventHandler" />
          </event>
          <event name="StopProgressEvent" id="E:MControl.Threading.AsyncInvoke.StopProgressEvent" access="Public" contract="Normal" multicast="true">
            <type name="EventHandler" id="T:System.EventHandler" />
          </event>
        </class>
        <class name="AsyncProgressEventArgs" id="T:MControl.Threading.AsyncProgressEventArgs" access="Public" namespace="MControl.Threading" displayName="AsyncProgressEventArgs">
          <base name="EventArgs" id="T:System.EventArgs" displayName="System.EventArgs" />
          <constructor name=".ctor" id="M:MControl.Threading.AsyncProgressEventArgs.#ctor(System.String,MControl.Threading.AsyncProgressLevel)" access="Public" contract="Normal">
            <parameter name="s">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="lvl">
              <type name="AsyncProgressLevel" id="T:MControl.Threading.AsyncProgressLevel" valueType="true" />
            </parameter>
          </constructor>
          <field name="Level" id="F:MControl.Threading.AsyncProgressEventArgs.Level" access="Public" contract="Normal" initOnly="true">
            <type name="AsyncProgressLevel" id="T:MControl.Threading.AsyncProgressLevel" valueType="true" />
          </field>
          <field name="Message" id="F:MControl.Threading.AsyncProgressEventArgs.Message" access="Public" contract="Normal" initOnly="true">
            <type name="String" id="T:System.String" />
          </field>
        </class>
        <class name="AsyncResultEventArgs" id="T:MControl.Threading.AsyncResultEventArgs" access="Public" namespace="MControl.Threading" displayName="AsyncResultEventArgs">
          <base name="EventArgs" id="T:System.EventArgs" displayName="System.EventArgs" />
          <constructor name=".ctor" id="M:MControl.Threading.AsyncResultEventArgs.#ctor(System.IAsyncResult)" access="Public" contract="Normal">
            <parameter name="result">
              <type name="IAsyncResult" id="T:System.IAsyncResult" />
            </parameter>
          </constructor>
          <property name="Result" id="P:MControl.Threading.AsyncResultEventArgs.Result" access="Public" contract="Normal">
            <type name="IAsyncResult" id="T:System.IAsyncResult" />
            <get access="Public" />
          </property>
        </class>
        <class name="AsyncThreadPool" id="T:MControl.Threading.AsyncThreadPool" access="Public" namespace="MControl.Threading" displayName="AsyncThreadPool">
          <implements name="IDisposable" id="T:System.IDisposable" />
          <constructorOverload name=".ctor" id="Overload:MControl.Threading.AsyncThreadPool.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Threading.AsyncThreadPool" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Threading.AsyncThreadPool.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Threading.AsyncThreadPool" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Threading.AsyncThreadPool.#ctor(System.Int32)" access="Public" contract="Normal">
              <parameter name="idleTimeout">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Threading.AsyncThreadPool.#ctor(System.Int32,System.Int32)" access="Public" contract="Normal">
              <parameter name="idleTimeout">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="maxWorkerThreads">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Threading.AsyncThreadPool.#ctor(System.Int32,System.Int32,System.Int32)" access="Public" contract="Normal">
              <parameter name="idleTimeout">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="maxWorkerThreads">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="minWorkerThreads">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Threading.AsyncThreadPool.#ctor(MControl.Threading.ThreadPoolStateInfo)" access="Public" contract="Normal">
              <parameter name="tpStateInfo">
                <type name="ThreadPoolStateInfo" id="T:MControl.Threading.ThreadPoolStateInfo" />
              </parameter>
            </constructor>
          </constructorOverload>
          <field name="DefaultCallToPostExecute" id="F:MControl.Threading.AsyncThreadPool.DefaultCallToPostExecute" access="Public" contract="Static" literal="true" value="PostExecuteCall.Always">
            <type name="PostExecuteCall" id="T:MControl.Threading.PostExecuteCall" valueType="true" />
          </field>
          <field name="DefaultDisposeOfStateObjects" id="F:MControl.Threading.AsyncThreadPool.DefaultDisposeOfStateObjects" access="Public" contract="Static" literal="true" value="False">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
          </field>
          <field name="DefaultIdleTimeout" id="F:MControl.Threading.AsyncThreadPool.DefaultIdleTimeout" access="Public" contract="Static" literal="true" value="60000">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="DefaultMaxWorkerThreads" id="F:MControl.Threading.AsyncThreadPool.DefaultMaxWorkerThreads" access="Public" contract="Static" literal="true" value="25">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="DefaultMinWorkerThreads" id="F:MControl.Threading.AsyncThreadPool.DefaultMinWorkerThreads" access="Public" contract="Static" literal="true" value="0">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="DefaultPostExecuteWorkItemCallback" id="F:MControl.Threading.AsyncThreadPool.DefaultPostExecuteWorkItemCallback" access="Public" contract="Static" initOnly="true">
            <type name="PostExecuteWorkItemCallback" id="T:MControl.Threading.PostExecuteWorkItemCallback" />
          </field>
          <field name="DefaultUseCallerContext" id="F:MControl.Threading.AsyncThreadPool.DefaultUseCallerContext" access="Public" contract="Static" literal="true" value="False">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
          </field>
          <property name="ActiveThreads" id="P:MControl.Threading.AsyncThreadPool.ActiveThreads" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
          <property name="MaxThreads" id="P:MControl.Threading.AsyncThreadPool.MaxThreads" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
          <property name="MinThreads" id="P:MControl.Threading.AsyncThreadPool.MinThreads" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
          <property name="ThreadsInUse" id="P:MControl.Threading.AsyncThreadPool.ThreadsInUse" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
          <property name="WaitingCallbacks" id="P:MControl.Threading.AsyncThreadPool.WaitingCallbacks" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
          <methodOverload name="Abort" id="Overload:MControl.Threading.AsyncThreadPool.Abort">
            <method name="Abort" id="M:MControl.Threading.AsyncThreadPool.Abort" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
            </method>
            <method name="Abort" id="M:MControl.Threading.AsyncThreadPool.Abort(System.Boolean,System.TimeSpan)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="forceAbort">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="timeout">
                <type name="TimeSpan" id="T:System.TimeSpan" valueType="true" />
              </parameter>
            </method>
            <method name="Abort" id="M:MControl.Threading.AsyncThreadPool.Abort(System.Boolean,System.Int32)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="forceAbort">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="millisecondsTimeout">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="Dispose" id="M:MControl.Threading.AsyncThreadPool.Dispose" access="Public" contract="Final">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="Dispose" id="M:System.IDisposable.Dispose" interface="IDisposable" interfaceId="T:System.IDisposable" declaringType="System.IDisposable" />
          </method>
          <method name="Finalize" id="M:MControl.Threading.AsyncThreadPool.Finalize" access="Family" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <methodOverload name="QueueWorkItem" id="Overload:MControl.Threading.AsyncThreadPool.QueueWorkItem">
            <method name="QueueWorkItem" id="M:MControl.Threading.AsyncThreadPool.QueueWorkItem(MControl.Threading.WorkItemCallback)" access="Public" contract="Normal">
              <type name="IWorkItemResult" id="T:MControl.Threading.IWorkItemResult" />
              <parameter name="callback">
                <type name="WorkItemCallback" id="T:MControl.Threading.WorkItemCallback" />
              </parameter>
            </method>
            <method name="QueueWorkItem" id="M:MControl.Threading.AsyncThreadPool.QueueWorkItem(MControl.Threading.WorkItemCallback,System.Object)" access="Public" contract="Normal">
              <type name="IWorkItemResult" id="T:MControl.Threading.IWorkItemResult" />
              <parameter name="callback">
                <type name="WorkItemCallback" id="T:MControl.Threading.WorkItemCallback" />
              </parameter>
              <parameter name="state">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
            <method name="QueueWorkItem" id="M:MControl.Threading.AsyncThreadPool.QueueWorkItem(MControl.Threading.WorkItemCallback,System.Object,MControl.Threading.PostExecuteWorkItemCallback)" access="Public" contract="Normal">
              <type name="IWorkItemResult" id="T:MControl.Threading.IWorkItemResult" />
              <parameter name="callback">
                <type name="WorkItemCallback" id="T:MControl.Threading.WorkItemCallback" />
              </parameter>
              <parameter name="state">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="postExecuteWorkItemCallback">
                <type name="PostExecuteWorkItemCallback" id="T:MControl.Threading.PostExecuteWorkItemCallback" />
              </parameter>
            </method>
            <method name="QueueWorkItem" id="M:MControl.Threading.AsyncThreadPool.QueueWorkItem(MControl.Threading.WorkItemCallback,System.Object,MControl.Threading.PostExecuteWorkItemCallback,MControl.Threading.PostExecuteCall)" access="Public" contract="Normal">
              <type name="IWorkItemResult" id="T:MControl.Threading.IWorkItemResult" />
              <parameter name="callback">
                <type name="WorkItemCallback" id="T:MControl.Threading.WorkItemCallback" />
              </parameter>
              <parameter name="state">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="postExecuteWorkItemCallback">
                <type name="PostExecuteWorkItemCallback" id="T:MControl.Threading.PostExecuteWorkItemCallback" />
              </parameter>
              <parameter name="callToPostExecute">
                <type name="PostExecuteCall" id="T:MControl.Threading.PostExecuteCall" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="WaitAll" id="Overload:MControl.Threading.AsyncThreadPool.WaitAll" contract="Static">
            <method name="WaitAll" id="M:MControl.Threading.AsyncThreadPool.WaitAll(MControl.Threading.IWorkItemResult[])" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="workItemResults">
                <type name="IWorkItemResult" id="T:MControl.Threading.IWorkItemResult">
                  <array rank="1" />
                </type>
              </parameter>
            </method>
            <method name="WaitAll" id="M:MControl.Threading.AsyncThreadPool.WaitAll(MControl.Threading.IWorkItemResult[],System.TimeSpan,System.Boolean)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="workItemResults">
                <type name="IWorkItemResult" id="T:MControl.Threading.IWorkItemResult">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="timeout">
                <type name="TimeSpan" id="T:System.TimeSpan" valueType="true" />
              </parameter>
              <parameter name="exitContext">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
            <method name="WaitAll" id="M:MControl.Threading.AsyncThreadPool.WaitAll(MControl.Threading.IWorkItemResult[],System.TimeSpan,System.Boolean,System.Threading.WaitHandle)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="workItemResults">
                <type name="IWorkItemResult" id="T:MControl.Threading.IWorkItemResult">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="timeout">
                <type name="TimeSpan" id="T:System.TimeSpan" valueType="true" />
              </parameter>
              <parameter name="exitContext">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="cancelWaitHandle">
                <type name="WaitHandle" id="T:System.Threading.WaitHandle" />
              </parameter>
            </method>
            <method name="WaitAll" id="M:MControl.Threading.AsyncThreadPool.WaitAll(MControl.Threading.IWorkItemResult[],System.Int32,System.Boolean)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="workItemResults">
                <type name="IWorkItemResult" id="T:MControl.Threading.IWorkItemResult">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="millisecondsTimeout">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="exitContext">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
            <method name="WaitAll" id="M:MControl.Threading.AsyncThreadPool.WaitAll(MControl.Threading.IWorkItemResult[],System.Int32,System.Boolean,System.Threading.WaitHandle)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="workItemResults">
                <type name="IWorkItemResult" id="T:MControl.Threading.IWorkItemResult">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="millisecondsTimeout">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="exitContext">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="cancelWaitHandle">
                <type name="WaitHandle" id="T:System.Threading.WaitHandle" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="WaitAny" id="Overload:MControl.Threading.AsyncThreadPool.WaitAny" contract="Static">
            <method name="WaitAny" id="M:MControl.Threading.AsyncThreadPool.WaitAny(MControl.Threading.IWorkItemResult[])" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="workItemResults">
                <type name="IWorkItemResult" id="T:MControl.Threading.IWorkItemResult">
                  <array rank="1" />
                </type>
              </parameter>
            </method>
            <method name="WaitAny" id="M:MControl.Threading.AsyncThreadPool.WaitAny(MControl.Threading.IWorkItemResult[],System.TimeSpan,System.Boolean)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="workItemResults">
                <type name="IWorkItemResult" id="T:MControl.Threading.IWorkItemResult">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="timeout">
                <type name="TimeSpan" id="T:System.TimeSpan" valueType="true" />
              </parameter>
              <parameter name="exitContext">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
            <method name="WaitAny" id="M:MControl.Threading.AsyncThreadPool.WaitAny(MControl.Threading.IWorkItemResult[],System.TimeSpan,System.Boolean,System.Threading.WaitHandle)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="workItemResults">
                <type name="IWorkItemResult" id="T:MControl.Threading.IWorkItemResult">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="timeout">
                <type name="TimeSpan" id="T:System.TimeSpan" valueType="true" />
              </parameter>
              <parameter name="exitContext">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="cancelWaitHandle">
                <type name="WaitHandle" id="T:System.Threading.WaitHandle" />
              </parameter>
            </method>
            <method name="WaitAny" id="M:MControl.Threading.AsyncThreadPool.WaitAny(MControl.Threading.IWorkItemResult[],System.Int32,System.Boolean)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="workItemResults">
                <type name="IWorkItemResult" id="T:MControl.Threading.IWorkItemResult">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="millisecondsTimeout">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="exitContext">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
            <method name="WaitAny" id="M:MControl.Threading.AsyncThreadPool.WaitAny(MControl.Threading.IWorkItemResult[],System.Int32,System.Boolean,System.Threading.WaitHandle)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="workItemResults">
                <type name="IWorkItemResult" id="T:MControl.Threading.IWorkItemResult">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="millisecondsTimeout">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="exitContext">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="cancelWaitHandle">
                <type name="WaitHandle" id="T:System.Threading.WaitHandle" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="WaitForIdle" id="Overload:MControl.Threading.AsyncThreadPool.WaitForIdle">
            <method name="WaitForIdle" id="M:MControl.Threading.AsyncThreadPool.WaitForIdle" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
            </method>
            <method name="WaitForIdle" id="M:MControl.Threading.AsyncThreadPool.WaitForIdle(System.TimeSpan)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="timeout">
                <type name="TimeSpan" id="T:System.TimeSpan" valueType="true" />
              </parameter>
            </method>
            <method name="WaitForIdle" id="M:MControl.Threading.AsyncThreadPool.WaitForIdle(System.Int32)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="millisecondsTimeout">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
        </class>
        <class name="GenericThreadPool" id="T:MControl.Threading.GenericThreadPool" access="Public" namespace="MControl.Threading" displayName="GenericThreadPool">
          <implements name="IDisposable" id="T:System.IDisposable" />
          <constructor name=".ctor" id="M:MControl.Threading.GenericThreadPool.#ctor(System.String,System.Int32,System.Int32)" access="Public" contract="Normal">
            <parameter name="genericName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="minThread">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="maxThread">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </constructor>
          <property name="AvailableThreads" id="P:MControl.Threading.GenericThreadPool.AvailableThreads" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
          <property name="CurrentThreadsWorker" id="P:MControl.Threading.GenericThreadPool.CurrentThreadsWorker" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
          <property name="CurrentWorkItems" id="P:MControl.Threading.GenericThreadPool.CurrentWorkItems" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
          <property name="FixedSize" id="P:MControl.Threading.GenericThreadPool.FixedSize" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
          </property>
          <property name="GenericName" id="P:MControl.Threading.GenericThreadPool.GenericName" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
          </property>
          <property name="IsSynchronized" id="P:MControl.Threading.GenericThreadPool.IsSynchronized" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
          </property>
          <property name="MaxThread" id="P:MControl.Threading.GenericThreadPool.MaxThread" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
          <property name="MinThread" id="P:MControl.Threading.GenericThreadPool.MinThread" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
          <property name="SuspendTimeout" id="P:MControl.Threading.GenericThreadPool.SuspendTimeout" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="SyncRoot" id="P:MControl.Threading.GenericThreadPool.SyncRoot" access="Public" contract="Normal">
            <type name="Object" id="T:System.Object" />
            <get access="Public" />
          </property>
          <methodOverload name="Abort" id="Overload:MControl.Threading.GenericThreadPool.Abort">
            <method name="Abort" id="M:MControl.Threading.GenericThreadPool.Abort" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
            </method>
            <method name="Abort" id="M:MControl.Threading.GenericThreadPool.Abort(System.Boolean,System.TimeSpan)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="forceAbort">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="timeout">
                <type name="TimeSpan" id="T:System.TimeSpan" valueType="true" />
              </parameter>
            </method>
            <method name="Abort" id="M:MControl.Threading.GenericThreadPool.Abort(System.Boolean,System.Int32)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="forceAbort">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="millisecondsTimeout">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="AddThreads" id="M:MControl.Threading.GenericThreadPool.AddThreads(System.Int32)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="threadsCount">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="AsyncWorkItem" id="Overload:MControl.Threading.GenericThreadPool.AsyncWorkItem">
            <method name="AsyncWorkItem" id="M:MControl.Threading.GenericThreadPool.AsyncWorkItem(System.Threading.WaitCallback)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="callback">
                <type name="WaitCallback" id="T:System.Threading.WaitCallback" />
              </parameter>
            </method>
            <method name="AsyncWorkItem" id="M:MControl.Threading.GenericThreadPool.AsyncWorkItem(System.Threading.WaitCallback,System.Object)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="callback">
                <type name="WaitCallback" id="T:System.Threading.WaitCallback" />
              </parameter>
              <parameter name="state">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
          </methodOverload>
          <method name="CopyTo" id="M:MControl.Threading.GenericThreadPool.CopyTo(System.Threading.Thread[],System.Int32)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="array">
              <type name="Thread" id="T:System.Threading.Thread">
                <array rank="1" />
              </type>
            </parameter>
            <parameter name="arrayIndex">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="Dispose" id="M:MControl.Threading.GenericThreadPool.Dispose" access="Public" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="Dispose" id="M:System.IDisposable.Dispose" interface="IDisposable" interfaceId="T:System.IDisposable" declaringType="System.IDisposable" />
          </method>
          <method name="Finalize" id="M:MControl.Threading.GenericThreadPool.Finalize" access="Family" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="GenericThreadPoolWorker" id="M:MControl.Threading.GenericThreadPool.GenericThreadPoolWorker" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="GetEnumerator" id="M:MControl.Threading.GenericThreadPool.GetEnumerator" access="Public" contract="Normal">
            <type name="IEnumerator`1" id="T:System.Collections.Generic.IEnumerator`1">
              <typeparam name="Thread" id="T:System.Threading.Thread" />
            </type>
          </method>
          <method name="ManualReset" id="M:MControl.Threading.GenericThreadPool.ManualReset(System.Boolean)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="initialState">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="OnErrorOcurred" id="M:MControl.Threading.GenericThreadPool.OnErrorOcurred(MControl.Util.ErrorOcurredEventArgs)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="ErrorOcurredEventArgs" id="T:MControl.Util.ErrorOcurredEventArgs" />
            </parameter>
          </method>
          <method name="RemoveThreads" id="M:MControl.Threading.GenericThreadPool.RemoveThreads(System.Int32)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="threadsCount">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="StartThreadPool" id="Overload:MControl.Threading.GenericThreadPool.StartThreadPool">
            <method name="StartThreadPool" id="M:MControl.Threading.GenericThreadPool.StartThreadPool(System.Int32)" access="Public" contract="Virtual">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="availableThreads">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
            <method name="StartThreadPool" id="M:MControl.Threading.GenericThreadPool.StartThreadPool(System.Boolean)" access="Public" contract="Virtual">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="fixedSize">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
            <method name="StartThreadPool" id="M:MControl.Threading.GenericThreadPool.StartThreadPool(System.Threading.ThreadStart)" access="Public" contract="Virtual">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="start">
                <type name="ThreadStart" id="T:System.Threading.ThreadStart" />
              </parameter>
            </method>
            <method name="StartThreadPool" id="M:MControl.Threading.GenericThreadPool.StartThreadPool(System.Threading.ThreadStart,System.Int32)" access="Public" contract="Virtual">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="start">
                <type name="ThreadStart" id="T:System.Threading.ThreadStart" />
              </parameter>
              <parameter name="availableThreads">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="StopThreadPool" id="M:MControl.Threading.GenericThreadPool.StopThreadPool" access="Public" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <methodOverload name="WaitForIdle" id="Overload:MControl.Threading.GenericThreadPool.WaitForIdle">
            <method name="WaitForIdle" id="M:MControl.Threading.GenericThreadPool.WaitForIdle" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
            </method>
            <method name="WaitForIdle" id="M:MControl.Threading.GenericThreadPool.WaitForIdle(System.TimeSpan)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="timeout">
                <type name="TimeSpan" id="T:System.TimeSpan" valueType="true" />
              </parameter>
            </method>
            <method name="WaitForIdle" id="M:MControl.Threading.GenericThreadPool.WaitForIdle(System.Int32)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="millisecondsTimeout">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <event name="ErrorOcurred" id="E:MControl.Threading.GenericThreadPool.ErrorOcurred" access="Public" contract="Normal" multicast="true">
            <type name="ErrorOcurredEventHandler" id="T:MControl.Util.ErrorOcurredEventHandler" />
            <eventArgs name="ErrorOcurredEventArgs" id="T:MControl.Util.ErrorOcurredEventArgs">
              <property name="Message" id="P:MControl.Util.ErrorOcurredEventArgs.Message" access="Public" contract="Normal">
                <type name="String" id="T:System.String" />
                <get access="Public" />
                <set access="Public" />
              </property>
            </eventArgs>
          </event>
          <event name="WorkerProcess" id="E:MControl.Threading.GenericThreadPool.WorkerProcess" access="Public" contract="Normal" multicast="true">
            <type name="EventHandler" id="T:System.EventHandler" />
          </event>
        </class>
        <class name="SyncMonitor" id="T:MControl.Threading.SyncMonitor" access="Public" namespace="MControl.Threading" displayName="SyncMonitor">
          <constructorOverload name=".ctor" id="Overload:MControl.Threading.SyncMonitor.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Threading.SyncMonitor" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Threading.SyncMonitor.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Threading.SyncMonitor" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Threading.SyncMonitor.#ctor(System.Int32)" access="Public" contract="Normal">
              <parameter name="count">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
          <method name="AddOne" id="M:MControl.Threading.SyncMonitor.AddOne" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="Reset" id="M:MControl.Threading.SyncMonitor.Reset(System.Int32)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="count">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="WaitOne" id="M:MControl.Threading.SyncMonitor.WaitOne" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
        </class>
        <class name="SyncThreadPool" id="T:MControl.Threading.SyncThreadPool" access="Public" namespace="MControl.Threading" displayName="SyncThreadPool">
          <constructor name=".ctor" id="M:MControl.Threading.SyncThreadPool.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Threading.SyncThreadPool" /> class.</autoText></summary></documentation>
          </constructor>
          <property name="ActiveThreads" id="P:MControl.Threading.SyncThreadPool.ActiveThreads" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
          <property name="MaxThreads" id="P:MControl.Threading.SyncThreadPool.MaxThreads" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
          <property name="WaitingCallbacks" id="P:MControl.Threading.SyncThreadPool.WaitingCallbacks" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
          <method name="Reset" id="M:MControl.Threading.SyncThreadPool.Reset" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <methodOverload name="SyncWorkItem" id="Overload:MControl.Threading.SyncThreadPool.SyncWorkItem" contract="Static">
            <method name="SyncWorkItem" id="M:MControl.Threading.SyncThreadPool.SyncWorkItem(System.Threading.WaitCallback)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="callback">
                <type name="WaitCallback" id="T:System.Threading.WaitCallback" />
              </parameter>
            </method>
            <method name="SyncWorkItem" id="M:MControl.Threading.SyncThreadPool.SyncWorkItem(System.Threading.WaitCallback,System.Object)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="callback">
                <type name="WaitCallback" id="T:System.Threading.WaitCallback" />
              </parameter>
              <parameter name="state">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
          </methodOverload>
          <event name="ThreadException" id="E:MControl.Threading.SyncThreadPool.ThreadException" access="Public" contract="Static" multicast="true">
            <type name="UnhandledExceptionEventHandler" id="T:System.UnhandledExceptionEventHandler" />
            <eventArgs name="UnhandledExceptionEventArgs" id="T:System.UnhandledExceptionEventArgs">
              <property name="ExceptionObject" id="P:System.UnhandledExceptionEventArgs.ExceptionObject" access="Public" contract="Normal">
                <type name="Object" id="T:System.Object" />
                <get access="Public">
                  <attribute name="ReliabilityContractAttribute" id="T:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
                    <argument id="M:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.#ctor(System.Runtime.ConstrainedExecution.Consistency,System.Runtime.ConstrainedExecution.Cer)" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
                    <argument id="M:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.#ctor(System.Runtime.ConstrainedExecution.Consistency,System.Runtime.ConstrainedExecution.Cer)" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
                  </attribute>
                </get>
                <documentation><summary>Gets the unhandled exception object.</summary><value>The unhandled exception object.</value></documentation>
              </property>
              <property name="IsTerminating" id="P:System.UnhandledExceptionEventArgs.IsTerminating" access="Public" contract="Normal">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
                <get access="Public">
                  <attribute name="ReliabilityContractAttribute" id="T:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
                    <argument id="M:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.#ctor(System.Runtime.ConstrainedExecution.Consistency,System.Runtime.ConstrainedExecution.Cer)" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
                    <argument id="M:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.#ctor(System.Runtime.ConstrainedExecution.Consistency,System.Runtime.ConstrainedExecution.Cer)" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
                  </attribute>
                </get>
                <documentation><summary>Indicates whether the common language runtime is terminating.</summary><value>true if the runtime is terminating; otherwise, false.</value></documentation>
              </property>
            </eventArgs>
          </event>
        </class>
        <class name="SyncThreadPoolConfig" id="T:MControl.Threading.SyncThreadPoolConfig" access="Public" namespace="MControl.Threading" displayName="SyncThreadPoolConfig">
          <constructor name=".ctor" id="M:MControl.Threading.SyncThreadPoolConfig.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Threading.SyncThreadPoolConfig" /> class.</autoText></summary></documentation>
          </constructor>
          <property name="MaxThreadPool" id="P:MControl.Threading.SyncThreadPoolConfig.MaxThreadPool" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
        </class>
        <class name="ThreadPoolStateInfo" id="T:MControl.Threading.ThreadPoolStateInfo" access="Public" namespace="MControl.Threading" displayName="ThreadPoolStateInfo">
          <constructorOverload name=".ctor" id="Overload:MControl.Threading.ThreadPoolStateInfo.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Threading.ThreadPoolStateInfo" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Threading.ThreadPoolStateInfo.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Threading.ThreadPoolStateInfo" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Threading.ThreadPoolStateInfo.#ctor(MControl.Threading.ThreadPoolStateInfo)" access="Public" contract="Normal">
              <parameter name="tpStateInfo">
                <type name="ThreadPoolStateInfo" id="T:MControl.Threading.ThreadPoolStateInfo" />
              </parameter>
            </constructor>
          </constructorOverload>
          <property name="DisposeOfStateObjects" id="P:MControl.Threading.ThreadPoolStateInfo.DisposeOfStateObjects" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="IdleTimeout" id="P:MControl.Threading.ThreadPoolStateInfo.IdleTimeout" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="MaxWorkerThreads" id="P:MControl.Threading.ThreadPoolStateInfo.MaxWorkerThreads" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="MinWorkerThreads" id="P:MControl.Threading.ThreadPoolStateInfo.MinWorkerThreads" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="PostExecuteCall" id="P:MControl.Threading.ThreadPoolStateInfo.PostExecuteCall" access="Public" contract="Normal">
            <type name="PostExecuteCall" id="T:MControl.Threading.PostExecuteCall" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="PostExecuteWorkItemCallback" id="P:MControl.Threading.ThreadPoolStateInfo.PostExecuteWorkItemCallback" access="Public" contract="Normal">
            <type name="PostExecuteWorkItemCallback" id="T:MControl.Threading.PostExecuteWorkItemCallback" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="UseCallerContext" id="P:MControl.Threading.ThreadPoolStateInfo.UseCallerContext" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
        </class>
        <class name="ThreadTimer" id="T:MControl.Threading.ThreadTimer" access="Public" namespace="MControl.Threading" displayName="ThreadTimer">
          <base name="Timer" id="T:System.Timers.Timer" displayName="System.Timers.Timer">
            <base name="Component" id="T:System.ComponentModel.Component" displayName="System.ComponentModel.Component">
              <base name="MarshalByRefObject" id="T:System.MarshalByRefObject" displayName="System.MarshalByRefObject" />
            </base>
          </base>
          <implements name="IComponent" id="T:System.ComponentModel.IComponent" inherited="true" />
          <implements name="IDisposable" id="T:System.IDisposable" inherited="true" />
          <implements name="ISupportInitialize" id="T:System.ComponentModel.ISupportInitialize" inherited="true" />
          <constructorOverload name=".ctor" id="Overload:MControl.Threading.ThreadTimer.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Threading.ThreadTimer" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Threading.ThreadTimer.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Threading.ThreadTimer" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Threading.ThreadTimer.#ctor(System.Int64)" access="Public" contract="Normal">
              <parameter name="interval">
                <type name="Int64" id="T:System.Int64" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
          <property name="CurrentDisplayTime" id="P:MControl.Threading.ThreadTimer.CurrentDisplayTime" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
          </property>
          <property name="CurrentTimeSpan" id="P:MControl.Threading.ThreadTimer.CurrentTimeSpan" access="Public" contract="Normal">
            <type name="TimeSpan" id="T:System.TimeSpan" valueType="true" />
            <get access="Public" />
          </property>
          <property name="SignalTime" id="P:MControl.Threading.ThreadTimer.SignalTime" access="Public" contract="Normal">
            <type name="DateTime" id="T:System.DateTime" valueType="true" />
            <get access="Public" />
          </property>
          <method name="OnElapsed" id="M:MControl.Threading.ThreadTimer.OnElapsed(System.Timers.ElapsedEventArgs)" access="Family" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="ElapsedEventArgs" id="T:System.Timers.ElapsedEventArgs" />
            </parameter>
          </method>
          <method name="RestartTimer" id="M:MControl.Threading.ThreadTimer.RestartTimer" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="Start" id="M:MControl.Threading.ThreadTimer.Start" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="Wait" id="M:MControl.Threading.ThreadTimer.Wait(System.Int64)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="interval">
              <type name="Int64" id="T:System.Int64" valueType="true" />
            </parameter>
          </method>
        </class>
        <class name="WorkItemCancelException" id="T:MControl.Threading.WorkItemCancelException" access="Public" namespace="MControl.Threading" displayName="WorkItemCancelException" sealed="true">
          <attribute name="SerializableAttribute" id="T:System.SerializableAttribute" />
          <base name="ApplicationException" id="T:System.ApplicationException" displayName="System.ApplicationException">
            <base name="Exception" id="T:System.Exception" displayName="System.Exception" />
          </base>
          <implements name="ISerializable" id="T:System.Runtime.Serialization.ISerializable" inherited="true" />
          <constructorOverload name=".ctor" id="Overload:MControl.Threading.WorkItemCancelException.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Threading.WorkItemCancelException" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Threading.WorkItemCancelException.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Threading.WorkItemCancelException" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Threading.WorkItemCancelException.#ctor(System.String)" access="Public" contract="Normal">
              <parameter name="message">
                <type name="String" id="T:System.String" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Threading.WorkItemCancelException.#ctor(System.String,System.Exception)" access="Public" contract="Normal">
              <parameter name="message">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="e">
                <type name="Exception" id="T:System.Exception" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Threading.WorkItemCancelException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" access="Public" contract="Normal">
              <parameter name="si">
                <type name="SerializationInfo" id="T:System.Runtime.Serialization.SerializationInfo" />
              </parameter>
              <parameter name="sc">
                <type name="StreamingContext" id="T:System.Runtime.Serialization.StreamingContext" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
        </class>
        <class name="WorkItemTimeoutException" id="T:MControl.Threading.WorkItemTimeoutException" access="Public" namespace="MControl.Threading" displayName="WorkItemTimeoutException" sealed="true">
          <attribute name="SerializableAttribute" id="T:System.SerializableAttribute" />
          <base name="ApplicationException" id="T:System.ApplicationException" displayName="System.ApplicationException">
            <base name="Exception" id="T:System.Exception" displayName="System.Exception" />
          </base>
          <implements name="ISerializable" id="T:System.Runtime.Serialization.ISerializable" inherited="true" />
          <constructorOverload name=".ctor" id="Overload:MControl.Threading.WorkItemTimeoutException.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Threading.WorkItemTimeoutException" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Threading.WorkItemTimeoutException.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Threading.WorkItemTimeoutException" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Threading.WorkItemTimeoutException.#ctor(System.String)" access="Public" contract="Normal">
              <parameter name="message">
                <type name="String" id="T:System.String" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Threading.WorkItemTimeoutException.#ctor(System.String,System.Exception)" access="Public" contract="Normal">
              <parameter name="message">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="e">
                <type name="Exception" id="T:System.Exception" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Threading.WorkItemTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" access="Public" contract="Normal">
              <parameter name="si">
                <type name="SerializationInfo" id="T:System.Runtime.Serialization.SerializationInfo" />
              </parameter>
              <parameter name="sc">
                <type name="StreamingContext" id="T:System.Runtime.Serialization.StreamingContext" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
        </class>
        <interface name="IWorkItemResult" id="T:MControl.Threading.IWorkItemResult" access="Public" namespace="MControl.Threading" displayName="IWorkItemResult">
          <property name="IsCanceled" id="P:MControl.Threading.IWorkItemResult.IsCanceled" access="Public" contract="Abstract">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
          </property>
          <property name="IsCompleted" id="P:MControl.Threading.IWorkItemResult.IsCompleted" access="Public" contract="Abstract">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
          </property>
          <property name="State" id="P:MControl.Threading.IWorkItemResult.State" access="Public" contract="Abstract">
            <type name="Object" id="T:System.Object" />
            <get access="Public" />
          </property>
          <method name="Cancel" id="M:MControl.Threading.IWorkItemResult.Cancel" access="Public" contract="Abstract">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
          </method>
          <methodOverload name="GetResult" id="Overload:MControl.Threading.IWorkItemResult.GetResult">
            <method name="GetResult" id="M:MControl.Threading.IWorkItemResult.GetResult" access="Public" contract="Abstract">
              <type name="Object" id="T:System.Object" />
            </method>
            <method name="GetResult" id="M:MControl.Threading.IWorkItemResult.GetResult(System.Int32,System.Boolean)" access="Public" contract="Abstract">
              <type name="Object" id="T:System.Object" />
              <parameter name="millisecondsTimeout">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="exitContext">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
            <method name="GetResult" id="M:MControl.Threading.IWorkItemResult.GetResult(System.TimeSpan,System.Boolean)" access="Public" contract="Abstract">
              <type name="Object" id="T:System.Object" />
              <parameter name="timeout">
                <type name="TimeSpan" id="T:System.TimeSpan" valueType="true" />
              </parameter>
              <parameter name="exitContext">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
            <method name="GetResult" id="M:MControl.Threading.IWorkItemResult.GetResult(System.Int32,System.Boolean,System.Threading.WaitHandle)" access="Public" contract="Abstract">
              <type name="Object" id="T:System.Object" />
              <parameter name="millisecondsTimeout">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="exitContext">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="cancelWaitHandle">
                <type name="WaitHandle" id="T:System.Threading.WaitHandle" />
              </parameter>
            </method>
            <method name="GetResult" id="M:MControl.Threading.IWorkItemResult.GetResult(System.TimeSpan,System.Boolean,System.Threading.WaitHandle)" access="Public" contract="Abstract">
              <type name="Object" id="T:System.Object" />
              <parameter name="timeout">
                <type name="TimeSpan" id="T:System.TimeSpan" valueType="true" />
              </parameter>
              <parameter name="exitContext">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="cancelWaitHandle">
                <type name="WaitHandle" id="T:System.Threading.WaitHandle" />
              </parameter>
            </method>
            <method name="GetResult" id="M:MControl.Threading.IWorkItemResult.GetResult(System.Exception@)" access="Public" contract="Abstract">
              <type name="Object" id="T:System.Object" />
              <parameter name="e" direction="out">
                <type name="Exception" id="T:System.Exception" />
                <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
              </parameter>
            </method>
            <method name="GetResult" id="M:MControl.Threading.IWorkItemResult.GetResult(System.Int32,System.Boolean,System.Exception@)" access="Public" contract="Abstract">
              <type name="Object" id="T:System.Object" />
              <parameter name="millisecondsTimeout">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="exitContext">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="e" direction="out">
                <type name="Exception" id="T:System.Exception" />
                <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
              </parameter>
            </method>
            <method name="GetResult" id="M:MControl.Threading.IWorkItemResult.GetResult(System.TimeSpan,System.Boolean,System.Exception@)" access="Public" contract="Abstract">
              <type name="Object" id="T:System.Object" />
              <parameter name="timeout">
                <type name="TimeSpan" id="T:System.TimeSpan" valueType="true" />
              </parameter>
              <parameter name="exitContext">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="e" direction="out">
                <type name="Exception" id="T:System.Exception" />
                <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
              </parameter>
            </method>
            <method name="GetResult" id="M:MControl.Threading.IWorkItemResult.GetResult(System.Int32,System.Boolean,System.Threading.WaitHandle,System.Exception@)" access="Public" contract="Abstract">
              <type name="Object" id="T:System.Object" />
              <parameter name="millisecondsTimeout">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="exitContext">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="cancelWaitHandle">
                <type name="WaitHandle" id="T:System.Threading.WaitHandle" />
              </parameter>
              <parameter name="e" direction="out">
                <type name="Exception" id="T:System.Exception" />
                <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
              </parameter>
            </method>
            <method name="GetResult" id="M:MControl.Threading.IWorkItemResult.GetResult(System.TimeSpan,System.Boolean,System.Threading.WaitHandle,System.Exception@)" access="Public" contract="Abstract">
              <type name="Object" id="T:System.Object" />
              <parameter name="timeout">
                <type name="TimeSpan" id="T:System.TimeSpan" valueType="true" />
              </parameter>
              <parameter name="exitContext">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="cancelWaitHandle">
                <type name="WaitHandle" id="T:System.Threading.WaitHandle" />
              </parameter>
              <parameter name="e" direction="out">
                <type name="Exception" id="T:System.Exception" />
                <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
              </parameter>
            </method>
          </methodOverload>
        </interface>
        <enumeration name="AsyncProgressLevel" id="T:MControl.Threading.AsyncProgressLevel" displayName="AsyncProgressLevel" namespace="MControl.Threading" access="Public">
          <field name="None" id="F:MControl.Threading.AsyncProgressLevel.None" value="0" />
          <field name="Info" id="F:MControl.Threading.AsyncProgressLevel.Info" value="1" />
          <field name="Progress" id="F:MControl.Threading.AsyncProgressLevel.Progress" value="2" />
          <field name="Error" id="F:MControl.Threading.AsyncProgressLevel.Error" value="3" />
          <field name="All" id="F:MControl.Threading.AsyncProgressLevel.All" value="6" />
        </enumeration>
        <enumeration name="AsyncState" id="T:MControl.Threading.AsyncState" displayName="AsyncState" namespace="MControl.Threading" access="Public">
          <field name="None" id="F:MControl.Threading.AsyncState.None" value="0" />
          <field name="Started" id="F:MControl.Threading.AsyncState.Started" value="1" />
          <field name="Completed" id="F:MControl.Threading.AsyncState.Completed" value="2" />
          <field name="Canceled" id="F:MControl.Threading.AsyncState.Canceled" value="3" />
        </enumeration>
        <enumeration name="PostExecuteCall" id="T:MControl.Threading.PostExecuteCall" displayName="PostExecuteCall" namespace="MControl.Threading" access="Public" flags="true">
          <attribute name="FlagsAttribute" id="T:System.FlagsAttribute" />
          <field name="Never" id="F:MControl.Threading.PostExecuteCall.Never" value="0" />
          <field name="WhenWorkItemCanceled" id="F:MControl.Threading.PostExecuteCall.WhenWorkItemCanceled" value="1" />
          <field name="WhenWorkItemNotCanceled" id="F:MControl.Threading.PostExecuteCall.WhenWorkItemNotCanceled" value="2" />
          <field name="Always" id="F:MControl.Threading.PostExecuteCall.Always" value="3" />
        </enumeration>
        <delegate name="AsyncCallEventHandler" displayName="AsyncCallEventHandler" namespace="MControl.Threading" id="T:MControl.Threading.AsyncCallEventHandler" access="Public">
          <type name="Void" id="T:System.Void" valueType="true" />
          <parameter name="sender">
            <type name="Object" id="T:System.Object" />
          </parameter>
          <parameter name="e">
            <type name="AsyncCallEventArgs" id="T:MControl.Threading.AsyncCallEventArgs" />
          </parameter>
        </delegate>
        <delegate name="AsyncDataResultEventHandler" displayName="AsyncDataResultEventHandler" namespace="MControl.Threading" id="T:MControl.Threading.AsyncDataResultEventHandler" access="Public">
          <type name="Void" id="T:System.Void" valueType="true" />
          <parameter name="sender">
            <type name="Object" id="T:System.Object" />
          </parameter>
          <parameter name="e">
            <type name="AsyncDataResultEventArgs" id="T:MControl.Threading.AsyncDataResultEventArgs" />
          </parameter>
        </delegate>
        <delegate name="AsyncProgressEventHandler" displayName="AsyncProgressEventHandler" namespace="MControl.Threading" id="T:MControl.Threading.AsyncProgressEventHandler" access="Public">
          <type name="Void" id="T:System.Void" valueType="true" />
          <parameter name="sender">
            <type name="Object" id="T:System.Object" />
          </parameter>
          <parameter name="e">
            <type name="AsyncProgressEventArgs" id="T:MControl.Threading.AsyncProgressEventArgs" />
          </parameter>
        </delegate>
        <delegate name="AsyncResultEventHandler" displayName="AsyncResultEventHandler" namespace="MControl.Threading" id="T:MControl.Threading.AsyncResultEventHandler" access="Public">
          <type name="Void" id="T:System.Void" valueType="true" />
          <parameter name="sender">
            <type name="Object" id="T:System.Object" />
          </parameter>
          <parameter name="e">
            <type name="AsyncResultEventArgs" id="T:MControl.Threading.AsyncResultEventArgs" />
          </parameter>
        </delegate>
        <delegate name="PostExecuteWorkItemCallback" displayName="PostExecuteWorkItemCallback" namespace="MControl.Threading" id="T:MControl.Threading.PostExecuteWorkItemCallback" access="Public">
          <type name="Void" id="T:System.Void" valueType="true" />
          <parameter name="wir">
            <type name="IWorkItemResult" id="T:MControl.Threading.IWorkItemResult" />
          </parameter>
        </delegate>
        <delegate name="WorkItemCallback" displayName="WorkItemCallback" namespace="MControl.Threading" id="T:MControl.Threading.WorkItemCallback" access="Public">
          <type name="Object" id="T:System.Object" />
          <parameter name="state">
            <type name="Object" id="T:System.Object" />
          </parameter>
        </delegate>
      </namespace>
      <namespace name="MControl.Util" id="N:MControl.Util">
        <class name="AppException" id="T:MControl.Util.AppException" access="Public" namespace="MControl.Util" displayName="AppException">
          <attribute name="SerializableAttribute" id="T:System.SerializableAttribute" />
          <base name="ApplicationException" id="T:System.ApplicationException" displayName="System.ApplicationException">
            <base name="Exception" id="T:System.Exception" displayName="System.Exception" />
          </base>
          <derivedBy id="T:MControl.Util.Exceptions.TypeNotSupportedException" displayName="MControl.Util.Exceptions.TypeNotSupportedException" />
          <implements name="ISerializable" id="T:System.Runtime.Serialization.ISerializable" inherited="true" />
          <constructorOverload name=".ctor" id="Overload:MControl.Util.AppException.#ctor" explicitInterfaceImplementation="true">
            <constructor name=".ctor" id="M:MControl.Util.AppException.#ctor(System.String)" access="Public" contract="Normal">
              <parameter name="msg">
                <type name="String" id="T:System.String" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.AppException.#ctor(System.String,System.Exception)" access="Public" contract="Normal">
              <parameter name="msg">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="inner">
                <type name="Exception" id="T:System.Exception" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.AppException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" access="Family" contract="Normal">
              <parameter name="_Info">
                <type name="SerializationInfo" id="T:System.Runtime.Serialization.SerializationInfo" />
              </parameter>
              <parameter name="_StreamingContext">
                <type name="StreamingContext" id="T:System.Runtime.Serialization.StreamingContext" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
        </class>
        <class name="ClientUtils" id="T:MControl.Util.ClientUtils" access="Public" namespace="MControl.Util" displayName="ClientUtils" abstract="true" sealed="true">
          <method name="GetBitCount" id="M:MControl.Util.ClientUtils.GetBitCount(System.UInt32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="x">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
          </method>
          <method name="IsCriticalException" id="M:MControl.Util.ClientUtils.IsCriticalException(System.Exception)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="ex">
              <type name="Exception" id="T:System.Exception" />
            </parameter>
          </method>
          <methodOverload name="IsEnumValid" id="Overload:MControl.Util.ClientUtils.IsEnumValid" contract="Static">
            <method name="IsEnumValid" id="M:MControl.Util.ClientUtils.IsEnumValid(System.Enum,System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="enumValue">
                <type name="Enum" id="T:System.Enum" />
              </parameter>
              <parameter name="value">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="minValue">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="maxValue">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
            <method name="IsEnumValid" id="M:MControl.Util.ClientUtils.IsEnumValid(System.Enum,System.Int32,System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="enumValue">
                <type name="Enum" id="T:System.Enum" />
              </parameter>
              <parameter name="value">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="minValue">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="maxValue">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="maxNumberOfBitsOn">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="IsEnumValid_Masked" id="M:MControl.Util.ClientUtils.IsEnumValid_Masked(System.Enum,System.Int32,System.UInt32)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="enumValue">
              <type name="Enum" id="T:System.Enum" />
            </parameter>
            <parameter name="value">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="mask">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
          </method>
          <method name="IsEnumValid_NotSequential" id="M:MControl.Util.ClientUtils.IsEnumValid_NotSequential(System.Enum,System.Int32,System.Int32[])" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="enumValue">
              <type name="Enum" id="T:System.Enum" />
            </parameter>
            <parameter name="value">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="enumValues" isParamArray="true">
              <type name="Int32" id="T:System.Int32" valueType="true">
                <array rank="1" />
              </type>
              <attribute name="ParamArrayAttribute" id="T:System.ParamArrayAttribute" />
            </parameter>
          </method>
          <method name="IsSecurityOrCriticalException" id="M:MControl.Util.ClientUtils.IsSecurityOrCriticalException(System.Exception)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="ex">
              <type name="Exception" id="T:System.Exception" />
            </parameter>
          </method>
        </class>
        <class name="CommonDialog" id="T:MControl.Util.CommonDialog" access="Public" namespace="MControl.Util" displayName="CommonDialog" sealed="true">
          <constructor name=".ctor" id="M:MControl.Util.CommonDialog.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.CommonDialog" /> class.</autoText></summary></documentation>
          </constructor>
          <methodOverload name="ColorDialog" id="Overload:MControl.Util.CommonDialog.ColorDialog" contract="Static">
            <method name="ColorDialog" id="M:MControl.Util.CommonDialog.ColorDialog(System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="ColorName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ColorDialog" id="M:MControl.Util.CommonDialog.ColorDialog" access="Public" contract="Static">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </method>
          </methodOverload>
          <methodOverload name="FileDialog" id="Overload:MControl.Util.CommonDialog.FileDialog" contract="Static">
            <method name="FileDialog" id="M:MControl.Util.CommonDialog.FileDialog(System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="filter">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="FileDialog" id="M:MControl.Util.CommonDialog.FileDialog(System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="filter">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="initialDirectory">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="FolderDialog" id="M:MControl.Util.CommonDialog.FolderDialog" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
          </method>
          <method name="FontDialog" id="M:MControl.Util.CommonDialog.FontDialog" access="Public" contract="Static">
            <type name="Font" id="T:System.Drawing.Font" />
          </method>
          <methodOverload name="SaveAs" id="Overload:MControl.Util.CommonDialog.SaveAs" contract="Static">
            <method name="SaveAs" id="M:MControl.Util.CommonDialog.SaveAs(System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="filter">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="SaveAs" id="M:MControl.Util.CommonDialog.SaveAs(System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="filter">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="initialDirectory">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
        </class>
        <class name="CompareValidator" id="T:MControl.Util.CompareValidator" access="Public" namespace="MControl.Util" displayName="CompareValidator" abstract="true">
          <constructor name=".ctor" id="M:MControl.Util.CompareValidator.#ctor" access="Family" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.CompareValidator" /> class.</autoText></summary></documentation>
          </constructor>
          <property name="CutoffYear" id="P:MControl.Util.CompareValidator.CutoffYear" access="Family" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Family" />
          </property>
          <property name="Type" id="P:MControl.Util.CompareValidator.Type" access="Public" contract="Normal">
            <type name="BaseDataType" id="T:MControl.BaseDataType" valueType="true" />
            <get access="Public" />
            <set access="Public" />
            <attribute name="DefaultValueAttribute" id="T:System.ComponentModel.DefaultValueAttribute">
              <argument id="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)" type="System.Int32" value="0" />
            </attribute>
            <attribute name="CategoryAttribute" id="T:System.ComponentModel.CategoryAttribute">
              <argument id="M:System.ComponentModel.CategoryAttribute.#ctor(System.String)" type="System.String" value="Behavior" />
            </attribute>
            <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
              <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="RangeValidator_Type" />
            </attribute>
          </property>
          <method name="CanConvert" id="M:MControl.Util.CompareValidator.CanConvert(System.String,MControl.BaseDataType)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="text">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="type">
              <type name="BaseDataType" id="T:MControl.BaseDataType" valueType="true" />
            </parameter>
          </method>
          <method name="Compare" id="M:MControl.Util.CompareValidator.Compare(System.String,System.String,MControl.Util.ValidationOperator,MControl.BaseDataType)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="leftText">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="rightText">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="op">
              <type name="ValidationOperator" id="T:MControl.Util.ValidationOperator" valueType="true" />
            </parameter>
            <parameter name="type">
              <type name="BaseDataType" id="T:MControl.BaseDataType" valueType="true" />
            </parameter>
          </method>
          <method name="Convert" id="M:MControl.Util.CompareValidator.Convert(System.String,MControl.BaseDataType,System.Object@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="text">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="type">
              <type name="BaseDataType" id="T:MControl.BaseDataType" valueType="true" />
            </parameter>
            <parameter name="value" direction="out">
              <type name="Object" id="T:System.Object" />
              <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
            </parameter>
          </method>
          <method name="DetermineRenderUplevel" id="M:MControl.Util.CompareValidator.DetermineRenderUplevel" access="Family" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
          </method>
          <method name="GetDateElementOrder" id="M:MControl.Util.CompareValidator.GetDateElementOrder" access="Family" contract="Static">
            <type name="String" id="T:System.String" />
          </method>
          <method name="GetFullYear" id="M:MControl.Util.CompareValidator.GetFullYear(System.Int32)" access="Family" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="shortYear">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
        </class>
        <class name="DateChangedEventArgs" id="T:MControl.Util.DateChangedEventArgs" access="Public" namespace="MControl.Util" displayName="DateChangedEventArgs">
          <base name="EventArgs" id="T:System.EventArgs" displayName="System.EventArgs" />
          <constructor name=".ctor" id="M:MControl.Util.DateChangedEventArgs.#ctor(System.DateTime)" access="Public" contract="Normal">
            <parameter name="selectedDate">
              <type name="DateTime" id="T:System.DateTime" valueType="true" />
            </parameter>
          </constructor>
          <property name="Date" id="P:MControl.Util.DateChangedEventArgs.Date" access="Public" contract="Normal">
            <type name="DateTime" id="T:System.DateTime" valueType="true" />
            <get access="Public" />
          </property>
        </class>
        <class name="ErrorOcurredEventArgs" id="T:MControl.Util.ErrorOcurredEventArgs" access="Public" namespace="MControl.Util" displayName="ErrorOcurredEventArgs">
          <base name="EventArgs" id="T:System.EventArgs" displayName="System.EventArgs" />
          <constructor name=".ctor" id="M:MControl.Util.ErrorOcurredEventArgs.#ctor(System.String)" access="Public" contract="Normal">
            <parameter name="message">
              <type name="String" id="T:System.String" />
            </parameter>
          </constructor>
          <property name="Message" id="P:MControl.Util.ErrorOcurredEventArgs.Message" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
        </class>
        <class name="ExceptionBuilder" id="T:MControl.Util.ExceptionBuilder" access="Public" namespace="MControl.Util" displayName="ExceptionBuilder" abstract="true" sealed="true">
          <method name="AddExternalObject" id="M:MControl.Util.ExceptionBuilder.AddExternalObject" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="AddNewNotAllowNull" id="M:MControl.Util.ExceptionBuilder.AddNewNotAllowNull" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="AddPrimaryKeyConstraint" id="M:MControl.Util.ExceptionBuilder.AddPrimaryKeyConstraint" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="ArgumentContainsNull" id="M:MControl.Util.ExceptionBuilder.ArgumentContainsNull(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="paramName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ArgumentContainsNullValue" id="M:MControl.Util.ExceptionBuilder.ArgumentContainsNullValue" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="ArgumentNull" id="M:MControl.Util.ExceptionBuilder.ArgumentNull(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="paramName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ArgumentOutOfRange" id="M:MControl.Util.ExceptionBuilder.ArgumentOutOfRange(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="paramName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="AttributeValues" id="M:MControl.Util.ExceptionBuilder.AttributeValues(System.String,System.String,System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="value1">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="value2">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="AutoIncrementAndDefaultValue" id="M:MControl.Util.ExceptionBuilder.AutoIncrementAndDefaultValue" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="AutoIncrementAndExpression" id="M:MControl.Util.ExceptionBuilder.AutoIncrementAndExpression" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="AutoIncrementCannotSetIfHasData" id="M:MControl.Util.ExceptionBuilder.AutoIncrementCannotSetIfHasData(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="typeName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="AutoIncrementSeed" id="M:MControl.Util.ExceptionBuilder.AutoIncrementSeed" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="BadObjectPropertyAccess" id="M:MControl.Util.ExceptionBuilder.BadObjectPropertyAccess(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="error">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="BeginEditInRowChanging" id="M:MControl.Util.ExceptionBuilder.BeginEditInRowChanging" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CanNotBindTable" id="M:MControl.Util.ExceptionBuilder.CanNotBindTable" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CanNotClear" id="M:MControl.Util.ExceptionBuilder.CanNotClear" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CanNotDelete" id="M:MControl.Util.ExceptionBuilder.CanNotDelete" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CanNotDeserializeObjectType" id="M:MControl.Util.ExceptionBuilder.CanNotDeserializeObjectType" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CanNotEdit" id="M:MControl.Util.ExceptionBuilder.CanNotEdit" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CanNotRemoteDataTable" id="M:MControl.Util.ExceptionBuilder.CanNotRemoteDataTable" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CanNotSerializeDataTableHierarchy" id="M:MControl.Util.ExceptionBuilder.CanNotSerializeDataTableHierarchy" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CanNotSerializeDataTableWithEmptyName" id="M:MControl.Util.ExceptionBuilder.CanNotSerializeDataTableWithEmptyName" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CanNotSetDataSet" id="M:MControl.Util.ExceptionBuilder.CanNotSetDataSet" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CanNotSetRemotingFormat" id="M:MControl.Util.ExceptionBuilder.CanNotSetRemotingFormat" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CanNotSetTable" id="M:MControl.Util.ExceptionBuilder.CanNotSetTable" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CanNotUse" id="M:MControl.Util.ExceptionBuilder.CanNotUse" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CanNotUseDataViewManager" id="M:MControl.Util.ExceptionBuilder.CanNotUseDataViewManager" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CancelEditInRowChanging" id="M:MControl.Util.ExceptionBuilder.CancelEditInRowChanging" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CannotAddColumn1" id="M:MControl.Util.ExceptionBuilder.CannotAddColumn1(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="CannotAddColumn2" id="M:MControl.Util.ExceptionBuilder.CannotAddColumn2(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="CannotAddColumn3" id="M:MControl.Util.ExceptionBuilder.CannotAddColumn3" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CannotAddColumn4" id="M:MControl.Util.ExceptionBuilder.CannotAddColumn4(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="CannotAddDuplicate" id="M:MControl.Util.ExceptionBuilder.CannotAddDuplicate(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="CannotAddDuplicate2" id="M:MControl.Util.ExceptionBuilder.CannotAddDuplicate2(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="table">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="CannotAddDuplicate3" id="M:MControl.Util.ExceptionBuilder.CannotAddDuplicate3(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="table">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="CannotChangeCaseLocale" id="Overload:MControl.Util.ExceptionBuilder.CannotChangeCaseLocale" contract="Static">
            <method name="CannotChangeCaseLocale" id="M:MControl.Util.ExceptionBuilder.CannotChangeCaseLocale" access="Public" contract="Static">
              <type name="Exception" id="T:System.Exception" />
            </method>
            <method name="CannotChangeCaseLocale" id="M:MControl.Util.ExceptionBuilder.CannotChangeCaseLocale(System.Exception)" access="Public" contract="Static">
              <type name="Exception" id="T:System.Exception" />
              <parameter name="innerException">
                <type name="Exception" id="T:System.Exception" />
              </parameter>
            </method>
          </methodOverload>
          <method name="CannotChangeNamespace" id="M:MControl.Util.ExceptionBuilder.CannotChangeNamespace(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="columnName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="CannotChangeSchemaSerializationMode" id="M:MControl.Util.ExceptionBuilder.CannotChangeSchemaSerializationMode" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CannotConvert" id="M:MControl.Util.ExceptionBuilder.CannotConvert(System.String,System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="type">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="CannotCreateDataReaderOnEmptyDataSet" id="M:MControl.Util.ExceptionBuilder.CannotCreateDataReaderOnEmptyDataSet" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CannotInstantiateAbstract" id="M:MControl.Util.ExceptionBuilder.CannotInstantiateAbstract(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="CannotModifyCollection" id="M:MControl.Util.ExceptionBuilder.CannotModifyCollection" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CannotRemoveChildKey" id="M:MControl.Util.ExceptionBuilder.CannotRemoveChildKey(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="relation">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="CannotRemoveColumn" id="M:MControl.Util.ExceptionBuilder.CannotRemoveColumn" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CannotRemoveConstraint" id="M:MControl.Util.ExceptionBuilder.CannotRemoveConstraint(System.String,System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="constraint">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="table">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="CannotRemoveExpression" id="M:MControl.Util.ExceptionBuilder.CannotRemoveExpression(System.String,System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="expression">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="CannotRemovePrimaryKey" id="M:MControl.Util.ExceptionBuilder.CannotRemovePrimaryKey" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CannotSetDateTimeModeForNonDateTimeColumns" id="M:MControl.Util.ExceptionBuilder.CannotSetDateTimeModeForNonDateTimeColumns" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CannotSetMaxLength" id="M:MControl.Util.ExceptionBuilder.CannotSetMaxLength(System.Data.DataColumn,System.Int32)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="DataColumn" id="T:System.Data.DataColumn" />
            </parameter>
            <parameter name="value">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="CannotSetMaxLength2" id="M:MControl.Util.ExceptionBuilder.CannotSetMaxLength2(System.Data.DataColumn)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="DataColumn" id="T:System.Data.DataColumn" />
            </parameter>
          </method>
          <method name="CannotSetSimpleContent" id="M:MControl.Util.ExceptionBuilder.CannotSetSimpleContent(System.String,System.Type)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="columnName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="type">
              <type name="Type" id="T:System.Type" />
            </parameter>
          </method>
          <method name="CannotSetSimpleContentType" id="M:MControl.Util.ExceptionBuilder.CannotSetSimpleContentType(System.String,System.Type)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="columnName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="type">
              <type name="Type" id="T:System.Type" />
            </parameter>
          </method>
          <method name="CannotSetToNull" id="M:MControl.Util.ExceptionBuilder.CannotSetToNull(System.Data.DataColumn)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="DataColumn" id="T:System.Data.DataColumn" />
            </parameter>
          </method>
          <method name="CantAddConstraintToMultipleNestedTable" id="M:MControl.Util.ExceptionBuilder.CantAddConstraintToMultipleNestedTable(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="tableName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="CantChangeDataType" id="M:MControl.Util.ExceptionBuilder.CantChangeDataType" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CantChangeDateTimeMode" id="M:MControl.Util.ExceptionBuilder.CantChangeDateTimeMode(System.Data.DataSetDateTime,System.Data.DataSetDateTime)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="oldValue">
              <type name="DataSetDateTime" id="T:System.Data.DataSetDateTime" valueType="true" />
            </parameter>
            <parameter name="newValue">
              <type name="DataSetDateTime" id="T:System.Data.DataSetDateTime" valueType="true" />
            </parameter>
          </method>
          <method name="CaseInsensitiveNameConflict" id="M:MControl.Util.ExceptionBuilder.CaseInsensitiveNameConflict(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="CaseLocaleMismatch" id="M:MControl.Util.ExceptionBuilder.CaseLocaleMismatch" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="ChildTableMismatch" id="M:MControl.Util.ExceptionBuilder.ChildTableMismatch" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="CircularComplexType" id="M:MControl.Util.ExceptionBuilder.CircularComplexType(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ColumnNameRequired" id="M:MControl.Util.ExceptionBuilder.ColumnNameRequired" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="ColumnNotInAnyTable" id="M:MControl.Util.ExceptionBuilder.ColumnNotInAnyTable" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="ColumnNotInTheTable" id="M:MControl.Util.ExceptionBuilder.ColumnNotInTheTable(System.String,System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="table">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ColumnNotInTheUnderlyingTable" id="M:MControl.Util.ExceptionBuilder.ColumnNotInTheUnderlyingTable(System.String,System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="table">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="ColumnOutOfRange" id="Overload:MControl.Util.ExceptionBuilder.ColumnOutOfRange" contract="Static">
            <method name="ColumnOutOfRange" id="M:MControl.Util.ExceptionBuilder.ColumnOutOfRange(System.Int32)" access="Public" contract="Static">
              <type name="Exception" id="T:System.Exception" />
              <parameter name="index">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
            <method name="ColumnOutOfRange" id="M:MControl.Util.ExceptionBuilder.ColumnOutOfRange(System.String)" access="Public" contract="Static">
              <type name="Exception" id="T:System.Exception" />
              <parameter name="column">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="ColumnToSortIsOutOfRange" id="M:MControl.Util.ExceptionBuilder.ColumnToSortIsOutOfRange(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ColumnTypeConflict" id="M:MControl.Util.ExceptionBuilder.ColumnTypeConflict(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ColumnTypeNotSupported" id="M:MControl.Util.ExceptionBuilder.ColumnTypeNotSupported" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="ColumnsTypeMismatch" id="M:MControl.Util.ExceptionBuilder.ColumnsTypeMismatch" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="ConstraintAddFailed" id="M:MControl.Util.ExceptionBuilder.ConstraintAddFailed(System.Data.DataTable)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="table">
              <type name="DataTable" id="T:System.Data.DataTable" />
            </parameter>
          </method>
          <method name="ConstraintForeignTable" id="M:MControl.Util.ExceptionBuilder.ConstraintForeignTable" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="ConstraintNotInTheTable" id="M:MControl.Util.ExceptionBuilder.ConstraintNotInTheTable(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="constraint">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ConstraintOutOfRange" id="M:MControl.Util.ExceptionBuilder.ConstraintOutOfRange(System.Int32)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="ConstraintParentValues" id="M:MControl.Util.ExceptionBuilder.ConstraintParentValues" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="ConstraintRemoveFailed" id="M:MControl.Util.ExceptionBuilder.ConstraintRemoveFailed" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <methodOverload name="ConstraintViolation" id="Overload:MControl.Util.ExceptionBuilder.ConstraintViolation" contract="Static">
            <method name="ConstraintViolation" id="M:MControl.Util.ExceptionBuilder.ConstraintViolation(System.String)" access="Public" contract="Static">
              <type name="Exception" id="T:System.Exception" />
              <parameter name="constraint">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ConstraintViolation" id="M:MControl.Util.ExceptionBuilder.ConstraintViolation(System.Data.DataColumn[],System.Object[])" access="Public" contract="Static">
              <type name="Exception" id="T:System.Exception" />
              <parameter name="columns">
                <type name="DataColumn" id="T:System.Data.DataColumn">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="values">
                <type name="Object" id="T:System.Object">
                  <array rank="1" />
                </type>
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="ConvertFailed" id="Overload:MControl.Util.ExceptionBuilder.ConvertFailed" contract="Static">
            <method name="ConvertFailed" id="M:MControl.Util.ExceptionBuilder.ConvertFailed(System.Type,System.Type)" access="Public" contract="Static">
              <type name="DataException" id="T:System.Data.DataException" />
              <parameter name="type1">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="type2">
                <type name="Type" id="T:System.Type" />
              </parameter>
            </method>
            <method name="ConvertFailed" id="M:MControl.Util.ExceptionBuilder.ConvertFailed(System.Type,System.Type,System.Exception)" access="Public" contract="Static">
              <type name="DataException" id="T:System.Data.DataException" />
              <parameter name="type1">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="type2">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="innerExeption">
                <type name="Exception" id="T:System.Exception" />
              </parameter>
            </method>
          </methodOverload>
          <method name="CreateChildView" id="M:MControl.Util.ExceptionBuilder.CreateChildView" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="DataSetUnsupportedSchema" id="M:MControl.Util.ExceptionBuilder.DataSetUnsupportedSchema(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="ns">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="DataTableInferenceNotSupported" id="M:MControl.Util.ExceptionBuilder.DataTableInferenceNotSupported" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="DataTableReaderArgumentIsEmpty" id="M:MControl.Util.ExceptionBuilder.DataTableReaderArgumentIsEmpty" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="DataTableReaderSchemaIsInvalid" id="M:MControl.Util.ExceptionBuilder.DataTableReaderSchemaIsInvalid(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="tableName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="DatasetConflictingName" id="M:MControl.Util.ExceptionBuilder.DatasetConflictingName(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="table">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="DatatypeNotDefined" id="M:MControl.Util.ExceptionBuilder.DatatypeNotDefined" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="DefaultValueAndAutoIncrement" id="M:MControl.Util.ExceptionBuilder.DefaultValueAndAutoIncrement" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="DefaultValueColumnDataType" id="M:MControl.Util.ExceptionBuilder.DefaultValueColumnDataType(System.String,System.Type,System.Type)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="defaultType">
              <type name="Type" id="T:System.Type" />
            </parameter>
            <parameter name="columnType">
              <type name="Type" id="T:System.Type" />
            </parameter>
          </method>
          <method name="DefaultValueDataType" id="M:MControl.Util.ExceptionBuilder.DefaultValueDataType(System.String,System.Type,System.Type)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="defaultType">
              <type name="Type" id="T:System.Type" />
            </parameter>
            <parameter name="columnType">
              <type name="Type" id="T:System.Type" />
            </parameter>
          </method>
          <method name="DeleteInRowDeleting" id="M:MControl.Util.ExceptionBuilder.DeleteInRowDeleting" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="DeletedRowInaccessible" id="M:MControl.Util.ExceptionBuilder.DeletedRowInaccessible" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="DiffgramMissingSQL" id="M:MControl.Util.ExceptionBuilder.DiffgramMissingSQL" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="DiffgramMissingTable" id="M:MControl.Util.ExceptionBuilder.DiffgramMissingTable(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="DuplicateConstraint" id="M:MControl.Util.ExceptionBuilder.DuplicateConstraint(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="constraint">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="DuplicateConstraintName" id="M:MControl.Util.ExceptionBuilder.DuplicateConstraintName(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="constraint">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="DuplicateConstraintRead" id="M:MControl.Util.ExceptionBuilder.DuplicateConstraintRead(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="str">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="DuplicateDeclaration" id="M:MControl.Util.ExceptionBuilder.DuplicateDeclaration(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="DuplicateRelation" id="M:MControl.Util.ExceptionBuilder.DuplicateRelation(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="relation">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="DuplicateTableName" id="M:MControl.Util.ExceptionBuilder.DuplicateTableName(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="table">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="DuplicateTableName2" id="M:MControl.Util.ExceptionBuilder.DuplicateTableName2(System.String,System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="table">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="ns">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="EditInRowChanging" id="M:MControl.Util.ExceptionBuilder.EditInRowChanging" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="ElementTypeNotFound" id="M:MControl.Util.ExceptionBuilder.ElementTypeNotFound(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="EmptyDataTableReader" id="M:MControl.Util.ExceptionBuilder.EmptyDataTableReader(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="tableName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="EndEditInRowChanging" id="M:MControl.Util.ExceptionBuilder.EndEditInRowChanging" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="EnforceConstraint" id="M:MControl.Util.ExceptionBuilder.EnforceConstraint" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="EnumeratorModified" id="M:MControl.Util.ExceptionBuilder.EnumeratorModified" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="ExpressionAndConstraint" id="M:MControl.Util.ExceptionBuilder.ExpressionAndConstraint(System.Data.DataColumn,System.Data.Constraint)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="DataColumn" id="T:System.Data.DataColumn" />
            </parameter>
            <parameter name="constraint">
              <type name="Constraint" id="T:System.Data.Constraint" />
            </parameter>
          </method>
          <method name="ExpressionAndReadOnly" id="M:MControl.Util.ExceptionBuilder.ExpressionAndReadOnly" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="ExpressionAndUnique" id="M:MControl.Util.ExceptionBuilder.ExpressionAndUnique" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="ExpressionCircular" id="M:MControl.Util.ExceptionBuilder.ExpressionCircular" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="ExpressionInConstraint" id="M:MControl.Util.ExceptionBuilder.ExpressionInConstraint(System.Data.DataColumn)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="DataColumn" id="T:System.Data.DataColumn" />
            </parameter>
          </method>
          <method name="FailedCascadeDelete" id="M:MControl.Util.ExceptionBuilder.FailedCascadeDelete(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="constraint">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="FailedCascadeUpdate" id="M:MControl.Util.ExceptionBuilder.FailedCascadeUpdate(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="constraint">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="FailedClearParentTable" id="M:MControl.Util.ExceptionBuilder.FailedClearParentTable(System.String,System.String,System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="table">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="constraint">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="childTable">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ForeignKeyViolation" id="M:MControl.Util.ExceptionBuilder.ForeignKeyViolation(System.String,System.Object[])" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="constraint">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="keys">
              <type name="Object" id="T:System.Object">
                <array rank="1" />
              </type>
            </parameter>
          </method>
          <method name="ForeignRelation" id="M:MControl.Util.ExceptionBuilder.ForeignRelation" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="FoundEntity" id="M:MControl.Util.ExceptionBuilder.FoundEntity" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="GetElementIndex" id="M:MControl.Util.ExceptionBuilder.GetElementIndex(System.Int32)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="GetParentRowTableMismatch" id="M:MControl.Util.ExceptionBuilder.GetParentRowTableMismatch(System.String,System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="t1">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="t2">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="HasToBeStringType" id="M:MControl.Util.ExceptionBuilder.HasToBeStringType(System.Data.DataColumn)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="DataColumn" id="T:System.Data.DataColumn" />
            </parameter>
          </method>
          <method name="IComparableNotImplemented" id="M:MControl.Util.ExceptionBuilder.IComparableNotImplemented(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="typeName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="INullableUDTwithoutStaticNull" id="M:MControl.Util.ExceptionBuilder.INullableUDTwithoutStaticNull(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="typeName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="InValidNestedRelation" id="M:MControl.Util.ExceptionBuilder.InValidNestedRelation(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="childTableName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="IndexKeyLength" id="M:MControl.Util.ExceptionBuilder.IndexKeyLength(System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="length">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="keyLength">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="InsertExternalObject" id="M:MControl.Util.ExceptionBuilder.InsertExternalObject" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="InvalidAttributeValue" id="M:MControl.Util.ExceptionBuilder.InvalidAttributeValue(System.String,System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="value">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="InvalidCurrentRowInDataTableReader" id="M:MControl.Util.ExceptionBuilder.InvalidCurrentRowInDataTableReader" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="InvalidDataColumnMapping" id="M:MControl.Util.ExceptionBuilder.InvalidDataColumnMapping(System.Type)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="type">
              <type name="Type" id="T:System.Type" />
            </parameter>
          </method>
          <method name="InvalidDataTableReader" id="M:MControl.Util.ExceptionBuilder.InvalidDataTableReader(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="tableName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="InvalidDateTimeMode" id="M:MControl.Util.ExceptionBuilder.InvalidDateTimeMode(System.Data.DataSetDateTime)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="mode">
              <type name="DataSetDateTime" id="T:System.Data.DataSetDateTime" valueType="true" />
            </parameter>
          </method>
          <method name="InvalidDuplicateNamedSimpleTypeDelaration" id="M:MControl.Util.ExceptionBuilder.InvalidDuplicateNamedSimpleTypeDelaration(System.String,System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="stName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="errorStr">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="InvalidField" id="M:MControl.Util.ExceptionBuilder.InvalidField(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="InvalidKey" id="M:MControl.Util.ExceptionBuilder.InvalidKey(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="InvalidOffsetLength" id="M:MControl.Util.ExceptionBuilder.InvalidOffsetLength" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="InvalidOrdinal" id="M:MControl.Util.ExceptionBuilder.InvalidOrdinal(System.String,System.Int32)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="ordinal">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="InvalidParentNamespaceinNestedRelation" id="M:MControl.Util.ExceptionBuilder.InvalidParentNamespaceinNestedRelation(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="childTableName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="InvalidPrefix" id="M:MControl.Util.ExceptionBuilder.InvalidPrefix(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="InvalidRemotingFormat" id="M:MControl.Util.ExceptionBuilder.InvalidRemotingFormat(System.Data.SerializationFormat)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="mode">
              <type name="SerializationFormat" id="T:System.Data.SerializationFormat" valueType="true" />
            </parameter>
          </method>
          <method name="InvalidRowBitPattern" id="M:MControl.Util.ExceptionBuilder.InvalidRowBitPattern" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="InvalidRowState" id="M:MControl.Util.ExceptionBuilder.InvalidRowState(System.Data.DataRowState)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="state">
              <type name="DataRowState" id="T:System.Data.DataRowState" valueType="true" />
            </parameter>
          </method>
          <method name="InvalidRowVersion" id="M:MControl.Util.ExceptionBuilder.InvalidRowVersion" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="InvalidSchemaSerializationMode" id="M:MControl.Util.ExceptionBuilder.InvalidSchemaSerializationMode(System.Type,System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="enumType">
              <type name="Type" id="T:System.Type" />
            </parameter>
            <parameter name="mode">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="InvalidSelector" id="M:MControl.Util.ExceptionBuilder.InvalidSelector(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="InvalidSortString" id="M:MControl.Util.ExceptionBuilder.InvalidSortString(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="sort">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="InvalidStorageType" id="M:MControl.Util.ExceptionBuilder.InvalidStorageType(System.TypeCode)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="typecode">
              <type name="TypeCode" id="T:System.TypeCode" valueType="true" />
            </parameter>
          </method>
          <method name="IsDataSetAttributeMissingInSchema" id="M:MControl.Util.ExceptionBuilder.IsDataSetAttributeMissingInSchema" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="KeyColumnsIdentical" id="M:MControl.Util.ExceptionBuilder.KeyColumnsIdentical" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="KeyDuplicateColumns" id="M:MControl.Util.ExceptionBuilder.KeyDuplicateColumns(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="columnName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="KeyLengthMismatch" id="M:MControl.Util.ExceptionBuilder.KeyLengthMismatch" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="KeyLengthZero" id="M:MControl.Util.ExceptionBuilder.KeyLengthZero" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="KeyNoColumns" id="M:MControl.Util.ExceptionBuilder.KeyNoColumns" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="KeyTableMismatch" id="M:MControl.Util.ExceptionBuilder.KeyTableMismatch" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="KeyTooManyColumns" id="M:MControl.Util.ExceptionBuilder.KeyTooManyColumns(System.Int32)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="cols">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="KeysToString" id="M:MControl.Util.ExceptionBuilder.KeysToString(System.Object[])" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="keys">
              <type name="Object" id="T:System.Object">
                <array rank="1" />
              </type>
            </parameter>
          </method>
          <method name="LongerThanMaxLength" id="M:MControl.Util.ExceptionBuilder.LongerThanMaxLength(System.Data.DataColumn)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="DataColumn" id="T:System.Data.DataColumn" />
            </parameter>
          </method>
          <method name="LoopInNestedRelations" id="M:MControl.Util.ExceptionBuilder.LoopInNestedRelations(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="tableName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="MaxLengthViolationText" id="M:MControl.Util.ExceptionBuilder.MaxLengthViolationText(System.String)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="columnName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="MergeFailed" id="M:MControl.Util.ExceptionBuilder.MergeFailed(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="MergeMissingDefinition" id="M:MControl.Util.ExceptionBuilder.MergeMissingDefinition(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="obj">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="MismatchKeyLength" id="M:MControl.Util.ExceptionBuilder.MismatchKeyLength" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <methodOverload name="MissingAttribute" id="Overload:MControl.Util.ExceptionBuilder.MissingAttribute" contract="Static">
            <method name="MissingAttribute" id="M:MControl.Util.ExceptionBuilder.MissingAttribute(System.String)" access="Public" contract="Static">
              <type name="Exception" id="T:System.Exception" />
              <parameter name="attribute">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="MissingAttribute" id="M:MControl.Util.ExceptionBuilder.MissingAttribute(System.String,System.String)" access="Public" contract="Static">
              <type name="Exception" id="T:System.Exception" />
              <parameter name="element">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="attribute">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="MissingRefer" id="M:MControl.Util.ExceptionBuilder.MissingRefer(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="MultipleParentRows" id="M:MControl.Util.ExceptionBuilder.MultipleParentRows(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="tableQName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="MultipleParents" id="M:MControl.Util.ExceptionBuilder.MultipleParents" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="MultipleTextOnlyColumns" id="M:MControl.Util.ExceptionBuilder.MultipleTextOnlyColumns" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="NamespaceNameConflict" id="M:MControl.Util.ExceptionBuilder.NamespaceNameConflict(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="NeededForForeignKeyConstraint" id="M:MControl.Util.ExceptionBuilder.NeededForForeignKeyConstraint(System.Data.UniqueConstraint,System.Data.ForeignKeyConstraint)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="key">
              <type name="UniqueConstraint" id="T:System.Data.UniqueConstraint" />
            </parameter>
            <parameter name="fk">
              <type name="ForeignKeyConstraint" id="T:System.Data.ForeignKeyConstraint" />
            </parameter>
          </method>
          <method name="NegativeMinimumCapacity" id="M:MControl.Util.ExceptionBuilder.NegativeMinimumCapacity" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="NestedCircular" id="M:MControl.Util.ExceptionBuilder.NestedCircular(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="NoConstraintName" id="M:MControl.Util.ExceptionBuilder.NoConstraintName" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="NoCurrentData" id="M:MControl.Util.ExceptionBuilder.NoCurrentData" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="NoOriginalData" id="M:MControl.Util.ExceptionBuilder.NoOriginalData" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="NoProposedData" id="M:MControl.Util.ExceptionBuilder.NoProposedData" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="NoRelationName" id="M:MControl.Util.ExceptionBuilder.NoRelationName" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="NoTableName" id="M:MControl.Util.ExceptionBuilder.NoTableName" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="NonUniqueValues" id="M:MControl.Util.ExceptionBuilder.NonUniqueValues(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="NotAllowDBNullViolationText" id="M:MControl.Util.ExceptionBuilder.NotAllowDBNullViolationText(System.String)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="columnName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="NotOpen" id="M:MControl.Util.ExceptionBuilder.NotOpen" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="NullDataType" id="M:MControl.Util.ExceptionBuilder.NullDataType" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="NullKeyValues" id="M:MControl.Util.ExceptionBuilder.NullKeyValues(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="NullRange" id="M:MControl.Util.ExceptionBuilder.NullRange" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="NullValues" id="M:MControl.Util.ExceptionBuilder.NullValues(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ParentOrChildColumnsDoNotHaveDataSet" id="M:MControl.Util.ExceptionBuilder.ParentOrChildColumnsDoNotHaveDataSet" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="ParentRowNotInTheDataSet" id="M:MControl.Util.ExceptionBuilder.ParentRowNotInTheDataSet" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="ParentTableMismatch" id="M:MControl.Util.ExceptionBuilder.ParentTableMismatch" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="PolymorphismNotSupported" id="M:MControl.Util.ExceptionBuilder.PolymorphismNotSupported(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="typeName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ProblematicChars" id="M:MControl.Util.ExceptionBuilder.ProblematicChars(System.Char)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="charValue">
              <type name="Char" id="T:System.Char" valueType="true" />
            </parameter>
          </method>
          <method name="PropertyNotFound" id="M:MControl.Util.ExceptionBuilder.PropertyNotFound(System.String,System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="property">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="table">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="RangeArgument" id="M:MControl.Util.ExceptionBuilder.RangeArgument(System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="min">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="max">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="ReadOnly" id="M:MControl.Util.ExceptionBuilder.ReadOnly(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="column">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ReadOnlyAndExpression" id="M:MControl.Util.ExceptionBuilder.ReadOnlyAndExpression" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="RecordStateRange" id="M:MControl.Util.ExceptionBuilder.RecordStateRange" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="RelationAlreadyExists" id="M:MControl.Util.ExceptionBuilder.RelationAlreadyExists" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="RelationAlreadyInOtherDataSet" id="M:MControl.Util.ExceptionBuilder.RelationAlreadyInOtherDataSet" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="RelationAlreadyInTheDataSet" id="M:MControl.Util.ExceptionBuilder.RelationAlreadyInTheDataSet" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="RelationChildKeyMissing" id="M:MControl.Util.ExceptionBuilder.RelationChildKeyMissing(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="rel">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="RelationChildNameMissing" id="M:MControl.Util.ExceptionBuilder.RelationChildNameMissing(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="rel">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="RelationDataSetMismatch" id="M:MControl.Util.ExceptionBuilder.RelationDataSetMismatch" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="RelationDataSetNull" id="M:MControl.Util.ExceptionBuilder.RelationDataSetNull" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="RelationDoesNotExist" id="M:MControl.Util.ExceptionBuilder.RelationDoesNotExist" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="RelationForeignRow" id="M:MControl.Util.ExceptionBuilder.RelationForeignRow" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="RelationForeignTable" id="M:MControl.Util.ExceptionBuilder.RelationForeignTable(System.String,System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="t1">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="t2">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="RelationNestedReadOnly" id="M:MControl.Util.ExceptionBuilder.RelationNestedReadOnly" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="RelationNotInTheDataSet" id="M:MControl.Util.ExceptionBuilder.RelationNotInTheDataSet(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="relation">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="RelationOutOfRange" id="M:MControl.Util.ExceptionBuilder.RelationOutOfRange(System.Object)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="index">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="RelationParentNameMissing" id="M:MControl.Util.ExceptionBuilder.RelationParentNameMissing(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="rel">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="RelationTableKeyMissing" id="M:MControl.Util.ExceptionBuilder.RelationTableKeyMissing(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="rel">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="RelationTableNull" id="M:MControl.Util.ExceptionBuilder.RelationTableNull" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="RelationTableWasRemoved" id="M:MControl.Util.ExceptionBuilder.RelationTableWasRemoved" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="RemoveExternalObject" id="M:MControl.Util.ExceptionBuilder.RemoveExternalObject" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="RemoveParentRow" id="M:MControl.Util.ExceptionBuilder.RemoveParentRow(System.Data.ForeignKeyConstraint)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="constraint">
              <type name="ForeignKeyConstraint" id="T:System.Data.ForeignKeyConstraint" />
            </parameter>
          </method>
          <method name="RemovePrimaryKey" id="M:MControl.Util.ExceptionBuilder.RemovePrimaryKey(System.Data.DataTable)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="table">
              <type name="DataTable" id="T:System.Data.DataTable" />
            </parameter>
          </method>
          <method name="RowAlreadyDeleted" id="M:MControl.Util.ExceptionBuilder.RowAlreadyDeleted" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="RowAlreadyInOtherCollection" id="M:MControl.Util.ExceptionBuilder.RowAlreadyInOtherCollection" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="RowAlreadyInTheCollection" id="M:MControl.Util.ExceptionBuilder.RowAlreadyInTheCollection" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="RowAlreadyRemoved" id="M:MControl.Util.ExceptionBuilder.RowAlreadyRemoved" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="RowEmpty" id="M:MControl.Util.ExceptionBuilder.RowEmpty" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="RowInsertMissing" id="M:MControl.Util.ExceptionBuilder.RowInsertMissing(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="tableName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="RowInsertOutOfRange" id="M:MControl.Util.ExceptionBuilder.RowInsertOutOfRange(System.Int32)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="RowInsertTwice" id="M:MControl.Util.ExceptionBuilder.RowInsertTwice(System.Int32,System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="tableName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="RowNotInTheDataSet" id="M:MControl.Util.ExceptionBuilder.RowNotInTheDataSet" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="RowNotInTheTable" id="M:MControl.Util.ExceptionBuilder.RowNotInTheTable" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <methodOverload name="RowOutOfRange" id="Overload:MControl.Util.ExceptionBuilder.RowOutOfRange" contract="Static">
            <method name="RowOutOfRange" id="M:MControl.Util.ExceptionBuilder.RowOutOfRange" access="Public" contract="Static">
              <type name="Exception" id="T:System.Exception" />
            </method>
            <method name="RowOutOfRange" id="M:MControl.Util.ExceptionBuilder.RowOutOfRange(System.Int32)" access="Public" contract="Static">
              <type name="Exception" id="T:System.Exception" />
              <parameter name="index">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="RowRemovedFromTheTable" id="M:MControl.Util.ExceptionBuilder.RowRemovedFromTheTable" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="SelfnestedDatasetConflictingName" id="M:MControl.Util.ExceptionBuilder.SelfnestedDatasetConflictingName(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="table">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="SetAddedAndModifiedCalledOnnonUnchanged" id="M:MControl.Util.ExceptionBuilder.SetAddedAndModifiedCalledOnnonUnchanged" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="SetDataSetFailed" id="M:MControl.Util.ExceptionBuilder.SetDataSetFailed" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="SetDataSetNameConflicting" id="M:MControl.Util.ExceptionBuilder.SetDataSetNameConflicting(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="SetDataSetNameToEmpty" id="M:MControl.Util.ExceptionBuilder.SetDataSetNameToEmpty" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <methodOverload name="SetFailed" id="Overload:MControl.Util.ExceptionBuilder.SetFailed" contract="Static">
            <method name="SetFailed" id="M:MControl.Util.ExceptionBuilder.SetFailed(System.String)" access="Public" contract="Static">
              <type name="Exception" id="T:System.Exception" />
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="SetFailed" id="M:MControl.Util.ExceptionBuilder.SetFailed(System.Object,System.Data.DataColumn,System.Type,System.Exception)" access="Public" contract="Static">
              <type name="Exception" id="T:System.Exception" />
              <parameter name="value">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="column">
                <type name="DataColumn" id="T:System.Data.DataColumn" />
              </parameter>
              <parameter name="type">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="innerException">
                <type name="Exception" id="T:System.Exception" />
              </parameter>
            </method>
          </methodOverload>
          <method name="SetIListObject" id="M:MControl.Util.ExceptionBuilder.SetIListObject" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="SetParentRowTableMismatch" id="M:MControl.Util.ExceptionBuilder.SetParentRowTableMismatch(System.String,System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="t1">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="t2">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="SetRowStateFilter" id="M:MControl.Util.ExceptionBuilder.SetRowStateFilter" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="SetTable" id="M:MControl.Util.ExceptionBuilder.SetTable" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="SimpleTypeNotSupported" id="M:MControl.Util.ExceptionBuilder.SimpleTypeNotSupported" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="StorageSetFailed" id="M:MControl.Util.ExceptionBuilder.StorageSetFailed" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="TableAlreadyInOtherDataSet" id="M:MControl.Util.ExceptionBuilder.TableAlreadyInOtherDataSet" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="TableAlreadyInTheDataSet" id="M:MControl.Util.ExceptionBuilder.TableAlreadyInTheDataSet" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="TableCannotAddToSimpleContent" id="M:MControl.Util.ExceptionBuilder.TableCannotAddToSimpleContent" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="TableCantBeNestedInTwoTables" id="M:MControl.Util.ExceptionBuilder.TableCantBeNestedInTwoTables(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="tableName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="TableForeignPrimaryKey" id="M:MControl.Util.ExceptionBuilder.TableForeignPrimaryKey" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="TableInConstraint" id="M:MControl.Util.ExceptionBuilder.TableInConstraint(System.Data.DataTable,System.Data.Constraint)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="table">
              <type name="DataTable" id="T:System.Data.DataTable" />
            </parameter>
            <parameter name="constraint">
              <type name="Constraint" id="T:System.Data.Constraint" />
            </parameter>
          </method>
          <method name="TableInRelation" id="M:MControl.Util.ExceptionBuilder.TableInRelation" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="TableMissingPrimaryKey" id="M:MControl.Util.ExceptionBuilder.TableMissingPrimaryKey" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="TableNotFound" id="M:MControl.Util.ExceptionBuilder.TableNotFound(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="tableName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="TableNotInTheDataSet" id="M:MControl.Util.ExceptionBuilder.TableNotInTheDataSet(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="table">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="TableOutOfRange" id="M:MControl.Util.ExceptionBuilder.TableOutOfRange(System.Int32)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="TablesInDifferentSets" id="M:MControl.Util.ExceptionBuilder.TablesInDifferentSets" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="TooManyIsDataSetAtributeInSchema" id="M:MControl.Util.ExceptionBuilder.TooManyIsDataSetAtributeInSchema" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="TraceExceptionAsReturnValue" id="M:MControl.Util.ExceptionBuilder.TraceExceptionAsReturnValue(System.Exception)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="Exception" id="T:System.Exception" />
            </parameter>
          </method>
          <method name="TraceExceptionForCapture" id="M:MControl.Util.ExceptionBuilder.TraceExceptionForCapture(System.Exception)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="Exception" id="T:System.Exception" />
            </parameter>
          </method>
          <method name="TraceExceptionWithoutRethrow" id="M:MControl.Util.ExceptionBuilder.TraceExceptionWithoutRethrow(System.Exception)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="Exception" id="T:System.Exception" />
            </parameter>
          </method>
          <method name="UDTImplementsIChangeTrackingButnotIRevertible" id="M:MControl.Util.ExceptionBuilder.UDTImplementsIChangeTrackingButnotIRevertible(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="typeName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="UndefinedDatatype" id="M:MControl.Util.ExceptionBuilder.UndefinedDatatype(System.String)" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
            <parameter name="name">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="UniqueAndExpression" id="M:MControl.Util.ExceptionBuilder.UniqueAndExpression" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="UniqueConstraintViolation" id="M:MControl.Util.ExceptionBuilder.UniqueConstraintViolation" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <method name="UniqueConstraintViolationText" id="M:MControl.Util.ExceptionBuilder.UniqueConstraintViolationText(System.Data.DataColumn[],System.Object[])" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="columns">
              <type name="DataColumn" id="T:System.Data.DataColumn">
                <array rank="1" />
              </type>
            </parameter>
            <parameter name="values">
              <type name="Object" id="T:System.Object">
                <array rank="1" />
              </type>
            </parameter>
          </method>
          <method name="ValueArrayLength" id="M:MControl.Util.ExceptionBuilder.ValueArrayLength" access="Public" contract="Static">
            <type name="Exception" id="T:System.Exception" />
          </method>
          <methodOverload name="_Argument" id="Overload:MControl.Util.ExceptionBuilder._Argument" contract="Static">
            <method name="_Argument" id="M:MControl.Util.ExceptionBuilder._Argument(System.String)" access="Public" contract="Static">
              <type name="ArgumentException" id="T:System.ArgumentException" />
              <parameter name="error">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="_Argument" id="M:MControl.Util.ExceptionBuilder._Argument(System.String,System.Exception)" access="Public" contract="Static">
              <type name="ArgumentException" id="T:System.ArgumentException" />
              <parameter name="error">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="innerException">
                <type name="Exception" id="T:System.Exception" />
              </parameter>
            </method>
            <method name="_Argument" id="M:MControl.Util.ExceptionBuilder._Argument(System.String,System.String)" access="Public" contract="Static">
              <type name="ArgumentException" id="T:System.ArgumentException" />
              <parameter name="paramName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="error">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="_ArgumentOutOfRange" id="M:MControl.Util.ExceptionBuilder._ArgumentOutOfRange(System.String,System.String)" access="Public" contract="Static">
            <type name="ArgumentOutOfRangeException" id="T:System.ArgumentOutOfRangeException" />
            <parameter name="paramName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="msg">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="ExceptionHelper" id="T:MControl.Util.ExceptionHelper" access="Public" namespace="MControl.Util" displayName="ExceptionHelper" abstract="true" sealed="true">
          <method name="ArgumentException" id="M:MControl.Util.ExceptionHelper.ArgumentException(MControl.Util.ExceptionResource)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="resource">
              <type name="ExceptionResource" id="T:MControl.Util.ExceptionResource" valueType="true" />
            </parameter>
          </method>
          <method name="ArgumentNullException" id="M:MControl.Util.ExceptionHelper.ArgumentNullException(MControl.Util.ExceptionArgument)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="argument">
              <type name="ExceptionArgument" id="T:MControl.Util.ExceptionArgument" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="ArgumentOutOfRangeException" id="Overload:MControl.Util.ExceptionHelper.ArgumentOutOfRangeException" contract="Static">
            <method name="ArgumentOutOfRangeException" id="M:MControl.Util.ExceptionHelper.ArgumentOutOfRangeException(MControl.Util.ExceptionArgument)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="argument">
                <type name="ExceptionArgument" id="T:MControl.Util.ExceptionArgument" valueType="true" />
              </parameter>
            </method>
            <method name="ArgumentOutOfRangeException" id="M:MControl.Util.ExceptionHelper.ArgumentOutOfRangeException(MControl.Util.ExceptionArgument,MControl.Util.ExceptionResource)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="argument">
                <type name="ExceptionArgument" id="T:MControl.Util.ExceptionArgument" valueType="true" />
              </parameter>
              <parameter name="resource">
                <type name="ExceptionResource" id="T:MControl.Util.ExceptionResource" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="InvalidOperationException" id="M:MControl.Util.ExceptionHelper.InvalidOperationException(MControl.Util.ExceptionResource)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="resource">
              <type name="ExceptionResource" id="T:MControl.Util.ExceptionResource" valueType="true" />
            </parameter>
          </method>
          <method name="KeyNotFoundException" id="M:MControl.Util.ExceptionHelper.KeyNotFoundException" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="NotSupportedException" id="M:MControl.Util.ExceptionHelper.NotSupportedException(MControl.Util.ExceptionResource)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="resource">
              <type name="ExceptionResource" id="T:MControl.Util.ExceptionResource" valueType="true" />
            </parameter>
          </method>
          <method name="SerializationException" id="M:MControl.Util.ExceptionHelper.SerializationException(MControl.Util.ExceptionResource)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="resource">
              <type name="ExceptionResource" id="T:MControl.Util.ExceptionResource" valueType="true" />
            </parameter>
          </method>
          <method name="WrongKeyTypeArgumentException" id="M:MControl.Util.ExceptionHelper.WrongKeyTypeArgumentException(System.Object,System.Type)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="key">
              <type name="Object" id="T:System.Object" />
            </parameter>
            <parameter name="targetType">
              <type name="Type" id="T:System.Type" />
            </parameter>
          </method>
          <method name="WrongValueTypeArgumentException" id="M:MControl.Util.ExceptionHelper.WrongValueTypeArgumentException(System.Object,System.Type)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
            <parameter name="targetType">
              <type name="Type" id="T:System.Type" />
            </parameter>
          </method>
        </class>
        <class name="InvalidDataException" id="T:MControl.Util.InvalidDataException" access="Public" namespace="MControl.Util" displayName="InvalidDataException">
          <attribute name="SerializableAttribute" id="T:System.SerializableAttribute" />
          <base name="ApplicationException" id="T:System.ApplicationException" displayName="System.ApplicationException">
            <base name="Exception" id="T:System.Exception" displayName="System.Exception" />
          </base>
          <implements name="ISerializable" id="T:System.Runtime.Serialization.ISerializable" inherited="true" />
          <constructorOverload name=".ctor" id="Overload:MControl.Util.InvalidDataException.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.InvalidDataException" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Util.InvalidDataException.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.InvalidDataException" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.InvalidDataException.#ctor(System.String)" access="Public" contract="Normal">
              <parameter name="p_strErrDescription">
                <type name="String" id="T:System.String" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.InvalidDataException.#ctor(System.String,System.Exception)" access="Public" contract="Normal">
              <parameter name="p_strErrDescription">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="p_InnerException">
                <type name="Exception" id="T:System.Exception" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.InvalidDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" access="Family" contract="Normal">
              <parameter name="p_Info">
                <type name="SerializationInfo" id="T:System.Runtime.Serialization.SerializationInfo" />
              </parameter>
              <parameter name="p_StreamingContext">
                <type name="StreamingContext" id="T:System.Runtime.Serialization.StreamingContext" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
        </class>
        <class name="IoHelpers" id="T:MControl.Util.IoHelpers" access="Public" namespace="MControl.Util" displayName="IoHelpers">
          <method name="CheckWriteAccess" id="M:MControl.Util.IoHelpers.CheckWriteAccess(System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="fileName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="FileToString" id="Overload:MControl.Util.IoHelpers.FileToString" contract="Static">
            <method name="FileToString" id="M:MControl.Util.IoHelpers.FileToString(System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="sFile">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="FileToString" id="M:MControl.Util.IoHelpers.FileToString(System.String,System.Int32)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="sFile">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="size">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="GetRecursiveFiles" id="M:MControl.Util.IoHelpers.GetRecursiveFiles(System.String,System.String,System.Collections.ArrayList@)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="path">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="searchPattern">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="listFiles" direction="ref">
              <type name="ArrayList" id="T:System.Collections.ArrayList" />
            </parameter>
          </method>
          <method name="GetResourceStream" id="M:MControl.Util.IoHelpers.GetResourceStream(System.Reflection.Assembly,System.String)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="assembly">
              <type name="Assembly" id="T:System.Reflection.Assembly" />
            </parameter>
            <parameter name="fileName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ImageToBase64Stream" id="M:MControl.Util.IoHelpers.ImageToBase64Stream(System.String)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="fileName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ImageToStream" id="M:MControl.Util.IoHelpers.ImageToStream(System.String)" access="Public" contract="Static">
            <type name="Byte" id="T:System.Byte" valueType="true">
              <array rank="1" />
            </type>
            <parameter name="fileName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ObjectToXmlString" id="M:MControl.Util.IoHelpers.ObjectToXmlString(System.Object)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="obj">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="ProcessImage" id="M:MControl.Util.IoHelpers.ProcessImage(System.String,System.String)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="fileName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="base64Stream">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ReadBinaryStream" id="M:MControl.Util.IoHelpers.ReadBinaryStream(System.String)" access="Public" contract="Static">
            <type name="Byte" id="T:System.Byte" valueType="true">
              <array rank="1" />
            </type>
            <parameter name="fileName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ReadFileStream" id="M:MControl.Util.IoHelpers.ReadFileStream(System.String)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="fileName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="ReadTextFile" id="Overload:MControl.Util.IoHelpers.ReadTextFile" contract="Static">
            <method name="ReadTextFile" id="M:MControl.Util.IoHelpers.ReadTextFile(System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="filePath">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Read text from file" />
              </attribute>
            </method>
            <method name="ReadTextFile" id="M:MControl.Util.IoHelpers.ReadTextFile" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Open text file and Read text from it" />
              </attribute>
            </method>
          </methodOverload>
          <method name="ReplaceFile" id="M:MControl.Util.IoHelpers.ReplaceFile(System.String,System.String,System.Boolean)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="tempFile">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="targetFile">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="deleteTempFile">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="StringToFile" id="Overload:MControl.Util.IoHelpers.StringToFile" contract="Static">
            <method name="StringToFile" id="M:MControl.Util.IoHelpers.StringToFile(System.String,System.String,System.Boolean)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="strValue">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="strFileName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="bAppendToFile">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
            <method name="StringToFile" id="M:MControl.Util.IoHelpers.StringToFile(System.String,System.String)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="strValue">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="strFileName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="XmlStringToObject" id="M:MControl.Util.IoHelpers.XmlStringToObject(System.String,System.Type)" access="Public" contract="Static">
            <type name="Object" id="T:System.Object" />
            <parameter name="xmlString">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="type">
              <type name="Type" id="T:System.Type" />
            </parameter>
          </method>
        </class>
        <class name="NativeMethods" id="T:MControl.Util.NativeMethods" access="Public" namespace="MControl.Util" displayName="NativeMethods" sealed="true">
          <constructor name=".ctor" id="M:MControl.Util.NativeMethods.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.NativeMethods" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="DateTimeToSysTime" id="M:MControl.Util.NativeMethods.DateTimeToSysTime(System.DateTime)" access="Public" contract="Static">
            <type name="NativeMethods.SYSTEMTIME" id="T:MControl.Util.NativeMethods.SYSTEMTIME" />
            <parameter name="time">
              <type name="DateTime" id="T:System.DateTime" valueType="true" />
            </parameter>
          </method>
          <method name="GetFontHandle" id="M:MControl.Util.NativeMethods.GetFontHandle(System.Drawing.Font)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="font">
              <type name="Font" id="T:System.Drawing.Font" />
            </parameter>
          </method>
          <method name="MapWindowPoints" id="M:MControl.Util.NativeMethods.MapWindowPoints(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef,MControl.Util.NativeMethods.POINT,System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hWndFrom">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="hWndTo">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="pt">
              <type name="NativeMethods.POINT" id="T:MControl.Util.NativeMethods.POINT" />
              <attribute name="InAttribute" id="T:System.Runtime.InteropServices.InAttribute" />
              <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
            </parameter>
            <parameter name="cPoints">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="MapWindowPoints" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SendMessage" id="M:MControl.Util.NativeMethods.SendMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,MControl.Util.NativeMethods.SYSTEMTIME)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hWnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="msg">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="wParam">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="lParam">
              <type name="NativeMethods.SYSTEMTIME" id="T:MControl.Util.NativeMethods.SYSTEMTIME" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
        </class>
        <class name="NativeMethods.FontHandleWrapper" id="T:MControl.Util.NativeMethods.FontHandleWrapper" access="NestedPublic" namespace="MControl.Util" displayName="NativeMethods.FontHandleWrapper" declaringType="NativeMethods" sealed="true">
          <base name="MarshalByRefObject" id="T:System.MarshalByRefObject" displayName="System.MarshalByRefObject" />
          <method name="Dispose" id="M:MControl.Util.NativeMethods.FontHandleWrapper.Dispose" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
        </class>
        <class name="NativeMethods.NMDATETIMECHANGE" id="T:MControl.Util.NativeMethods.NMDATETIMECHANGE" access="NestedPublic" namespace="MControl.Util" displayName="NativeMethods.NMDATETIMECHANGE" declaringType="NativeMethods">
          <constructor name=".ctor" id="M:MControl.Util.NativeMethods.NMDATETIMECHANGE.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.NativeMethods.NMDATETIMECHANGE" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="dwFlags" id="F:MControl.Util.NativeMethods.NMDATETIMECHANGE.dwFlags" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="nmhdr" id="F:MControl.Util.NativeMethods.NMDATETIMECHANGE.nmhdr" access="Public" contract="Normal">
            <type name="NativeMethods.NMHDR" id="T:MControl.Util.NativeMethods.NMHDR" valueType="true" />
          </field>
          <field name="st" id="F:MControl.Util.NativeMethods.NMDATETIMECHANGE.st" access="Public" contract="Normal">
            <type name="NativeMethods.SYSTEMTIME" id="T:MControl.Util.NativeMethods.SYSTEMTIME" />
          </field>
        </class>
        <class name="NativeMethods.NMDATETIMEFORMAT" id="T:MControl.Util.NativeMethods.NMDATETIMEFORMAT" access="NestedPublic" namespace="MControl.Util" displayName="NativeMethods.NMDATETIMEFORMAT" declaringType="NativeMethods">
          <constructor name=".ctor" id="M:MControl.Util.NativeMethods.NMDATETIMEFORMAT.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.NativeMethods.NMDATETIMEFORMAT" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="nmhdr" id="F:MControl.Util.NativeMethods.NMDATETIMEFORMAT.nmhdr" access="Public" contract="Normal">
            <type name="NativeMethods.NMHDR" id="T:MControl.Util.NativeMethods.NMHDR" valueType="true" />
          </field>
          <field name="pszDisplay" id="F:MControl.Util.NativeMethods.NMDATETIMEFORMAT.pszDisplay" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </field>
          <field name="pszFormat" id="F:MControl.Util.NativeMethods.NMDATETIMEFORMAT.pszFormat" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </field>
          <field name="st" id="F:MControl.Util.NativeMethods.NMDATETIMEFORMAT.st" access="Public" contract="Normal">
            <type name="NativeMethods.SYSTEMTIME" id="T:MControl.Util.NativeMethods.SYSTEMTIME" />
          </field>
          <field name="szDisplay" id="F:MControl.Util.NativeMethods.NMDATETIMEFORMAT.szDisplay" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <attribute name="MarshalAsAttribute" id="T:System.Runtime.InteropServices.MarshalAsAttribute">
              <argument id="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.ByValTStr" />
              <field name="ArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.0" />
              <field name="SizeParamIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" type="System.Int16" value="0" />
              <field name="SizeConst" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" type="System.Int32" value="32" />
              <field name="IidParameterIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex" type="System.Int32" value="0" />
              <field name="SafeArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" type="System.Runtime.InteropServices.VarEnum" value="VarEnum.VT_EMPTY" />
            </attribute>
          </field>
        </class>
        <class name="NativeMethods.POINT" id="T:MControl.Util.NativeMethods.POINT" access="NestedPublic" namespace="MControl.Util" displayName="NativeMethods.POINT" declaringType="NativeMethods">
          <constructorOverload name=".ctor" id="Overload:MControl.Util.NativeMethods.POINT.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.NativeMethods.POINT" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Util.NativeMethods.POINT.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.NativeMethods.POINT" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.NativeMethods.POINT.#ctor(System.Int32,System.Int32)" access="Public" contract="Normal">
              <parameter name="x">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="y">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
          <field name="x" id="F:MControl.Util.NativeMethods.POINT.x" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="y" id="F:MControl.Util.NativeMethods.POINT.y" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </class>
        <class name="NativeMethods.SYSTEMTIME" id="T:MControl.Util.NativeMethods.SYSTEMTIME" access="NestedPublic" namespace="MControl.Util" displayName="NativeMethods.SYSTEMTIME" declaringType="NativeMethods">
          <constructor name=".ctor" id="M:MControl.Util.NativeMethods.SYSTEMTIME.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.NativeMethods.SYSTEMTIME" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="wDay" id="F:MControl.Util.NativeMethods.SYSTEMTIME.wDay" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wDayOfWeek" id="F:MControl.Util.NativeMethods.SYSTEMTIME.wDayOfWeek" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wHour" id="F:MControl.Util.NativeMethods.SYSTEMTIME.wHour" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wMilliseconds" id="F:MControl.Util.NativeMethods.SYSTEMTIME.wMilliseconds" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wMinute" id="F:MControl.Util.NativeMethods.SYSTEMTIME.wMinute" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wMonth" id="F:MControl.Util.NativeMethods.SYSTEMTIME.wMonth" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wSecond" id="F:MControl.Util.NativeMethods.SYSTEMTIME.wSecond" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wYear" id="F:MControl.Util.NativeMethods.SYSTEMTIME.wYear" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <method name="ToString" id="M:MControl.Util.NativeMethods.SYSTEMTIME.ToString" access="Public" contract="Override">
            <type name="String" id="T:System.String" />
          </method>
        </class>
        <class name="PropertyValueChangedEventArgs" id="T:MControl.Util.PropertyValueChangedEventArgs" access="Public" namespace="MControl.Util" displayName="PropertyValueChangedEventArgs">
          <base name="EventArgs" id="T:System.EventArgs" displayName="System.EventArgs" />
          <constructor name=".ctor" id="M:MControl.Util.PropertyValueChangedEventArgs.#ctor(System.String,System.Object)" access="Public" contract="Normal">
            <parameter name="propertyName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="popertyValue">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </constructor>
          <property name="PropertyName" id="P:MControl.Util.PropertyValueChangedEventArgs.PropertyName" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
          </property>
          <property name="PropertyValue" id="P:MControl.Util.PropertyValueChangedEventArgs.PropertyValue" access="Public" contract="Normal">
            <type name="Object" id="T:System.Object" />
            <get access="Public" />
          </property>
        </class>
        <class name="RangeConverter" id="T:MControl.Util.RangeConverter" access="Public" namespace="MControl.Util" displayName="RangeConverter">
          <base name="TypeConverter" id="T:System.ComponentModel.TypeConverter" displayName="System.ComponentModel.TypeConverter" />
          <constructor name=".ctor" id="M:MControl.Util.RangeConverter.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.RangeConverter" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="GetProperties" id="M:MControl.Util.RangeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" access="Public" contract="Override">
            <type name="PropertyDescriptorCollection" id="T:System.ComponentModel.PropertyDescriptorCollection" />
            <parameter name="context">
              <type name="ITypeDescriptorContext" id="T:System.ComponentModel.ITypeDescriptorContext" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
            <parameter name="attributes">
              <type name="Attribute" id="T:System.Attribute">
                <array rank="1" />
              </type>
            </parameter>
          </method>
          <method name="GetPropertiesSupported" id="M:MControl.Util.RangeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)" access="Public" contract="Override">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="context">
              <type name="ITypeDescriptorContext" id="T:System.ComponentModel.ITypeDescriptorContext" />
            </parameter>
          </method>
        </class>
        <class name="RangeDateConverter" id="T:MControl.Util.RangeDateConverter" access="Public" namespace="MControl.Util" displayName="RangeDateConverter">
          <base name="TypeConverter" id="T:System.ComponentModel.TypeConverter" displayName="System.ComponentModel.TypeConverter" />
          <constructor name=".ctor" id="M:MControl.Util.RangeDateConverter.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.RangeDateConverter" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="CanConvertFrom" id="M:MControl.Util.RangeDateConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" access="Public" contract="Override">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="context">
              <type name="ITypeDescriptorContext" id="T:System.ComponentModel.ITypeDescriptorContext" />
            </parameter>
            <parameter name="sourceType">
              <type name="Type" id="T:System.Type" />
            </parameter>
          </method>
          <method name="CanConvertTo" id="M:MControl.Util.RangeDateConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" access="Public" contract="Override">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="context">
              <type name="ITypeDescriptorContext" id="T:System.ComponentModel.ITypeDescriptorContext" />
            </parameter>
            <parameter name="destinationType">
              <type name="Type" id="T:System.Type" />
            </parameter>
          </method>
          <method name="ConvertFrom" id="M:MControl.Util.RangeDateConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" access="Public" contract="Override">
            <type name="Object" id="T:System.Object" />
            <parameter name="context">
              <type name="ITypeDescriptorContext" id="T:System.ComponentModel.ITypeDescriptorContext" />
            </parameter>
            <parameter name="culture">
              <type name="CultureInfo" id="T:System.Globalization.CultureInfo" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="ConvertTo" id="M:MControl.Util.RangeDateConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" access="Public" contract="Override">
            <type name="Object" id="T:System.Object" />
            <parameter name="context">
              <type name="ITypeDescriptorContext" id="T:System.ComponentModel.ITypeDescriptorContext" />
            </parameter>
            <parameter name="culture">
              <type name="CultureInfo" id="T:System.Globalization.CultureInfo" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
            <parameter name="destinationType">
              <type name="Type" id="T:System.Type" />
            </parameter>
          </method>
          <method name="CreateInstance" id="M:MControl.Util.RangeDateConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" access="Public" contract="Override">
            <type name="Object" id="T:System.Object" />
            <parameter name="context">
              <type name="ITypeDescriptorContext" id="T:System.ComponentModel.ITypeDescriptorContext" />
            </parameter>
            <parameter name="propertyValues">
              <type name="IDictionary" id="T:System.Collections.IDictionary" />
            </parameter>
          </method>
          <method name="GetCreateInstanceSupported" id="M:MControl.Util.RangeDateConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)" access="Public" contract="Override">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="context">
              <type name="ITypeDescriptorContext" id="T:System.ComponentModel.ITypeDescriptorContext" />
            </parameter>
          </method>
          <method name="GetProperties" id="M:MControl.Util.RangeDateConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" access="Public" contract="Override">
            <type name="PropertyDescriptorCollection" id="T:System.ComponentModel.PropertyDescriptorCollection" />
            <parameter name="context">
              <type name="ITypeDescriptorContext" id="T:System.ComponentModel.ITypeDescriptorContext" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
            <parameter name="attributes">
              <type name="Attribute" id="T:System.Attribute">
                <array rank="1" />
              </type>
            </parameter>
          </method>
          <method name="GetPropertiesSupported" id="M:MControl.Util.RangeDateConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)" access="Public" contract="Override">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="context">
              <type name="ITypeDescriptorContext" id="T:System.ComponentModel.ITypeDescriptorContext" />
            </parameter>
          </method>
        </class>
        <class name="RangeNumberConverter" id="T:MControl.Util.RangeNumberConverter" access="Public" namespace="MControl.Util" displayName="RangeNumberConverter">
          <base name="TypeConverter" id="T:System.ComponentModel.TypeConverter" displayName="System.ComponentModel.TypeConverter" />
          <constructor name=".ctor" id="M:MControl.Util.RangeNumberConverter.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.RangeNumberConverter" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="CanConvertFrom" id="M:MControl.Util.RangeNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" access="Public" contract="Override">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="context">
              <type name="ITypeDescriptorContext" id="T:System.ComponentModel.ITypeDescriptorContext" />
            </parameter>
            <parameter name="sourceType">
              <type name="Type" id="T:System.Type" />
            </parameter>
          </method>
          <method name="CanConvertTo" id="M:MControl.Util.RangeNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" access="Public" contract="Override">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="context">
              <type name="ITypeDescriptorContext" id="T:System.ComponentModel.ITypeDescriptorContext" />
            </parameter>
            <parameter name="destinationType">
              <type name="Type" id="T:System.Type" />
            </parameter>
          </method>
          <method name="ConvertFrom" id="M:MControl.Util.RangeNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" access="Public" contract="Override">
            <type name="Object" id="T:System.Object" />
            <parameter name="context">
              <type name="ITypeDescriptorContext" id="T:System.ComponentModel.ITypeDescriptorContext" />
            </parameter>
            <parameter name="culture">
              <type name="CultureInfo" id="T:System.Globalization.CultureInfo" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="ConvertTo" id="M:MControl.Util.RangeNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" access="Public" contract="Override">
            <type name="Object" id="T:System.Object" />
            <parameter name="context">
              <type name="ITypeDescriptorContext" id="T:System.ComponentModel.ITypeDescriptorContext" />
            </parameter>
            <parameter name="culture">
              <type name="CultureInfo" id="T:System.Globalization.CultureInfo" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
            <parameter name="destinationType">
              <type name="Type" id="T:System.Type" />
            </parameter>
          </method>
          <method name="CreateInstance" id="M:MControl.Util.RangeNumberConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" access="Public" contract="Override">
            <type name="Object" id="T:System.Object" />
            <parameter name="context">
              <type name="ITypeDescriptorContext" id="T:System.ComponentModel.ITypeDescriptorContext" />
            </parameter>
            <parameter name="propertyValues">
              <type name="IDictionary" id="T:System.Collections.IDictionary" />
            </parameter>
          </method>
          <method name="GetCreateInstanceSupported" id="M:MControl.Util.RangeNumberConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)" access="Public" contract="Override">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="context">
              <type name="ITypeDescriptorContext" id="T:System.ComponentModel.ITypeDescriptorContext" />
            </parameter>
          </method>
          <method name="GetProperties" id="M:MControl.Util.RangeNumberConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" access="Public" contract="Override">
            <type name="PropertyDescriptorCollection" id="T:System.ComponentModel.PropertyDescriptorCollection" />
            <parameter name="context">
              <type name="ITypeDescriptorContext" id="T:System.ComponentModel.ITypeDescriptorContext" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
            <parameter name="attributes">
              <type name="Attribute" id="T:System.Attribute">
                <array rank="1" />
              </type>
            </parameter>
          </method>
          <method name="GetPropertiesSupported" id="M:MControl.Util.RangeNumberConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)" access="Public" contract="Override">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="context">
              <type name="ITypeDescriptorContext" id="T:System.ComponentModel.ITypeDescriptorContext" />
            </parameter>
          </method>
        </class>
        <class name="RangeType" id="T:MControl.Util.RangeType" access="Public" namespace="MControl.Util" displayName="RangeType" sealed="true">
          <attribute name="SerializableAttribute" id="T:System.SerializableAttribute" />
          <attribute name="TypeConverterAttribute" id="T:System.ComponentModel.TypeConverterAttribute">
            <argument id="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)" type="System.Type" value="MControl.Util.RangeConverter" />
          </attribute>
          <constructorOverload name=".ctor" id="Overload:MControl.Util.RangeType.#ctor" explicitInterfaceImplementation="true">
            <constructor name=".ctor" id="M:MControl.Util.RangeType.#ctor(System.Decimal,System.Decimal)" access="Public" contract="Normal">
              <parameter name="minValue">
                <type name="Decimal" id="T:System.Decimal" valueType="true" />
              </parameter>
              <parameter name="maxValue">
                <type name="Decimal" id="T:System.Decimal" valueType="true" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.RangeType.#ctor(System.DateTime,System.DateTime)" access="Public" contract="Normal">
              <parameter name="minValue">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
              <parameter name="maxValue">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
          <field name="MaxNumber" id="F:MControl.Util.RangeType.MaxNumber" access="Public" contract="Static" initOnly="true">
            <type name="Decimal" id="T:System.Decimal" valueType="true" />
            <attribute name="DecimalConstantAttribute" id="T:System.Runtime.CompilerServices.DecimalConstantAttribute">
              <argument id="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)" type="System.Byte" value="0" />
              <argument id="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)" type="System.Byte" value="0" />
              <argument id="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)" type="System.UInt32" value="0" />
              <argument id="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)" type="System.UInt32" value="0" />
              <argument id="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)" type="System.UInt32" value="999999999" />
            </attribute>
          </field>
          <field name="MinNumber" id="F:MControl.Util.RangeType.MinNumber" access="Public" contract="Static" initOnly="true">
            <type name="Decimal" id="T:System.Decimal" valueType="true" />
            <attribute name="DecimalConstantAttribute" id="T:System.Runtime.CompilerServices.DecimalConstantAttribute">
              <argument id="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)" type="System.Byte" value="0" />
              <argument id="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)" type="System.Byte" value="128" />
              <argument id="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)" type="System.UInt32" value="0" />
              <argument id="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)" type="System.UInt32" value="0" />
              <argument id="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)" type="System.UInt32" value="999999999" />
            </attribute>
          </field>
          <property name="MaxDate" id="P:MControl.Util.RangeType.MaxDate" access="Public" contract="Static">
            <type name="DateTime" id="T:System.DateTime" valueType="true" />
            <get access="Public" />
          </property>
          <property name="MaxValue" id="P:MControl.Util.RangeType.MaxValue" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="MinDate" id="P:MControl.Util.RangeType.MinDate" access="Public" contract="Static">
            <type name="DateTime" id="T:System.DateTime" valueType="true" />
            <get access="Public" />
          </property>
          <property name="MinValue" id="P:MControl.Util.RangeType.MinValue" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <methodOverload name="IsValid" id="Overload:MControl.Util.RangeType.IsValid">
            <method name="IsValid" id="M:MControl.Util.RangeType.IsValid(System.Object)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="obj">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
            <method name="IsValid" id="M:MControl.Util.RangeType.IsValid(System.String)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="s">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="RangeDate" id="M:MControl.Util.RangeType.RangeDate" access="Public" contract="Normal">
            <type name="RangeDate" id="T:MControl.Util.RangeDate" valueType="true" />
          </method>
          <method name="RangeNumber" id="M:MControl.Util.RangeType.RangeNumber" access="Public" contract="Normal">
            <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
          </method>
          <method name="ToString" id="M:MControl.Util.RangeType.ToString" access="Public" contract="Override">
            <type name="String" id="T:System.String" />
            <attribute name="DesignerSerializationVisibilityAttribute" id="T:System.ComponentModel.DesignerSerializationVisibilityAttribute">
              <argument id="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.#ctor(System.ComponentModel.DesignerSerializationVisibility)" type="System.ComponentModel.DesignerSerializationVisibility" value="DesignerSerializationVisibility.Content" />
            </attribute>
          </method>
        </class>
        <class name="Regx" id="T:MControl.Util.Regx" access="Public" namespace="MControl.Util" displayName="Regx">
          <constructor name=".ctor" id="M:MControl.Util.Regx.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Regx" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="CleanInput" id="M:MControl.Util.Regx.CleanInput(System.String)" access="Family" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="strIn">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="GetIntFromString" id="M:MControl.Util.Regx.GetIntFromString(System.String)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
            <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
              <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Get int number from string  if not found return stringEmpty" />
            </attribute>
          </method>
          <method name="GetNumbersFromString" id="M:MControl.Util.Regx.GetNumbersFromString(System.String)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
            <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
              <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Get Decimal number from string if not found return stringEmpty" />
            </attribute>
          </method>
          <method name="IsBool" id="M:MControl.Util.Regx.IsBool(System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="IsCurrency" id="M:MControl.Util.Regx.IsCurrency(System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="IsDate" id="M:MControl.Util.Regx.IsDate(System.String,System.Boolean)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="TryParse">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="IsDateTime" id="M:MControl.Util.Regx.IsDateTime(System.String,System.Boolean)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="TryParse">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="IsEmail" id="M:MControl.Util.Regx.IsEmail(System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="IsIP" id="M:MControl.Util.Regx.IsIP(System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="IsIntNumber" id="M:MControl.Util.Regx.IsIntNumber(System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="IsNumeric" id="M:MControl.Util.Regx.IsNumeric(System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="IsPosetiveCurrency" id="M:MControl.Util.Regx.IsPosetiveCurrency(System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="IsPosetiveNumber" id="M:MControl.Util.Regx.IsPosetiveNumber(System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="IsTime" id="M:MControl.Util.Regx.IsTime(System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="IsValidDate" id="M:MControl.Util.Regx.IsValidDate(MControl.DateFormats,System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="format">
              <type name="DateFormats" id="T:MControl.DateFormats" valueType="true" />
            </parameter>
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="ParseBoolToString" id="Overload:MControl.Util.Regx.ParseBoolToString" contract="Static">
            <method name="ParseBoolToString" id="M:MControl.Util.Regx.ParseBoolToString(System.Boolean,System.String,MControl.BoolFormats)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="val">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="defaultValue">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="BoolFormats" id="T:MControl.BoolFormats" valueType="true" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert bool value to boolean format if not validate return default value" />
              </attribute>
            </method>
            <method name="ParseBoolToString" id="M:MControl.Util.Regx.ParseBoolToString(System.String,System.String,MControl.BoolFormats)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="BoolFormats" id="T:MControl.BoolFormats" valueType="true" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to boolean format if not validate return default value" />
              </attribute>
            </method>
          </methodOverload>
          <method name="ParseCurrency" id="M:MControl.Util.Regx.ParseCurrency(System.String)" access="Public" contract="Static">
            <type name="Currency" id="T:MControl.Util.Currency" valueType="true" />
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
            <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
              <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Parse text to currency struct" />
            </attribute>
          </method>
          <methodOverload name="ParseCurrencyToNumber" id="Overload:MControl.Util.Regx.ParseCurrencyToNumber" contract="Static">
            <method name="ParseCurrencyToNumber" id="M:MControl.Util.Regx.ParseCurrencyToNumber(System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Parse text to currency string if parsing fails throw exception" />
              </attribute>
            </method>
            <method name="ParseCurrencyToNumber" id="M:MControl.Util.Regx.ParseCurrencyToNumber(System.String,System.Decimal)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="DefaultValue">
                <type name="Decimal" id="T:System.Decimal" valueType="true" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Parse text to currency string if parsing fails return default value" />
              </attribute>
            </method>
            <method name="ParseCurrencyToNumber" id="M:MControl.Util.Regx.ParseCurrencyToNumber(System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="DefaultValue">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Parse text to currency string if parsing fails return default value" />
              </attribute>
            </method>
          </methodOverload>
          <method name="ParseDate" id="M:MControl.Util.Regx.ParseDate(System.String,System.DateTime)" access="Public" contract="Static">
            <type name="DateTime" id="T:System.DateTime" valueType="true" />
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="defaultValue">
              <type name="DateTime" id="T:System.DateTime" valueType="true" />
            </parameter>
            <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
              <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Date if not validate return default value" />
            </attribute>
          </method>
          <method name="ParseDecimal" id="M:MControl.Util.Regx.ParseDecimal(System.String,System.Decimal)" access="Public" contract="Static">
            <type name="Decimal" id="T:System.Decimal" valueType="true" />
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="defaultValue">
              <type name="Decimal" id="T:System.Decimal" valueType="true" />
            </parameter>
            <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
              <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Decimal if not validate return default value" />
            </attribute>
          </method>
          <method name="ParseDouble" id="M:MControl.Util.Regx.ParseDouble(System.String,System.Double)" access="Public" contract="Static">
            <type name="Double" id="T:System.Double" valueType="true" />
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="defaultValue">
              <type name="Double" id="T:System.Double" valueType="true" />
            </parameter>
            <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
              <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Double if not validate return default value" />
            </attribute>
          </method>
          <methodOverload name="ParseInt" id="Overload:MControl.Util.Regx.ParseInt" contract="Static">
            <method name="ParseInt" id="M:MControl.Util.Regx.ParseInt(System.String,System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Int if not validate return default value" />
              </attribute>
            </method>
            <method name="ParseInt" id="M:MControl.Util.Regx.ParseInt(System.String,System.String)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Int if not validate return default value" />
              </attribute>
            </method>
          </methodOverload>
          <methodOverload name="ParseIntToString" id="Overload:MControl.Util.Regx.ParseIntToString" contract="Static">
            <method name="ParseIntToString" id="M:MControl.Util.Regx.ParseIntToString(System.String,System.Int32)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Int if not validate return default value" />
              </attribute>
            </method>
            <method name="ParseIntToString" id="M:MControl.Util.Regx.ParseIntToString(System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Int if not validate return default value" />
              </attribute>
            </method>
            <method name="ParseIntToString" id="M:MControl.Util.Regx.ParseIntToString(System.Int32,System.String,MControl.BoolFormats)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="val">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="defaultValue">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="BoolFormats" id="T:MControl.BoolFormats" valueType="true" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert int value to boolean format if not validate return default value" />
              </attribute>
            </method>
          </methodOverload>
          <methodOverload name="ParseToCurrency" id="Overload:MControl.Util.Regx.ParseToCurrency" contract="Static">
            <method name="ParseToCurrency" id="M:MControl.Util.Regx.ParseToCurrency(System.String,System.Decimal,System.Int32)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Decimal" id="T:System.Decimal" valueType="true" />
              </parameter>
              <parameter name="decimalPlaces">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Currency if not validate return default value" />
              </attribute>
            </method>
            <method name="ParseToCurrency" id="M:MControl.Util.Regx.ParseToCurrency(System.String,System.String,System.Int32)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="decimalPlaces">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Currency if not validate return default value" />
              </attribute>
            </method>
            <method name="ParseToCurrency" id="M:MControl.Util.Regx.ParseToCurrency(System.String,System.Int32)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="decimalPlaces">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Currency if not validate throw AppException" />
              </attribute>
            </method>
          </methodOverload>
          <methodOverload name="ParseToDate" id="Overload:MControl.Util.Regx.ParseToDate" contract="Static">
            <method name="ParseToDate" id="M:MControl.Util.Regx.ParseToDate(System.String,System.DateTime,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Date if not validate return default value" />
              </attribute>
            </method>
            <method name="ParseToDate" id="M:MControl.Util.Regx.ParseToDate(System.String,System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Date if not validate return default value" />
              </attribute>
            </method>
            <method name="ParseToDate" id="M:MControl.Util.Regx.ParseToDate(System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Date if not validate throw AppException" />
              </attribute>
            </method>
          </methodOverload>
          <methodOverload name="ParseToDateTime" id="Overload:MControl.Util.Regx.ParseToDateTime" contract="Static">
            <method name="ParseToDateTime" id="M:MControl.Util.Regx.ParseToDateTime(System.String,System.DateTime,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Date if not validate return default value" />
              </attribute>
            </method>
            <method name="ParseToDateTime" id="M:MControl.Util.Regx.ParseToDateTime(System.String,System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Date if not validate return default value" />
              </attribute>
            </method>
            <method name="ParseToDateTime" id="M:MControl.Util.Regx.ParseToDateTime(System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Date if not validate throw AppException" />
              </attribute>
            </method>
          </methodOverload>
          <methodOverload name="ParseToDecimal" id="Overload:MControl.Util.Regx.ParseToDecimal" contract="Static">
            <method name="ParseToDecimal" id="M:MControl.Util.Regx.ParseToDecimal(System.String,System.Decimal,System.String,System.Int32)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Decimal" id="T:System.Decimal" valueType="true" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="decimalPlaces">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Decimal if not validate return default value" />
              </attribute>
            </method>
            <method name="ParseToDecimal" id="M:MControl.Util.Regx.ParseToDecimal(System.String,System.Decimal,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Decimal" id="T:System.Decimal" valueType="true" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Decimal if not validate return default value" />
              </attribute>
            </method>
            <method name="ParseToDecimal" id="M:MControl.Util.Regx.ParseToDecimal(System.String,System.String,System.String,System.Int32)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="decimalPlaces">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Decimal if not validate return default value" />
              </attribute>
            </method>
            <method name="ParseToDecimal" id="M:MControl.Util.Regx.ParseToDecimal(System.String,System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Decimal if not validate return default value" />
              </attribute>
            </method>
            <method name="ParseToDecimal" id="M:MControl.Util.Regx.ParseToDecimal(System.String,System.String,System.Int32)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="decimalPlaces">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Decimal if not validate throw AppException" />
              </attribute>
            </method>
            <method name="ParseToDecimal" id="M:MControl.Util.Regx.ParseToDecimal(System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Decimal if not validate throw AppException" />
              </attribute>
            </method>
          </methodOverload>
          <methodOverload name="ParseToDouble" id="Overload:MControl.Util.Regx.ParseToDouble" contract="Static">
            <method name="ParseToDouble" id="M:MControl.Util.Regx.ParseToDouble(System.String,System.Double,System.String,System.Int32)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Double" id="T:System.Double" valueType="true" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="decimalPlaces">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Double if not validate return default value" />
              </attribute>
            </method>
            <method name="ParseToDouble" id="M:MControl.Util.Regx.ParseToDouble(System.String,System.Double,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Double" id="T:System.Double" valueType="true" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Double if not validate return default value" />
              </attribute>
            </method>
            <method name="ParseToDouble" id="M:MControl.Util.Regx.ParseToDouble(System.String,System.String,System.String,System.Int32)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="decimalPlaces">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Double if not validate return default value" />
              </attribute>
            </method>
            <method name="ParseToDouble" id="M:MControl.Util.Regx.ParseToDouble(System.String,System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Double if not validate return default value" />
              </attribute>
            </method>
            <method name="ParseToDouble" id="M:MControl.Util.Regx.ParseToDouble(System.String,System.String,System.Int32)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="decimalPlaces">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Double if not validate throw AppException" />
              </attribute>
            </method>
            <method name="ParseToDouble" id="M:MControl.Util.Regx.ParseToDouble(System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Double if not validate throw AppException" />
              </attribute>
            </method>
          </methodOverload>
          <methodOverload name="ParseToTime" id="Overload:MControl.Util.Regx.ParseToTime" contract="Static">
            <method name="ParseToTime" id="M:MControl.Util.Regx.ParseToTime(System.String,System.DateTime,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Time if not validate return default value" />
              </attribute>
            </method>
            <method name="ParseToTime" id="M:MControl.Util.Regx.ParseToTime(System.String,System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Time if not validate return default value" />
              </attribute>
            </method>
            <method name="ParseToTime" id="M:MControl.Util.Regx.ParseToTime(System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="Txt">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="format">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DescriptionAttribute" id="T:System.ComponentModel.DescriptionAttribute">
                <argument id="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)" type="System.String" value="Convert string to Time if not validate throw AppException" />
              </attribute>
            </method>
          </methodOverload>
          <method name="RegexIsMatch" id="M:MControl.Util.Regx.RegexIsMatch(System.String,System.String)" access="Family" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="Pattern">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="RegexMatches" id="M:MControl.Util.Regx.RegexMatches(System.String,System.String)" access="Family" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="Txt">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="Pattern">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ValidateRegularExpression" id="M:MControl.Util.Regx.ValidateRegularExpression(System.String,System.String)" access="Family" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="RegexPattern">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="Text">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="Regx.RegexPattern" id="T:MControl.Util.Regx.RegexPattern" access="NestedPublic" namespace="MControl.Util" displayName="Regx.RegexPattern" declaringType="Regx" sealed="true">
          <constructor name=".ctor" id="M:MControl.Util.Regx.RegexPattern.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Regx.RegexPattern" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="Bool" id="F:MControl.Util.Regx.RegexPattern.Bool" access="Public" contract="Static" literal="true" value="^(\0|1|-1|0|false|true)\z">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Currency" id="F:MControl.Util.Regx.RegexPattern.Currency" access="Public" contract="Static" literal="true" value="^(?&lt;symbol&gt;|.?)(\s?)?(?&lt;number&gt;(\ |-)?([0-9][0-9]*(?&lt;decimal&gt;(\.[0-9]*))?))\z">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Custom" id="F:MControl.Util.Regx.RegexPattern.Custom" access="Public" contract="Static" literal="true" value="\w+">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Date" id="F:MControl.Util.Regx.RegexPattern.Date" access="Public" contract="Static" literal="true" value="^(?&lt;Day&gt;\d{1,2})/(?&lt;Month&gt;\d{1,2})/(?&lt;Year&gt;(?:\d{4}|\d{2}))\z">
            <type name="String" id="T:System.String" />
          </field>
          <field name="DateTime" id="F:MControl.Util.Regx.RegexPattern.DateTime" access="Public" contract="Static" literal="true" value="^(?&lt;Day&gt;\d{1,2})/(?&lt;Month&gt;\d{1,2})/(?&lt;Year&gt;(?:\d{4}|\d{2}))(?&lt;Space&gt;\s{1})(?&lt;Hour&gt;\d{1,2}):(?&lt;Minute&gt;\d{1,2}):(?&lt;Seconde&gt;\d{1,2})\z">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Email" id="F:MControl.Util.Regx.RegexPattern.Email" access="Public" contract="Static" literal="true" value="([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})">
            <type name="String" id="T:System.String" />
          </field>
          <field name="FloatPointCurrency" id="F:MControl.Util.Regx.RegexPattern.FloatPointCurrency" access="Public" contract="Static" literal="true" value="^(?&lt;symbol&gt;|.?)(\s?)?(?&lt;number&gt;(\ |-)?(0?(?&lt;decimal&gt;\.[0-9]*))?)\z">
            <type name="String" id="T:System.String" />
          </field>
          <field name="FloatPointNumber" id="F:MControl.Util.Regx.RegexPattern.FloatPointNumber" access="Public" contract="Static" literal="true" value="^(?&lt;number&gt;(\ |-)?(0?(?&lt;decimal&gt;\.[0-9]*))?)\z">
            <type name="String" id="T:System.String" />
          </field>
          <field name="GetDecimalFromString" id="F:MControl.Util.Regx.RegexPattern.GetDecimalFromString" access="Public" contract="Static" literal="true" value="(\ |-)?[0-9][0-9]*(\.[0-9]*)?">
            <type name="String" id="T:System.String" />
          </field>
          <field name="GetIntFromString" id="F:MControl.Util.Regx.RegexPattern.GetIntFromString" access="Public" contract="Static" literal="true" value="(\ |-)?[0-9][0-9]*">
            <type name="String" id="T:System.String" />
          </field>
          <field name="HtmlTag" id="F:MControl.Util.Regx.RegexPattern.HtmlTag" access="Public" contract="Static" literal="true" value="&lt;(?&lt;tag&gt;\w*)&gt;(?&lt;text&gt;.*)&lt;/\k&lt;tag&gt;&gt;">
            <type name="String" id="T:System.String" />
          </field>
          <field name="IP" id="F:MControl.Util.Regx.RegexPattern.IP" access="Public" contract="Static" literal="true" value="(?&lt;First&gt;2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?&lt;Second&gt;2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?&lt;Third&gt;2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?&lt;Fourth&gt;2[0-4]\d|25[0-5]|[01]?\d\d?)">
            <type name="String" id="T:System.String" />
          </field>
          <field name="IntNumber" id="F:MControl.Util.Regx.RegexPattern.IntNumber" access="Public" contract="Static" literal="true" value="^(?&lt;number&gt;(\ |-)?([1-9][0-9]*?))\z">
            <type name="String" id="T:System.String" />
          </field>
          <field name="KeyValue" id="F:MControl.Util.Regx.RegexPattern.KeyValue" access="Public" contract="Static" literal="true" value="(?&lt;Key&gt;\w+)\s*=\s*(?&lt;Value&gt;.*)((?=\W$)|\z)">
            <type name="String" id="T:System.String" />
          </field>
          <field name="LC" id="F:MControl.Util.Regx.RegexPattern.LC" access="Public" contract="Static" literal="true" value="\p{Ll}">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Number" id="F:MControl.Util.Regx.RegexPattern.Number" access="Public" contract="Static" literal="true" value="^(?&lt;number&gt;(\ |-)?([0-9][0-9]*(?&lt;decimal&gt;(\.[0-9]*))?))\z">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Phone" id="F:MControl.Util.Regx.RegexPattern.Phone" access="Public" contract="Static" literal="true" value="^(?&lt;AreaCode&gt;\d{2,3})-(?&lt;Number&gt;\d{7})\z">
            <type name="String" id="T:System.String" />
          </field>
          <field name="PosetiveCurrency" id="F:MControl.Util.Regx.RegexPattern.PosetiveCurrency" access="Public" contract="Static" literal="true" value="^(?&lt;symbol&gt;|.?)(\s?)?(?&lt;number&gt;(\ |-)?([1-9][0-9]*(?&lt;decimal&gt;(\.[0-9]*))?))\z">
            <type name="String" id="T:System.String" />
          </field>
          <field name="PosetiveNumber" id="F:MControl.Util.Regx.RegexPattern.PosetiveNumber" access="Public" contract="Static" literal="true" value="^(?&lt;number&gt;(\ |-)?([1-9][0-9]*(?&lt;decimal&gt;(\.[0-9]*))?))\z">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Time" id="F:MControl.Util.Regx.RegexPattern.Time" access="Public" contract="Static" literal="true" value="^(?&lt;Hour&gt;\d{1,2}):(?&lt;Minute&gt;\d{1,2}):(?&lt;Seconde&gt;\d{1,2})\z">
            <type name="String" id="T:System.String" />
          </field>
          <field name="UC" id="F:MControl.Util.Regx.RegexPattern.UC" access="Public" contract="Static" literal="true" value="\p{Lu}">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Url" id="F:MControl.Util.Regx.RegexPattern.Url" access="Public" contract="Static" literal="true" value="(?&lt;Protocol&gt;\w+):\/\/(?&lt;Domain&gt;[\w.]+\/?)\S*">
            <type name="String" id="T:System.String" />
          </field>
        </class>
        <class name="StreamHelper" id="T:MControl.Util.StreamHelper" access="Public" namespace="MControl.Util" displayName="StreamHelper">
          <constructor name=".ctor" id="M:MControl.Util.StreamHelper.#ctor" access="Family" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.StreamHelper" /> class.</autoText></summary></documentation>
          </constructor>
          <methodOverload name="Read" id="Overload:MControl.Util.StreamHelper.Read" contract="Static">
            <method name="Read" id="M:MControl.Util.StreamHelper.Read(System.IO.Stream,System.Double@)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value" direction="out">
                <type name="Double" id="T:System.Double" valueType="true" />
                <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
              </parameter>
            </method>
            <method name="Read" id="M:MControl.Util.StreamHelper.Read(System.IO.Stream,System.Int32@)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value" direction="out">
                <type name="Int32" id="T:System.Int32" valueType="true" />
                <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
              </parameter>
            </method>
            <method name="Read" id="M:MControl.Util.StreamHelper.Read(System.IO.Stream,System.Single@)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value" direction="out">
                <type name="Single" id="T:System.Single" valueType="true" />
                <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
              </parameter>
            </method>
            <method name="Read" id="M:MControl.Util.StreamHelper.Read(System.IO.Stream,System.Int64@)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value" direction="out">
                <type name="Int64" id="T:System.Int64" valueType="true" />
                <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
              </parameter>
            </method>
            <method name="Read" id="M:MControl.Util.StreamHelper.Read(System.IO.Stream,System.UInt32@)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value" direction="out">
                <type name="UInt32" id="T:System.UInt32" valueType="true" />
                <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
              </parameter>
            </method>
            <method name="Read" id="M:MControl.Util.StreamHelper.Read(System.IO.Stream,System.UInt64@)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value" direction="out">
                <type name="UInt64" id="T:System.UInt64" valueType="true" />
                <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
              </parameter>
            </method>
            <method name="Read" id="M:MControl.Util.StreamHelper.Read(System.IO.Stream,System.Int16@)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value" direction="out">
                <type name="Int16" id="T:System.Int16" valueType="true" />
                <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
              </parameter>
            </method>
            <method name="Read" id="M:MControl.Util.StreamHelper.Read(System.IO.Stream,System.UInt16@)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value" direction="out">
                <type name="UInt16" id="T:System.UInt16" valueType="true" />
                <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
              </parameter>
            </method>
            <method name="Read" id="M:MControl.Util.StreamHelper.Read(System.IO.Stream,System.Char@)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value" direction="out">
                <type name="Char" id="T:System.Char" valueType="true" />
                <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
              </parameter>
            </method>
            <method name="Read" id="M:MControl.Util.StreamHelper.Read(System.IO.Stream,System.Boolean@)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value" direction="out">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
                <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
              </parameter>
            </method>
            <method name="Read" id="M:MControl.Util.StreamHelper.Read(System.IO.Stream,System.String@)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value" direction="out">
                <type name="String" id="T:System.String" />
                <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
              </parameter>
            </method>
            <method name="Read" id="M:MControl.Util.StreamHelper.Read(System.IO.Stream,System.Byte[])" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value">
                <type name="Byte" id="T:System.Byte" valueType="true">
                  <array rank="1" />
                </type>
              </parameter>
            </method>
            <method name="Read" id="M:MControl.Util.StreamHelper.Read(System.IO.Stream,System.Type)" access="Public" contract="Static">
              <type name="Object" id="T:System.Object" />
              <parameter name="stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="valueType">
                <type name="Type" id="T:System.Type" />
              </parameter>
            </method>
          </methodOverload>
          <method name="ReadBoolean" id="M:MControl.Util.StreamHelper.ReadBoolean(System.IO.Stream)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="p_Stream">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
          </method>
          <method name="ReadByte" id="M:MControl.Util.StreamHelper.ReadByte(System.IO.Stream)" access="Public" contract="Static">
            <type name="Byte" id="T:System.Byte" valueType="true" />
            <parameter name="p_Stream">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
          </method>
          <method name="ReadByteArray" id="M:MControl.Util.StreamHelper.ReadByteArray(System.IO.Stream)" access="Public" contract="Static">
            <type name="Byte" id="T:System.Byte" valueType="true">
              <array rank="1" />
            </type>
            <parameter name="p_Stream">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
          </method>
          <method name="ReadBytes" id="M:MControl.Util.StreamHelper.ReadBytes(System.IO.Stream,System.Byte[])" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="p_Stream">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
            <parameter name="p_Value">
              <type name="Byte" id="T:System.Byte" valueType="true">
                <array rank="1" />
              </type>
            </parameter>
          </method>
          <method name="ReadChar" id="M:MControl.Util.StreamHelper.ReadChar(System.IO.Stream)" access="Public" contract="Static">
            <type name="Char" id="T:System.Char" valueType="true" />
            <parameter name="p_Stream">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
          </method>
          <method name="ReadDateTime" id="M:MControl.Util.StreamHelper.ReadDateTime(System.IO.Stream)" access="Public" contract="Static">
            <type name="DateTime" id="T:System.DateTime" valueType="true" />
            <parameter name="p_Stream">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
          </method>
          <method name="ReadDecimal" id="M:MControl.Util.StreamHelper.ReadDecimal(System.IO.Stream)" access="Public" contract="Static">
            <type name="Decimal" id="T:System.Decimal" valueType="true" />
            <parameter name="stream">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
          </method>
          <method name="ReadDouble" id="M:MControl.Util.StreamHelper.ReadDouble(System.IO.Stream)" access="Public" contract="Static">
            <type name="Double" id="T:System.Double" valueType="true" />
            <parameter name="p_Stream">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
          </method>
          <method name="ReadGuid" id="M:MControl.Util.StreamHelper.ReadGuid(System.IO.Stream)" access="Public" contract="Static">
            <type name="Guid" id="T:System.Guid" valueType="true" />
            <parameter name="stream">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
          </method>
          <method name="ReadInt16" id="M:MControl.Util.StreamHelper.ReadInt16(System.IO.Stream)" access="Public" contract="Static">
            <type name="Int16" id="T:System.Int16" valueType="true" />
            <parameter name="p_Stream">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
          </method>
          <method name="ReadInt32" id="M:MControl.Util.StreamHelper.ReadInt32(System.IO.Stream)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="p_Stream">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
          </method>
          <method name="ReadInt64" id="M:MControl.Util.StreamHelper.ReadInt64(System.IO.Stream)" access="Public" contract="Static">
            <type name="Int64" id="T:System.Int64" valueType="true" />
            <parameter name="p_Stream">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
          </method>
          <method name="ReadSingle" id="M:MControl.Util.StreamHelper.ReadSingle(System.IO.Stream)" access="Public" contract="Static">
            <type name="Single" id="T:System.Single" valueType="true" />
            <parameter name="p_Stream">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
          </method>
          <method name="ReadString" id="M:MControl.Util.StreamHelper.ReadString(System.IO.Stream,System.Text.Encoding)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="p_Stream">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
            <parameter name="encoding">
              <type name="Encoding" id="T:System.Text.Encoding" />
            </parameter>
          </method>
          <method name="ReadUInt16" id="M:MControl.Util.StreamHelper.ReadUInt16(System.IO.Stream)" access="Public" contract="Static">
            <type name="UInt16" id="T:System.UInt16" valueType="true" />
            <parameter name="p_Stream">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
          </method>
          <method name="ReadUInt32" id="M:MControl.Util.StreamHelper.ReadUInt32(System.IO.Stream)" access="Public" contract="Static">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
            <parameter name="p_Stream">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
          </method>
          <method name="ReadUInt64" id="M:MControl.Util.StreamHelper.ReadUInt64(System.IO.Stream)" access="Public" contract="Static">
            <type name="UInt64" id="T:System.UInt64" valueType="true" />
            <parameter name="p_Stream">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
          </method>
          <methodOverload name="Write" id="Overload:MControl.Util.StreamHelper.Write" contract="Static">
            <method name="Write" id="M:MControl.Util.StreamHelper.Write(System.IO.Stream,System.String)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="Write" id="M:MControl.Util.StreamHelper.Write(System.IO.Stream,System.String,System.Text.Encoding)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="encoding">
                <type name="Encoding" id="T:System.Text.Encoding" />
              </parameter>
            </method>
            <method name="Write" id="M:MControl.Util.StreamHelper.Write(System.IO.Stream,System.Byte)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value">
                <type name="Byte" id="T:System.Byte" valueType="true" />
              </parameter>
            </method>
            <method name="Write" id="M:MControl.Util.StreamHelper.Write(System.IO.Stream,System.Guid)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value">
                <type name="Guid" id="T:System.Guid" valueType="true" />
              </parameter>
            </method>
            <method name="Write" id="M:MControl.Util.StreamHelper.Write(System.IO.Stream,System.Decimal)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value">
                <type name="Decimal" id="T:System.Decimal" valueType="true" />
              </parameter>
            </method>
            <method name="Write" id="M:MControl.Util.StreamHelper.Write(System.IO.Stream,System.DateTime)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
            </method>
            <method name="Write" id="M:MControl.Util.StreamHelper.Write(System.IO.Stream,System.Int16)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value">
                <type name="Int16" id="T:System.Int16" valueType="true" />
              </parameter>
            </method>
            <method name="Write" id="M:MControl.Util.StreamHelper.Write(System.IO.Stream,System.Int32)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
            <method name="Write" id="M:MControl.Util.StreamHelper.Write(System.IO.Stream,System.Int64)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value">
                <type name="Int64" id="T:System.Int64" valueType="true" />
              </parameter>
            </method>
            <method name="Write" id="M:MControl.Util.StreamHelper.Write(System.IO.Stream,System.Single)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value">
                <type name="Single" id="T:System.Single" valueType="true" />
              </parameter>
            </method>
            <method name="Write" id="M:MControl.Util.StreamHelper.Write(System.IO.Stream,System.Double)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value">
                <type name="Double" id="T:System.Double" valueType="true" />
              </parameter>
            </method>
            <method name="Write" id="M:MControl.Util.StreamHelper.Write(System.IO.Stream,System.Char)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value">
                <type name="Char" id="T:System.Char" valueType="true" />
              </parameter>
            </method>
            <method name="Write" id="M:MControl.Util.StreamHelper.Write(System.IO.Stream,System.Boolean)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
            <method name="Write" id="M:MControl.Util.StreamHelper.Write(System.IO.Stream,System.UInt16)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value">
                <type name="UInt16" id="T:System.UInt16" valueType="true" />
              </parameter>
            </method>
            <method name="Write" id="M:MControl.Util.StreamHelper.Write(System.IO.Stream,System.UInt32)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value">
                <type name="UInt32" id="T:System.UInt32" valueType="true" />
              </parameter>
            </method>
            <method name="Write" id="M:MControl.Util.StreamHelper.Write(System.IO.Stream,System.UInt64)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Value">
                <type name="UInt64" id="T:System.UInt64" valueType="true" />
              </parameter>
            </method>
            <method name="Write" id="M:MControl.Util.StreamHelper.Write(System.IO.Stream,System.Byte[])" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="p_Stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="p_Bytes">
                <type name="Byte" id="T:System.Byte" valueType="true">
                  <array rank="1" />
                </type>
              </parameter>
            </method>
            <method name="Write" id="M:MControl.Util.StreamHelper.Write(System.IO.Stream,System.Type,System.Object)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="stream">
                <type name="Stream" id="T:System.IO.Stream" />
              </parameter>
              <parameter name="valueType">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="val">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
          </methodOverload>
          <method name="WriteBytes" id="M:MControl.Util.StreamHelper.WriteBytes(System.IO.Stream,System.Byte[])" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="p_Stream">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
            <parameter name="p_Bytes">
              <type name="Byte" id="T:System.Byte" valueType="true">
                <array rank="1" />
              </type>
            </parameter>
          </method>
        </class>
        <class name="StringSource" id="T:MControl.Util.StringSource" access="Public" namespace="MControl.Util" displayName="StringSource">
          <implements name="IEnumString" id="T:System.Runtime.InteropServices.ComTypes.IEnumString" />
          <constructor name=".ctor" id="M:MControl.Util.StringSource.#ctor(System.String[])" access="Public" contract="Normal">
            <parameter name="strings">
              <type name="String" id="T:System.String">
                <array rank="1" />
              </type>
            </parameter>
          </constructor>
          <method name="Bind" id="M:MControl.Util.StringSource.Bind(System.Runtime.InteropServices.HandleRef,System.Int32)" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="edit">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="options">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="CoCreateInstance" id="M:MControl.Util.StringSource.CoCreateInstance(System.Guid@,System.Object,System.Int32,System.Guid@)" access="Public" contract="Static">
            <type name="Object" id="T:System.Object" />
            <parameter name="clsid" direction="ref">
              <type name="Guid" id="T:System.Guid" valueType="true" />
              <attribute name="InAttribute" id="T:System.Runtime.InteropServices.InAttribute" />
            </parameter>
            <parameter name="punkOuter">
              <type name="Object" id="T:System.Object" />
              <attribute name="MarshalAsAttribute" id="T:System.Runtime.InteropServices.MarshalAsAttribute">
                <argument id="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.Interface" />
                <field name="ArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.0" />
                <field name="SizeParamIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" type="System.Int16" value="0" />
                <field name="SizeConst" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" type="System.Int32" value="0" />
                <field name="IidParameterIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex" type="System.Int32" value="0" />
                <field name="SafeArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" type="System.Runtime.InteropServices.VarEnum" value="VarEnum.VT_EMPTY" />
              </attribute>
            </parameter>
            <parameter name="context">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="iid" direction="ref">
              <type name="Guid" id="T:System.Guid" valueType="true" />
              <attribute name="InAttribute" id="T:System.Runtime.InteropServices.InAttribute" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="ole32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="CoCreateInstance" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="False" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="MarshalAsAttribute" id="T:System.Runtime.InteropServices.MarshalAsAttribute" target="return">
              <argument id="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.Interface" />
              <field name="ArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.0" />
              <field name="SizeParamIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" type="System.Int16" value="0" />
              <field name="SizeConst" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" type="System.Int32" value="0" />
              <field name="IidParameterIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex" type="System.Int32" value="0" />
              <field name="SafeArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" type="System.Runtime.InteropServices.VarEnum" value="VarEnum.VT_EMPTY" />
            </attribute>
          </method>
          <method name="RefreshList" id="M:MControl.Util.StringSource.RefreshList(System.String[])" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="newSource">
              <type name="String" id="T:System.String">
                <array rank="1" />
              </type>
            </parameter>
          </method>
          <method name="ReleaseAutoComplete" id="M:MControl.Util.StringSource.ReleaseAutoComplete" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
        </class>
        <class name="StringUtil" id="T:MControl.Util.StringUtil" access="Public" namespace="MControl.Util" displayName="StringUtil" abstract="true" sealed="true">
          <methodOverload name="CheckAndTrimString" id="Overload:MControl.Util.StringUtil.CheckAndTrimString" contract="Static">
            <method name="CheckAndTrimString" id="M:MControl.Util.StringUtil.CheckAndTrimString(System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="paramValue">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="paramName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="CheckAndTrimString" id="M:MControl.Util.StringUtil.CheckAndTrimString(System.String,System.String,System.Boolean)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="paramValue">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="paramName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="throwIfNull">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
            <method name="CheckAndTrimString" id="M:MControl.Util.StringUtil.CheckAndTrimString(System.String,System.String,System.Boolean,System.Int32)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="paramValue">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="paramName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="throwIfNull">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="lengthToCheck">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="Equals" id="M:MControl.Util.StringUtil.Equals(System.String,System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="s1">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="s2">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="EqualsIgnoreCase" id="Overload:MControl.Util.StringUtil.EqualsIgnoreCase" contract="Static">
            <method name="EqualsIgnoreCase" id="M:MControl.Util.StringUtil.EqualsIgnoreCase(System.String,System.String)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="s1">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="s2">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="EqualsIgnoreCase" id="M:MControl.Util.StringUtil.EqualsIgnoreCase(System.String,System.Int32,System.String,System.Int32,System.Int32)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="s1">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="index1">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="s2">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="index2">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="length">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="ObjectArrayToStringArray" id="M:MControl.Util.StringUtil.ObjectArrayToStringArray(System.Object[])" access="Public" contract="Static">
            <type name="String" id="T:System.String">
              <array rank="1" />
            </type>
            <parameter name="objectArray">
              <type name="Object" id="T:System.Object">
                <array rank="1" />
              </type>
            </parameter>
          </method>
          <method name="Replace" id="M:MControl.Util.StringUtil.Replace(System.String,System.Char,System.Char)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="s">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="c1">
              <type name="Char" id="T:System.Char" valueType="true" />
            </parameter>
            <parameter name="c2">
              <type name="Char" id="T:System.Char" valueType="true" />
            </parameter>
          </method>
          <method name="StringArrayEquals" id="M:MControl.Util.StringUtil.StringArrayEquals(System.String[],System.String[])" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="a">
              <type name="String" id="T:System.String">
                <array rank="1" />
              </type>
            </parameter>
            <parameter name="b">
              <type name="String" id="T:System.String">
                <array rank="1" />
              </type>
            </parameter>
          </method>
          <method name="StringEndsWith" id="M:MControl.Util.StringUtil.StringEndsWith(System.String,System.Char)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="s">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="c">
              <type name="Char" id="T:System.Char" valueType="true" />
            </parameter>
          </method>
          <method name="StringEndsWithIgnoreCase" id="M:MControl.Util.StringUtil.StringEndsWithIgnoreCase(System.String,System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="s1">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="s2">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="StringFromCharPtr" id="M:MControl.Util.StringUtil.StringFromCharPtr(System.IntPtr,System.Int32)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="ip">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="length">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="StringFromWCharPtr" id="M:MControl.Util.StringUtil.StringFromWCharPtr(System.IntPtr,System.Int32)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="ip">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="length">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="StringStartsWith" id="M:MControl.Util.StringUtil.StringStartsWith(System.String,System.Char)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="s">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="c">
              <type name="Char" id="T:System.Char" valueType="true" />
            </parameter>
          </method>
          <method name="StringStartsWithIgnoreCase" id="M:MControl.Util.StringUtil.StringStartsWithIgnoreCase(System.String,System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="s1">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="s2">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="UseApiElementsAttribute" id="T:MControl.Util.UseApiElementsAttribute" access="Public" namespace="MControl.Util" displayName="UseApiElementsAttribute" sealed="true">
          <attribute name="AttributeUsageAttribute" id="T:System.AttributeUsageAttribute">
            <argument id="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)" type="System.AttributeTargets" value="AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property" />
          </attribute>
          <base name="Attribute" id="T:System.Attribute" displayName="System.Attribute" />
          <constructor name=".ctor" id="M:MControl.Util.UseApiElementsAttribute.#ctor(System.String)" access="Public" contract="Normal">
            <parameter name="elementNames">
              <type name="String" id="T:System.String" />
            </parameter>
          </constructor>
          <property name="ElementsNames" id="P:MControl.Util.UseApiElementsAttribute.ElementsNames" access="Public" contract="Normal">
            <type name="StringCollection" id="T:System.Collections.Specialized.StringCollection" />
            <get access="Public" />
          </property>
        </class>
        <class name="ValidatingEventArgs" id="T:MControl.Util.ValidatingEventArgs" access="Public" namespace="MControl.Util" displayName="ValidatingEventArgs">
          <base name="CancelEventArgs" id="T:System.ComponentModel.CancelEventArgs" displayName="System.ComponentModel.CancelEventArgs">
            <base name="EventArgs" id="T:System.EventArgs" displayName="System.EventArgs" />
          </base>
          <constructor name=".ctor" id="M:MControl.Util.ValidatingEventArgs.#ctor(System.Object)" access="Public" contract="Normal">
            <parameter name="newValue">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </constructor>
          <property name="NewValue" id="P:MControl.Util.ValidatingEventArgs.NewValue" access="Public" contract="Normal">
            <type name="Object" id="T:System.Object" />
            <get access="Public" />
            <set access="Public" />
          </property>
        </class>
        <class name="Validator" id="T:MControl.Util.Validator" access="Public" namespace="MControl.Util" displayName="Validator" sealed="true">
          <constructor name=".ctor" id="M:MControl.Util.Validator.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Validator" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="CanConvert" id="M:MControl.Util.Validator.CanConvert(System.String,MControl.BaseDataType)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="text">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="type">
              <type name="BaseDataType" id="T:MControl.BaseDataType" valueType="true" />
            </parameter>
          </method>
          <method name="CompareValues" id="M:MControl.Util.Validator.CompareValues(System.String,System.String,MControl.Util.ValidationOperator,MControl.BaseDataType)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="strA">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="strB">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="op">
              <type name="ValidationOperator" id="T:MControl.Util.ValidationOperator" valueType="true" />
            </parameter>
            <parameter name="type">
              <type name="BaseDataType" id="T:MControl.BaseDataType" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="ValidateBool" id="Overload:MControl.Util.Validator.ValidateBool" contract="Static">
            <method name="ValidateBool" id="M:MControl.Util.Validator.ValidateBool(System.Int32,System.Boolean,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="val">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="Required">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ValidateBool" id="M:MControl.Util.Validator.ValidateBool(System.String,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="Text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ValidateBool" id="M:MControl.Util.Validator.ValidateBool(System.String,System.Boolean,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="Text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="Required">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="ValidateCurrency" id="Overload:MControl.Util.Validator.ValidateCurrency" contract="Static">
            <method name="ValidateCurrency" id="M:MControl.Util.Validator.ValidateCurrency(System.String,System.Boolean,MControl.Util.RangeNumber,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="Text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="required">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="range">
                <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ValidateCurrency" id="M:MControl.Util.Validator.ValidateCurrency(System.String,System.Boolean,MControl.Util.RangeType,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="Text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="required">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="range">
                <type name="RangeType" id="T:MControl.Util.RangeType" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ValidateCurrency" id="M:MControl.Util.Validator.ValidateCurrency(System.String,MControl.Util.RangeNumber,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="Text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="range">
                <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ValidateCurrency" id="M:MControl.Util.Validator.ValidateCurrency(System.String,MControl.Util.RangeType,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="Text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="range">
                <type name="RangeType" id="T:MControl.Util.RangeType" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="ValidateDate" id="Overload:MControl.Util.Validator.ValidateDate" contract="Static">
            <method name="ValidateDate" id="M:MControl.Util.Validator.ValidateDate(System.String,System.Boolean,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="Text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="required">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ValidateDate" id="M:MControl.Util.Validator.ValidateDate(System.String,System.Boolean,MControl.Util.RangeDate,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="Text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="required">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="range">
                <type name="RangeDate" id="T:MControl.Util.RangeDate" valueType="true" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ValidateDate" id="M:MControl.Util.Validator.ValidateDate(System.String,System.Boolean,MControl.Util.RangeType,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="Text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="required">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="range">
                <type name="RangeType" id="T:MControl.Util.RangeType" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ValidateDate" id="M:MControl.Util.Validator.ValidateDate(System.String,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="Text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ValidateDate" id="M:MControl.Util.Validator.ValidateDate(System.String,MControl.Util.RangeDate,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="Text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="range">
                <type name="RangeDate" id="T:MControl.Util.RangeDate" valueType="true" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ValidateDate" id="M:MControl.Util.Validator.ValidateDate(System.String,MControl.Util.RangeType,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="Text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="range">
                <type name="RangeType" id="T:MControl.Util.RangeType" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="ValidateDiretory" id="M:MControl.Util.Validator.ValidateDiretory(System.String,System.String@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Text">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="message" direction="ref">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ValidateFileName" id="M:MControl.Util.Validator.ValidateFileName(System.String,System.String@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Text">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="message" direction="ref">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ValidateIp" id="M:MControl.Util.Validator.ValidateIp(System.String,System.String@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Text">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="message" direction="ref">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ValidateMail" id="M:MControl.Util.Validator.ValidateMail(System.String,System.String@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Text">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="message" direction="ref">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="ValidateNumber" id="Overload:MControl.Util.Validator.ValidateNumber" contract="Static">
            <method name="ValidateNumber" id="M:MControl.Util.Validator.ValidateNumber(System.String,System.Boolean,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="Text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="required">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ValidateNumber" id="M:MControl.Util.Validator.ValidateNumber(System.String,System.Boolean,MControl.Util.RangeNumber,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="Text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="required">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="range">
                <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ValidateNumber" id="M:MControl.Util.Validator.ValidateNumber(System.String,System.Boolean,MControl.Util.RangeType,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="Text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="required">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="range">
                <type name="RangeType" id="T:MControl.Util.RangeType" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ValidateNumber" id="M:MControl.Util.Validator.ValidateNumber(System.String,MControl.Util.RangeNumber,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="Text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="range">
                <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ValidateNumber" id="M:MControl.Util.Validator.ValidateNumber(System.String,MControl.Util.RangeType,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="Text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="range">
                <type name="RangeType" id="T:MControl.Util.RangeType" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="ValidatePhone" id="M:MControl.Util.Validator.ValidatePhone(System.String,System.String@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Text">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="message" direction="ref">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ValidatePhoneWithArea" id="M:MControl.Util.Validator.ValidatePhoneWithArea(System.String,System.String@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Text">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="message" direction="ref">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="ValidateRegex" id="Overload:MControl.Util.Validator.ValidateRegex" contract="Static">
            <method name="ValidateRegex" id="M:MControl.Util.Validator.ValidateRegex(System.String,System.String)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="valueText">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="patternText">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ValidateRegex" id="M:MControl.Util.Validator.ValidateRegex(System.String,System.String,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="Text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="Regx">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="ValidateText" id="M:MControl.Util.Validator.ValidateText(System.String,System.Boolean,System.String@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="Text">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="Required">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="message" direction="ref">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="ValidateTime" id="Overload:MControl.Util.Validator.ValidateTime" contract="Static">
            <method name="ValidateTime" id="M:MControl.Util.Validator.ValidateTime(System.String,System.Boolean,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="Text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="required">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="ValidateTime" id="M:MControl.Util.Validator.ValidateTime(System.String,System.String@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="Text">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="message" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
        </class>
        <class name="ValueChangedEventArgs" id="T:MControl.Util.ValueChangedEventArgs" access="Public" namespace="MControl.Util" displayName="ValueChangedEventArgs">
          <base name="EventArgs" id="T:System.EventArgs" displayName="System.EventArgs" />
          <constructor name=".ctor" id="M:MControl.Util.ValueChangedEventArgs.#ctor(System.Object)" access="Public" contract="Normal">
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </constructor>
          <property name="Value" id="P:MControl.Util.ValueChangedEventArgs.Value" access="Public" contract="Normal">
            <type name="Object" id="T:System.Object" />
            <get access="Public" />
          </property>
        </class>
        <structure name="Currency" id="T:MControl.Util.Currency" access="Public" namespace="MControl.Util" displayName="Currency">
          <field name="Decimal" id="F:MControl.Util.Currency.Decimal" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Number" id="F:MControl.Util.Currency.Number" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Symbol" id="F:MControl.Util.Currency.Symbol" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </field>
          <field name="Value" id="F:MControl.Util.Currency.Value" access="Public" contract="Normal">
            <type name="Decimal" id="T:System.Decimal" valueType="true" />
          </field>
        </structure>
        <structure name="NativeMethods.NMHDR" id="T:MControl.Util.NativeMethods.NMHDR" access="NestedPublic" namespace="MControl.Util" displayName="NativeMethods.NMHDR" declaringType="NativeMethods">
          <field name="code" id="F:MControl.Util.NativeMethods.NMHDR.code" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="hwndFrom" id="F:MControl.Util.NativeMethods.NMHDR.hwndFrom" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="idFrom" id="F:MControl.Util.NativeMethods.NMHDR.idFrom" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="RangeDate" id="T:MControl.Util.RangeDate" access="Public" namespace="MControl.Util" displayName="RangeDate">
          <attribute name="SerializableAttribute" id="T:System.SerializableAttribute" />
          <attribute name="TypeConverterAttribute" id="T:System.ComponentModel.TypeConverterAttribute">
            <argument id="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)" type="System.Type" value="MControl.Util.RangeDateConverter" />
          </attribute>
          <constructorOverload name=".ctor" id="Overload:MControl.Util.RangeDate.#ctor" explicitInterfaceImplementation="true">
            <constructor name=".ctor" id="M:MControl.Util.RangeDate.#ctor(MControl.Util.RangeDate)" access="Public" contract="Normal">
              <parameter name="r">
                <type name="RangeDate" id="T:MControl.Util.RangeDate" valueType="true" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.RangeDate.#ctor(System.DateTime,System.DateTime)" access="Public" contract="Normal">
              <parameter name="min">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
              <parameter name="max">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
          <field name="Empty" id="F:MControl.Util.RangeDate.Empty" access="Public" contract="Static" initOnly="true">
            <type name="RangeDate" id="T:MControl.Util.RangeDate" valueType="true" />
          </field>
          <property name="IsEmpty" id="P:MControl.Util.RangeDate.IsEmpty" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
            <attribute name="BrowsableAttribute" id="T:System.ComponentModel.BrowsableAttribute">
              <argument id="M:System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)" type="System.Boolean" value="False" />
            </attribute>
          </property>
          <property name="MaxValue" id="P:MControl.Util.RangeDate.MaxValue" access="Public" contract="Normal">
            <type name="DateTime" id="T:System.DateTime" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="MinValue" id="P:MControl.Util.RangeDate.MinValue" access="Public" contract="Normal">
            <type name="DateTime" id="T:System.DateTime" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <method name="Equals" id="M:MControl.Util.RangeDate.Equals(System.Object)" access="Public" contract="Override">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="obj">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="GetHashCode" id="M:MControl.Util.RangeDate.GetHashCode" access="Public" contract="Override">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </method>
          <methodOverload name="IsValid" id="Overload:MControl.Util.RangeDate.IsValid">
            <method name="IsValid" id="M:MControl.Util.RangeDate.IsValid(System.String)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="s">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="IsValid" id="M:MControl.Util.RangeDate.IsValid(System.Object)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="obj">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
            <method name="IsValid" id="M:MControl.Util.RangeDate.IsValid(System.DateTime)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="value">
                <type name="DateTime" id="T:System.DateTime" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="ToString" id="M:MControl.Util.RangeDate.ToString" access="Public" contract="Override">
            <type name="String" id="T:System.String" />
          </method>
          <operator name="op_Equality" id="M:MControl.Util.RangeDate.op_Equality(MControl.Util.RangeDate,MControl.Util.RangeDate)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="sz1">
              <type name="RangeDate" id="T:MControl.Util.RangeDate" valueType="true" />
            </parameter>
            <parameter name="sz2">
              <type name="RangeDate" id="T:MControl.Util.RangeDate" valueType="true" />
            </parameter>
          </operator>
          <operator name="op_Inequality" id="M:MControl.Util.RangeDate.op_Inequality(MControl.Util.RangeDate,MControl.Util.RangeDate)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="sz1">
              <type name="RangeDate" id="T:MControl.Util.RangeDate" valueType="true" />
            </parameter>
            <parameter name="sz2">
              <type name="RangeDate" id="T:MControl.Util.RangeDate" valueType="true" />
            </parameter>
          </operator>
        </structure>
        <structure name="RangeNumber" id="T:MControl.Util.RangeNumber" access="Public" namespace="MControl.Util" displayName="RangeNumber">
          <attribute name="SerializableAttribute" id="T:System.SerializableAttribute" />
          <attribute name="TypeConverterAttribute" id="T:System.ComponentModel.TypeConverterAttribute">
            <argument id="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)" type="System.Type" value="MControl.Util.RangeNumberConverter" />
          </attribute>
          <constructorOverload name=".ctor" id="Overload:MControl.Util.RangeNumber.#ctor" explicitInterfaceImplementation="true">
            <constructor name=".ctor" id="M:MControl.Util.RangeNumber.#ctor(MControl.Util.RangeNumber)" access="Public" contract="Normal">
              <parameter name="r">
                <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.RangeNumber.#ctor(System.Decimal,System.Decimal)" access="Public" contract="Normal">
              <parameter name="min">
                <type name="Decimal" id="T:System.Decimal" valueType="true" />
              </parameter>
              <parameter name="max">
                <type name="Decimal" id="T:System.Decimal" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
          <field name="Empty" id="F:MControl.Util.RangeNumber.Empty" access="Public" contract="Static" initOnly="true">
            <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
          </field>
          <property name="IsEmpty" id="P:MControl.Util.RangeNumber.IsEmpty" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
            <attribute name="BrowsableAttribute" id="T:System.ComponentModel.BrowsableAttribute">
              <argument id="M:System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)" type="System.Boolean" value="False" />
            </attribute>
          </property>
          <property name="MaxValue" id="P:MControl.Util.RangeNumber.MaxValue" access="Public" contract="Normal">
            <type name="Decimal" id="T:System.Decimal" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="MinValue" id="P:MControl.Util.RangeNumber.MinValue" access="Public" contract="Normal">
            <type name="Decimal" id="T:System.Decimal" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <method name="Ceiling" id="M:MControl.Util.RangeNumber.Ceiling(MControl.Util.RangeNumber)" access="Public" contract="Static">
            <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
            <parameter name="value">
              <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
            </parameter>
          </method>
          <method name="Equals" id="M:MControl.Util.RangeNumber.Equals(System.Object)" access="Public" contract="Override">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="obj">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="GetHashCode" id="M:MControl.Util.RangeNumber.GetHashCode" access="Public" contract="Override">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </method>
          <methodOverload name="IsValid" id="Overload:MControl.Util.RangeNumber.IsValid">
            <method name="IsValid" id="M:MControl.Util.RangeNumber.IsValid(System.Double)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="value">
                <type name="Double" id="T:System.Double" valueType="true" />
              </parameter>
            </method>
            <method name="IsValid" id="M:MControl.Util.RangeNumber.IsValid(System.Decimal)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="value">
                <type name="Decimal" id="T:System.Decimal" valueType="true" />
              </parameter>
            </method>
            <method name="IsValid" id="M:MControl.Util.RangeNumber.IsValid(System.Int32)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="value">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
            <method name="IsValid" id="M:MControl.Util.RangeNumber.IsValid(System.Object)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="obj">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
            <method name="IsValid" id="M:MControl.Util.RangeNumber.IsValid(System.String)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="s">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="Round" id="M:MControl.Util.RangeNumber.Round(MControl.Util.RangeNumber)" access="Public" contract="Static">
            <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
            <parameter name="value">
              <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
            </parameter>
          </method>
          <method name="ToString" id="M:MControl.Util.RangeNumber.ToString" access="Public" contract="Override">
            <type name="String" id="T:System.String" />
          </method>
          <operator name="op_Addition" id="M:MControl.Util.RangeNumber.op_Addition(MControl.Util.RangeNumber,MControl.Util.RangeNumber)" access="Public" contract="Static">
            <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
            <parameter name="sz1">
              <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
            </parameter>
            <parameter name="sz2">
              <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
            </parameter>
          </operator>
          <operator name="op_Equality" id="M:MControl.Util.RangeNumber.op_Equality(MControl.Util.RangeNumber,MControl.Util.RangeNumber)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="sz1">
              <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
            </parameter>
            <parameter name="sz2">
              <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
            </parameter>
          </operator>
          <operator name="op_Inequality" id="M:MControl.Util.RangeNumber.op_Inequality(MControl.Util.RangeNumber,MControl.Util.RangeNumber)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="sz1">
              <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
            </parameter>
            <parameter name="sz2">
              <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
            </parameter>
          </operator>
          <operator name="op_Subtraction" id="M:MControl.Util.RangeNumber.op_Subtraction(MControl.Util.RangeNumber,MControl.Util.RangeNumber)" access="Public" contract="Static">
            <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
            <parameter name="sz1">
              <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
            </parameter>
            <parameter name="sz2">
              <type name="RangeNumber" id="T:MControl.Util.RangeNumber" valueType="true" />
            </parameter>
          </operator>
        </structure>
        <interface name="IAutoComplete2" id="T:MControl.Util.IAutoComplete2" access="Public" namespace="MControl.Util" displayName="IAutoComplete2">
          <attribute name="ComImportAttribute" id="T:System.Runtime.InteropServices.ComImportAttribute" />
          <attribute name="SuppressUnmanagedCodeSecurityAttribute" id="T:System.Security.SuppressUnmanagedCodeSecurityAttribute" />
          <attribute name="GuidAttribute" id="T:System.Runtime.InteropServices.GuidAttribute">
            <argument id="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)" type="System.String" value="EAC04BC0-3791-11d2-BB95-0060977B464C" />
          </attribute>
          <attribute name="InterfaceTypeAttribute" id="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
            <argument id="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)" type="System.Runtime.InteropServices.ComInterfaceType" value="ComInterfaceType.InterfaceIsIUnknown" />
          </attribute>
          <method name="Enable" id="M:MControl.Util.IAutoComplete2.Enable(System.Boolean)" access="Public" contract="Abstract">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="fEnable">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <attribute name="InAttribute" id="T:System.Runtime.InteropServices.InAttribute" />
            </parameter>
          </method>
          <method name="GetOptions" id="M:MControl.Util.IAutoComplete2.GetOptions(System.IntPtr)" access="Public" contract="Abstract">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="pdwFlag">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
            </parameter>
          </method>
          <method name="Init" id="M:MControl.Util.IAutoComplete2.Init(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.ComTypes.IEnumString,System.String,System.String)" access="Public" contract="Abstract">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hwndEdit">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              <attribute name="InAttribute" id="T:System.Runtime.InteropServices.InAttribute" />
            </parameter>
            <parameter name="punkACL">
              <type name="IEnumString" id="T:System.Runtime.InteropServices.ComTypes.IEnumString" />
              <attribute name="InAttribute" id="T:System.Runtime.InteropServices.InAttribute" />
            </parameter>
            <parameter name="pwszRegKeyPath">
              <type name="String" id="T:System.String" />
              <attribute name="InAttribute" id="T:System.Runtime.InteropServices.InAttribute" />
            </parameter>
            <parameter name="pwszQuickComplete">
              <type name="String" id="T:System.String" />
              <attribute name="InAttribute" id="T:System.Runtime.InteropServices.InAttribute" />
            </parameter>
          </method>
          <method name="SetOptions" id="M:MControl.Util.IAutoComplete2.SetOptions(System.Int32)" access="Public" contract="Abstract">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="dwFlag">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <attribute name="InAttribute" id="T:System.Runtime.InteropServices.InAttribute" />
            </parameter>
          </method>
        </interface>
        <enumeration name="AllowClose" id="T:MControl.Util.AllowClose" displayName="AllowClose" namespace="MControl.Util" access="Public">
          <field name="Ask" id="F:MControl.Util.AllowClose.Ask" value="0" />
          <field name="AskIfNotFinish" id="F:MControl.Util.AllowClose.AskIfNotFinish" value="1" />
          <field name="AlwaysAllow" id="F:MControl.Util.AllowClose.AlwaysAllow" value="2" />
        </enumeration>
        <enumeration name="ArrowGlyph" id="T:MControl.Util.ArrowGlyph" displayName="ArrowGlyph" namespace="MControl.Util" access="Public">
          <field name="Up" id="F:MControl.Util.ArrowGlyph.Up" value="0" />
          <field name="Down" id="F:MControl.Util.ArrowGlyph.Down" value="1" />
          <field name="Left" id="F:MControl.Util.ArrowGlyph.Left" value="2" />
          <field name="Right" id="F:MControl.Util.ArrowGlyph.Right" value="3" />
        </enumeration>
        <enumeration name="CommonBorderStyle" id="T:MControl.Util.CommonBorderStyle" displayName="CommonBorderStyle" namespace="MControl.Util" access="Public">
          <field name="Normal" id="F:MControl.Util.CommonBorderStyle.Normal" value="1" />
          <field name="Raised" id="F:MControl.Util.CommonBorderStyle.Raised" value="2" />
          <field name="Inset" id="F:MControl.Util.CommonBorderStyle.Inset" value="3" />
        </enumeration>
        <enumeration name="DrawState" id="T:MControl.Util.DrawState" displayName="DrawState" namespace="MControl.Util" access="Public">
          <field name="Normal" id="F:MControl.Util.DrawState.Normal" value="0" />
          <field name="Hot" id="F:MControl.Util.DrawState.Hot" value="1" />
          <field name="Pressed" id="F:MControl.Util.DrawState.Pressed" value="2" />
          <field name="Disable" id="F:MControl.Util.DrawState.Disable" value="3" />
        </enumeration>
        <enumeration name="EditableModes" id="T:MControl.Util.EditableModes" displayName="EditableModes" namespace="MControl.Util" access="Public" flags="true">
          <attribute name="FlagsAttribute" id="T:System.FlagsAttribute" />
          <field name="None" id="F:MControl.Util.EditableModes.None" value="0" />
          <field name="F2Key" id="F:MControl.Util.EditableModes.F2Key" value="1" />
          <field name="DoubleClick" id="F:MControl.Util.EditableModes.DoubleClick" value="2" />
          <field name="SingleClick" id="F:MControl.Util.EditableModes.SingleClick" value="4" />
          <field name="AnyKey" id="F:MControl.Util.EditableModes.AnyKey" value="9" />
        </enumeration>
        <enumeration name="ExceptionArgument" id="T:MControl.Util.ExceptionArgument" displayName="ExceptionArgument" namespace="MControl.Util" access="Public">
          <field name="obj" id="F:MControl.Util.ExceptionArgument.obj" value="0" />
          <field name="dictionary" id="F:MControl.Util.ExceptionArgument.dictionary" value="1" />
          <field name="array" id="F:MControl.Util.ExceptionArgument.array" value="2" />
          <field name="info" id="F:MControl.Util.ExceptionArgument.info" value="3" />
          <field name="key" id="F:MControl.Util.ExceptionArgument.key" value="4" />
          <field name="collection" id="F:MControl.Util.ExceptionArgument.collection" value="5" />
          <field name="match" id="F:MControl.Util.ExceptionArgument.match" value="6" />
          <field name="converter" id="F:MControl.Util.ExceptionArgument.converter" value="7" />
          <field name="queue" id="F:MControl.Util.ExceptionArgument.queue" value="8" />
          <field name="stack" id="F:MControl.Util.ExceptionArgument.stack" value="9" />
          <field name="capacity" id="F:MControl.Util.ExceptionArgument.capacity" value="10" />
          <field name="index" id="F:MControl.Util.ExceptionArgument.index" value="11" />
          <field name="startIndex" id="F:MControl.Util.ExceptionArgument.startIndex" value="12" />
          <field name="value" id="F:MControl.Util.ExceptionArgument.value" value="13" />
          <field name="count" id="F:MControl.Util.ExceptionArgument.count" value="14" />
          <field name="arrayIndex" id="F:MControl.Util.ExceptionArgument.arrayIndex" value="15" />
        </enumeration>
        <enumeration name="ExceptionResource" id="T:MControl.Util.ExceptionResource" displayName="ExceptionResource" namespace="MControl.Util" access="Public">
          <field name="Argument_ImplementIComparable" id="F:MControl.Util.ExceptionResource.Argument_ImplementIComparable" value="0" />
          <field name="ArgumentOutOfRange_NeedNonNegNum" id="F:MControl.Util.ExceptionResource.ArgumentOutOfRange_NeedNonNegNum" value="1" />
          <field name="ArgumentOutOfRange_NeedNonNegNumRequired" id="F:MControl.Util.ExceptionResource.ArgumentOutOfRange_NeedNonNegNumRequired" value="2" />
          <field name="Arg_ArrayPlusOffTooSmall" id="F:MControl.Util.ExceptionResource.Arg_ArrayPlusOffTooSmall" value="3" />
          <field name="Argument_AddingDuplicate" id="F:MControl.Util.ExceptionResource.Argument_AddingDuplicate" value="4" />
          <field name="Serialization_InvalidOnDeser" id="F:MControl.Util.ExceptionResource.Serialization_InvalidOnDeser" value="5" />
          <field name="Serialization_MismatchedCount" id="F:MControl.Util.ExceptionResource.Serialization_MismatchedCount" value="6" />
          <field name="Serialization_MissingValues" id="F:MControl.Util.ExceptionResource.Serialization_MissingValues" value="7" />
          <field name="Arg_RankMultiDimNotSupported" id="F:MControl.Util.ExceptionResource.Arg_RankMultiDimNotSupported" value="8" />
          <field name="Arg_NonZeroLowerBound" id="F:MControl.Util.ExceptionResource.Arg_NonZeroLowerBound" value="9" />
          <field name="Argument_InvalidArrayType" id="F:MControl.Util.ExceptionResource.Argument_InvalidArrayType" value="10" />
          <field name="NotSupported_KeyCollectionSet" id="F:MControl.Util.ExceptionResource.NotSupported_KeyCollectionSet" value="11" />
          <field name="ArgumentOutOfRange_SmallCapacity" id="F:MControl.Util.ExceptionResource.ArgumentOutOfRange_SmallCapacity" value="12" />
          <field name="ArgumentOutOfRange_Index" id="F:MControl.Util.ExceptionResource.ArgumentOutOfRange_Index" value="13" />
          <field name="Argument_InvalidOffLen" id="F:MControl.Util.ExceptionResource.Argument_InvalidOffLen" value="14" />
          <field name="NotSupported_ReadOnlyCollection" id="F:MControl.Util.ExceptionResource.NotSupported_ReadOnlyCollection" value="15" />
          <field name="InvalidOperation_CannotRemoveFromStackOrQueue" id="F:MControl.Util.ExceptionResource.InvalidOperation_CannotRemoveFromStackOrQueue" value="16" />
          <field name="InvalidOperation_EmptyCollection" id="F:MControl.Util.ExceptionResource.InvalidOperation_EmptyCollection" value="17" />
          <field name="InvalidOperation_EmptyQueue" id="F:MControl.Util.ExceptionResource.InvalidOperation_EmptyQueue" value="18" />
          <field name="InvalidOperation_EnumOpCantHappen" id="F:MControl.Util.ExceptionResource.InvalidOperation_EnumOpCantHappen" value="19" />
          <field name="InvalidOperation_EnumFailedVersion" id="F:MControl.Util.ExceptionResource.InvalidOperation_EnumFailedVersion" value="20" />
          <field name="InvalidOperation_EmptyStack" id="F:MControl.Util.ExceptionResource.InvalidOperation_EmptyStack" value="21" />
          <field name="InvalidOperation_EnumNotStarted" id="F:MControl.Util.ExceptionResource.InvalidOperation_EnumNotStarted" value="22" />
          <field name="InvalidOperation_EnumEnded" id="F:MControl.Util.ExceptionResource.InvalidOperation_EnumEnded" value="23" />
          <field name="NotSupported_GenericListNestedWrite" id="F:MControl.Util.ExceptionResource.NotSupported_GenericListNestedWrite" value="24" />
          <field name="NotSupported_ValueCollectionSet" id="F:MControl.Util.ExceptionResource.NotSupported_ValueCollectionSet" value="25" />
        </enumeration>
        <enumeration name="GridSelectionMode" id="T:MControl.Util.GridSelectionMode" displayName="GridSelectionMode" namespace="MControl.Util" access="Public">
          <field name="Cell" id="F:MControl.Util.GridSelectionMode.Cell" value="1" />
          <field name="Row" id="F:MControl.Util.GridSelectionMode.Row" value="2" />
          <field name="Col" id="F:MControl.Util.GridSelectionMode.Col" value="3" />
        </enumeration>
        <enumeration name="LeftRight" id="T:MControl.Util.LeftRight" displayName="LeftRight" namespace="MControl.Util" access="Public">
          <field name="Left" id="F:MControl.Util.LeftRight.Left" value="1" />
          <field name="Right" id="F:MControl.Util.LeftRight.Right" value="2" />
        </enumeration>
        <enumeration name="LineDirection" id="T:MControl.Util.LineDirection" displayName="LineDirection" namespace="MControl.Util" access="Public">
          <field name="Horizontal" id="F:MControl.Util.LineDirection.Horizontal" value="1" />
          <field name="Vertical" id="F:MControl.Util.LineDirection.Vertical" value="2" />
        </enumeration>
        <enumeration name="OptionHighLight" id="T:MControl.Util.OptionHighLight" displayName="OptionHighLight" namespace="MControl.Util" access="Public">
          <field name="Rectangle" id="F:MControl.Util.OptionHighLight.Rectangle" value="1" />
          <field name="Font" id="F:MControl.Util.OptionHighLight.Font" value="2" />
        </enumeration>
        <enumeration name="ScrollBarEvent" id="T:MControl.Util.ScrollBarEvent" displayName="ScrollBarEvent" namespace="MControl.Util" access="Public">
          <field name="LineUp" id="F:MControl.Util.ScrollBarEvent.LineUp" value="0" />
          <field name="LineDown" id="F:MControl.Util.ScrollBarEvent.LineDown" value="1" />
          <field name="PageUp" id="F:MControl.Util.ScrollBarEvent.PageUp" value="2" />
          <field name="PageDown" id="F:MControl.Util.ScrollBarEvent.PageDown" value="3" />
          <field name="ThumbUp" id="F:MControl.Util.ScrollBarEvent.ThumbUp" value="4" />
          <field name="ThumbDown" id="F:MControl.Util.ScrollBarEvent.ThumbDown" value="5" />
        </enumeration>
        <enumeration name="ScrollBarHit" id="T:MControl.Util.ScrollBarHit" displayName="ScrollBarHit" namespace="MControl.Util" access="Public">
          <field name="UpArrow" id="F:MControl.Util.ScrollBarHit.UpArrow" value="0" />
          <field name="DownArrow" id="F:MControl.Util.ScrollBarHit.DownArrow" value="1" />
          <field name="PageUp" id="F:MControl.Util.ScrollBarHit.PageUp" value="2" />
          <field name="PageDown" id="F:MControl.Util.ScrollBarHit.PageDown" value="3" />
          <field name="Thumb" id="F:MControl.Util.ScrollBarHit.Thumb" value="4" />
          <field name="LeftArrow" id="F:MControl.Util.ScrollBarHit.LeftArrow" value="5" />
          <field name="RightArrow" id="F:MControl.Util.ScrollBarHit.RightArrow" value="6" />
          <field name="PageLeft" id="F:MControl.Util.ScrollBarHit.PageLeft" value="7" />
          <field name="PageRight" id="F:MControl.Util.ScrollBarHit.PageRight" value="8" />
          <field name="None" id="F:MControl.Util.ScrollBarHit.None" value="9" />
        </enumeration>
        <enumeration name="ThumbDraggedFireFrequency" id="T:MControl.Util.ThumbDraggedFireFrequency" displayName="ThumbDraggedFireFrequency" namespace="MControl.Util" access="Public">
          <field name="MouseMove" id="F:MControl.Util.ThumbDraggedFireFrequency.MouseMove" value="0" />
          <field name="MouseUp" id="F:MControl.Util.ThumbDraggedFireFrequency.MouseUp" value="1" />
        </enumeration>
        <enumeration name="ValidationOperator" id="T:MControl.Util.ValidationOperator" displayName="ValidationOperator" namespace="MControl.Util" access="Public">
          <field name="DataTypeCheck" id="F:MControl.Util.ValidationOperator.DataTypeCheck" value="0" />
          <field name="Equal" id="F:MControl.Util.ValidationOperator.Equal" value="1" />
          <field name="GreaterThan" id="F:MControl.Util.ValidationOperator.GreaterThan" value="2" />
          <field name="GreaterThanEqual" id="F:MControl.Util.ValidationOperator.GreaterThanEqual" value="3" />
          <field name="LessThan" id="F:MControl.Util.ValidationOperator.LessThan" value="4" />
          <field name="LessThanEqual" id="F:MControl.Util.ValidationOperator.LessThanEqual" value="5" />
          <field name="NotEqual" id="F:MControl.Util.ValidationOperator.NotEqual" value="6" />
        </enumeration>
        <delegate name="DateChangedEventHandler" displayName="DateChangedEventHandler" namespace="MControl.Util" id="T:MControl.Util.DateChangedEventHandler" access="Public">
          <type name="Void" id="T:System.Void" valueType="true" />
          <parameter name="sender">
            <type name="Object" id="T:System.Object" />
          </parameter>
          <parameter name="e">
            <type name="DateChangedEventArgs" id="T:MControl.Util.DateChangedEventArgs" />
          </parameter>
        </delegate>
        <delegate name="ErrorOcurredEventHandler" displayName="ErrorOcurredEventHandler" namespace="MControl.Util" id="T:MControl.Util.ErrorOcurredEventHandler" access="Public">
          <type name="Void" id="T:System.Void" valueType="true" />
          <parameter name="sender">
            <type name="Object" id="T:System.Object" />
          </parameter>
          <parameter name="e">
            <type name="ErrorOcurredEventArgs" id="T:MControl.Util.ErrorOcurredEventArgs" />
          </parameter>
        </delegate>
        <delegate name="PropertyValueChangedEventHandler" displayName="PropertyValueChangedEventHandler" namespace="MControl.Util" id="T:MControl.Util.PropertyValueChangedEventHandler" access="Public">
          <type name="Void" id="T:System.Void" valueType="true" />
          <parameter name="sender">
            <type name="Object" id="T:System.Object" />
          </parameter>
          <parameter name="e">
            <type name="PropertyValueChangedEventArgs" id="T:MControl.Util.PropertyValueChangedEventArgs" />
          </parameter>
        </delegate>
        <delegate name="ValidatingEventHandler" displayName="ValidatingEventHandler" namespace="MControl.Util" id="T:MControl.Util.ValidatingEventHandler" access="Public">
          <type name="Void" id="T:System.Void" valueType="true" />
          <parameter name="sender">
            <type name="Object" id="T:System.Object" />
          </parameter>
          <parameter name="e">
            <type name="ValidatingEventArgs" id="T:MControl.Util.ValidatingEventArgs" />
          </parameter>
        </delegate>
        <delegate name="ValueChangedEventHandler" displayName="ValueChangedEventHandler" namespace="MControl.Util" id="T:MControl.Util.ValueChangedEventHandler" access="Public">
          <type name="Void" id="T:System.Void" valueType="true" />
          <parameter name="sender">
            <type name="Object" id="T:System.Object" />
          </parameter>
          <parameter name="e">
            <type name="ValueChangedEventArgs" id="T:MControl.Util.ValueChangedEventArgs" />
          </parameter>
        </delegate>
      </namespace>
      <namespace name="MControl.Util.Attributes" id="N:MControl.Util.Attributes">
        <class name="ConfigureManuallyAttribute" id="T:MControl.Util.Attributes.ConfigureManuallyAttribute" access="Public" namespace="MControl.Util.Attributes" displayName="ConfigureManuallyAttribute" sealed="true">
          <attribute name="AttributeUsageAttribute" id="T:System.AttributeUsageAttribute">
            <argument id="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)" type="System.AttributeTargets" value="AttributeTargets.Property" />
          </attribute>
          <base name="Attribute" id="T:System.Attribute" displayName="System.Attribute" />
          <constructorOverload name=".ctor" id="Overload:MControl.Util.Attributes.ConfigureManuallyAttribute.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Attributes.ConfigureManuallyAttribute" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Util.Attributes.ConfigureManuallyAttribute.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Attributes.ConfigureManuallyAttribute" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Attributes.ConfigureManuallyAttribute.#ctor(System.Boolean)" access="Public" contract="Normal">
              <parameter name="allow">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
          <property name="Allow" id="P:MControl.Util.Attributes.ConfigureManuallyAttribute.Allow" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
        </class>
        <class name="UpdateAssemblyTypeAttribute" id="T:MControl.Util.Attributes.UpdateAssemblyTypeAttribute" access="Public" namespace="MControl.Util.Attributes" displayName="UpdateAssemblyTypeAttribute" sealed="true">
          <attribute name="AttributeUsageAttribute" id="T:System.AttributeUsageAttribute">
            <argument id="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)" type="System.AttributeTargets" value="AttributeTargets.Assembly" />
          </attribute>
          <base name="Attribute" id="T:System.Attribute" displayName="System.Attribute" />
          <constructorOverload name=".ctor" id="Overload:MControl.Util.Attributes.UpdateAssemblyTypeAttribute.#ctor" explicitInterfaceImplementation="true">
            <constructor name=".ctor" id="M:MControl.Util.Attributes.UpdateAssemblyTypeAttribute.#ctor(MControl.Util.Attributes.UpdateAssemblyTypes)" access="Public" contract="Normal">
              <parameter name="assemblyType">
                <type name="UpdateAssemblyTypes" id="T:MControl.Util.Attributes.UpdateAssemblyTypes" valueType="true" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Attributes.UpdateAssemblyTypeAttribute.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Attributes.UpdateAssemblyTypeAttribute" /> class.</autoText></summary></documentation>
            </constructor>
          </constructorOverload>
          <property name="AssemblyType" id="P:MControl.Util.Attributes.UpdateAssemblyTypeAttribute.AssemblyType" access="Public" contract="Normal">
            <type name="UpdateAssemblyTypes" id="T:MControl.Util.Attributes.UpdateAssemblyTypes" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
        </class>
        <class name="UpdateDbScriptsAttribute" id="T:MControl.Util.Attributes.UpdateDbScriptsAttribute" access="Public" namespace="MControl.Util.Attributes" displayName="UpdateDbScriptsAttribute" sealed="true">
          <attribute name="AttributeUsageAttribute" id="T:System.AttributeUsageAttribute">
            <argument id="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)" type="System.AttributeTargets" value="AttributeTargets.Assembly" />
            <property name="AllowMultiple" id="P:System.AttributeUsageAttribute.AllowMultiple" type="System.Boolean" value="True" />
          </attribute>
          <base name="Attribute" id="T:System.Attribute" displayName="System.Attribute" />
          <constructorOverload name=".ctor" id="Overload:MControl.Util.Attributes.UpdateDbScriptsAttribute.#ctor" explicitInterfaceImplementation="true">
            <constructor name=".ctor" id="M:MControl.Util.Attributes.UpdateDbScriptsAttribute.#ctor(System.String,System.String,System.String)" access="Public" contract="Normal">
              <parameter name="version">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="scriptsInSql">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="scriptsOutSql">
                <type name="String" id="T:System.String" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Attributes.UpdateDbScriptsAttribute.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Attributes.UpdateDbScriptsAttribute" /> class.</autoText></summary></documentation>
            </constructor>
          </constructorOverload>
          <property name="ScriptsInSql" id="P:MControl.Util.Attributes.UpdateDbScriptsAttribute.ScriptsInSql" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ScriptsOutSql" id="P:MControl.Util.Attributes.UpdateDbScriptsAttribute.ScriptsOutSql" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="Version" id="P:MControl.Util.Attributes.UpdateDbScriptsAttribute.Version" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
        </class>
        <class name="UpdateDocumentationAttribute" id="T:MControl.Util.Attributes.UpdateDocumentationAttribute" access="Public" namespace="MControl.Util.Attributes" displayName="UpdateDocumentationAttribute" sealed="true">
          <attribute name="AttributeUsageAttribute" id="T:System.AttributeUsageAttribute">
            <argument id="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)" type="System.AttributeTargets" value="AttributeTargets.Assembly" />
            <property name="AllowMultiple" id="P:System.AttributeUsageAttribute.AllowMultiple" type="System.Boolean" value="True" />
          </attribute>
          <base name="Attribute" id="T:System.Attribute" displayName="System.Attribute" />
          <constructorOverload name=".ctor" id="Overload:MControl.Util.Attributes.UpdateDocumentationAttribute.#ctor" explicitInterfaceImplementation="true">
            <constructor name=".ctor" id="M:MControl.Util.Attributes.UpdateDocumentationAttribute.#ctor(System.String,System.String,MControl.Util.Attributes.UpdatePriority)" access="Public" contract="Normal">
              <parameter name="version">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="changesSumary">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="priority">
                <type name="UpdatePriority" id="T:MControl.Util.Attributes.UpdatePriority" valueType="true" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Attributes.UpdateDocumentationAttribute.#ctor(System.String,System.String,System.String,MControl.Util.Attributes.UpdatePriority)" access="Public" contract="Normal">
              <parameter name="version">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="changesSumary">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="changesSumaryForInstallLog">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="priority">
                <type name="UpdatePriority" id="T:MControl.Util.Attributes.UpdatePriority" valueType="true" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Attributes.UpdateDocumentationAttribute.#ctor(System.String,System.String,System.String,System.String,MControl.Util.Attributes.UpdatePriority,System.String)" access="Public" contract="Normal">
              <parameter name="version">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="changesSumary">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="changesSumaryForInstallLog">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="changesSumaryForInstallProcess">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="priority">
                <type name="UpdatePriority" id="T:MControl.Util.Attributes.UpdatePriority" valueType="true" />
              </parameter>
              <parameter name="dateChange">
                <type name="String" id="T:System.String" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Attributes.UpdateDocumentationAttribute.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Attributes.UpdateDocumentationAttribute" /> class.</autoText></summary></documentation>
            </constructor>
          </constructorOverload>
          <property name="ChangesSummary" id="P:MControl.Util.Attributes.UpdateDocumentationAttribute.ChangesSummary" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ChangesSummaryForInstallLog" id="P:MControl.Util.Attributes.UpdateDocumentationAttribute.ChangesSummaryForInstallLog" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ChangesSummaryForInstallProcess" id="P:MControl.Util.Attributes.UpdateDocumentationAttribute.ChangesSummaryForInstallProcess" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="DateChange" id="P:MControl.Util.Attributes.UpdateDocumentationAttribute.DateChange" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="Priority" id="P:MControl.Util.Attributes.UpdateDocumentationAttribute.Priority" access="Public" contract="Normal">
            <type name="UpdatePriority" id="T:MControl.Util.Attributes.UpdatePriority" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="Version" id="P:MControl.Util.Attributes.UpdateDocumentationAttribute.Version" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
        </class>
        <enumeration name="UpdateAssemblyTypes" id="T:MControl.Util.Attributes.UpdateAssemblyTypes" displayName="UpdateAssemblyTypes" namespace="MControl.Util.Attributes" access="Public" flags="true">
          <attribute name="FlagsAttribute" id="T:System.FlagsAttribute" />
          <field name="Shared" id="F:MControl.Util.Attributes.UpdateAssemblyTypes.Shared" value="1" />
          <field name="Local" id="F:MControl.Util.Attributes.UpdateAssemblyTypes.Local" value="2" />
          <field name="Plugin" id="F:MControl.Util.Attributes.UpdateAssemblyTypes.Plugin" value="3" />
          <field name="SimplePackage" id="F:MControl.Util.Attributes.UpdateAssemblyTypes.SimplePackage" value="4" />
          <field name="ServicePackPackage" id="F:MControl.Util.Attributes.UpdateAssemblyTypes.ServicePackPackage" value="5" />
        </enumeration>
        <enumeration name="UpdatePriority" id="T:MControl.Util.Attributes.UpdatePriority" displayName="UpdatePriority" namespace="MControl.Util.Attributes" access="Public">
          <field name="High" id="F:MControl.Util.Attributes.UpdatePriority.High" value="1" />
          <field name="Medium" id="F:MControl.Util.Attributes.UpdatePriority.Medium" value="2" />
          <field name="Low" id="F:MControl.Util.Attributes.UpdatePriority.Low" value="3" />
        </enumeration>
      </namespace>
      <namespace name="MControl.Util.Configuration" id="N:MControl.Util.Configuration">
        <class name="Config" id="T:MControl.Util.Configuration.Config" access="Public" namespace="MControl.Util.Configuration" displayName="Config" abstract="true">
          <derivedBy id="T:MControl.Util.Configuration.Ini" displayName="MControl.Util.Configuration.Ini" />
          <derivedBy id="T:MControl.Util.Configuration.Registry" displayName="MControl.Util.Configuration.Registry" />
          <implements name="IConfig" id="T:MControl.Util.Configuration.IConfig" />
          <implements name="IConfigReadOnly" id="T:MControl.Util.Configuration.IConfigReadOnly" />
          <implements name="ICloneable" id="T:System.ICloneable" />
          <constructorOverload name=".ctor" id="Overload:MControl.Util.Configuration.Config.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Configuration.Config" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Util.Configuration.Config.#ctor" access="Family" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Configuration.Config" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Configuration.Config.#ctor(System.String)" access="Family" contract="Normal">
              <parameter name="name">
                <type name="String" id="T:System.String" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Configuration.Config.#ctor(MControl.Util.Configuration.Config)" access="Family" contract="Normal">
              <parameter name="Config">
                <type name="Config" id="T:MControl.Util.Configuration.Config" />
              </parameter>
            </constructor>
          </constructorOverload>
          <property name="DefaultName" id="P:MControl.Util.Configuration.Config.DefaultName" access="Public" contract="Abstract">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <implements name="DefaultName" id="P:MControl.Util.Configuration.IConfig.DefaultName" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
          </property>
          <property name="DefaultNameWithoutExtension" id="P:MControl.Util.Configuration.Config.DefaultNameWithoutExtension" access="Family" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Family" />
          </property>
          <property name="Name" id="P:MControl.Util.Configuration.Config.Name" access="Public" contract="Final">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
            <implements name="Name" id="P:MControl.Util.Configuration.IConfig.Name" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
            <implements name="Name" id="P:MControl.Util.Configuration.IConfigReadOnly.Name" interface="IConfigReadOnly" interfaceId="T:MControl.Util.Configuration.IConfigReadOnly" declaringType="MControl.Util.Configuration.IConfigReadOnly" />
          </property>
          <property name="ReadOnly" id="P:MControl.Util.Configuration.Config.ReadOnly" access="Public" contract="Final">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
            <set access="Public" />
            <implements name="ReadOnly" id="P:MControl.Util.Configuration.IConfig.ReadOnly" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
          </property>
          <method name="Clone" id="M:MControl.Util.Configuration.Config.Clone" access="Public" contract="Abstract">
            <type name="Object" id="T:System.Object" />
            <implements name="Clone" id="M:System.ICloneable.Clone" interface="ICloneable" interfaceId="T:System.ICloneable" declaringType="System.ICloneable" />
          </method>
          <method name="CloneReadOnly" id="M:MControl.Util.Configuration.Config.CloneReadOnly" access="Public" contract="Virtual">
            <type name="IConfigReadOnly" id="T:MControl.Util.Configuration.IConfigReadOnly" />
            <implements name="CloneReadOnly" id="M:MControl.Util.Configuration.IConfig.CloneReadOnly" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
          </method>
          <method name="ConfigToDataSet" id="M:MControl.Util.Configuration.Config.ConfigToDataSet" access="Public" contract="Virtual">
            <type name="DataSet" id="T:System.Data.DataSet" />
            <implements name="ConfigToDataSet" id="M:MControl.Util.Configuration.IConfigReadOnly.ConfigToDataSet" interface="IConfigReadOnly" interfaceId="T:MControl.Util.Configuration.IConfigReadOnly" declaringType="MControl.Util.Configuration.IConfigReadOnly" />
          </method>
          <method name="ConfigToDataTable" id="M:MControl.Util.Configuration.Config.ConfigToDataTable(System.String,System.String,System.String,System.String)" access="Public" contract="Virtual">
            <type name="DataTable" id="T:System.Data.DataTable" />
            <parameter name="mappingName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="sectionFieldName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entryFieldName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="valueFieldName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="DataSetToConfig" id="M:MControl.Util.Configuration.Config.DataSetToConfig(System.Data.DataSet)" access="Public" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="DataSetToConfig" id="M:MControl.Util.Configuration.IConfig.DataSetToConfig(System.Data.DataSet)" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
            <parameter name="ds">
              <type name="DataSet" id="T:System.Data.DataSet" />
            </parameter>
          </method>
          <method name="DataTableToConfig" id="M:MControl.Util.Configuration.Config.DataTableToConfig(System.Data.DataTable,System.String,System.String,System.String)" access="Public" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="dt">
              <type name="DataTable" id="T:System.Data.DataTable" />
            </parameter>
            <parameter name="sectionFieldName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entryFieldName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="valueFieldName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="GetEntryNames" id="M:MControl.Util.Configuration.Config.GetEntryNames(System.String)" access="Public" contract="Abstract">
            <type name="String" id="T:System.String">
              <array rank="1" />
            </type>
            <implements name="GetEntryNames" id="M:MControl.Util.Configuration.IConfigReadOnly.GetEntryNames(System.String)" interface="IConfigReadOnly" interfaceId="T:MControl.Util.Configuration.IConfigReadOnly" declaringType="MControl.Util.Configuration.IConfigReadOnly" />
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="GetSectionNames" id="M:MControl.Util.Configuration.Config.GetSectionNames" access="Public" contract="Abstract">
            <type name="String" id="T:System.String">
              <array rank="1" />
            </type>
            <implements name="GetSectionNames" id="M:MControl.Util.Configuration.IConfigReadOnly.GetSectionNames" interface="IConfigReadOnly" interfaceId="T:MControl.Util.Configuration.IConfigReadOnly" declaringType="MControl.Util.Configuration.IConfigReadOnly" />
          </method>
          <methodOverload name="GetValue" id="Overload:MControl.Util.Configuration.Config.GetValue">
            <method name="GetValue" id="M:MControl.Util.Configuration.Config.GetValue(System.String,System.String)" access="Public" contract="Abstract">
              <type name="Object" id="T:System.Object" />
              <implements name="GetValue" id="M:MControl.Util.Configuration.IConfigReadOnly.GetValue(System.String,System.String)" interface="IConfigReadOnly" interfaceId="T:MControl.Util.Configuration.IConfigReadOnly" declaringType="MControl.Util.Configuration.IConfigReadOnly" />
              <parameter name="section">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="entry">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetValue" id="M:MControl.Util.Configuration.Config.GetValue(System.String,System.String,System.String)" access="Public" contract="Virtual">
              <type name="String" id="T:System.String" />
              <implements name="GetValue" id="M:MControl.Util.Configuration.IConfigReadOnly.GetValue(System.String,System.String,System.String)" interface="IConfigReadOnly" interfaceId="T:MControl.Util.Configuration.IConfigReadOnly" declaringType="MControl.Util.Configuration.IConfigReadOnly" />
              <parameter name="section">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="entry">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetValue" id="M:MControl.Util.Configuration.Config.GetValue(System.String,System.String,System.Int32)" access="Public" contract="Virtual">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <implements name="GetValue" id="M:MControl.Util.Configuration.IConfigReadOnly.GetValue(System.String,System.String,System.Int32)" interface="IConfigReadOnly" interfaceId="T:MControl.Util.Configuration.IConfigReadOnly" declaringType="MControl.Util.Configuration.IConfigReadOnly" />
              <parameter name="section">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="entry">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
            <method name="GetValue" id="M:MControl.Util.Configuration.Config.GetValue(System.String,System.String,System.Double)" access="Public" contract="Virtual">
              <type name="Double" id="T:System.Double" valueType="true" />
              <implements name="GetValue" id="M:MControl.Util.Configuration.IConfigReadOnly.GetValue(System.String,System.String,System.Double)" interface="IConfigReadOnly" interfaceId="T:MControl.Util.Configuration.IConfigReadOnly" declaringType="MControl.Util.Configuration.IConfigReadOnly" />
              <parameter name="section">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="entry">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Double" id="T:System.Double" valueType="true" />
              </parameter>
            </method>
            <method name="GetValue" id="M:MControl.Util.Configuration.Config.GetValue(System.String,System.String,System.Boolean)" access="Public" contract="Virtual">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <implements name="GetValue" id="M:MControl.Util.Configuration.IConfigReadOnly.GetValue(System.String,System.String,System.Boolean)" interface="IConfigReadOnly" interfaceId="T:MControl.Util.Configuration.IConfigReadOnly" declaringType="MControl.Util.Configuration.IConfigReadOnly" />
              <parameter name="section">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="entry">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="HasEntry" id="M:MControl.Util.Configuration.Config.HasEntry(System.String,System.String)" access="Public" contract="Virtual">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <implements name="HasEntry" id="M:MControl.Util.Configuration.IConfigReadOnly.HasEntry(System.String,System.String)" interface="IConfigReadOnly" interfaceId="T:MControl.Util.Configuration.IConfigReadOnly" declaringType="MControl.Util.Configuration.IConfigReadOnly" />
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entry">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="HasSection" id="M:MControl.Util.Configuration.Config.HasSection(System.String)" access="Public" contract="Virtual">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <implements name="HasSection" id="M:MControl.Util.Configuration.IConfigReadOnly.HasSection(System.String)" interface="IConfigReadOnly" interfaceId="T:MControl.Util.Configuration.IConfigReadOnly" declaringType="MControl.Util.Configuration.IConfigReadOnly" />
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="OnChanged" id="M:MControl.Util.Configuration.Config.OnChanged(MControl.Util.Configuration.ConfigChangedArgs)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="ConfigChangedArgs" id="T:MControl.Util.Configuration.ConfigChangedArgs" />
            </parameter>
          </method>
          <method name="OnChanging" id="M:MControl.Util.Configuration.Config.OnChanging(MControl.Util.Configuration.ConfigChangingArgs)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="ConfigChangingArgs" id="T:MControl.Util.Configuration.ConfigChangingArgs" />
            </parameter>
          </method>
          <method name="RaiseChangeEvent" id="M:MControl.Util.Configuration.Config.RaiseChangeEvent(System.Boolean,MControl.Util.Configuration.ConfigChangeType,System.String,System.String,System.Object)" access="Family" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="changing">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="changeType">
              <type name="ConfigChangeType" id="T:MControl.Util.Configuration.ConfigChangeType" valueType="true" />
            </parameter>
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entry">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="RemoveEntry" id="M:MControl.Util.Configuration.Config.RemoveEntry(System.String,System.String)" access="Public" contract="Abstract">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="RemoveEntry" id="M:MControl.Util.Configuration.IConfig.RemoveEntry(System.String,System.String)" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entry">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="RemoveSection" id="M:MControl.Util.Configuration.Config.RemoveSection(System.String)" access="Public" contract="Abstract">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="RemoveSection" id="M:MControl.Util.Configuration.IConfig.RemoveSection(System.String)" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="SetValue" id="M:MControl.Util.Configuration.Config.SetValue(System.String,System.String,System.Object)" access="Public" contract="Abstract">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="SetValue" id="M:MControl.Util.Configuration.IConfig.SetValue(System.String,System.String,System.Object)" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entry">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="VerifyAndAdjustEntry" id="M:MControl.Util.Configuration.Config.VerifyAndAdjustEntry(System.String@)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="entry" direction="ref">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="VerifyAndAdjustSection" id="M:MControl.Util.Configuration.Config.VerifyAndAdjustSection(System.String@)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="section" direction="ref">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="VerifyName" id="M:MControl.Util.Configuration.Config.VerifyName" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="VerifyNotReadOnly" id="M:MControl.Util.Configuration.Config.VerifyNotReadOnly" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <event name="Changed" id="E:MControl.Util.Configuration.Config.Changed" access="Public" contract="Final" multicast="true">
            <type name="ConfigChangedHandler" id="T:MControl.Util.Configuration.ConfigChangedHandler" />
            <implements name="Changed" id="E:MControl.Util.Configuration.IConfig.Changed" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
            <eventArgs name="ConfigChangedArgs" id="T:MControl.Util.Configuration.ConfigChangedArgs">
              <property name="ChangeType" id="P:MControl.Util.Configuration.ConfigChangedArgs.ChangeType" access="Public" contract="Normal">
                <type name="ConfigChangeType" id="T:MControl.Util.Configuration.ConfigChangeType" valueType="true" />
                <get access="Public" />
              </property>
              <property name="Entry" id="P:MControl.Util.Configuration.ConfigChangedArgs.Entry" access="Public" contract="Normal">
                <type name="String" id="T:System.String" />
                <get access="Public" />
              </property>
              <property name="Section" id="P:MControl.Util.Configuration.ConfigChangedArgs.Section" access="Public" contract="Normal">
                <type name="String" id="T:System.String" />
                <get access="Public" />
              </property>
              <property name="Value" id="P:MControl.Util.Configuration.ConfigChangedArgs.Value" access="Public" contract="Normal">
                <type name="Object" id="T:System.Object" />
                <get access="Public" />
              </property>
            </eventArgs>
          </event>
          <event name="Changing" id="E:MControl.Util.Configuration.Config.Changing" access="Public" contract="Final" multicast="true">
            <type name="ConfigChangingHandler" id="T:MControl.Util.Configuration.ConfigChangingHandler" />
            <implements name="Changing" id="E:MControl.Util.Configuration.IConfig.Changing" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
            <eventArgs name="ConfigChangingArgs" id="T:MControl.Util.Configuration.ConfigChangingArgs">
              <property name="Cancel" id="P:MControl.Util.Configuration.ConfigChangingArgs.Cancel" access="Public" contract="Normal">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
                <get access="Public" />
                <set access="Public" />
              </property>
              <property name="ChangeType" id="P:MControl.Util.Configuration.ConfigChangedArgs.ChangeType" access="Public" contract="Normal" declaringType="T:MControl.Util.Configuration.ConfigChangedArgs">
                <get access="Public" />
              </property>
              <property name="Entry" id="P:MControl.Util.Configuration.ConfigChangedArgs.Entry" access="Public" contract="Normal" declaringType="T:MControl.Util.Configuration.ConfigChangedArgs">
                <get access="Public" />
              </property>
              <property name="Section" id="P:MControl.Util.Configuration.ConfigChangedArgs.Section" access="Public" contract="Normal" declaringType="T:MControl.Util.Configuration.ConfigChangedArgs">
                <get access="Public" />
              </property>
              <property name="Value" id="P:MControl.Util.Configuration.ConfigChangedArgs.Value" access="Public" contract="Normal" declaringType="T:MControl.Util.Configuration.ConfigChangedArgs">
                <get access="Public" />
              </property>
            </eventArgs>
          </event>
        </class>
        <class name="ConfigChangedArgs" id="T:MControl.Util.Configuration.ConfigChangedArgs" access="Public" namespace="MControl.Util.Configuration" displayName="ConfigChangedArgs">
          <base name="EventArgs" id="T:System.EventArgs" displayName="System.EventArgs" />
          <derivedBy id="T:MControl.Util.Configuration.ConfigChangingArgs" displayName="MControl.Util.Configuration.ConfigChangingArgs" />
          <constructor name=".ctor" id="M:MControl.Util.Configuration.ConfigChangedArgs.#ctor(MControl.Util.Configuration.ConfigChangeType,System.String,System.String,System.Object)" access="Public" contract="Normal">
            <parameter name="changeType">
              <type name="ConfigChangeType" id="T:MControl.Util.Configuration.ConfigChangeType" valueType="true" />
            </parameter>
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entry">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </constructor>
          <property name="ChangeType" id="P:MControl.Util.Configuration.ConfigChangedArgs.ChangeType" access="Public" contract="Normal">
            <type name="ConfigChangeType" id="T:MControl.Util.Configuration.ConfigChangeType" valueType="true" />
            <get access="Public" />
          </property>
          <property name="Entry" id="P:MControl.Util.Configuration.ConfigChangedArgs.Entry" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
          </property>
          <property name="Section" id="P:MControl.Util.Configuration.ConfigChangedArgs.Section" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
          </property>
          <property name="Value" id="P:MControl.Util.Configuration.ConfigChangedArgs.Value" access="Public" contract="Normal">
            <type name="Object" id="T:System.Object" />
            <get access="Public" />
          </property>
        </class>
        <class name="ConfigChangingArgs" id="T:MControl.Util.Configuration.ConfigChangingArgs" access="Public" namespace="MControl.Util.Configuration" displayName="ConfigChangingArgs">
          <base name="ConfigChangedArgs" id="T:MControl.Util.Configuration.ConfigChangedArgs" displayName="MControl.Util.Configuration.ConfigChangedArgs">
            <base name="EventArgs" id="T:System.EventArgs" displayName="System.EventArgs" />
          </base>
          <constructor name=".ctor" id="M:MControl.Util.Configuration.ConfigChangingArgs.#ctor(MControl.Util.Configuration.ConfigChangeType,System.String,System.String,System.Object)" access="Public" contract="Normal">
            <parameter name="changeType">
              <type name="ConfigChangeType" id="T:MControl.Util.Configuration.ConfigChangeType" valueType="true" />
            </parameter>
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entry">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </constructor>
          <property name="Cancel" id="P:MControl.Util.Configuration.ConfigChangingArgs.Cancel" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ChangeType" id="P:MControl.Util.Configuration.ConfigChangedArgs.ChangeType" access="Public" contract="Normal" declaringType="T:MControl.Util.Configuration.ConfigChangedArgs">
            <get access="Public" />
          </property>
          <property name="Entry" id="P:MControl.Util.Configuration.ConfigChangedArgs.Entry" access="Public" contract="Normal" declaringType="T:MControl.Util.Configuration.ConfigChangedArgs">
            <get access="Public" />
          </property>
          <property name="Section" id="P:MControl.Util.Configuration.ConfigChangedArgs.Section" access="Public" contract="Normal" declaringType="T:MControl.Util.Configuration.ConfigChangedArgs">
            <get access="Public" />
          </property>
          <property name="Value" id="P:MControl.Util.Configuration.ConfigChangedArgs.Value" access="Public" contract="Normal" declaringType="T:MControl.Util.Configuration.ConfigChangedArgs">
            <get access="Public" />
          </property>
        </class>
        <class name="Ini" id="T:MControl.Util.Configuration.Ini" access="Public" namespace="MControl.Util.Configuration" displayName="Ini">
          <base name="Config" id="T:MControl.Util.Configuration.Config" displayName="MControl.Util.Configuration.Config" />
          <implements name="IConfig" id="T:MControl.Util.Configuration.IConfig" inherited="true" />
          <implements name="IConfigReadOnly" id="T:MControl.Util.Configuration.IConfigReadOnly" inherited="true" />
          <implements name="ICloneable" id="T:System.ICloneable" inherited="true" />
          <constructorOverload name=".ctor" id="Overload:MControl.Util.Configuration.Ini.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Configuration.Ini" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Util.Configuration.Ini.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Configuration.Ini" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Configuration.Ini.#ctor(System.String)" access="Public" contract="Normal">
              <parameter name="fileName">
                <type name="String" id="T:System.String" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Configuration.Ini.#ctor(MControl.Util.Configuration.Ini)" access="Public" contract="Normal">
              <parameter name="ini">
                <type name="Ini" id="T:MControl.Util.Configuration.Ini" />
              </parameter>
            </constructor>
          </constructorOverload>
          <property name="DefaultName" id="P:MControl.Util.Configuration.Ini.DefaultName" access="Public" contract="Override">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <implements name="DefaultName" id="P:MControl.Util.Configuration.IConfig.DefaultName" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
          </property>
          <property name="DefaultNameWithoutExtension" id="P:MControl.Util.Configuration.Config.DefaultNameWithoutExtension" access="Family" contract="Normal" declaringType="T:MControl.Util.Configuration.Config">
            <get access="Family" />
          </property>
          <property name="Name" id="P:MControl.Util.Configuration.Config.Name" access="Public" contract="Final" declaringType="T:MControl.Util.Configuration.Config">
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ReadOnly" id="P:MControl.Util.Configuration.Config.ReadOnly" access="Public" contract="Final" declaringType="T:MControl.Util.Configuration.Config">
            <get access="Public" />
            <set access="Public" />
          </property>
          <method name="Clone" id="M:MControl.Util.Configuration.Ini.Clone" access="Public" contract="Override">
            <type name="Object" id="T:System.Object" />
            <implements name="Clone" id="M:System.ICloneable.Clone" interface="ICloneable" interfaceId="T:System.ICloneable" declaringType="System.ICloneable" />
          </method>
          <method name="CloneReadOnly" id="M:MControl.Util.Configuration.Config.CloneReadOnly" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config" />
          <method name="ConfigToDataSet" id="M:MControl.Util.Configuration.Config.ConfigToDataSet" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config" />
          <method name="ConfigToDataTable" id="M:MControl.Util.Configuration.Config.ConfigToDataTable(System.String,System.String,System.String,System.String)" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
            <parameter name="mappingName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="sectionFieldName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entryFieldName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="valueFieldName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="DataSetToConfig" id="M:MControl.Util.Configuration.Config.DataSetToConfig(System.Data.DataSet)" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
            <parameter name="ds">
              <type name="DataSet" id="T:System.Data.DataSet" />
            </parameter>
          </method>
          <method name="DataTableToConfig" id="M:MControl.Util.Configuration.Config.DataTableToConfig(System.Data.DataTable,System.String,System.String,System.String)" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
            <parameter name="dt">
              <type name="DataTable" id="T:System.Data.DataTable" />
            </parameter>
            <parameter name="sectionFieldName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entryFieldName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="valueFieldName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="GetEntryNames" id="M:MControl.Util.Configuration.Ini.GetEntryNames(System.String)" access="Public" contract="Override">
            <type name="String" id="T:System.String">
              <array rank="1" />
            </type>
            <implements name="GetEntryNames" id="M:MControl.Util.Configuration.IConfigReadOnly.GetEntryNames(System.String)" interface="IConfigReadOnly" interfaceId="T:MControl.Util.Configuration.IConfigReadOnly" declaringType="MControl.Util.Configuration.IConfigReadOnly" />
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="GetSectionNames" id="M:MControl.Util.Configuration.Ini.GetSectionNames" access="Public" contract="Override">
            <type name="String" id="T:System.String">
              <array rank="1" />
            </type>
            <implements name="GetSectionNames" id="M:MControl.Util.Configuration.IConfigReadOnly.GetSectionNames" interface="IConfigReadOnly" interfaceId="T:MControl.Util.Configuration.IConfigReadOnly" declaringType="MControl.Util.Configuration.IConfigReadOnly" />
          </method>
          <methodOverload name="GetValue" id="Overload:MControl.Util.Configuration.Ini.GetValue">
            <method name="GetValue" id="M:MControl.Util.Configuration.Ini.GetValue(System.String,System.String)" access="Public" contract="Override">
              <type name="Object" id="T:System.Object" />
              <implements name="GetValue" id="M:MControl.Util.Configuration.IConfigReadOnly.GetValue(System.String,System.String)" interface="IConfigReadOnly" interfaceId="T:MControl.Util.Configuration.IConfigReadOnly" declaringType="MControl.Util.Configuration.IConfigReadOnly" />
              <parameter name="section">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="entry">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetValue" id="M:MControl.Util.Configuration.Config.GetValue(System.String,System.String,System.String)" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
              <parameter name="section">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="entry">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetValue" id="M:MControl.Util.Configuration.Config.GetValue(System.String,System.String,System.Int32)" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
              <parameter name="section">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="entry">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
            <method name="GetValue" id="M:MControl.Util.Configuration.Config.GetValue(System.String,System.String,System.Double)" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
              <parameter name="section">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="entry">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Double" id="T:System.Double" valueType="true" />
              </parameter>
            </method>
            <method name="GetValue" id="M:MControl.Util.Configuration.Config.GetValue(System.String,System.String,System.Boolean)" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
              <parameter name="section">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="entry">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="HasEntry" id="M:MControl.Util.Configuration.Config.HasEntry(System.String,System.String)" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entry">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="HasSection" id="M:MControl.Util.Configuration.Config.HasSection(System.String)" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="OnChanged" id="M:MControl.Util.Configuration.Config.OnChanged(MControl.Util.Configuration.ConfigChangedArgs)" access="Family" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
            <parameter name="e">
              <type name="ConfigChangedArgs" id="T:MControl.Util.Configuration.ConfigChangedArgs" />
            </parameter>
          </method>
          <method name="OnChanging" id="M:MControl.Util.Configuration.Config.OnChanging(MControl.Util.Configuration.ConfigChangingArgs)" access="Family" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
            <parameter name="e">
              <type name="ConfigChangingArgs" id="T:MControl.Util.Configuration.ConfigChangingArgs" />
            </parameter>
          </method>
          <method name="RaiseChangeEvent" id="M:MControl.Util.Configuration.Config.RaiseChangeEvent(System.Boolean,MControl.Util.Configuration.ConfigChangeType,System.String,System.String,System.Object)" access="Family" contract="Normal" declaringType="T:MControl.Util.Configuration.Config">
            <parameter name="changing">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="changeType">
              <type name="ConfigChangeType" id="T:MControl.Util.Configuration.ConfigChangeType" valueType="true" />
            </parameter>
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entry">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="RemoveEntry" id="M:MControl.Util.Configuration.Ini.RemoveEntry(System.String,System.String)" access="Public" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="RemoveEntry" id="M:MControl.Util.Configuration.IConfig.RemoveEntry(System.String,System.String)" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entry">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="RemoveSection" id="M:MControl.Util.Configuration.Ini.RemoveSection(System.String)" access="Public" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="RemoveSection" id="M:MControl.Util.Configuration.IConfig.RemoveSection(System.String)" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="SetValue" id="M:MControl.Util.Configuration.Ini.SetValue(System.String,System.String,System.Object)" access="Public" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="SetValue" id="M:MControl.Util.Configuration.IConfig.SetValue(System.String,System.String,System.Object)" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entry">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="VerifyAndAdjustEntry" id="M:MControl.Util.Configuration.Config.VerifyAndAdjustEntry(System.String@)" access="Family" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
            <parameter name="entry" direction="ref">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="VerifyAndAdjustSection" id="M:MControl.Util.Configuration.Config.VerifyAndAdjustSection(System.String@)" access="Family" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
            <parameter name="section" direction="ref">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="VerifyName" id="M:MControl.Util.Configuration.Config.VerifyName" access="Family" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config" />
          <method name="VerifyNotReadOnly" id="M:MControl.Util.Configuration.Config.VerifyNotReadOnly" access="Family" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config" />
          <event name="Changed" id="E:MControl.Util.Configuration.Ini.Changed" access="Public" contract="Final" multicast="true" declaringType="T:MControl.Util.Configuration.Config">
            <type name="ConfigChangedHandler" id="T:MControl.Util.Configuration.ConfigChangedHandler" />
            <implements name="Changed" id="E:MControl.Util.Configuration.IConfig.Changed" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
          </event>
          <event name="Changing" id="E:MControl.Util.Configuration.Ini.Changing" access="Public" contract="Final" multicast="true" declaringType="T:MControl.Util.Configuration.Config">
            <type name="ConfigChangingHandler" id="T:MControl.Util.Configuration.ConfigChangingHandler" />
            <implements name="Changing" id="E:MControl.Util.Configuration.IConfig.Changing" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
          </event>
        </class>
        <class name="Registry" id="T:MControl.Util.Configuration.Registry" access="Public" namespace="MControl.Util.Configuration" displayName="Registry">
          <base name="Config" id="T:MControl.Util.Configuration.Config" displayName="MControl.Util.Configuration.Config" />
          <implements name="IConfig" id="T:MControl.Util.Configuration.IConfig" inherited="true" />
          <implements name="IConfigReadOnly" id="T:MControl.Util.Configuration.IConfigReadOnly" inherited="true" />
          <implements name="ICloneable" id="T:System.ICloneable" inherited="true" />
          <constructorOverload name=".ctor" id="Overload:MControl.Util.Configuration.Registry.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Configuration.Registry" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Util.Configuration.Registry.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Configuration.Registry" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Configuration.Registry.#ctor(Microsoft.Win32.RegistryKey,System.String)" access="Public" contract="Normal">
              <parameter name="rootKey">
                <type name="RegistryKey" id="T:Microsoft.Win32.RegistryKey" />
              </parameter>
              <parameter name="subKeyName">
                <type name="String" id="T:System.String" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Configuration.Registry.#ctor(MControl.Util.Configuration.Registry)" access="Public" contract="Normal">
              <parameter name="reg">
                <type name="Registry" id="T:MControl.Util.Configuration.Registry" />
              </parameter>
            </constructor>
          </constructorOverload>
          <property name="DefaultName" id="P:MControl.Util.Configuration.Registry.DefaultName" access="Public" contract="Override">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <implements name="DefaultName" id="P:MControl.Util.Configuration.IConfig.DefaultName" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
          </property>
          <property name="DefaultNameWithoutExtension" id="P:MControl.Util.Configuration.Config.DefaultNameWithoutExtension" access="Family" contract="Normal" declaringType="T:MControl.Util.Configuration.Config">
            <get access="Family" />
          </property>
          <property name="Name" id="P:MControl.Util.Configuration.Config.Name" access="Public" contract="Final" declaringType="T:MControl.Util.Configuration.Config">
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ReadOnly" id="P:MControl.Util.Configuration.Config.ReadOnly" access="Public" contract="Final" declaringType="T:MControl.Util.Configuration.Config">
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="RootKey" id="P:MControl.Util.Configuration.Registry.RootKey" access="Public" contract="Normal">
            <type name="RegistryKey" id="T:Microsoft.Win32.RegistryKey" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <method name="Clone" id="M:MControl.Util.Configuration.Registry.Clone" access="Public" contract="Override">
            <type name="Object" id="T:System.Object" />
            <implements name="Clone" id="M:System.ICloneable.Clone" interface="ICloneable" interfaceId="T:System.ICloneable" declaringType="System.ICloneable" />
          </method>
          <method name="CloneReadOnly" id="M:MControl.Util.Configuration.Config.CloneReadOnly" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config" />
          <method name="ConfigToDataSet" id="M:MControl.Util.Configuration.Config.ConfigToDataSet" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config" />
          <method name="ConfigToDataTable" id="M:MControl.Util.Configuration.Config.ConfigToDataTable(System.String,System.String,System.String,System.String)" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
            <parameter name="mappingName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="sectionFieldName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entryFieldName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="valueFieldName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="DataSetToConfig" id="M:MControl.Util.Configuration.Config.DataSetToConfig(System.Data.DataSet)" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
            <parameter name="ds">
              <type name="DataSet" id="T:System.Data.DataSet" />
            </parameter>
          </method>
          <method name="DataTableToConfig" id="M:MControl.Util.Configuration.Config.DataTableToConfig(System.Data.DataTable,System.String,System.String,System.String)" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
            <parameter name="dt">
              <type name="DataTable" id="T:System.Data.DataTable" />
            </parameter>
            <parameter name="sectionFieldName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entryFieldName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="valueFieldName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="GetEntryNames" id="M:MControl.Util.Configuration.Registry.GetEntryNames(System.String)" access="Public" contract="Override">
            <type name="String" id="T:System.String">
              <array rank="1" />
            </type>
            <implements name="GetEntryNames" id="M:MControl.Util.Configuration.IConfigReadOnly.GetEntryNames(System.String)" interface="IConfigReadOnly" interfaceId="T:MControl.Util.Configuration.IConfigReadOnly" declaringType="MControl.Util.Configuration.IConfigReadOnly" />
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="GetSectionNames" id="M:MControl.Util.Configuration.Registry.GetSectionNames" access="Public" contract="Override">
            <type name="String" id="T:System.String">
              <array rank="1" />
            </type>
            <implements name="GetSectionNames" id="M:MControl.Util.Configuration.IConfigReadOnly.GetSectionNames" interface="IConfigReadOnly" interfaceId="T:MControl.Util.Configuration.IConfigReadOnly" declaringType="MControl.Util.Configuration.IConfigReadOnly" />
          </method>
          <method name="GetSubKey" id="M:MControl.Util.Configuration.Registry.GetSubKey(System.String,System.Boolean,System.Boolean)" access="Family" contract="Normal">
            <type name="RegistryKey" id="T:Microsoft.Win32.RegistryKey" />
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="create">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="writable">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="GetValue" id="Overload:MControl.Util.Configuration.Registry.GetValue">
            <method name="GetValue" id="M:MControl.Util.Configuration.Registry.GetValue(System.String,System.String)" access="Public" contract="Override">
              <type name="Object" id="T:System.Object" />
              <implements name="GetValue" id="M:MControl.Util.Configuration.IConfigReadOnly.GetValue(System.String,System.String)" interface="IConfigReadOnly" interfaceId="T:MControl.Util.Configuration.IConfigReadOnly" declaringType="MControl.Util.Configuration.IConfigReadOnly" />
              <parameter name="section">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="entry">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetValue" id="M:MControl.Util.Configuration.Config.GetValue(System.String,System.String,System.String)" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
              <parameter name="section">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="entry">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetValue" id="M:MControl.Util.Configuration.Config.GetValue(System.String,System.String,System.Int32)" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
              <parameter name="section">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="entry">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
            <method name="GetValue" id="M:MControl.Util.Configuration.Config.GetValue(System.String,System.String,System.Double)" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
              <parameter name="section">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="entry">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Double" id="T:System.Double" valueType="true" />
              </parameter>
            </method>
            <method name="GetValue" id="M:MControl.Util.Configuration.Config.GetValue(System.String,System.String,System.Boolean)" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
              <parameter name="section">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="entry">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="HasEntry" id="M:MControl.Util.Configuration.Config.HasEntry(System.String,System.String)" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entry">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="HasSection" id="M:MControl.Util.Configuration.Config.HasSection(System.String)" access="Public" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="OnChanged" id="M:MControl.Util.Configuration.Config.OnChanged(MControl.Util.Configuration.ConfigChangedArgs)" access="Family" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
            <parameter name="e">
              <type name="ConfigChangedArgs" id="T:MControl.Util.Configuration.ConfigChangedArgs" />
            </parameter>
          </method>
          <method name="OnChanging" id="M:MControl.Util.Configuration.Config.OnChanging(MControl.Util.Configuration.ConfigChangingArgs)" access="Family" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
            <parameter name="e">
              <type name="ConfigChangingArgs" id="T:MControl.Util.Configuration.ConfigChangingArgs" />
            </parameter>
          </method>
          <method name="RaiseChangeEvent" id="M:MControl.Util.Configuration.Config.RaiseChangeEvent(System.Boolean,MControl.Util.Configuration.ConfigChangeType,System.String,System.String,System.Object)" access="Family" contract="Normal" declaringType="T:MControl.Util.Configuration.Config">
            <parameter name="changing">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="changeType">
              <type name="ConfigChangeType" id="T:MControl.Util.Configuration.ConfigChangeType" valueType="true" />
            </parameter>
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entry">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="RemoveEntry" id="M:MControl.Util.Configuration.Registry.RemoveEntry(System.String,System.String)" access="Public" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="RemoveEntry" id="M:MControl.Util.Configuration.IConfig.RemoveEntry(System.String,System.String)" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entry">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="RemoveSection" id="M:MControl.Util.Configuration.Registry.RemoveSection(System.String)" access="Public" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="RemoveSection" id="M:MControl.Util.Configuration.IConfig.RemoveSection(System.String)" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="SetValue" id="M:MControl.Util.Configuration.Registry.SetValue(System.String,System.String,System.Object)" access="Public" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="SetValue" id="M:MControl.Util.Configuration.IConfig.SetValue(System.String,System.String,System.Object)" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entry">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="VerifyAndAdjustEntry" id="M:MControl.Util.Configuration.Config.VerifyAndAdjustEntry(System.String@)" access="Family" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
            <parameter name="entry" direction="ref">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="VerifyAndAdjustSection" id="M:MControl.Util.Configuration.Config.VerifyAndAdjustSection(System.String@)" access="Family" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config">
            <parameter name="section" direction="ref">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="VerifyName" id="M:MControl.Util.Configuration.Config.VerifyName" access="Family" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config" />
          <method name="VerifyNotReadOnly" id="M:MControl.Util.Configuration.Config.VerifyNotReadOnly" access="Family" contract="Virtual" declaringType="T:MControl.Util.Configuration.Config" />
          <event name="Changed" id="E:MControl.Util.Configuration.Registry.Changed" access="Public" contract="Final" multicast="true" declaringType="T:MControl.Util.Configuration.Config">
            <type name="ConfigChangedHandler" id="T:MControl.Util.Configuration.ConfigChangedHandler" />
            <implements name="Changed" id="E:MControl.Util.Configuration.IConfig.Changed" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
          </event>
          <event name="Changing" id="E:MControl.Util.Configuration.Registry.Changing" access="Public" contract="Final" multicast="true" declaringType="T:MControl.Util.Configuration.Config">
            <type name="ConfigChangingHandler" id="T:MControl.Util.Configuration.ConfigChangingHandler" />
            <implements name="Changing" id="E:MControl.Util.Configuration.IConfig.Changing" interface="IConfig" interfaceId="T:MControl.Util.Configuration.IConfig" declaringType="MControl.Util.Configuration.IConfig" />
          </event>
        </class>
        <interface name="IConfig" id="T:MControl.Util.Configuration.IConfig" access="Public" namespace="MControl.Util.Configuration" displayName="IConfig">
          <implements name="IConfigReadOnly" id="T:MControl.Util.Configuration.IConfigReadOnly" />
          <implements name="ICloneable" id="T:System.ICloneable" />
          <implementedBy id="T:MControl.Util.Configuration.Config" displayName="MControl.Util.Configuration.Config" />
          <property name="DefaultName" id="P:MControl.Util.Configuration.IConfig.DefaultName" access="Public" contract="Abstract">
            <type name="String" id="T:System.String" />
            <get access="Public" />
          </property>
          <property name="Name" id="P:MControl.Util.Configuration.IConfig.Name" access="Public" contract="Abstract">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ReadOnly" id="P:MControl.Util.Configuration.IConfig.ReadOnly" access="Public" contract="Abstract">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <method name="CloneReadOnly" id="M:MControl.Util.Configuration.IConfig.CloneReadOnly" access="Public" contract="Abstract">
            <type name="IConfigReadOnly" id="T:MControl.Util.Configuration.IConfigReadOnly" />
          </method>
          <method name="DataSetToConfig" id="M:MControl.Util.Configuration.IConfig.DataSetToConfig(System.Data.DataSet)" access="Public" contract="Abstract">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="ds">
              <type name="DataSet" id="T:System.Data.DataSet" />
            </parameter>
          </method>
          <method name="RemoveEntry" id="M:MControl.Util.Configuration.IConfig.RemoveEntry(System.String,System.String)" access="Public" contract="Abstract">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entry">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="RemoveSection" id="M:MControl.Util.Configuration.IConfig.RemoveSection(System.String)" access="Public" contract="Abstract">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="SetValue" id="M:MControl.Util.Configuration.IConfig.SetValue(System.String,System.String,System.Object)" access="Public" contract="Abstract">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entry">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <event name="Changed" id="E:MControl.Util.Configuration.IConfig.Changed" access="Public" contract="Abstract" multicast="true">
            <type name="ConfigChangedHandler" id="T:MControl.Util.Configuration.ConfigChangedHandler" />
            <eventArgs name="ConfigChangedArgs" id="T:MControl.Util.Configuration.ConfigChangedArgs">
              <property name="ChangeType" id="P:MControl.Util.Configuration.ConfigChangedArgs.ChangeType" access="Public" contract="Normal">
                <type name="ConfigChangeType" id="T:MControl.Util.Configuration.ConfigChangeType" valueType="true" />
                <get access="Public" />
              </property>
              <property name="Entry" id="P:MControl.Util.Configuration.ConfigChangedArgs.Entry" access="Public" contract="Normal">
                <type name="String" id="T:System.String" />
                <get access="Public" />
              </property>
              <property name="Section" id="P:MControl.Util.Configuration.ConfigChangedArgs.Section" access="Public" contract="Normal">
                <type name="String" id="T:System.String" />
                <get access="Public" />
              </property>
              <property name="Value" id="P:MControl.Util.Configuration.ConfigChangedArgs.Value" access="Public" contract="Normal">
                <type name="Object" id="T:System.Object" />
                <get access="Public" />
              </property>
            </eventArgs>
          </event>
          <event name="Changing" id="E:MControl.Util.Configuration.IConfig.Changing" access="Public" contract="Abstract" multicast="true">
            <type name="ConfigChangingHandler" id="T:MControl.Util.Configuration.ConfigChangingHandler" />
            <eventArgs name="ConfigChangingArgs" id="T:MControl.Util.Configuration.ConfigChangingArgs">
              <property name="Cancel" id="P:MControl.Util.Configuration.ConfigChangingArgs.Cancel" access="Public" contract="Normal">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
                <get access="Public" />
                <set access="Public" />
              </property>
              <property name="ChangeType" id="P:MControl.Util.Configuration.ConfigChangedArgs.ChangeType" access="Public" contract="Normal" declaringType="T:MControl.Util.Configuration.ConfigChangedArgs">
                <get access="Public" />
              </property>
              <property name="Entry" id="P:MControl.Util.Configuration.ConfigChangedArgs.Entry" access="Public" contract="Normal" declaringType="T:MControl.Util.Configuration.ConfigChangedArgs">
                <get access="Public" />
              </property>
              <property name="Section" id="P:MControl.Util.Configuration.ConfigChangedArgs.Section" access="Public" contract="Normal" declaringType="T:MControl.Util.Configuration.ConfigChangedArgs">
                <get access="Public" />
              </property>
              <property name="Value" id="P:MControl.Util.Configuration.ConfigChangedArgs.Value" access="Public" contract="Normal" declaringType="T:MControl.Util.Configuration.ConfigChangedArgs">
                <get access="Public" />
              </property>
            </eventArgs>
          </event>
        </interface>
        <interface name="IConfigReadOnly" id="T:MControl.Util.Configuration.IConfigReadOnly" access="Public" namespace="MControl.Util.Configuration" displayName="IConfigReadOnly">
          <derivedBy id="T:MControl.Util.Configuration.IConfig" displayName="MControl.Util.Configuration.IConfig" />
          <implements name="ICloneable" id="T:System.ICloneable" />
          <implementedBy id="T:MControl.Util.Configuration.Config" displayName="MControl.Util.Configuration.Config" />
          <property name="Name" id="P:MControl.Util.Configuration.IConfigReadOnly.Name" access="Public" contract="Abstract">
            <type name="String" id="T:System.String" />
            <get access="Public" />
          </property>
          <method name="ConfigToDataSet" id="M:MControl.Util.Configuration.IConfigReadOnly.ConfigToDataSet" access="Public" contract="Abstract">
            <type name="DataSet" id="T:System.Data.DataSet" />
          </method>
          <method name="GetEntryNames" id="M:MControl.Util.Configuration.IConfigReadOnly.GetEntryNames(System.String)" access="Public" contract="Abstract">
            <type name="String" id="T:System.String">
              <array rank="1" />
            </type>
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="GetSectionNames" id="M:MControl.Util.Configuration.IConfigReadOnly.GetSectionNames" access="Public" contract="Abstract">
            <type name="String" id="T:System.String">
              <array rank="1" />
            </type>
          </method>
          <methodOverload name="GetValue" id="Overload:MControl.Util.Configuration.IConfigReadOnly.GetValue">
            <method name="GetValue" id="M:MControl.Util.Configuration.IConfigReadOnly.GetValue(System.String,System.String)" access="Public" contract="Abstract">
              <type name="Object" id="T:System.Object" />
              <parameter name="section">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="entry">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetValue" id="M:MControl.Util.Configuration.IConfigReadOnly.GetValue(System.String,System.String,System.String)" access="Public" contract="Abstract">
              <type name="String" id="T:System.String" />
              <parameter name="section">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="entry">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetValue" id="M:MControl.Util.Configuration.IConfigReadOnly.GetValue(System.String,System.String,System.Int32)" access="Public" contract="Abstract">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="section">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="entry">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
            <method name="GetValue" id="M:MControl.Util.Configuration.IConfigReadOnly.GetValue(System.String,System.String,System.Double)" access="Public" contract="Abstract">
              <type name="Double" id="T:System.Double" valueType="true" />
              <parameter name="section">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="entry">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Double" id="T:System.Double" valueType="true" />
              </parameter>
            </method>
            <method name="GetValue" id="M:MControl.Util.Configuration.IConfigReadOnly.GetValue(System.String,System.String,System.Boolean)" access="Public" contract="Abstract">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="section">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="entry">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="defaultValue">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="HasEntry" id="M:MControl.Util.Configuration.IConfigReadOnly.HasEntry(System.String,System.String)" access="Public" contract="Abstract">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="entry">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="HasSection" id="M:MControl.Util.Configuration.IConfigReadOnly.HasSection(System.String)" access="Public" contract="Abstract">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="section">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </interface>
        <enumeration name="ConfigChangeType" id="T:MControl.Util.Configuration.ConfigChangeType" displayName="ConfigChangeType" namespace="MControl.Util.Configuration" access="Public">
          <field name="Name" id="F:MControl.Util.Configuration.ConfigChangeType.Name" value="0" />
          <field name="ReadOnly" id="F:MControl.Util.Configuration.ConfigChangeType.ReadOnly" value="1" />
          <field name="SetValue" id="F:MControl.Util.Configuration.ConfigChangeType.SetValue" value="2" />
          <field name="RemoveEntry" id="F:MControl.Util.Configuration.ConfigChangeType.RemoveEntry" value="3" />
          <field name="RemoveSection" id="F:MControl.Util.Configuration.ConfigChangeType.RemoveSection" value="4" />
          <field name="Other" id="F:MControl.Util.Configuration.ConfigChangeType.Other" value="5" />
        </enumeration>
        <delegate name="ConfigChangedHandler" displayName="ConfigChangedHandler" namespace="MControl.Util.Configuration" id="T:MControl.Util.Configuration.ConfigChangedHandler" access="Public">
          <type name="Void" id="T:System.Void" valueType="true" />
          <parameter name="sender">
            <type name="Object" id="T:System.Object" />
          </parameter>
          <parameter name="e">
            <type name="ConfigChangedArgs" id="T:MControl.Util.Configuration.ConfigChangedArgs" />
          </parameter>
        </delegate>
        <delegate name="ConfigChangingHandler" displayName="ConfigChangingHandler" namespace="MControl.Util.Configuration" id="T:MControl.Util.Configuration.ConfigChangingHandler" access="Public">
          <type name="Void" id="T:System.Void" valueType="true" />
          <parameter name="sender">
            <type name="Object" id="T:System.Object" />
          </parameter>
          <parameter name="e">
            <type name="ConfigChangingArgs" id="T:MControl.Util.Configuration.ConfigChangingArgs" />
          </parameter>
        </delegate>
      </namespace>
      <namespace name="MControl.Util.Exceptions" id="N:MControl.Util.Exceptions">
        <class name="InvalidFormatException" id="T:MControl.Util.Exceptions.InvalidFormatException" access="Public" namespace="MControl.Util.Exceptions" displayName="InvalidFormatException">
          <base name="FormatException" id="T:System.FormatException" displayName="System.FormatException">
            <base name="SystemException" id="T:System.SystemException" displayName="System.SystemException">
              <base name="Exception" id="T:System.Exception" displayName="System.Exception" />
            </base>
          </base>
          <implements name="ISerializable" id="T:System.Runtime.Serialization.ISerializable" inherited="true" />
          <constructorOverload name=".ctor" id="Overload:MControl.Util.Exceptions.InvalidFormatException.#ctor" explicitInterfaceImplementation="true">
            <constructor name=".ctor" id="M:MControl.Util.Exceptions.InvalidFormatException.#ctor(System.String)" access="Public" contract="Normal">
              <parameter name="parameter">
                <type name="String" id="T:System.String" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Exceptions.InvalidFormatException.#ctor(System.String,System.Exception)" access="Public" contract="Normal">
              <parameter name="parameter">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="_InnerException">
                <type name="Exception" id="T:System.Exception" />
              </parameter>
            </constructor>
          </constructorOverload>
        </class>
        <class name="TypeNotSupportedException" id="T:MControl.Util.Exceptions.TypeNotSupportedException" access="Public" namespace="MControl.Util.Exceptions" displayName="TypeNotSupportedException">
          <attribute name="SerializableAttribute" id="T:System.SerializableAttribute" />
          <base name="AppException" id="T:MControl.Util.AppException" displayName="MControl.Util.AppException">
            <base name="ApplicationException" id="T:System.ApplicationException" displayName="System.ApplicationException">
              <base name="Exception" id="T:System.Exception" displayName="System.Exception" />
            </base>
          </base>
          <implements name="ISerializable" id="T:System.Runtime.Serialization.ISerializable" inherited="true" />
          <constructorOverload name=".ctor" id="Overload:MControl.Util.Exceptions.TypeNotSupportedException.#ctor" explicitInterfaceImplementation="true">
            <constructor name=".ctor" id="M:MControl.Util.Exceptions.TypeNotSupportedException.#ctor(System.Type)" access="Public" contract="Normal">
              <parameter name="pType">
                <type name="Type" id="T:System.Type" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Exceptions.TypeNotSupportedException.#ctor(System.Type,System.Exception)" access="Public" contract="Normal">
              <parameter name="pType">
                <type name="Type" id="T:System.Type" />
              </parameter>
              <parameter name="_InnerException">
                <type name="Exception" id="T:System.Exception" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Exceptions.TypeNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" access="Family" contract="Normal">
              <parameter name="_Info">
                <type name="SerializationInfo" id="T:System.Runtime.Serialization.SerializationInfo" />
              </parameter>
              <parameter name="_StreamingContext">
                <type name="StreamingContext" id="T:System.Runtime.Serialization.StreamingContext" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
        </class>
      </namespace>
      <namespace name="MControl.Util.Net" id="N:MControl.Util.Net">
        <class name="nf_1" id="T:MControl.Util.Net.nf_1" access="Public" namespace="MControl.Util.Net" displayName="nf_1" sealed="true">
          <method name="GetDalServer" id="M:MControl.Util.Net.nf_1.GetDalServer" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
          </method>
          <method name="ed_7" id="M:MControl.Util.Net.nf_1.ed_7(System.Byte[])" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="v_61">
              <type name="Byte" id="T:System.Byte" valueType="true">
                <array rank="1" />
              </type>
            </parameter>
          </method>
          <method name="nf_2" id="M:MControl.Util.Net.nf_1.nf_2(System.Reflection.MethodBase,System.String)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="v_13">
              <type name="MethodBase" id="T:System.Reflection.MethodBase" />
            </parameter>
            <parameter name="v_14">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="nf_35" id="M:MControl.Util.Net.nf_1.nf_35(System.String,System.String)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="pin">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="vers">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="nf_36" id="M:MControl.Util.Net.nf_1.nf_36" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </method>
          <method name="nf_4" id="M:MControl.Util.Net.nf_1.nf_4" access="Public" contract="Static">
            <type name="Assembly" id="T:System.Reflection.Assembly" />
          </method>
          <methodOverload name="nf_5" id="Overload:MControl.Util.Net.nf_1.nf_5" contract="Static">
            <method name="nf_5" id="M:MControl.Util.Net.nf_1.nf_5(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="v_16">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="v_11">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="v_12">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="v_32">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="showDetails">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="v_13">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="v_17">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="nf_5" id="M:MControl.Util.Net.nf_1.nf_5(System.String,System.String,System.String,System.String,System.String)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="v_16">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="v_11">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="v_12">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="v_13">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="v_17">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="nf_6" id="Overload:MControl.Util.Net.nf_1.nf_6" contract="Static">
            <method name="nf_6" id="M:MControl.Util.Net.nf_1.nf_6(System.String,System.String,System.String,System.String,System.Reflection.MethodBase)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="v_11">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="v_12">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="v_13">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="v_17">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="v_18">
                <type name="MethodBase" id="T:System.Reflection.MethodBase" />
              </parameter>
            </method>
            <method name="nf_6" id="M:MControl.Util.Net.nf_1.nf_6(System.String,System.String,System.String,System.String)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="v_11">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="v_12">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="v_13">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="v_17">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
        </class>
      </namespace>
      <namespace name="MControl.Util.Plugins" id="N:MControl.Util.Plugins">
        <class name="PluginAttribute" id="T:MControl.Util.Plugins.PluginAttribute" access="Public" namespace="MControl.Util.Plugins" displayName="PluginAttribute" sealed="true">
          <attribute name="AttributeUsageAttribute" id="T:System.AttributeUsageAttribute">
            <argument id="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)" type="System.AttributeTargets" value="AttributeTargets.Assembly" />
          </attribute>
          <base name="Attribute" id="T:System.Attribute" displayName="System.Attribute" />
          <constructorOverload name=".ctor" id="Overload:MControl.Util.Plugins.PluginAttribute.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Plugins.PluginAttribute" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Util.Plugins.PluginAttribute.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Plugins.PluginAttribute" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Plugins.PluginAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)" access="Public" contract="Normal">
              <parameter name="companyName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="businessName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="contractName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="pluginDate">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="pluginPurpose">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="pluginRemarks">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="pluginTypeName">
                <type name="String" id="T:System.String" />
              </parameter>
            </constructor>
          </constructorOverload>
          <property name="BusinessName" id="P:MControl.Util.Plugins.PluginAttribute.BusinessName" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="CompanyName" id="P:MControl.Util.Plugins.PluginAttribute.CompanyName" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ContractName" id="P:MControl.Util.Plugins.PluginAttribute.ContractName" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="PluginDate" id="P:MControl.Util.Plugins.PluginAttribute.PluginDate" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="PluginPurpose" id="P:MControl.Util.Plugins.PluginAttribute.PluginPurpose" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="PluginRemarks" id="P:MControl.Util.Plugins.PluginAttribute.PluginRemarks" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="PluginTypeName" id="P:MControl.Util.Plugins.PluginAttribute.PluginTypeName" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
        </class>
        <class name="PluginClassificationNotFoundException" id="T:MControl.Util.Plugins.PluginClassificationNotFoundException" access="Public" namespace="MControl.Util.Plugins" displayName="PluginClassificationNotFoundException">
          <attribute name="SerializableAttribute" id="T:System.SerializableAttribute" />
          <base name="ApplicationException" id="T:System.ApplicationException" displayName="System.ApplicationException">
            <base name="Exception" id="T:System.Exception" displayName="System.Exception" />
          </base>
          <implements name="ISerializable" id="T:System.Runtime.Serialization.ISerializable" inherited="true" />
          <constructorOverload name=".ctor" id="Overload:MControl.Util.Plugins.PluginClassificationNotFoundException.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Plugins.PluginClassificationNotFoundException" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Util.Plugins.PluginClassificationNotFoundException.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Plugins.PluginClassificationNotFoundException" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Plugins.PluginClassificationNotFoundException.#ctor(System.String,System.Exception)" access="Public" contract="Normal">
              <parameter name="message">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="innerException">
                <type name="Exception" id="T:System.Exception" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Plugins.PluginClassificationNotFoundException.#ctor(System.String)" access="Public" contract="Normal">
              <parameter name="message">
                <type name="String" id="T:System.String" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Plugins.PluginClassificationNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" access="Family" contract="Normal">
              <parameter name="info">
                <type name="SerializationInfo" id="T:System.Runtime.Serialization.SerializationInfo" />
              </parameter>
              <parameter name="context">
                <type name="StreamingContext" id="T:System.Runtime.Serialization.StreamingContext" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
        </class>
        <class name="PluginCollection" id="T:MControl.Util.Plugins.PluginCollection" access="Public" namespace="MControl.Util.Plugins" displayName="PluginCollection">
          <attribute name="DefaultMemberAttribute" id="T:System.Reflection.DefaultMemberAttribute">
            <argument id="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)" type="System.String" value="Item" />
          </attribute>
          <base name="CollectionBase" id="T:System.Collections.CollectionBase" displayName="System.Collections.CollectionBase" />
          <implements name="IList" id="T:System.Collections.IList" inherited="true" />
          <implements name="ICollection" id="T:System.Collections.ICollection" inherited="true" />
          <implements name="IEnumerable" id="T:System.Collections.IEnumerable" inherited="true" />
          <constructorOverload name=".ctor" id="Overload:MControl.Util.Plugins.PluginCollection.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Plugins.PluginCollection" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Util.Plugins.PluginCollection.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Plugins.PluginCollection" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Plugins.PluginCollection.#ctor(MControl.Util.Plugins.PluginCollection)" access="Public" contract="Normal">
              <parameter name="value">
                <type name="PluginCollection" id="T:MControl.Util.Plugins.PluginCollection" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Plugins.PluginCollection.#ctor(MControl.Util.Plugins.IPlugin[])" access="Public" contract="Normal">
              <parameter name="value">
                <type name="IPlugin" id="T:MControl.Util.Plugins.IPlugin">
                  <array rank="1" />
                </type>
              </parameter>
            </constructor>
          </constructorOverload>
          <property name="Item" id="P:MControl.Util.Plugins.PluginCollection.Item(System.Int32)" access="Public" contract="Normal">
            <type name="IPlugin" id="T:MControl.Util.Plugins.IPlugin" />
            <get access="Public" />
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </property>
          <method name="Add" id="M:MControl.Util.Plugins.PluginCollection.Add(MControl.Util.Plugins.IPlugin)" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="value">
              <type name="IPlugin" id="T:MControl.Util.Plugins.IPlugin" />
            </parameter>
          </method>
          <methodOverload name="AddRange" id="Overload:MControl.Util.Plugins.PluginCollection.AddRange">
            <method name="AddRange" id="M:MControl.Util.Plugins.PluginCollection.AddRange(MControl.Util.Plugins.IPlugin[])" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="value">
                <type name="IPlugin" id="T:MControl.Util.Plugins.IPlugin">
                  <array rank="1" />
                </type>
              </parameter>
            </method>
            <method name="AddRange" id="M:MControl.Util.Plugins.PluginCollection.AddRange(MControl.Util.Plugins.PluginCollection)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="value">
                <type name="PluginCollection" id="T:MControl.Util.Plugins.PluginCollection" />
              </parameter>
            </method>
          </methodOverload>
          <method name="Contains" id="M:MControl.Util.Plugins.PluginCollection.Contains(MControl.Util.Plugins.IPlugin)" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="value">
              <type name="IPlugin" id="T:MControl.Util.Plugins.IPlugin" />
            </parameter>
          </method>
          <method name="CopyTo" id="M:MControl.Util.Plugins.PluginCollection.CopyTo(MControl.Util.Plugins.IPlugin[],System.Int32)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="array">
              <type name="IPlugin" id="T:MControl.Util.Plugins.IPlugin">
                <array rank="1" />
              </type>
            </parameter>
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="GetEnumerator" id="M:MControl.Util.Plugins.PluginCollection.GetEnumerator" access="Public" contract="Normal">
            <type name="PluginCollection.PluginCollectionEnumerator" id="T:MControl.Util.Plugins.PluginCollection.PluginCollectionEnumerator" />
          </method>
          <method name="IndexOf" id="M:MControl.Util.Plugins.PluginCollection.IndexOf(MControl.Util.Plugins.IPlugin)" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="value">
              <type name="IPlugin" id="T:MControl.Util.Plugins.IPlugin" />
            </parameter>
          </method>
          <method name="Insert" id="M:MControl.Util.Plugins.PluginCollection.Insert(System.Int32,MControl.Util.Plugins.IPlugin)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="value">
              <type name="IPlugin" id="T:MControl.Util.Plugins.IPlugin" />
            </parameter>
          </method>
          <method name="Remove" id="M:MControl.Util.Plugins.PluginCollection.Remove(MControl.Util.Plugins.IPlugin)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="value">
              <type name="IPlugin" id="T:MControl.Util.Plugins.IPlugin" />
            </parameter>
          </method>
          <method name="ToArray" id="M:MControl.Util.Plugins.PluginCollection.ToArray" access="Public" contract="Normal">
            <type name="IPlugin" id="T:MControl.Util.Plugins.IPlugin">
              <array rank="1" />
            </type>
          </method>
        </class>
        <class name="PluginCollection.PluginCollectionEnumerator" id="T:MControl.Util.Plugins.PluginCollection.PluginCollectionEnumerator" access="NestedPublic" namespace="MControl.Util.Plugins" displayName="PluginCollection.PluginCollectionEnumerator" declaringType="PluginCollection">
          <implements name="IEnumerator" id="T:System.Collections.IEnumerator" />
          <constructor name=".ctor" id="M:MControl.Util.Plugins.PluginCollection.PluginCollectionEnumerator.#ctor(MControl.Util.Plugins.PluginCollection)" access="Public" contract="Normal">
            <parameter name="mappings">
              <type name="PluginCollection" id="T:MControl.Util.Plugins.PluginCollection" />
            </parameter>
          </constructor>
          <property name="Current" id="P:MControl.Util.Plugins.PluginCollection.PluginCollectionEnumerator.Current" access="Public" contract="Normal">
            <type name="IPlugin" id="T:MControl.Util.Plugins.IPlugin" />
            <get access="Public" />
          </property>
          <method name="MoveNext" id="M:MControl.Util.Plugins.PluginCollection.PluginCollectionEnumerator.MoveNext" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
          </method>
          <method name="Reset" id="M:MControl.Util.Plugins.PluginCollection.PluginCollectionEnumerator.Reset" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
        </class>
        <interface name="IPlugin" id="T:MControl.Util.Plugins.IPlugin" access="Public" namespace="MControl.Util.Plugins" displayName="IPlugin">
          <property name="Name" id="P:MControl.Util.Plugins.IPlugin.Name" access="Public" contract="Abstract">
            <type name="String" id="T:System.String" />
            <get access="Public" />
          </property>
          <method name="About" id="M:MControl.Util.Plugins.IPlugin.About" access="Public" contract="Abstract">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="OnLoad" id="M:MControl.Util.Plugins.IPlugin.OnLoad(System.Object,System.EventArgs)" access="Public" contract="Abstract">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="sender">
              <type name="Object" id="T:System.Object" />
            </parameter>
            <parameter name="e">
              <type name="EventArgs" id="T:System.EventArgs" />
            </parameter>
          </method>
          <method name="OnUnLoad" id="M:MControl.Util.Plugins.IPlugin.OnUnLoad(System.Object,System.EventArgs)" access="Public" contract="Abstract">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="sender">
              <type name="Object" id="T:System.Object" />
            </parameter>
            <parameter name="e">
              <type name="EventArgs" id="T:System.EventArgs" />
            </parameter>
          </method>
          <method name="ReceiveMessage" id="M:MControl.Util.Plugins.IPlugin.ReceiveMessage(MControl.Util.Plugins.IPluginMessage)" access="Public" contract="Abstract">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="message">
              <type name="IPluginMessage" id="T:MControl.Util.Plugins.IPluginMessage" />
            </parameter>
          </method>
        </interface>
        <interface name="IPluginMessage" id="T:MControl.Util.Plugins.IPluginMessage" access="Public" namespace="MControl.Util.Plugins" displayName="IPluginMessage">
          <property name="Message" id="P:MControl.Util.Plugins.IPluginMessage.Message" access="Public" contract="Abstract">
            <type name="String" id="T:System.String" />
            <get access="Public" />
          </property>
        </interface>
      </namespace>
      <namespace name="MControl.Util.Security" id="N:MControl.Util.Security">
        <class name="Cryptography" id="T:MControl.Util.Security.Cryptography" access="Public" namespace="MControl.Util.Security" displayName="Cryptography">
          <constructor name=".ctor" id="M:MControl.Util.Security.Cryptography.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Security.Cryptography" /> class.</autoText></summary></documentation>
          </constructor>
        </class>
        <class name="Cryptography.DES" id="T:MControl.Util.Security.Cryptography.DES" access="NestedPublic" namespace="MControl.Util.Security" displayName="Cryptography.DES" declaringType="Cryptography">
          <constructor name=".ctor" id="M:MControl.Util.Security.Cryptography.DES.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Security.Cryptography.DES" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="DecryptStream" id="M:MControl.Util.Security.Cryptography.DES.DecryptStream(System.IO.Stream,System.IO.Stream,System.String)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="p_StreamInput">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
            <parameter name="p_StreamOutput">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
            <parameter name="key8ch">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="DecryptString" id="M:MControl.Util.Security.Cryptography.DES.DecryptString(System.String,System.String)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="input">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="key8ch">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="EncryptStream" id="M:MControl.Util.Security.Cryptography.DES.EncryptStream(System.IO.Stream,System.IO.Stream,System.String)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="p_StreamInput">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
            <parameter name="p_StreamOutput">
              <type name="Stream" id="T:System.IO.Stream" />
            </parameter>
            <parameter name="key8ch">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="EncryptString" id="M:MControl.Util.Security.Cryptography.DES.EncryptString(System.String,System.String)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="input">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="key8ch">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="Cryptography.SHA1" id="T:MControl.Util.Security.Cryptography.SHA1" access="NestedPublic" namespace="MControl.Util.Security" displayName="Cryptography.SHA1" declaringType="Cryptography">
          <constructor name=".ctor" id="M:MControl.Util.Security.Cryptography.SHA1.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Security.Cryptography.SHA1" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="HashPassword" id="M:MControl.Util.Security.Cryptography.SHA1.HashPassword(System.String)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="p_Password">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="Password" id="T:MControl.Util.Security.Password" access="Public" namespace="MControl.Util.Security" displayName="Password">
          <constructor name=".ctor" id="M:MControl.Util.Security.Password.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Security.Password" /> class.</autoText></summary></documentation>
          </constructor>
        </class>
        <class name="Password.SHA1" id="T:MControl.Util.Security.Password.SHA1" access="NestedPublic" namespace="MControl.Util.Security" displayName="Password.SHA1" declaringType="Password">
          <constructor name=".ctor" id="M:MControl.Util.Security.Password.SHA1.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Security.Password.SHA1" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="HashPassword" id="M:MControl.Util.Security.Password.SHA1.HashPassword(System.String)" access="Public" contract="Static">
            <type name="String" id="T:System.String" />
            <parameter name="p_Password">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="SymmCrypto" id="T:MControl.Util.Security.SymmCrypto" access="Public" namespace="MControl.Util.Security" displayName="SymmCrypto">
          <constructorOverload name=".ctor" id="Overload:MControl.Util.Security.SymmCrypto.#ctor" explicitInterfaceImplementation="true">
            <constructor name=".ctor" id="M:MControl.Util.Security.SymmCrypto.#ctor(MControl.Util.Security.SymmCrypto.SymmProv)" access="Public" contract="Normal">
              <parameter name="netSelected">
                <type name="SymmCrypto.SymmProv" id="T:MControl.Util.Security.SymmCrypto.SymmProv" valueType="true" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Security.SymmCrypto.#ctor(System.Security.Cryptography.SymmetricAlgorithm)" access="Public" contract="Normal">
              <parameter name="serviceProvider">
                <type name="SymmetricAlgorithm" id="T:System.Security.Cryptography.SymmetricAlgorithm" />
              </parameter>
            </constructor>
          </constructorOverload>
          <methodOverload name="Decrypting" id="Overload:MControl.Util.Security.SymmCrypto.Decrypting">
            <method name="Decrypting" id="M:MControl.Util.Security.SymmCrypto.Decrypting(System.String,System.String)" access="Public" contract="Normal">
              <type name="String" id="T:System.String" />
              <parameter name="source">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="key">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="Decrypting" id="M:MControl.Util.Security.SymmCrypto.Decrypting(System.String)" access="Public" contract="Normal">
              <type name="String" id="T:System.String" />
              <parameter name="source">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="Encrypting" id="Overload:MControl.Util.Security.SymmCrypto.Encrypting">
            <method name="Encrypting" id="M:MControl.Util.Security.SymmCrypto.Encrypting(System.String,System.String)" access="Public" contract="Normal">
              <type name="String" id="T:System.String" />
              <parameter name="source">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="key">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="Encrypting" id="M:MControl.Util.Security.SymmCrypto.Encrypting(System.String)" access="Public" contract="Normal">
              <type name="String" id="T:System.String" />
              <parameter name="source">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
        </class>
        <class name="SymmetricEncryption" id="T:MControl.Util.Security.SymmetricEncryption" access="Public" namespace="MControl.Util.Security" displayName="SymmetricEncryption">
          <constructorOverload name=".ctor" id="Overload:MControl.Util.Security.SymmetricEncryption.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Security.SymmetricEncryption" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Util.Security.SymmetricEncryption.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Util.Security.SymmetricEncryption" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Util.Security.SymmetricEncryption.#ctor(System.String)" access="Public" contract="Normal">
              <parameter name="cryptoPassPhrase">
                <type name="String" id="T:System.String" />
              </parameter>
            </constructor>
          </constructorOverload>
          <field name="mSymmetricSecretKey" id="F:MControl.Util.Security.SymmetricEncryption.mSymmetricSecretKey" access="Public" contract="Static" literal="true" value="kjhfd9876435365&amp;%$^#%@$#@)_(),kxa;l fddfgdf12[]}{}{)(*XCJHG^%%">
            <type name="String" id="T:System.String" />
          </field>
          <property name="PassPhrase" id="P:MControl.Util.Security.SymmetricEncryption.PassPhrase" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <methodOverload name="DecryptFile" id="Overload:MControl.Util.Security.SymmetricEncryption.DecryptFile">
            <method name="DecryptFile" id="M:MControl.Util.Security.SymmetricEncryption.DecryptFile(System.String)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="targetFile">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="DecryptFile" id="M:MControl.Util.Security.SymmetricEncryption.DecryptFile(System.String,System.String)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="encryptedFile">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="plainFile">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="DecryptStream" id="M:MControl.Util.Security.SymmetricEncryption.DecryptStream(System.IO.MemoryStream)" access="Public" contract="Normal">
            <type name="MemoryStream" id="T:System.IO.MemoryStream" />
            <parameter name="encryptedStream">
              <type name="MemoryStream" id="T:System.IO.MemoryStream" />
            </parameter>
          </method>
          <methodOverload name="DecryptString" id="Overload:MControl.Util.Security.SymmetricEncryption.DecryptString">
            <method name="DecryptString" id="M:MControl.Util.Security.SymmetricEncryption.DecryptString(System.String)" access="Public" contract="Normal">
              <type name="String" id="T:System.String" />
              <parameter name="encryptedString">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="DecryptString" id="M:MControl.Util.Security.SymmetricEncryption.DecryptString(System.String,System.Boolean)" access="Public" contract="Normal">
              <type name="String" id="T:System.String" />
              <parameter name="encryptedString">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="base64">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="EncryptFile" id="Overload:MControl.Util.Security.SymmetricEncryption.EncryptFile">
            <method name="EncryptFile" id="M:MControl.Util.Security.SymmetricEncryption.EncryptFile(System.String)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="targetFile">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="EncryptFile" id="M:MControl.Util.Security.SymmetricEncryption.EncryptFile(System.String,System.String)" access="Public" contract="Normal">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="plainFile">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="targetFile">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="EncryptStream" id="M:MControl.Util.Security.SymmetricEncryption.EncryptStream(System.IO.MemoryStream)" access="Public" contract="Normal">
            <type name="MemoryStream" id="T:System.IO.MemoryStream" />
            <parameter name="plainStream">
              <type name="MemoryStream" id="T:System.IO.MemoryStream" />
            </parameter>
          </method>
          <methodOverload name="EncryptString" id="Overload:MControl.Util.Security.SymmetricEncryption.EncryptString">
            <method name="EncryptString" id="M:MControl.Util.Security.SymmetricEncryption.EncryptString(System.String)" access="Public" contract="Normal">
              <type name="String" id="T:System.String" />
              <parameter name="plainString">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="EncryptString" id="M:MControl.Util.Security.SymmetricEncryption.EncryptString(System.String,System.Boolean)" access="Public" contract="Normal">
              <type name="String" id="T:System.String" />
              <parameter name="plainString">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="base64">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="GetHashString" id="M:MControl.Util.Security.SymmetricEncryption.GetHashString(System.String)" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <parameter name="inputValue">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ValidPassword" id="M:MControl.Util.Security.SymmetricEncryption.ValidPassword(System.String,System.String)" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="passphrase">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="hashValue">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <enumeration name="SymmCrypto.SymmProv" id="T:MControl.Util.Security.SymmCrypto.SymmProv" displayName="SymmCrypto.SymmProv" namespace="MControl.Util.Security" access="NestedPublic">
          <field name="Des" id="F:MControl.Util.Security.SymmCrypto.SymmProv.Des" value="0" />
          <field name="Rc2" id="F:MControl.Util.Security.SymmCrypto.SymmProv.Rc2" value="1" />
          <field name="Rijndael" id="F:MControl.Util.Security.SymmCrypto.SymmProv.Rijndael" value="2" />
        </enumeration>
      </namespace>
      <namespace name="MControl.Web" id="N:MControl.Web">
        <class name="ATTACHMENT" id="T:MControl.Web.ATTACHMENT" access="Public" namespace="MControl.Web" displayName="ATTACHMENT">
          <constructorOverload name=".ctor" id="Overload:MControl.Web.ATTACHMENT.#ctor" explicitInterfaceImplementation="true">
            <constructor name=".ctor" id="M:MControl.Web.ATTACHMENT.#ctor(System.String)" access="Public" contract="Normal">
              <parameter name="file">
                <type name="String" id="T:System.String" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Web.ATTACHMENT.#ctor(System.Data.DataSet)" access="Public" contract="Normal">
              <parameter name="ds">
                <type name="DataSet" id="T:System.Data.DataSet" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Web.ATTACHMENT.#ctor(System.Data.DataTable)" access="Public" contract="Normal">
              <parameter name="dt">
                <type name="DataTable" id="T:System.Data.DataTable" />
              </parameter>
            </constructor>
          </constructorOverload>
          <field name="attachment" id="F:MControl.Web.ATTACHMENT.attachment" access="Public" contract="Normal">
            <type name="Attachment" id="T:System.Net.Mail.Attachment" />
          </field>
          <field name="fileName" id="F:MControl.Web.ATTACHMENT.fileName" access="Public" contract="Normal" initOnly="true">
            <type name="String" id="T:System.String" />
          </field>
          <method name="Dispose" id="M:MControl.Web.ATTACHMENT.Dispose" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="Finalize" id="M:MControl.Web.ATTACHMENT.Finalize" access="Family" contract="Override">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
        </class>
        <class name="AttchementCollection" id="T:MControl.Web.AttchementCollection" access="Public" namespace="MControl.Web" displayName="AttchementCollection">
          <base name="CollectionBase" id="T:System.Collections.CollectionBase" displayName="System.Collections.CollectionBase" />
          <implements name="IList" id="T:System.Collections.IList" inherited="true" />
          <implements name="ICollection" id="T:System.Collections.ICollection" inherited="true" />
          <implements name="IEnumerable" id="T:System.Collections.IEnumerable" inherited="true" />
          <constructor name=".ctor" id="M:MControl.Web.AttchementCollection.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Web.AttchementCollection" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="Add" id="M:MControl.Web.AttchementCollection.Add(MControl.Web.ATTACHMENT)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="a">
              <type name="ATTACHMENT" id="T:MControl.Web.ATTACHMENT" />
            </parameter>
          </method>
          <method name="Remove" id="M:MControl.Web.AttchementCollection.Remove(MControl.Web.ATTACHMENT)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="a">
              <type name="ATTACHMENT" id="T:MControl.Web.ATTACHMENT" />
            </parameter>
          </method>
        </class>
        <class name="ExportUtil" id="T:MControl.Web.ExportUtil" access="Public" namespace="MControl.Web" displayName="ExportUtil">
          <constructor name=".ctor" id="M:MControl.Web.ExportUtil.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Web.ExportUtil" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="DisableControls" id="M:MControl.Web.ExportUtil.DisableControls(System.Web.UI.Control)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="gv">
              <type name="Control" id="T:System.Web.UI.Control" />
            </parameter>
          </method>
          <methodOverload name="ExportToExcel" id="Overload:MControl.Web.ExportUtil.ExportToExcel" contract="Static">
            <method name="ExportToExcel" id="M:MControl.Web.ExportUtil.ExportToExcel(System.Web.UI.Page,System.Web.UI.WebControls.GridView)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="page">
                <type name="Page" id="T:System.Web.UI.Page" />
              </parameter>
              <parameter name="gv">
                <type name="GridView" id="T:System.Web.UI.WebControls.GridView" />
              </parameter>
            </method>
            <method name="ExportToExcel" id="M:MControl.Web.ExportUtil.ExportToExcel(System.Web.UI.Page,System.Web.UI.WebControls.GridView,System.String)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="page">
                <type name="Page" id="T:System.Web.UI.Page" />
              </parameter>
              <parameter name="gv">
                <type name="GridView" id="T:System.Web.UI.WebControls.GridView" />
              </parameter>
              <parameter name="encoding">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="ExportToExcelPaging" id="M:MControl.Web.ExportUtil.ExportToExcelPaging(System.Web.UI.Page,System.Web.UI.WebControls.GridView)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="page">
              <type name="Page" id="T:System.Web.UI.Page" />
            </parameter>
            <parameter name="gv">
              <type name="GridView" id="T:System.Web.UI.WebControls.GridView" />
            </parameter>
          </method>
          <method name="OnRowDataBound" id="M:MControl.Web.ExportUtil.OnRowDataBound(System.Web.UI.WebControls.GridViewRowEventArgs)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="GridViewRowEventArgs" id="T:System.Web.UI.WebControls.GridViewRowEventArgs" />
            </parameter>
          </method>
          <method name="VerifyRenderingInServerForm" id="M:MControl.Web.ExportUtil.VerifyRenderingInServerForm(System.Web.UI.Control)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="control">
              <type name="Control" id="T:System.Web.UI.Control" />
            </parameter>
          </method>
        </class>
        <class name="HttpUtil" id="T:MControl.Web.HttpUtil" access="Public" namespace="MControl.Web" displayName="HttpUtil">
          <constructor name=".ctor" id="M:MControl.Web.HttpUtil.#ctor(System.String)" access="Public" contract="Normal">
            <parameter name="url">
              <type name="String" id="T:System.String" />
            </parameter>
          </constructor>
          <field name="ManualReset" id="F:MControl.Web.HttpUtil.ManualReset" access="Public" contract="Normal">
            <type name="ManualResetEvent" id="T:System.Threading.ManualResetEvent" />
          </field>
          <property name="ContentType" id="P:MControl.Web.HttpUtil.ContentType" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
            <set access="Public" />
          </property>
          <property name="ExceptionStatus" id="P:MControl.Web.HttpUtil.ExceptionStatus" access="Public" contract="Normal">
            <type name="WebExceptionStatus" id="T:System.Net.WebExceptionStatus" valueType="true" />
            <get access="Public" />
          </property>
          <property name="HttpStatusDescription" id="P:MControl.Web.HttpUtil.HttpStatusDescription" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <get access="Public" />
          </property>
          <property name="HttpWebException" id="P:MControl.Web.HttpUtil.HttpWebException" access="Public" contract="Normal">
            <type name="WebException" id="T:System.Net.WebException" />
            <get access="Public" />
          </property>
          <property name="HttpWebRequest" id="P:MControl.Web.HttpUtil.HttpWebRequest" access="Public" contract="Normal">
            <type name="HttpWebRequest" id="T:System.Net.HttpWebRequest" />
            <get access="Public" />
          </property>
          <property name="StatusCode" id="P:MControl.Web.HttpUtil.StatusCode" access="Public" contract="Normal">
            <type name="HttpStatusCode" id="T:System.Net.HttpStatusCode" valueType="true" />
            <get access="Public" />
          </property>
          <methodOverload name="AsyncRequest" id="Overload:MControl.Web.HttpUtil.AsyncRequest">
            <method name="AsyncRequest" id="M:MControl.Web.HttpUtil.AsyncRequest(System.String)" access="Public" contract="Normal">
              <type name="String" id="T:System.String" />
              <parameter name="postData">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="AsyncRequest" id="M:MControl.Web.HttpUtil.AsyncRequest(System.String,System.String)" access="Public" contract="Normal">
              <type name="String" id="T:System.String" />
              <parameter name="postData">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="codePage">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="AsyncRequest" id="M:MControl.Web.HttpUtil.AsyncRequest(System.String,System.Int32)" access="Public" contract="Normal">
              <type name="String" id="T:System.String" />
              <parameter name="postData">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="codePage">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="AsyncRequestUTF8" id="M:MControl.Web.HttpUtil.AsyncRequestUTF8(System.String)" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <parameter name="postData">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="CheckValidationResult" id="M:MControl.Web.HttpUtil.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="sender">
              <type name="Object" id="T:System.Object" />
            </parameter>
            <parameter name="cert">
              <type name="X509Certificate" id="T:System.Security.Cryptography.X509Certificates.X509Certificate" />
            </parameter>
            <parameter name="chain">
              <type name="X509Chain" id="T:System.Security.Cryptography.X509Certificates.X509Chain" />
            </parameter>
            <parameter name="sslErrors">
              <type name="SslPolicyErrors" id="T:System.Net.Security.SslPolicyErrors" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="DoGet" id="Overload:MControl.Web.HttpUtil.DoGet" contract="Static">
            <method name="DoGet" id="M:MControl.Web.HttpUtil.DoGet(System.String,System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="url">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="postData">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="codePage">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="DoGet" id="M:MControl.Web.HttpUtil.DoGet(System.String,System.String,System.Int32)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="url">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="postData">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="codePage">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="DoPost" id="Overload:MControl.Web.HttpUtil.DoPost" contract="Static">
            <method name="DoPost" id="M:MControl.Web.HttpUtil.DoPost(System.String,System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="url">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="postData">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="codePage">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="DoPost" id="M:MControl.Web.HttpUtil.DoPost(System.String,System.String,System.Int32)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="url">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="postData">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="codePage">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="DoPostSSL" id="Overload:MControl.Web.HttpUtil.DoPostSSL" contract="Static">
            <method name="DoPostSSL" id="M:MControl.Web.HttpUtil.DoPostSSL(System.String,System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="url">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="xmlPrefix">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="data">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="DoPostSSL" id="M:MControl.Web.HttpUtil.DoPostSSL(System.String,System.String,System.String,System.String,System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="url">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="user">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="password">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="xmlPrefix">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="data">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="codePage">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="DoRequest" id="Overload:MControl.Web.HttpUtil.DoRequest">
            <method name="DoRequest" id="M:MControl.Web.HttpUtil.DoRequest(System.String)" access="Public" contract="Normal">
              <type name="String" id="T:System.String" />
              <parameter name="postData">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="DoRequest" id="M:MControl.Web.HttpUtil.DoRequest(System.String,System.String,System.Int32,System.Int32)" access="Public" contract="Normal">
              <type name="String" id="T:System.String" />
              <parameter name="postData">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="codePage">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="maxRetry">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="delay">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
            <method name="DoRequest" id="M:MControl.Web.HttpUtil.DoRequest(System.String,System.Int32,System.Int32,System.Int32)" access="Public" contract="Normal">
              <type name="String" id="T:System.String" />
              <parameter name="postData">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="codePage">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="maxRetry">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="delay">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
            <method name="DoRequest" id="M:MControl.Web.HttpUtil.DoRequest(System.String,System.String)" access="Public" contract="Normal">
              <type name="String" id="T:System.String" />
              <parameter name="postData">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="codePage">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="DoRequest" id="M:MControl.Web.HttpUtil.DoRequest(System.String,System.Int32)" access="Public" contract="Normal">
              <type name="String" id="T:System.String" />
              <parameter name="postData">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="codePage">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="OnAsyncWorker" id="M:MControl.Web.HttpUtil.OnAsyncWorker(System.EventArgs)" access="Family" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="e">
              <type name="EventArgs" id="T:System.EventArgs" />
            </parameter>
          </method>
          <event name="AsyncWorker" id="E:MControl.Web.HttpUtil.AsyncWorker" access="Public" contract="Normal" multicast="true">
            <type name="EventHandler" id="T:System.EventHandler" />
          </event>
        </class>
        <class name="MailClient" id="T:MControl.Web.MailClient" access="Public" namespace="MControl.Web" displayName="MailClient">
          <base name="SmtpClient" id="T:System.Net.Mail.SmtpClient" displayName="System.Net.Mail.SmtpClient" />
          <constructorOverload name=".ctor" id="Overload:MControl.Web.MailClient.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Web.MailClient" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Web.MailClient.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Web.MailClient" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Web.MailClient.#ctor(System.String,System.String,System.String)" access="Public" contract="Normal">
              <parameter name="FromAddress">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="ToAddress">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="Subject">
                <type name="String" id="T:System.String" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Web.MailClient.#ctor(System.String,System.String,System.String,System.String)" access="Public" contract="Normal">
              <parameter name="FromAddress">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="ToAddress">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="Subject">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="body">
                <type name="String" id="T:System.String" />
              </parameter>
            </constructor>
          </constructorOverload>
          <property name="Attachments" id="P:MControl.Web.MailClient.Attachments" access="Public" contract="Normal">
            <type name="AttchementCollection" id="T:MControl.Web.AttchementCollection" />
            <get access="Public" />
          </property>
          <property name="MailMessage" id="P:MControl.Web.MailClient.MailMessage" access="Public" contract="Normal">
            <type name="MailMessage" id="T:System.Net.Mail.MailMessage" />
            <get access="Public" />
          </property>
          <methodOverload name="Send" id="Overload:MControl.Web.MailClient.Send">
            <method name="Send" id="M:MControl.Web.MailClient.Send(System.Net.Mail.SmtpDeliveryMethod)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="deliveryMethod">
                <type name="SmtpDeliveryMethod" id="T:System.Net.Mail.SmtpDeliveryMethod" valueType="true" />
              </parameter>
            </method>
            <method name="Send" id="M:MControl.Web.MailClient.Send" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
            </method>
          </methodOverload>
          <method name="SendAsync" id="M:MControl.Web.MailClient.SendAsync" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="SendFromIis" id="M:MControl.Web.MailClient.SendFromIis" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
          <method name="SendFromNetwork" id="M:MControl.Web.MailClient.SendFromNetwork" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
        </class>
      </namespace>
      <namespace name="MControl.Win32" id="N:MControl.Win32">
        <class name="BITMAPINFO" id="T:MControl.Win32.BITMAPINFO" access="Public" namespace="MControl.Win32" displayName="BITMAPINFO">
          <constructor name=".ctor" id="M:MControl.Win32.BITMAPINFO.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.BITMAPINFO" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="bmiColors" id="F:MControl.Win32.BITMAPINFO.bmiColors" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true">
              <array rank="1" />
            </type>
            <attribute name="MarshalAsAttribute" id="T:System.Runtime.InteropServices.MarshalAsAttribute">
              <argument id="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.ByValArray" />
              <field name="ArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.0" />
              <field name="SizeParamIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" type="System.Int16" value="0" />
              <field name="SizeConst" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" type="System.Int32" value="1024" />
              <field name="IidParameterIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex" type="System.Int32" value="0" />
              <field name="SafeArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" type="System.Runtime.InteropServices.VarEnum" value="VarEnum.VT_EMPTY" />
            </attribute>
          </field>
          <field name="bmiHeader" id="F:MControl.Win32.BITMAPINFO.bmiHeader" access="Public" contract="Normal">
            <type name="BITMAPINFOHEADER" id="T:MControl.Win32.BITMAPINFOHEADER" />
          </field>
        </class>
        <class name="BITMAPINFOHEADER" id="T:MControl.Win32.BITMAPINFOHEADER" access="Public" namespace="MControl.Win32" displayName="BITMAPINFOHEADER">
          <constructor name=".ctor" id="M:MControl.Win32.BITMAPINFOHEADER.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.BITMAPINFOHEADER" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="biBitCount" id="F:MControl.Win32.BITMAPINFOHEADER.biBitCount" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="biClrImportant" id="F:MControl.Win32.BITMAPINFOHEADER.biClrImportant" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="biClrUsed" id="F:MControl.Win32.BITMAPINFOHEADER.biClrUsed" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="biCompression" id="F:MControl.Win32.BITMAPINFOHEADER.biCompression" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="biHeight" id="F:MControl.Win32.BITMAPINFOHEADER.biHeight" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="biPlanes" id="F:MControl.Win32.BITMAPINFOHEADER.biPlanes" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="biSize" id="F:MControl.Win32.BITMAPINFOHEADER.biSize" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="biSizeImage" id="F:MControl.Win32.BITMAPINFOHEADER.biSizeImage" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="biWidth" id="F:MControl.Win32.BITMAPINFOHEADER.biWidth" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="biXPelsPerMeter" id="F:MControl.Win32.BITMAPINFOHEADER.biXPelsPerMeter" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="biYPelsPerMeter" id="F:MControl.Win32.BITMAPINFOHEADER.biYPelsPerMeter" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </class>
        <class name="CommonHandles" id="T:MControl.Win32.CommonHandles" access="Public" namespace="MControl.Win32" displayName="CommonHandles" sealed="true">
          <constructor name=".ctor" id="M:MControl.Win32.CommonHandles.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.CommonHandles" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="Accelerator" id="F:MControl.Win32.CommonHandles.Accelerator" access="Public" contract="Static" initOnly="true">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="Cursor" id="F:MControl.Win32.CommonHandles.Cursor" access="Public" contract="Static" initOnly="true">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="EMF" id="F:MControl.Win32.CommonHandles.EMF" access="Public" contract="Static" initOnly="true">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="Find" id="F:MControl.Win32.CommonHandles.Find" access="Public" contract="Static" initOnly="true">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="GDI" id="F:MControl.Win32.CommonHandles.GDI" access="Public" contract="Static" initOnly="true">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="HDC" id="F:MControl.Win32.CommonHandles.HDC" access="Public" contract="Static" initOnly="true">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="Icon" id="F:MControl.Win32.CommonHandles.Icon" access="Public" contract="Static" initOnly="true">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="Kernel" id="F:MControl.Win32.CommonHandles.Kernel" access="Public" contract="Static" initOnly="true">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="Menu" id="F:MControl.Win32.CommonHandles.Menu" access="Public" contract="Static" initOnly="true">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="Window" id="F:MControl.Win32.CommonHandles.Window" access="Public" contract="Static" initOnly="true">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </class>
        <class name="INITCOMMONCONTROLSEX" id="T:MControl.Win32.INITCOMMONCONTROLSEX" access="Public" namespace="MControl.Win32" displayName="INITCOMMONCONTROLSEX">
          <constructor name=".ctor" id="M:MControl.Win32.INITCOMMONCONTROLSEX.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.INITCOMMONCONTROLSEX" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="dwICC" id="F:MControl.Win32.INITCOMMONCONTROLSEX.dwICC" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="dwSize" id="F:MControl.Win32.INITCOMMONCONTROLSEX.dwSize" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </class>
        <class name="IntSecurity" id="T:MControl.Win32.IntSecurity" access="Public" namespace="MControl.Win32" displayName="IntSecurity">
          <constructor name=".ctor" id="M:MControl.Win32.IntSecurity.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.IntSecurity" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="SecurityDemand" id="F:MControl.Win32.IntSecurity.SecurityDemand" access="Public" contract="Static" initOnly="true">
            <type name="TraceSwitch" id="T:System.Diagnostics.TraceSwitch" />
          </field>
          <property name="AdjustCursorClip" id="P:MControl.Win32.IntSecurity.AdjustCursorClip" access="Public" contract="Static">
            <type name="CodeAccessPermission" id="T:System.Security.CodeAccessPermission" />
            <get access="Public" />
          </property>
          <property name="AllWindows" id="P:MControl.Win32.IntSecurity.AllWindows" access="Public" contract="Static">
            <type name="CodeAccessPermission" id="T:System.Security.CodeAccessPermission" />
            <get access="Public" />
          </property>
          <property name="ModifyFocus" id="P:MControl.Win32.IntSecurity.ModifyFocus" access="Public" contract="Static">
            <type name="CodeAccessPermission" id="T:System.Security.CodeAccessPermission" />
            <get access="Public" />
          </property>
          <property name="UnmanagedCode" id="P:MControl.Win32.IntSecurity.UnmanagedCode" access="Public" contract="Static">
            <type name="CodeAccessPermission" id="T:System.Security.CodeAccessPermission" />
            <get access="Public" />
          </property>
        </class>
        <class name="WinAPI" id="T:MControl.Win32.WinAPI" access="Public" namespace="MControl.Win32" displayName="WinAPI">
          <field name="PROGRESSBARCLASSNAME" id="F:MControl.Win32.WinAPI.PROGRESSBARCLASSNAME" access="Public" contract="Static" literal="true" value="msctls_progress32">
            <type name="String" id="T:System.String" />
          </field>
          <field name="REBARCLASSNAME" id="F:MControl.Win32.WinAPI.REBARCLASSNAME" access="Public" contract="Static" literal="true" value="ReBarWindow32">
            <type name="String" id="T:System.String" />
          </field>
          <field name="SCROLLBAR" id="F:MControl.Win32.WinAPI.SCROLLBAR" access="Public" contract="Static" literal="true" value="SCROLLBAR">
            <type name="String" id="T:System.String" />
          </field>
          <field name="TOOLBARCLASSNAME" id="F:MControl.Win32.WinAPI.TOOLBARCLASSNAME" access="Public" contract="Static" literal="true" value="ToolbarWindow32">
            <type name="String" id="T:System.String" />
          </field>
          <property name="WM_MOUSEENTER" id="P:MControl.Win32.WinAPI.WM_MOUSEENTER" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <get access="Public" />
          </property>
          <method name="AnimateWindow" id="M:MControl.Win32.WinAPI.AnimateWindow(System.IntPtr,System.UInt32,System.UInt32)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="dwTime">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
            <parameter name="dwFlags">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="AnimateWindow" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="BeginPaint" id="M:MControl.Win32.WinAPI.BeginPaint(System.IntPtr,MControl.Win32.PAINTSTRUCT@)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="ps" direction="ref">
              <type name="PAINTSTRUCT" id="T:MControl.Win32.PAINTSTRUCT" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="BeginPaint" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="BitBlt" id="M:MControl.Win32.WinAPI.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hDCDest">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="XOriginDest">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="YOriginDest">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="WidthDest">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="HeightDest">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="hDCSrc">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="XOriginScr">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="YOriginSrc">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="Rop">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="BitBlt" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="BringWindowToTop" id="M:MControl.Win32.WinAPI.BringWindowToTop(System.IntPtr)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="BringWindowToTop" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="CallNextHookEx" id="M:MControl.Win32.WinAPI.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hhook">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="code">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="wparam">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="lparam">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="CallNextHookEx" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="CallWindowProc" id="M:MControl.Win32.WinAPI.CallWindowProc(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="wndProc">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="msg">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="wParam">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="lParam">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="CallWindowProc" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="ChangeClipboardChain" id="M:MControl.Win32.WinAPI.ChangeClipboardChain(System.IntPtr,System.IntPtr)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hWndRemove">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="hWndNewNext">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ChangeClipboardChain" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="ClientToScreen" id="M:MControl.Win32.WinAPI.ClientToScreen(System.IntPtr,MControl.Win32.POINT@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="pt" direction="ref">
              <type name="POINT" id="T:MControl.Win32.POINT" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ClientToScreen" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="CloseClipboard" id="M:MControl.Win32.WinAPI.CloseClipboard" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="CloseClipboard" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="CombineRgn" id="M:MControl.Win32.WinAPI.CombineRgn(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="dest">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="src1">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="src2">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="flags">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="CombineRgn" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="ConvertStringSidToSidW" id="M:MControl.Win32.WinAPI.ConvertStringSidToSidW(System.String,System.IntPtr@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="stringSid">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="sId" direction="ref">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="advapi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ConvertStringSidToSidW" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Unicode" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="CreateBrushIndirect" id="Overload:MControl.Win32.WinAPI.CreateBrushIndirect" contract="Static">
            <method name="CreateBrushIndirect" id="M:MControl.Win32.WinAPI.CreateBrushIndirect(MControl.Win32.LogBrush@)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="brush" direction="ref">
                <type name="LogBrush" id="T:MControl.Win32.LogBrush" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="CreateBrushIndirect" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="CreateBrushIndirect" id="M:MControl.Win32.WinAPI.CreateBrushIndirect(MControl.Win32.LOGBRUSH@)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="brush" direction="ref">
                <type name="LOGBRUSH" id="T:MControl.Win32.LOGBRUSH" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="CreateBrushIndirect" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
          </methodOverload>
          <method name="CreateCompatibleBitmap" id="M:MControl.Win32.WinAPI.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hDC">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="Width">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="Heigth">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="CreateCompatibleBitmap" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="CreateCompatibleDC" id="M:MControl.Win32.WinAPI.CreateCompatibleDC(System.IntPtr)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hDC">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="CreateCompatibleDC" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="CreateDIBSection" id="M:MControl.Win32.WinAPI.CreateDIBSection(System.IntPtr,MControl.Win32.BITMAPINFO_FLAT@,System.Int32,System.Int32@,System.IntPtr,System.Int32)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hdc">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="bmi" direction="ref">
              <type name="BITMAPINFO_FLAT" id="T:MControl.Win32.BITMAPINFO_FLAT" valueType="true" />
            </parameter>
            <parameter name="iUsage">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="ppvBits" direction="ref">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="hSection">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="dwOffset">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="CreateDIBSection" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="CreateMenu" id="M:MControl.Win32.WinAPI.CreateMenu" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </method>
          <method name="CreatePen" id="M:MControl.Win32.WinAPI.CreatePen(System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="nStyle">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="nWidth">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="crColor">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="CreatePen" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="CreateRectRgnIndirect" id="Overload:MControl.Win32.WinAPI.CreateRectRgnIndirect" contract="Static">
            <method name="CreateRectRgnIndirect" id="M:MControl.Win32.WinAPI.CreateRectRgnIndirect(MControl.Win32.Rect@)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="rect" direction="ref">
                <type name="Rect" id="T:MControl.Win32.Rect" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="CreateRectRgnIndirect" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="CreateRectRgnIndirect" id="M:MControl.Win32.WinAPI.CreateRectRgnIndirect(MControl.Win32.RECT@)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="rect" direction="ref">
                <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="CreateRectRgnIndirect" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
          </methodOverload>
          <methodOverload name="CreateSolidBrush" id="Overload:MControl.Win32.WinAPI.CreateSolidBrush" contract="Static">
            <method name="CreateSolidBrush" id="M:MControl.Win32.WinAPI.CreateSolidBrush(System.UInt32)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="crColor">
                <type name="UInt32" id="T:System.UInt32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="CreateSolidBrush" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="CreateSolidBrush" id="M:MControl.Win32.WinAPI.CreateSolidBrush(System.Int32)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="crColor">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="DefWindowProc" id="M:MControl.Win32.WinAPI.DefWindowProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="msg">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="wParam">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="lParam">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="DefWindowProc" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="DeleteDC" id="M:MControl.Win32.WinAPI.DeleteDC(System.IntPtr)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hDC">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="DeleteDC" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="DeleteObject" id="Overload:MControl.Win32.WinAPI.DeleteObject" contract="Static">
            <method name="DeleteObject" id="M:MControl.Win32.WinAPI.DeleteObject(System.IntPtr)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hObject">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="DeleteObject" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="DeleteObject" id="M:MControl.Win32.WinAPI.DeleteObject(System.Runtime.InteropServices.HandleRef)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="hObject">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="DispatchMessage" id="M:MControl.Win32.WinAPI.DispatchMessage(MControl.Win32.MSG@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="msg" direction="ref">
              <type name="MSG" id="T:MControl.Win32.MSG" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="DispatchMessage" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="DrawFocusRect" id="M:MControl.Win32.WinAPI.DrawFocusRect(System.IntPtr,MControl.Win32.RECT@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="rect" direction="ref">
              <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="DrawFocusRect" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="DrawMenuBar" id="M:MControl.Win32.WinAPI.DrawMenuBar(System.Runtime.InteropServices.HandleRef)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="DrawMenuBar" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="DrawText" id="M:MControl.Win32.WinAPI.DrawText(System.IntPtr,System.String,System.Int32,MControl.Win32.RECT@,System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hdc">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="lpString">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="nCount">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="lpRect" direction="ref">
              <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
            </parameter>
            <parameter name="uFormat">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="DrawText" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="EmptyClipboard" id="M:MControl.Win32.WinAPI.EmptyClipboard" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="EmptyClipboard" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="EnableScrollBar" id="M:MControl.Win32.WinAPI.EnableScrollBar(System.IntPtr,System.UInt32,System.UInt32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="flags">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
            <parameter name="arrows">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="EnableScrollBar" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="EndPaint" id="M:MControl.Win32.WinAPI.EndPaint(System.IntPtr,MControl.Win32.PAINTSTRUCT@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="ps" direction="ref">
              <type name="PAINTSTRUCT" id="T:MControl.Win32.PAINTSTRUCT" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="EndPaint" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="FillRect" id="M:MControl.Win32.WinAPI.FillRect(System.IntPtr,MControl.Win32.RECT@,System.IntPtr)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hDC">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="rect" direction="ref">
              <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
            </parameter>
            <parameter name="hBrush">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="FillRect" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="FindWindow" id="M:MControl.Win32.WinAPI.FindWindow(System.String,System.String)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="className">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="windowName">
              <type name="String" id="T:System.String" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="FindWindow" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="FindWindowEx" id="Overload:MControl.Win32.WinAPI.FindWindowEx" contract="Static">
            <method name="FindWindowEx" id="M:MControl.Win32.WinAPI.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="hChild">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="strClassName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="strName">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="FindWindowEx" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="FindWindowEx" id="M:MControl.Win32.WinAPI.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.IntPtr)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="hChild">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="strClassName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="strName">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="FindWindowEx" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
          </methodOverload>
          <method name="GET_X_LPARAM" id="M:MControl.Win32.WinAPI.GET_X_LPARAM(System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="lParam">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="GET_Y_LPARAM" id="M:MControl.Win32.WinAPI.GET_Y_LPARAM(System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="lParam">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="GetActiveWindow" id="M:MControl.Win32.WinAPI.GetActiveWindow" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetActiveWindow" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetCapture" id="M:MControl.Win32.WinAPI.GetCapture" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetCapture" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetCaretPos" id="M:MControl.Win32.WinAPI.GetCaretPos(MControl.Win32.POINT@)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="pnt" direction="ref">
              <type name="POINT" id="T:MControl.Win32.POINT" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetCaretPos" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetClassName" id="M:MControl.Win32.WinAPI.GetClassName(System.IntPtr,MControl.Win32.STRINGBUFFER@,System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="ClassName" direction="out">
              <type name="STRINGBUFFER" id="T:MControl.Win32.STRINGBUFFER" valueType="true" />
              <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
            </parameter>
            <parameter name="nMaxCount">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetClassName" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetClientRect" id="M:MControl.Win32.WinAPI.GetClientRect(System.IntPtr,MControl.Win32.RECT@)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="rc" direction="ref">
              <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetClientRect" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="GetClipBox" id="Overload:MControl.Win32.WinAPI.GetClipBox" contract="Static">
            <method name="GetClipBox" id="M:MControl.Win32.WinAPI.GetClipBox(System.IntPtr,MControl.Win32.Rect@)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hDC">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="rectBox" direction="ref">
                <type name="Rect" id="T:MControl.Win32.Rect" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetClipBox" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="GetClipBox" id="M:MControl.Win32.WinAPI.GetClipBox(System.IntPtr,MControl.Win32.RECT@)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hDC">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="rectBox" direction="ref">
                <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetClipBox" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
          </methodOverload>
          <method name="GetCommonControlDLLVersion" id="M:MControl.Win32.WinAPI.GetCommonControlDLLVersion(MControl.Win32.DLLVERSIONINFO@)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="dvi" direction="ref">
              <type name="DLLVERSIONINFO" id="T:MControl.Win32.DLLVERSIONINFO" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="comctl32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="DllGetVersion" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetCurrentThemeName" id="M:MControl.Win32.WinAPI.GetCurrentThemeName(System.Text.StringBuilder,System.Int32,System.Text.StringBuilder,System.Int32,System.Text.StringBuilder,System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="pszThemeFileName">
              <type name="StringBuilder" id="T:System.Text.StringBuilder" />
            </parameter>
            <parameter name="dwMaxNameChars">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="pszColorBuff">
              <type name="StringBuilder" id="T:System.Text.StringBuilder" />
            </parameter>
            <parameter name="cchMaxColorChars">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="pszSizeBuff">
              <type name="StringBuilder" id="T:System.Text.StringBuilder" />
            </parameter>
            <parameter name="cchMaxSizeChars">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="UxTheme.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetCurrentThemeName" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Unicode" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetCurrentThreadId" id="M:MControl.Win32.WinAPI.GetCurrentThreadId" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="kernel32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetCurrentThreadId" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetCursorPos" id="M:MControl.Win32.WinAPI.GetCursorPos(MControl.Win32.POINT@)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="pnt" direction="ref">
              <type name="POINT" id="T:MControl.Win32.POINT" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetCursorPos" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="GetDC" id="Overload:MControl.Win32.WinAPI.GetDC" contract="Static">
            <method name="GetDC" id="M:MControl.Win32.WinAPI.GetDC(System.IntPtr)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetDC" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="GetDC" id="M:MControl.Win32.WinAPI.GetDC(System.Runtime.InteropServices.HandleRef)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="GetDCEx" id="M:MControl.Win32.WinAPI.GetDCEx(System.IntPtr,System.IntPtr,System.UInt32)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="hRegion">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="flags">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetDCEx" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="GetDIBits" id="Overload:MControl.Win32.WinAPI.GetDIBits" contract="Static">
            <method name="GetDIBits" id="M:MControl.Win32.WinAPI.GetDIBits(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,MControl.Win32.BITMAPINFOHEADER,System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hDC">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="hbm">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="StartScan">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="ScanLines">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lpBits">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="bmi">
                <type name="BITMAPINFOHEADER" id="T:MControl.Win32.BITMAPINFOHEADER" />
              </parameter>
              <parameter name="usage">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetDIBits" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="GetDIBits" id="M:MControl.Win32.WinAPI.GetDIBits(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,MControl.Win32.BITMAPINFO_FLAT@,System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hdc">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="hbm">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="StartScan">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="ScanLines">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lpBits">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="bmi" direction="ref">
                <type name="BITMAPINFO_FLAT" id="T:MControl.Win32.BITMAPINFO_FLAT" valueType="true" />
              </parameter>
              <parameter name="usage">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetDIBits" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
          </methodOverload>
          <method name="GetDesktopWindow" id="M:MControl.Win32.WinAPI.GetDesktopWindow" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetDesktopWindow" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetDeviceCaps" id="M:MControl.Win32.WinAPI.GetDeviceCaps(System.Runtime.InteropServices.HandleRef,System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hDC">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="nIndex">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetDeviceCaps" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetDlgItem" id="M:MControl.Win32.WinAPI.GetDlgItem(System.IntPtr,System.Int32)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hDlg">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="nControlID">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetDlgItem" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetFocus" id="M:MControl.Win32.WinAPI.GetFocus" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetFocus" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetForegroundWindow" id="M:MControl.Win32.WinAPI.GetForegroundWindow" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetForegroundWindow" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetKeyState" id="M:MControl.Win32.WinAPI.GetKeyState(System.Int32)" access="Public" contract="Static">
            <type name="UInt16" id="T:System.UInt16" valueType="true" />
            <parameter name="virtKey">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetKeyState" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetLastError" id="M:MControl.Win32.WinAPI.GetLastError" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="kernel32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetLastError" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetMenuItemRect" id="M:MControl.Win32.WinAPI.GetMenuItemRect(System.IntPtr,System.IntPtr,System.UInt32,MControl.Win32.RECT@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="hMenu">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="Item">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
            <parameter name="rc" direction="ref">
              <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetMenuItemRect" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetMessage" id="M:MControl.Win32.WinAPI.GetMessage(MControl.Win32.MSG@,System.Int32,System.UInt32,System.UInt32)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="msg" direction="ref">
              <type name="MSG" id="T:MControl.Win32.MSG" valueType="true" />
            </parameter>
            <parameter name="hWnd">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="wFilterMin">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
            <parameter name="wFilterMax">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetMessage" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetName" id="M:MControl.Win32.WinAPI.GetName(System.String)" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <parameter name="sId">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="GetObjectType" id="M:MControl.Win32.WinAPI.GetObjectType(System.IntPtr)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="handle">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetObjectType" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetPInvokeStringLength" id="M:MControl.Win32.WinAPI.GetPInvokeStringLength(System.String)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="s">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="GetPaletteEntries" id="M:MControl.Win32.WinAPI.GetPaletteEntries(System.IntPtr,System.Int32,System.Int32,System.Byte[])" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hpal">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="iStartIndex">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="nEntries">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="lppe">
              <type name="Byte" id="T:System.Byte" valueType="true">
                <array rank="1" />
              </type>
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetPaletteEntries" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetParent" id="M:MControl.Win32.WinAPI.GetParent(System.IntPtr)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetParent" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetPixel" id="M:MControl.Win32.WinAPI.GetPixel(System.IntPtr,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
            <parameter name="hDC">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="XPos">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="YPos">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetPixel" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetPointFromLPARAM" id="M:MControl.Win32.WinAPI.GetPointFromLPARAM(System.Int32)" access="Public" contract="Static">
            <type name="Point" id="T:System.Drawing.Point" valueType="true" />
            <parameter name="lParam">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="GetProcessWindowStation" id="M:MControl.Win32.WinAPI.GetProcessWindowStation" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetProcessWindowStation" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetScrollInfo" id="M:MControl.Win32.WinAPI.GetScrollInfo(System.IntPtr,System.Int32,MControl.Win32.SCROLLINFO@)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hwnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="bar">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="si" direction="ref">
              <type name="SCROLLINFO" id="T:MControl.Win32.SCROLLINFO" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetScrollInfo" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetShortPathName" id="M:MControl.Win32.WinAPI.GetShortPathName(System.String,System.Text.StringBuilder,System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="lpszLongPath">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="lpszShortPath">
              <type name="StringBuilder" id="T:System.Text.StringBuilder" />
            </parameter>
            <parameter name="cchBuffer">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="kernel32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetShortPathName" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetStockObject" id="M:MControl.Win32.WinAPI.GetStockObject(System.Int32)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="nIndex">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetStockObject" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetSysColor" id="M:MControl.Win32.WinAPI.GetSysColor(System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="color">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetSysColor" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetSysColorBrush" id="M:MControl.Win32.WinAPI.GetSysColorBrush(System.Int32)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="nIndex">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetSysColorBrush" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetSystemMetrics" id="M:MControl.Win32.WinAPI.GetSystemMetrics(System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="nIndex">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetSystemMetrics" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetSystemPaletteEntries" id="M:MControl.Win32.WinAPI.GetSystemPaletteEntries(System.IntPtr,System.Int32,System.Int32,System.Byte[])" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hdc">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="iStartIndex">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="nEntries">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="lppe">
              <type name="Byte" id="T:System.Byte" valueType="true">
                <array rank="1" />
              </type>
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetSystemPaletteEntries" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetWindowDC" id="M:MControl.Win32.WinAPI.GetWindowDC(System.IntPtr)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetWindowDC" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="GetWindowLong" id="Overload:MControl.Win32.WinAPI.GetWindowLong" contract="Static">
            <method name="GetWindowLong" id="M:MControl.Win32.WinAPI.GetWindowLong(System.IntPtr,System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="nIndex">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetWindowLong" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="GetWindowLong" id="M:MControl.Win32.WinAPI.GetWindowLong(System.Runtime.InteropServices.HandleRef,System.Int32)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="nIndex">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="GetWindowLong32" id="M:MControl.Win32.WinAPI.GetWindowLong32(System.Runtime.InteropServices.HandleRef,System.Int32)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hWnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="nIndex">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetWindowLong" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetWindowLongPtr64" id="M:MControl.Win32.WinAPI.GetWindowLongPtr64(System.Runtime.InteropServices.HandleRef,System.Int32)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hWnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="nIndex">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetWindowLongPtr" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetWindowPlacement" id="M:MControl.Win32.WinAPI.GetWindowPlacement(System.IntPtr,MControl.Win32.WINDOWPLACEMENT@)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="wp" direction="ref">
              <type name="WINDOWPLACEMENT" id="T:MControl.Win32.WINDOWPLACEMENT" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetWindowPlacement" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetWindowRect" id="M:MControl.Win32.WinAPI.GetWindowRect(System.IntPtr,MControl.Win32.RECT@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="rect" direction="ref">
              <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetWindowRect" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetWindowText" id="M:MControl.Win32.WinAPI.GetWindowText(System.IntPtr,MControl.Win32.STRINGBUFFER@,System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="text" direction="out">
              <type name="STRINGBUFFER" id="T:MControl.Win32.STRINGBUFFER" valueType="true" />
              <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
            </parameter>
            <parameter name="maxCount">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetWindowText" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="HIGH_ORDER" id="M:MControl.Win32.WinAPI.HIGH_ORDER(System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="param">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="HIWORD" id="Overload:MControl.Win32.WinAPI.HIWORD" contract="Static">
            <method name="HIWORD" id="M:MControl.Win32.WinAPI.HIWORD(System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="n">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
            <method name="HIWORD" id="M:MControl.Win32.WinAPI.HIWORD(System.IntPtr)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="n">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="HideCaret" id="M:MControl.Win32.WinAPI.HideCaret(System.IntPtr)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="HideCaret" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="ImageList_Add" id="M:MControl.Win32.WinAPI.ImageList_Add(System.IntPtr,System.IntPtr,System.IntPtr)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="imageHandle">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="hBitmap">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="hMask">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="comctl32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ImageList_Add" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="ImageList_BeginDrag" id="M:MControl.Win32.WinAPI.ImageList_BeginDrag(System.IntPtr,System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="imageHandle">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="imageIndex">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="xHotSpot">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="yHotSpot">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="comctl32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ImageList_BeginDrag" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="ImageList_Create" id="M:MControl.Win32.WinAPI.ImageList_Create(System.Int32,System.Int32,System.UInt32,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="width">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="height">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="flags">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
            <parameter name="count">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="grow">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="comctl32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ImageList_Create" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="ImageList_Destroy" id="M:MControl.Win32.WinAPI.ImageList_Destroy(System.IntPtr)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="handle">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="comctl32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ImageList_Destroy" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="ImageList_DragEnter" id="M:MControl.Win32.WinAPI.ImageList_DragEnter(System.IntPtr,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWndLock">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="x">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="y">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="comctl32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ImageList_DragEnter" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="ImageList_DragLeave" id="M:MControl.Win32.WinAPI.ImageList_DragLeave(System.IntPtr)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWndLock">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="comctl32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ImageList_DragLeave" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="ImageList_DragMove" id="M:MControl.Win32.WinAPI.ImageList_DragMove(System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="x">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="y">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="comctl32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ImageList_DragMove" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="ImageList_EndDrag" id="M:MControl.Win32.WinAPI.ImageList_EndDrag" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="comctl32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ImageList_EndDrag" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="ImageList_Remove" id="M:MControl.Win32.WinAPI.ImageList_Remove(System.IntPtr,System.Int32)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="imageHandle">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="index">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="comctl32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ImageList_Remove" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="InitCommonControls" id="M:MControl.Win32.WinAPI.InitCommonControls" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="comctl32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="InitCommonControls" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="InitCommonControlsEx" id="M:MControl.Win32.WinAPI.InitCommonControlsEx(MControl.Win32.INITCOMMONCONTROLSEX)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="icc">
              <type name="INITCOMMONCONTROLSEX" id="T:MControl.Win32.INITCOMMONCONTROLSEX" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="comctl32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="InitCommonControlsEx" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="InvalidateRect" id="Overload:MControl.Win32.WinAPI.InvalidateRect" contract="Static">
            <method name="InvalidateRect" id="M:MControl.Win32.WinAPI.InvalidateRect(System.IntPtr,System.IntPtr,System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="rect">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="bErase">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="InvalidateRect" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="InvalidateRect" id="M:MControl.Win32.WinAPI.InvalidateRect(System.IntPtr,MControl.Win32.RECT@,System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="rect" direction="ref">
                <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
              </parameter>
              <parameter name="bErase">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="InvalidateRect" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="InvalidateRect" id="M:MControl.Win32.WinAPI.InvalidateRect(System.IntPtr,MControl.Win32.RECT@,System.Boolean)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="rect" direction="ref">
                <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
              </parameter>
              <parameter name="erase">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="InvalidateRect" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
          </methodOverload>
          <method name="IsAppThemed" id="M:MControl.Win32.WinAPI.IsAppThemed" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="UxTheme.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="IsAppThemed" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="IsWindow" id="M:MControl.Win32.WinAPI.IsWindow(System.IntPtr)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="IsWindow" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="LOWORD" id="Overload:MControl.Win32.WinAPI.LOWORD" contract="Static">
            <method name="LOWORD" id="M:MControl.Win32.WinAPI.LOWORD(System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="n">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
            <method name="LOWORD" id="M:MControl.Win32.WinAPI.LOWORD(System.IntPtr)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="n">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="LOW_ORDER" id="M:MControl.Win32.WinAPI.LOW_ORDER(System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="param">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="LineTo" id="M:MControl.Win32.WinAPI.LineTo(System.IntPtr,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hdc">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="x">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="y">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="LineTo" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="LoadCursor" id="M:MControl.Win32.WinAPI.LoadCursor(System.IntPtr,System.UInt32)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hInstance">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="cursor">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="LoadCursor" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="LockWindowUpdate" id="M:MControl.Win32.WinAPI.LockWindowUpdate(System.IntPtr)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="LockWindowUpdate" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="LookupAccountSidW" id="M:MControl.Win32.WinAPI.LookupAccountSidW(System.String,System.IntPtr,System.Text.StringBuilder,System.Int64@,System.Text.StringBuilder,System.Int64@,System.Int32@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="lpSystemName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="sId">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="Name">
              <type name="StringBuilder" id="T:System.Text.StringBuilder" />
            </parameter>
            <parameter name="cbName" direction="ref">
              <type name="Int64" id="T:System.Int64" valueType="true" />
            </parameter>
            <parameter name="domainName">
              <type name="StringBuilder" id="T:System.Text.StringBuilder" />
            </parameter>
            <parameter name="cbDomainName" direction="ref">
              <type name="Int64" id="T:System.Int64" valueType="true" />
            </parameter>
            <parameter name="psUse" direction="ref">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="advapi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="LookupAccountSidW" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Unicode" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="MAKELONG" id="M:MControl.Win32.WinAPI.MAKELONG(System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="low">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="high">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="MAKELPARAM" id="M:MControl.Win32.WinAPI.MAKELPARAM(System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="low">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="high">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="MoveToEx" id="M:MControl.Win32.WinAPI.MoveToEx(System.IntPtr,System.Int32,System.Int32,System.IntPtr)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hdc">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="x">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="y">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="pt">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="MoveToEx" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="MoveWindow" id="M:MControl.Win32.WinAPI.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="x">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="y">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="width">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="height">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="repaint">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="MoveWindow" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="OpenClipboard" id="M:MControl.Win32.WinAPI.OpenClipboard(System.IntPtr)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWndNewOwner">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="OpenClipboard" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="PatBlt" id="Overload:MControl.Win32.WinAPI.PatBlt" contract="Static">
            <method name="PatBlt" id="M:MControl.Win32.WinAPI.PatBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="hDC">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="x">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="y">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="width">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="height">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="flags">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="PatBlt" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="PatBlt" id="M:MControl.Win32.WinAPI.PatBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="hDC">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="x">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="y">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="width">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="height">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="flags">
                <type name="UInt32" id="T:System.UInt32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="PatBlt" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
          </methodOverload>
          <methodOverload name="PeekMessage" id="Overload:MControl.Win32.WinAPI.PeekMessage" contract="Static">
            <method name="PeekMessage" id="M:MControl.Win32.WinAPI.PeekMessage(MControl.Win32.MSG@,System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="msg" direction="out">
                <type name="MSG" id="T:MControl.Win32.MSG" valueType="true" />
                <attribute name="InAttribute" id="T:System.Runtime.InteropServices.InAttribute" />
                <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
              </parameter>
              <parameter name="hwnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="msgMin">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="msgMax">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="remove">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="PeekMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="PeekMessage" id="M:MControl.Win32.WinAPI.PeekMessage(MControl.Win32.MSG@,System.Int32,System.UInt32,System.UInt32,System.UInt32)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="msg" direction="ref">
                <type name="MSG" id="T:MControl.Win32.MSG" valueType="true" />
              </parameter>
              <parameter name="hWnd">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wFilterMin">
                <type name="UInt32" id="T:System.UInt32" valueType="true" />
              </parameter>
              <parameter name="wFilterMax">
                <type name="UInt32" id="T:System.UInt32" valueType="true" />
              </parameter>
              <parameter name="wFlag">
                <type name="UInt32" id="T:System.UInt32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="PeekMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
          </methodOverload>
          <methodOverload name="PostMessage" id="Overload:MControl.Win32.WinAPI.PostMessage" contract="Static">
            <method name="PostMessage" id="M:MControl.Win32.WinAPI.PostMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="PostMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="PostMessage" id="M:MControl.Win32.WinAPI.PostMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.IntPtr,System.IntPtr)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="hwnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wparam">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="lparam">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="PostMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="PostMessage" id="M:MControl.Win32.WinAPI.PostMessage(System.IntPtr,System.Int32,System.UInt32,System.UInt32)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="Msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="UInt32" id="T:System.UInt32" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="UInt32" id="T:System.UInt32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="PostMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
          </methodOverload>
          <method name="RealizePalette" id="M:MControl.Win32.WinAPI.RealizePalette(System.Runtime.InteropServices.HandleRef)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hDC">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="RealizePalette" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="True" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="Rectangle" id="M:MControl.Win32.WinAPI.Rectangle(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hdc">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="left">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="top">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="right">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="bottom">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="Rectangle" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="RegisterWindowMessage" id="M:MControl.Win32.WinAPI.RegisterWindowMessage(System.String)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="msg">
              <type name="String" id="T:System.String" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="RegisterWindowMessage" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="ReleaseCapture" id="M:MControl.Win32.WinAPI.ReleaseCapture" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ReleaseCapture" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="ReleaseDC" id="Overload:MControl.Win32.WinAPI.ReleaseDC" contract="Static">
            <method name="ReleaseDC" id="M:MControl.Win32.WinAPI.ReleaseDC(System.IntPtr,System.IntPtr)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="hDC">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ReleaseDC" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="ReleaseDC" id="M:MControl.Win32.WinAPI.ReleaseDC(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="hDC">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="ScreenToClient" id="M:MControl.Win32.WinAPI.ScreenToClient(System.IntPtr,MControl.Win32.POINT@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="pt" direction="ref">
              <type name="POINT" id="T:MControl.Win32.POINT" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ScreenToClient" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="ScrollWindow" id="Overload:MControl.Win32.WinAPI.ScrollWindow" contract="Static">
            <method name="ScrollWindow" id="M:MControl.Win32.WinAPI.ScrollWindow(System.IntPtr,System.Int32,System.Int32,MControl.Win32.RECT@,MControl.Win32.RECT@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="xAmount">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="yAmount">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="rectScrollRegion" direction="ref">
                <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
              </parameter>
              <parameter name="rectClip" direction="ref">
                <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ScrollWindow" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="ScrollWindow" id="M:MControl.Win32.WinAPI.ScrollWindow(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,MControl.Win32.RECT@,MControl.Win32.RECT@)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="nXAmount">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="nYAmount">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="rectScrollRegion" direction="ref">
                <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
              </parameter>
              <parameter name="rectClip" direction="ref">
                <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ScrollWindow" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
          </methodOverload>
          <methodOverload name="ScrollWindowEx" id="Overload:MControl.Win32.WinAPI.ScrollWindowEx" contract="Static">
            <method name="ScrollWindowEx" id="M:MControl.Win32.WinAPI.ScrollWindowEx(System.IntPtr,System.Int32,System.Int32,MControl.Win32.RECT@,MControl.Win32.RECT@,System.IntPtr,MControl.Win32.RECT@,System.UInt32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="dx">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="dy">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="rcScroll" direction="ref">
                <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
              </parameter>
              <parameter name="rcClip" direction="ref">
                <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
              </parameter>
              <parameter name="UpdateRegion">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="rcInvalidated" direction="ref">
                <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
              </parameter>
              <parameter name="flags">
                <type name="UInt32" id="T:System.UInt32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ScrollWindowEx" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="ScrollWindowEx" id="M:MControl.Win32.WinAPI.ScrollWindowEx(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="nXAmount">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="nYAmount">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="rectScrollRegion">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="rectClip">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="hrgnUpdate">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="prcUpdate">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="flags">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ScrollWindowEx" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
          </methodOverload>
          <method name="SelectClipRgn" id="M:MControl.Win32.WinAPI.SelectClipRgn(System.IntPtr,System.IntPtr)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hDC">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="hRgn">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SelectClipRgn" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="SelectObject" id="Overload:MControl.Win32.WinAPI.SelectObject" contract="Static">
            <method name="SelectObject" id="M:MControl.Win32.WinAPI.SelectObject(System.IntPtr,System.IntPtr)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hDC">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="hObject">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SelectObject" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SelectObject" id="M:MControl.Win32.WinAPI.SelectObject(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hDC">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="hObject">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SelectObject" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
          </methodOverload>
          <method name="SelectPalette" id="M:MControl.Win32.WinAPI.SelectPalette(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef,System.Int32)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hdc">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="hpal">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="bForceBackground">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SelectPalette" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="True" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SendDlgItemMessage" id="M:MControl.Win32.WinAPI.SendDlgItemMessage(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="Id">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="msg">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="wParam">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="lParam">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendDlgItemMessage" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="SendMessage" id="Overload:MControl.Win32.WinAPI.SendMessage" contract="Static">
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="Msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,MControl.Win32.RECT@)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="Msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam" direction="out">
                <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
                <attribute name="InAttribute" id="T:System.Runtime.InteropServices.InAttribute" />
                <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.IntPtr,MControl.Win32.SpinControlMsg,System.Int32,MControl.Win32.UDACCEL@)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="SpinControlMsg" id="T:MControl.Win32.SpinControlMsg" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam" direction="ref">
                <type name="UDACCEL" id="T:MControl.Win32.UDACCEL" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.IntPtr,System.Int32,System.Int32,System.IntPtr)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.IntPtr,System.Int32,System.Int32,MControl.Win32.RECT@)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam" direction="ref">
                <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.IntPtr,System.Int32,System.Int32,MControl.Win32.POINT@)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam" direction="ref">
                <type name="POINT" id="T:MControl.Win32.POINT" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.IntPtr,System.Int32,System.Int32,MControl.Win32.TBBUTTON@)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam" direction="ref">
                <type name="TBBUTTON" id="T:MControl.Win32.TBBUTTON" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.IntPtr,System.Int32,System.Int32,MControl.Win32.TBBUTTONINFO@)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam" direction="ref">
                <type name="TBBUTTONINFO" id="T:MControl.Win32.TBBUTTONINFO" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.IntPtr,System.Int32,System.Int32,MControl.Win32.REBARBANDINFO@)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam" direction="ref">
                <type name="REBARBANDINFO" id="T:MControl.Win32.REBARBANDINFO" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.IntPtr,System.Int32,System.Int32,MControl.Win32.TVITEM@)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam" direction="ref">
                <type name="TVITEM" id="T:MControl.Win32.TVITEM" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.IntPtr,System.Int32,System.Int32,MControl.Win32.LVITEM@)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam" direction="ref">
                <type name="LVITEM" id="T:MControl.Win32.LVITEM" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.IntPtr,System.Int32,System.Int32,MControl.Win32.HDITEM@)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam" direction="ref">
                <type name="HDITEM" id="T:MControl.Win32.HDITEM" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.IntPtr,System.Int32,System.Int32,MControl.Win32.HD_HITTESTINFO@)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="hti" direction="ref">
                <type name="HD_HITTESTINFO" id="T:MControl.Win32.HD_HITTESTINFO" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.IntPtr,System.Int32,System.Int32,MControl.Win32.PARAFORMAT2@)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="format" direction="ref">
                <type name="PARAFORMAT2" id="T:MControl.Win32.PARAFORMAT2" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.IntPtr)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="Msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.String)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32[])" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="Int32" id="T:System.Int32" valueType="true">
                  <array rank="1" />
                </type>
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.IntPtr,System.IntPtr)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.IntPtr,System.Int32,System.Int32,System.String)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.IntPtr,System.Int32,System.UInt32,System.UInt32)" access="Public" contract="Static">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="Msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="UInt32" id="T:System.UInt32" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="UInt32" id="T:System.UInt32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinAPI.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.Object)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hwnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="wMsg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessageA" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
          </methodOverload>
          <method name="SetActiveWindow" id="M:MControl.Win32.WinAPI.SetActiveWindow(System.Runtime.InteropServices.HandleRef)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hWnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetActiveWindow" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="SetBkColor" id="Overload:MControl.Win32.WinAPI.SetBkColor" contract="Static">
            <method name="SetBkColor" id="M:MControl.Win32.WinAPI.SetBkColor(System.Runtime.InteropServices.HandleRef,System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hDC">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="clr">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetBkColor" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SetBkColor" id="M:MControl.Win32.WinAPI.SetBkColor(System.IntPtr,System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hDC">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="clr">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetBkColor" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
          </methodOverload>
          <method name="SetBkMode" id="M:MControl.Win32.WinAPI.SetBkMode(System.IntPtr,MControl.Win32.BackgroundMode)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hDC">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="mode">
              <type name="BackgroundMode" id="T:MControl.Win32.BackgroundMode" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetBkMode" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SetCapture" id="M:MControl.Win32.WinAPI.SetCapture(System.Runtime.InteropServices.HandleRef)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hwnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetCapture" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SetClipboardData" id="M:MControl.Win32.WinAPI.SetClipboardData(System.UInt32,System.IntPtr)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="Format">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
            <parameter name="hData">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetClipboardData" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SetClipboardViewer" id="M:MControl.Win32.WinAPI.SetClipboardViewer(System.IntPtr)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hWndNewViewer">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetClipboardViewer" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SetCursor" id="M:MControl.Win32.WinAPI.SetCursor(System.IntPtr)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hCursor">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetCursor" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SetDCBrushColor" id="M:MControl.Win32.WinAPI.SetDCBrushColor(System.IntPtr,System.UInt32)" access="Public" contract="Static">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
            <parameter name="hdc">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="crColor">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetDCBrushColor" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SetFocus" id="M:MControl.Win32.WinAPI.SetFocus(System.IntPtr)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetFocus" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SetForegroundWindow" id="M:MControl.Win32.WinAPI.SetForegroundWindow(System.IntPtr)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetForegroundWindow" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SetLastError" id="M:MControl.Win32.WinAPI.SetLastError(System.Int32)" access="Public" contract="Static">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="error">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="kernel32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetLastError" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SetMapMode" id="M:MControl.Win32.WinAPI.SetMapMode(System.IntPtr,System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hDC">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="fnMapMode">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetMapMode" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SetParent" id="M:MControl.Win32.WinAPI.SetParent(System.IntPtr,System.IntPtr)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hChild">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="hParent">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetParent" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SetROP2" id="M:MControl.Win32.WinAPI.SetROP2(System.IntPtr,System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hDC">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="nDrawMode">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetROP2" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="SetScrollInfo" id="Overload:MControl.Win32.WinAPI.SetScrollInfo" contract="Static">
            <method name="SetScrollInfo" id="M:MControl.Win32.WinAPI.SetScrollInfo(System.IntPtr,System.Int32,MControl.Win32.SCROLLINFO@,System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hwnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="bar">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="si" direction="ref">
                <type name="SCROLLINFO" id="T:MControl.Win32.SCROLLINFO" valueType="true" />
              </parameter>
              <parameter name="fRedraw">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetScrollInfo" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SetScrollInfo" id="M:MControl.Win32.WinAPI.SetScrollInfo(System.Runtime.InteropServices.HandleRef,System.Int32,MControl.Win32.SCROLLINFO,System.Boolean)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="fnBar">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="si">
                <type name="SCROLLINFO" id="T:MControl.Win32.SCROLLINFO" valueType="true" />
              </parameter>
              <parameter name="redraw">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetScrollInfo" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
          </methodOverload>
          <method name="SetScrollPos" id="M:MControl.Win32.WinAPI.SetScrollPos(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Boolean)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hWnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="nBar">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="nPos">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="bRedraw">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetScrollPos" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="True" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SetStretchBltMode" id="M:MControl.Win32.WinAPI.SetStretchBltMode(System.IntPtr,System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hDC">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="StrechMode">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetStretchBltMode" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="SetTextColor" id="Overload:MControl.Win32.WinAPI.SetTextColor" contract="Static">
            <method name="SetTextColor" id="M:MControl.Win32.WinAPI.SetTextColor(System.Runtime.InteropServices.HandleRef,System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hDC">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="crColor">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetTextColor" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SetTextColor" id="M:MControl.Win32.WinAPI.SetTextColor(System.IntPtr,System.UInt32)" access="Public" contract="Static">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
              <parameter name="hDC">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="colorRef">
                <type name="UInt32" id="T:System.UInt32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetTextColor" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
          </methodOverload>
          <method name="SetUpPalette" id="M:MControl.Win32.WinAPI.SetUpPalette(System.IntPtr,System.Boolean,System.Boolean)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="dc">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="force">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="realizePalette">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="SetViewportOrgEx" id="M:MControl.Win32.WinAPI.SetViewportOrgEx(System.IntPtr,System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hdc">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="x">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="y">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="param">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetViewportOrgEx" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="SetWindowLong" id="Overload:MControl.Win32.WinAPI.SetWindowLong" contract="Static">
            <method name="SetWindowLong" id="M:MControl.Win32.WinAPI.SetWindowLong(System.IntPtr,System.Int32,System.IntPtr)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="nIndex">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="dwNewLong">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetWindowLong" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SetWindowLong" id="M:MControl.Win32.WinAPI.SetWindowLong(System.IntPtr,System.Int32,System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="nIndex">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="newLong">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetWindowLong" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SetWindowLong" id="M:MControl.Win32.WinAPI.SetWindowLong(System.Runtime.InteropServices.HandleRef,System.Int32,System.Runtime.InteropServices.HandleRef)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="nIndex">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="dwNewLong">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="SetWindowLongPtr32" id="M:MControl.Win32.WinAPI.SetWindowLongPtr32(System.Runtime.InteropServices.HandleRef,System.Int32,System.Runtime.InteropServices.HandleRef)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hWnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="nIndex">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="dwNewLong">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetWindowLong" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SetWindowLongPtr64" id="M:MControl.Win32.WinAPI.SetWindowLongPtr64(System.Runtime.InteropServices.HandleRef,System.Int32,System.Runtime.InteropServices.HandleRef)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hWnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="nIndex">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="dwNewLong">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetWindowLongPtr" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="SetWindowPos" id="Overload:MControl.Win32.WinAPI.SetWindowPos" contract="Static">
            <method name="SetWindowPos" id="M:MControl.Win32.WinAPI.SetWindowPos(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="hWndInsertAfter">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="x">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="y">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="cx">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="cy">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="flags">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetWindowPos" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SetWindowPos" id="M:MControl.Win32.WinAPI.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="hWndAfter">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="X">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="Y">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="Width">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="Height">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="flags">
                <type name="UInt32" id="T:System.UInt32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetWindowPos" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
          </methodOverload>
          <method name="SetWindowRgn" id="M:MControl.Win32.WinAPI.SetWindowRgn(System.IntPtr,System.IntPtr,System.Boolean)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="hRgn">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="redraw">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetWindowRgn" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SetWindowText" id="M:MControl.Win32.WinAPI.SetWindowText(System.IntPtr,System.String)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="text">
              <type name="String" id="T:System.String" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetWindowText" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SetWindowTheme" id="M:MControl.Win32.WinAPI.SetWindowTheme(System.IntPtr,System.String,System.String)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="AppID">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="ClassID">
              <type name="String" id="T:System.String" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="uxtheme.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetWindowTheme" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SetWindowsHookEx" id="M:MControl.Win32.WinAPI.SetWindowsHookEx(System.Int32,MControl.Win32.WinAPI.HookProc,System.IntPtr,System.Int32)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hookid">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="pfnhook">
              <type name="WinAPI.HookProc" id="T:MControl.Win32.WinAPI.HookProc" />
            </parameter>
            <parameter name="hinst">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="threadid">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetWindowsHookEx" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="Shell_NotifyIcon" id="M:MControl.Win32.WinAPI.Shell_NotifyIcon(MControl.Win32.NotifyCommand,MControl.Win32.NOTIFYICONDATA@)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="cmd">
              <type name="NotifyCommand" id="T:MControl.Win32.NotifyCommand" valueType="true" />
            </parameter>
            <parameter name="data" direction="ref">
              <type name="NOTIFYICONDATA" id="T:MControl.Win32.NOTIFYICONDATA" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="shell32.Dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="Shell_NotifyIcon" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="ShowCaret" id="M:MControl.Win32.WinAPI.ShowCaret(System.IntPtr)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ShowCaret" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="ShowScrollBar" id="M:MControl.Win32.WinAPI.ShowScrollBar(System.IntPtr,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="bar">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="show">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ShowScrollBar" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="ShowWindow" id="M:MControl.Win32.WinAPI.ShowWindow(System.IntPtr,System.Int16)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="State">
              <type name="Int16" id="T:System.Int16" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ShowWindow" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="SignedHIWORD" id="Overload:MControl.Win32.WinAPI.SignedHIWORD" contract="Static">
            <method name="SignedHIWORD" id="M:MControl.Win32.WinAPI.SignedHIWORD(System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="n">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
            <method name="SignedHIWORD" id="M:MControl.Win32.WinAPI.SignedHIWORD(System.IntPtr)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="n">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="SignedLOWORD" id="Overload:MControl.Win32.WinAPI.SignedLOWORD" contract="Static">
            <method name="SignedLOWORD" id="M:MControl.Win32.WinAPI.SignedLOWORD(System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="n">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
            <method name="SignedLOWORD" id="M:MControl.Win32.WinAPI.SignedLOWORD(System.IntPtr)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="n">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="StretchBlt" id="M:MControl.Win32.WinAPI.StretchBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hDCDest">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="XOriginDest">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="YOriginDest">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="WidthDest">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="HeightDest">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="hDCSrc">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="XOriginScr">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="YOriginSrc">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="WidthScr">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="HeightScr">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="Rop">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="StretchBlt" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SystemParametersInfo" id="M:MControl.Win32.WinAPI.SystemParametersInfo(System.UInt32,System.UInt32,System.Int32@,System.UInt32)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="uiAction">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
            <parameter name="uiParam">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
            <parameter name="bRetValue" direction="ref">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="fWinINI">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SystemParametersInfo" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="TrackMouseEvent" id="M:MControl.Win32.WinAPI.TrackMouseEvent(MControl.Win32.TRACKMOUSEEVENTS@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="tme" direction="ref">
              <type name="TRACKMOUSEEVENTS" id="T:MControl.Win32.TRACKMOUSEEVENTS" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="TrackMouseEvent" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="TrackPopupMenuEx" id="M:MControl.Win32.WinAPI.TrackPopupMenuEx(System.IntPtr,System.UInt32,System.Int32,System.Int32,System.IntPtr,System.IntPtr)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hMenu">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="uFlags">
              <type name="UInt32" id="T:System.UInt32" valueType="true" />
            </parameter>
            <parameter name="x">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="y">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="ignore">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.Dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="TrackPopupMenuEx" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="TranslateMessage" id="M:MControl.Win32.WinAPI.TranslateMessage(MControl.Win32.MSG@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="msg" direction="ref">
              <type name="MSG" id="T:MControl.Win32.MSG" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="TranslateMessage" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="UnhookWindowsHookEx" id="M:MControl.Win32.WinAPI.UnhookWindowsHookEx(System.IntPtr)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hhook">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="UnhookWindowsHookEx" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="UpdateLayeredWindow" id="M:MControl.Win32.WinAPI.UpdateLayeredWindow(System.IntPtr,System.IntPtr,MControl.Win32.POINT@,MControl.Win32.SIZE@,System.IntPtr,MControl.Win32.POINT@,System.Int32,MControl.Win32.BLENDFUNCTION@,System.Int32)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hwnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="hdcDst">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="pptDst" direction="ref">
              <type name="POINT" id="T:MControl.Win32.POINT" valueType="true" />
            </parameter>
            <parameter name="psize" direction="ref">
              <type name="SIZE" id="T:MControl.Win32.SIZE" valueType="true" />
            </parameter>
            <parameter name="hdcSrc">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="pprSrc" direction="ref">
              <type name="POINT" id="T:MControl.Win32.POINT" valueType="true" />
            </parameter>
            <parameter name="crKey">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="pblend" direction="ref">
              <type name="BLENDFUNCTION" id="T:MControl.Win32.BLENDFUNCTION" valueType="true" />
            </parameter>
            <parameter name="dwFlags">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="UpdateLayeredWindow" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="UpdateWindow" id="M:MControl.Win32.WinAPI.UpdateWindow(System.IntPtr)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="UpdateWindow" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="ValidateRect" id="M:MControl.Win32.WinAPI.ValidateRect(System.IntPtr,MControl.Win32.RECT@)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hWnd">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            </parameter>
            <parameter name="rc" direction="ref">
              <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ValidateRect" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="WaitMessage" id="M:MControl.Win32.WinAPI.WaitMessage" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="User32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="WaitMessage" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="WindowFromPoint" id="M:MControl.Win32.WinAPI.WindowFromPoint(System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="x">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="y">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
        </class>
        <class name="WinAPI.DRAWITEMSTRUCT" id="T:MControl.Win32.WinAPI.DRAWITEMSTRUCT" access="NestedPublic" namespace="MControl.Win32" displayName="WinAPI.DRAWITEMSTRUCT" declaringType="WinAPI">
          <constructor name=".ctor" id="M:MControl.Win32.WinAPI.DRAWITEMSTRUCT.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinAPI.DRAWITEMSTRUCT" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="CtlID" id="F:MControl.Win32.WinAPI.DRAWITEMSTRUCT.CtlID" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="CtlType" id="F:MControl.Win32.WinAPI.DRAWITEMSTRUCT.CtlType" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="hDC" id="F:MControl.Win32.WinAPI.DRAWITEMSTRUCT.hDC" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="hwndItem" id="F:MControl.Win32.WinAPI.DRAWITEMSTRUCT.hwndItem" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="itemAction" id="F:MControl.Win32.WinAPI.DRAWITEMSTRUCT.itemAction" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="itemData" id="F:MControl.Win32.WinAPI.DRAWITEMSTRUCT.itemData" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="itemID" id="F:MControl.Win32.WinAPI.DRAWITEMSTRUCT.itemID" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="itemState" id="F:MControl.Win32.WinAPI.DRAWITEMSTRUCT.itemState" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="rcItem" id="F:MControl.Win32.WinAPI.DRAWITEMSTRUCT.rcItem" access="Public" contract="Normal">
            <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
          </field>
        </class>
        <class name="WinAPI.MEASUREITEMSTRUCT" id="T:MControl.Win32.WinAPI.MEASUREITEMSTRUCT" access="NestedPublic" namespace="MControl.Win32" displayName="WinAPI.MEASUREITEMSTRUCT" declaringType="WinAPI">
          <constructor name=".ctor" id="M:MControl.Win32.WinAPI.MEASUREITEMSTRUCT.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinAPI.MEASUREITEMSTRUCT" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="CtlID" id="F:MControl.Win32.WinAPI.MEASUREITEMSTRUCT.CtlID" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="CtlType" id="F:MControl.Win32.WinAPI.MEASUREITEMSTRUCT.CtlType" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="itemData" id="F:MControl.Win32.WinAPI.MEASUREITEMSTRUCT.itemData" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="itemHeight" id="F:MControl.Win32.WinAPI.MEASUREITEMSTRUCT.itemHeight" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="itemID" id="F:MControl.Win32.WinAPI.MEASUREITEMSTRUCT.itemID" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="itemWidth" id="F:MControl.Win32.WinAPI.MEASUREITEMSTRUCT.itemWidth" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </class>
        <class name="WinMethods" id="T:MControl.Win32.WinMethods" access="Public" namespace="MControl.Win32" displayName="WinMethods">
          <constructor name=".ctor" id="M:MControl.Win32.WinMethods.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinMethods" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="HWND_NOTOPMOST" id="F:MControl.Win32.WinMethods.HWND_NOTOPMOST" access="Public" contract="Static">
            <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
          </field>
          <field name="HWND_TOPMOST" id="F:MControl.Win32.WinMethods.HWND_TOPMOST" access="Public" contract="Static">
            <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
          </field>
          <field name="NullHandleRef" id="F:MControl.Win32.WinMethods.NullHandleRef" access="Public" contract="Static">
            <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
          </field>
          <field name="TCM_INSERTITEM" id="F:MControl.Win32.WinMethods.TCM_INSERTITEM" access="Public" contract="Static" initOnly="true">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="TCM_SETITEM" id="F:MControl.Win32.WinMethods.TCM_SETITEM" access="Public" contract="Static" initOnly="true">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="TTM_ADDTOOL" id="F:MControl.Win32.WinMethods.TTM_ADDTOOL" access="Public" contract="Static" initOnly="true">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="TTM_DELTOOL" id="F:MControl.Win32.WinMethods.TTM_DELTOOL" access="Public" contract="Static" initOnly="true">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <method name="CreateBitmap" id="M:MControl.Win32.WinMethods.CreateBitmap(System.Int32,System.Int32,System.Int32,System.Int32,System.Int16[])" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="nWidth">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="nHeight">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="nPlanes">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="nBitsPerPixel">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="lpvBits">
              <type name="Int16" id="T:System.Int16" valueType="true">
                <array rank="1" />
              </type>
            </parameter>
          </method>
          <method name="CreateBrushIndirect" id="M:MControl.Win32.WinMethods.CreateBrushIndirect(MControl.Win32.WinMethods.LOGBRUSH)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="lb">
              <type name="WinMethods.LOGBRUSH" id="T:MControl.Win32.WinMethods.LOGBRUSH" />
            </parameter>
          </method>
          <method name="CreateHalftoneHBRUSH" id="M:MControl.Win32.WinMethods.CreateHalftoneHBRUSH" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </method>
          <method name="CreateSolidBrush" id="M:MControl.Win32.WinMethods.CreateSolidBrush(System.Int32)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="crColor">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="DeleteObject" id="M:MControl.Win32.WinMethods.DeleteObject(System.Runtime.InteropServices.HandleRef)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hObject">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
          </method>
          <method name="EnumChildWindows" id="M:MControl.Win32.WinMethods.EnumChildWindows(System.Runtime.InteropServices.HandleRef,MControl.Win32.WinMethods.EnumChildrenCallback,System.Runtime.InteropServices.HandleRef)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hwndParent">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="lpEnumFunc">
              <type name="WinMethods.EnumChildrenCallback" id="T:MControl.Win32.WinMethods.EnumChildrenCallback" />
            </parameter>
            <parameter name="lParam">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="EnumChildWindows" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="FromXYWH" id="M:MControl.Win32.WinMethods.FromXYWH(System.Int32,System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
            <parameter name="x">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="y">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="width">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="height">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="GetCapture" id="M:MControl.Win32.WinMethods.GetCapture" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetCapture" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetClientRect" id="M:MControl.Win32.WinMethods.GetClientRect(System.Runtime.InteropServices.HandleRef,MControl.Win32.RECT@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="rect" direction="out">
              <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
              <attribute name="InAttribute" id="T:System.Runtime.InteropServices.InAttribute" />
              <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetClientRect" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetDCEx" id="M:MControl.Win32.WinMethods.GetDCEx(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef,System.Int32)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hWnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="hrgnClip">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="flags">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="GetDeviceCaps" id="M:MControl.Win32.WinMethods.GetDeviceCaps(System.Runtime.InteropServices.HandleRef,System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hDC">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="nIndex">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetDeviceCaps" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetFontHandle" id="M:MControl.Win32.WinMethods.GetFontHandle(System.Drawing.Font)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="font">
              <type name="Font" id="T:System.Drawing.Font" />
            </parameter>
          </method>
          <method name="GetProcessWindowStation" id="M:MControl.Win32.WinMethods.GetProcessWindowStation" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetProcessWindowStation" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetRegionData" id="M:MControl.Win32.WinMethods.GetRegionData(System.Runtime.InteropServices.HandleRef,System.Int32,System.Byte[])" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hRgn">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="size">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="data">
              <type name="Byte" id="T:System.Byte" valueType="true">
                <array rank="1" />
              </type>
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetRegionData" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetSysColorBrush" id="M:MControl.Win32.WinMethods.GetSysColorBrush(System.Int32)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="nIndex">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetSysColorBrush" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetSystemMetrics" id="M:MControl.Win32.WinMethods.GetSystemMetrics(System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="nIndex">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetSystemMetrics" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="GetWindowRect" id="M:MControl.Win32.WinMethods.GetWindowRect(System.Runtime.InteropServices.HandleRef,MControl.Win32.RECT@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="rect" direction="out">
              <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
              <attribute name="InAttribute" id="T:System.Runtime.InteropServices.InAttribute" />
              <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="GetWindowRect" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="HIWORD" id="Overload:MControl.Win32.WinMethods.HIWORD" contract="Static">
            <method name="HIWORD" id="M:MControl.Win32.WinMethods.HIWORD(System.IntPtr)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="n">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
            </method>
            <method name="HIWORD" id="M:MControl.Win32.WinMethods.HIWORD(System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="n">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="InitCommonControlsEx" id="M:MControl.Win32.WinMethods.InitCommonControlsEx(MControl.Win32.WinMethods.INITCOMMONCONTROLSEX)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="icc">
              <type name="WinMethods.INITCOMMONCONTROLSEX" id="T:MControl.Win32.WinMethods.INITCOMMONCONTROLSEX" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="comctl32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="InitCommonControlsEx" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.None" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="InvalidateRect" id="M:MControl.Win32.WinMethods.InvalidateRect(System.Runtime.InteropServices.HandleRef,MControl.Win32.WinMethods.COMRECT,System.Boolean)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="rect">
              <type name="WinMethods.COMRECT" id="T:MControl.Win32.WinMethods.COMRECT" />
            </parameter>
            <parameter name="erase">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="InvalidateRect" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="LOWORD" id="Overload:MControl.Win32.WinMethods.LOWORD" contract="Static">
            <method name="LOWORD" id="M:MControl.Win32.WinMethods.LOWORD(System.IntPtr)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="n">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
            </method>
            <method name="LOWORD" id="M:MControl.Win32.WinMethods.LOWORD(System.Int32)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="n">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="MAKELPARAM" id="M:MControl.Win32.WinMethods.MAKELPARAM(System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="low">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="high">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="MapWindowPoints" id="M:MControl.Win32.WinMethods.MapWindowPoints(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef,MControl.Win32.WinMethods.POINT,System.Int32)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hWndFrom">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="hWndTo">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="pt">
              <type name="WinMethods.POINT" id="T:MControl.Win32.WinMethods.POINT" />
              <attribute name="InAttribute" id="T:System.Runtime.InteropServices.InAttribute" />
              <attribute name="OutAttribute" id="T:System.Runtime.InteropServices.OutAttribute" />
            </parameter>
            <parameter name="cPoints">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="MapWindowPoints" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="PatBlt" id="M:MControl.Win32.WinMethods.PatBlt(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hdc">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="left">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="top">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="width">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="height">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="rop">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="PatBlt" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="PostMessage" id="M:MControl.Win32.WinMethods.PostMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hwnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="msg">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="wparam">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="lparam">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="PostMessage" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="PtrToStructure" id="Overload:MControl.Win32.WinMethods.PtrToStructure" contract="Static">
            <method name="PtrToStructure" id="M:MControl.Win32.WinMethods.PtrToStructure(System.IntPtr,System.Object)" access="Public" contract="Static">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="lparam">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="data">
                <type name="Object" id="T:System.Object" />
              </parameter>
            </method>
            <method name="PtrToStructure" id="M:MControl.Win32.WinMethods.PtrToStructure(System.IntPtr,System.Type)" access="Public" contract="Static">
              <type name="Object" id="T:System.Object" />
              <parameter name="lparam">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="cls">
                <type name="Type" id="T:System.Type" />
              </parameter>
            </method>
          </methodOverload>
          <method name="ReleaseCapture" id="M:MControl.Win32.WinMethods.ReleaseCapture" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ReleaseCapture" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="ReleaseDC" id="M:MControl.Win32.WinMethods.ReleaseDC(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hWnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="hDC">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
          </method>
          <method name="ScrollWindow" id="M:MControl.Win32.WinMethods.ScrollWindow(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,MControl.Win32.WinMethods.RECT@,MControl.Win32.WinMethods.RECT@)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="nXAmount">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="nYAmount">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="rectScrollRegion" direction="ref">
              <type name="WinMethods.RECT" id="T:MControl.Win32.WinMethods.RECT" valueType="true" />
            </parameter>
            <parameter name="rectClip" direction="ref">
              <type name="WinMethods.RECT" id="T:MControl.Win32.WinMethods.RECT" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="ScrollWindow" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <methodOverload name="SelectObject" id="Overload:MControl.Win32.WinMethods.SelectObject" contract="Static">
            <method name="SelectObject" id="M:MControl.Win32.WinMethods.SelectObject(System.Runtime.InteropServices.HandleRef,System.Int32)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hdc">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="obj">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SelectObject" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SelectObject" id="M:MControl.Win32.WinMethods.SelectObject(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hDC">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="hObject">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="gdi32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SelectObject" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
          </methodOverload>
          <methodOverload name="SendMessage" id="Overload:MControl.Win32.WinMethods.SendMessage" contract="Static">
            <method name="SendMessage" id="M:MControl.Win32.WinMethods.SendMessage(System.IntPtr,System.Int32,System.Int32,MControl.Win32.WinMethods.TV_HITTESTINFO)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hwnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wparam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lparam">
                <type name="WinMethods.TV_HITTESTINFO" id="T:MControl.Win32.WinMethods.TV_HITTESTINFO" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinMethods.SendMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinMethods.SendMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,MControl.Win32.WinMethods.TOOLINFO_T)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="WinMethods.TOOLINFO_T" id="T:MControl.Win32.WinMethods.TOOLINFO_T" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinMethods.SendMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,MControl.Win32.WinMethods.TCITEM_T)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="WinMethods.TCITEM_T" id="T:MControl.Win32.WinMethods.TCITEM_T" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinMethods.SendMessage(System.IntPtr,System.Int32,System.Int32,MControl.Win32.WinMethods.TCHITTESTINFO)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hwnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wparam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lparam">
                <type name="WinMethods.TCHITTESTINFO" id="T:MControl.Win32.WinMethods.TCHITTESTINFO" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinMethods.SendMessage(System.IntPtr,System.Int32,System.Int32,System.IntPtr)" access="Public" contract="Static">
              <type name="Int32" id="T:System.Int32" valueType="true" />
              <parameter name="hWnd">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinMethods.SendMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,MControl.Win32.WinMethods.SYSTEMTIME)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="WinMethods.SYSTEMTIME" id="T:MControl.Win32.WinMethods.SYSTEMTIME" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinMethods.SendMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,MControl.Win32.WinMethods.SYSTEMTIMEARRAY)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="WinMethods.SYSTEMTIMEARRAY" id="T:MControl.Win32.WinMethods.SYSTEMTIMEARRAY" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinMethods.SendMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.String)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="String" id="T:System.String" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinMethods.SendMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32[],System.Int32[])" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="Int32" id="T:System.Int32" valueType="true">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="lParam">
                <type name="Int32" id="T:System.Int32" valueType="true">
                  <array rank="1" />
                </type>
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinMethods.SendMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.IntPtr,System.IntPtr)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <parameter name="lParam">
                <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
            <method name="SendMessage" id="M:MControl.Win32.WinMethods.SendMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32@,System.Int32@)" access="Public" contract="Static">
              <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
              <parameter name="hWnd">
                <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
              </parameter>
              <parameter name="msg">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="wParam" direction="ref">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="lParam" direction="ref">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
                <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
                <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SendMessage" />
                <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
                <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="False" />
                <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
                <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
                <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
                <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
                <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
              </attribute>
              <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
            </method>
          </methodOverload>
          <method name="SetCapture" id="M:MControl.Win32.WinMethods.SetCapture(System.Runtime.InteropServices.HandleRef)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hwnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetCapture" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SetFocus" id="M:MControl.Win32.WinMethods.SetFocus(System.Runtime.InteropServices.HandleRef)" access="Public" contract="Static">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
            <parameter name="hWnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetFocus" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SetScrollInfo" id="M:MControl.Win32.WinMethods.SetScrollInfo(System.Runtime.InteropServices.HandleRef,System.Int32,MControl.Win32.WinMethods.SCROLLINFO,System.Boolean)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="hWnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="fnBar">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="si">
              <type name="WinMethods.SCROLLINFO" id="T:MControl.Win32.WinMethods.SCROLLINFO" />
            </parameter>
            <parameter name="redraw">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetScrollInfo" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="SetWindowPos" id="M:MControl.Win32.WinMethods.SetWindowPos(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="hWndInsertAfter">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <parameter name="x">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="y">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="cx">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="cy">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="flags">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="SetWindowPos" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
          <method name="ToWin32" id="M:MControl.Win32.WinMethods.ToWin32(System.Drawing.Color)" access="Public" contract="Static">
            <type name="Int32" id="T:System.Int32" valueType="true" />
            <parameter name="c">
              <type name="Color" id="T:System.Drawing.Color" valueType="true" />
            </parameter>
          </method>
          <method name="TranslateLineAlignment" id="M:MControl.Win32.WinMethods.TranslateLineAlignment(System.Drawing.ContentAlignment)" access="Public" contract="Static">
            <type name="StringAlignment" id="T:System.Drawing.StringAlignment" valueType="true" />
            <parameter name="align">
              <type name="ContentAlignment" id="T:System.Drawing.ContentAlignment" valueType="true" />
            </parameter>
          </method>
          <method name="UpdateWindow" id="M:MControl.Win32.WinMethods.UpdateWindow(System.Runtime.InteropServices.HandleRef)" access="Public" contract="Static">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="hWnd">
              <type name="HandleRef" id="T:System.Runtime.InteropServices.HandleRef" valueType="true" />
            </parameter>
            <attribute name="DllImportAttribute" id="T:System.Runtime.InteropServices.DllImportAttribute">
              <argument id="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" type="System.String" value="user32.dll" />
              <field name="EntryPoint" id="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" type="System.String" value="UpdateWindow" />
              <field name="CharSet" id="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" type="System.Runtime.InteropServices.CharSet" value="CharSet.Auto" />
              <field name="ExactSpelling" id="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" type="System.Boolean" value="True" />
              <field name="SetLastError" id="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" type="System.Boolean" value="False" />
              <field name="PreserveSig" id="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" type="System.Boolean" value="True" />
              <field name="CallingConvention" id="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" type="System.Runtime.InteropServices.CallingConvention" value="CallingConvention.Winapi" />
              <field name="BestFitMapping" id="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" type="System.Boolean" value="False" />
              <field name="ThrowOnUnmappableChar" id="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" type="System.Boolean" value="False" />
            </attribute>
            <attribute name="PreserveSigAttribute" id="T:System.Runtime.InteropServices.PreserveSigAttribute" />
          </method>
        </class>
        <class name="WinMethods.COMRECT" id="T:MControl.Win32.WinMethods.COMRECT" access="NestedPublic" namespace="MControl.Win32" displayName="WinMethods.COMRECT" declaringType="WinMethods">
          <constructorOverload name=".ctor" id="Overload:MControl.Win32.WinMethods.COMRECT.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinMethods.COMRECT" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Win32.WinMethods.COMRECT.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinMethods.COMRECT" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Win32.WinMethods.COMRECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)" access="Public" contract="Normal">
              <parameter name="left">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="top">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="right">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="bottom">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
          <field name="bottom" id="F:MControl.Win32.WinMethods.COMRECT.bottom" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="left" id="F:MControl.Win32.WinMethods.COMRECT.left" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="right" id="F:MControl.Win32.WinMethods.COMRECT.right" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="top" id="F:MControl.Win32.WinMethods.COMRECT.top" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <method name="FromXYWH" id="M:MControl.Win32.WinMethods.COMRECT.FromXYWH(System.Int32,System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="WinMethods.COMRECT" id="T:MControl.Win32.WinMethods.COMRECT" />
            <parameter name="x">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="y">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="width">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="height">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="ToString" id="M:MControl.Win32.WinMethods.COMRECT.ToString" access="Public" contract="Override">
            <type name="String" id="T:System.String" />
          </method>
        </class>
        <class name="WinMethods.DRAWITEMSTRUCT" id="T:MControl.Win32.WinMethods.DRAWITEMSTRUCT" access="NestedPublic" namespace="MControl.Win32" displayName="WinMethods.DRAWITEMSTRUCT" declaringType="WinMethods">
          <constructor name=".ctor" id="M:MControl.Win32.WinMethods.DRAWITEMSTRUCT.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinMethods.DRAWITEMSTRUCT" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="CtlID" id="F:MControl.Win32.WinMethods.DRAWITEMSTRUCT.CtlID" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="CtlType" id="F:MControl.Win32.WinMethods.DRAWITEMSTRUCT.CtlType" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="hDC" id="F:MControl.Win32.WinMethods.DRAWITEMSTRUCT.hDC" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="hwndItem" id="F:MControl.Win32.WinMethods.DRAWITEMSTRUCT.hwndItem" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="itemAction" id="F:MControl.Win32.WinMethods.DRAWITEMSTRUCT.itemAction" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="itemData" id="F:MControl.Win32.WinMethods.DRAWITEMSTRUCT.itemData" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="itemID" id="F:MControl.Win32.WinMethods.DRAWITEMSTRUCT.itemID" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="itemState" id="F:MControl.Win32.WinMethods.DRAWITEMSTRUCT.itemState" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="rcItem" id="F:MControl.Win32.WinMethods.DRAWITEMSTRUCT.rcItem" access="Public" contract="Normal">
            <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
          </field>
        </class>
        <class name="WinMethods.FontHandleWrapper" id="T:MControl.Win32.WinMethods.FontHandleWrapper" access="NestedPublic" namespace="MControl.Win32" displayName="WinMethods.FontHandleWrapper" declaringType="WinMethods" sealed="true">
          <base name="MarshalByRefObject" id="T:System.MarshalByRefObject" displayName="System.MarshalByRefObject" />
          <method name="Dispose" id="M:MControl.Win32.WinMethods.FontHandleWrapper.Dispose" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
          </method>
        </class>
        <class name="WinMethods.INITCOMMONCONTROLSEX" id="T:MControl.Win32.WinMethods.INITCOMMONCONTROLSEX" access="NestedPublic" namespace="MControl.Win32" displayName="WinMethods.INITCOMMONCONTROLSEX" declaringType="WinMethods">
          <constructor name=".ctor" id="M:MControl.Win32.WinMethods.INITCOMMONCONTROLSEX.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinMethods.INITCOMMONCONTROLSEX" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="dwICC" id="F:MControl.Win32.WinMethods.INITCOMMONCONTROLSEX.dwICC" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="dwSize" id="F:MControl.Win32.WinMethods.INITCOMMONCONTROLSEX.dwSize" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </class>
        <class name="WinMethods.LOGBRUSH" id="T:MControl.Win32.WinMethods.LOGBRUSH" access="NestedPublic" namespace="MControl.Win32" displayName="WinMethods.LOGBRUSH" declaringType="WinMethods">
          <constructor name=".ctor" id="M:MControl.Win32.WinMethods.LOGBRUSH.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinMethods.LOGBRUSH" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="lbColor" id="F:MControl.Win32.WinMethods.LOGBRUSH.lbColor" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="lbHatch" id="F:MControl.Win32.WinMethods.LOGBRUSH.lbHatch" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="lbStyle" id="F:MControl.Win32.WinMethods.LOGBRUSH.lbStyle" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </class>
        <class name="WinMethods.MEASUREITEMSTRUCT" id="T:MControl.Win32.WinMethods.MEASUREITEMSTRUCT" access="NestedPublic" namespace="MControl.Win32" displayName="WinMethods.MEASUREITEMSTRUCT" declaringType="WinMethods">
          <constructor name=".ctor" id="M:MControl.Win32.WinMethods.MEASUREITEMSTRUCT.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinMethods.MEASUREITEMSTRUCT" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="CtlID" id="F:MControl.Win32.WinMethods.MEASUREITEMSTRUCT.CtlID" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="CtlType" id="F:MControl.Win32.WinMethods.MEASUREITEMSTRUCT.CtlType" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="itemData" id="F:MControl.Win32.WinMethods.MEASUREITEMSTRUCT.itemData" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="itemHeight" id="F:MControl.Win32.WinMethods.MEASUREITEMSTRUCT.itemHeight" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="itemID" id="F:MControl.Win32.WinMethods.MEASUREITEMSTRUCT.itemID" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="itemWidth" id="F:MControl.Win32.WinMethods.MEASUREITEMSTRUCT.itemWidth" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </class>
        <class name="WinMethods.NMDATETIMECHANGE" id="T:MControl.Win32.WinMethods.NMDATETIMECHANGE" access="NestedPublic" namespace="MControl.Win32" displayName="WinMethods.NMDATETIMECHANGE" declaringType="WinMethods">
          <constructor name=".ctor" id="M:MControl.Win32.WinMethods.NMDATETIMECHANGE.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinMethods.NMDATETIMECHANGE" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="dwFlags" id="F:MControl.Win32.WinMethods.NMDATETIMECHANGE.dwFlags" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="nmhdr" id="F:MControl.Win32.WinMethods.NMDATETIMECHANGE.nmhdr" access="Public" contract="Normal">
            <type name="WinMethods.NMHDR" id="T:MControl.Win32.WinMethods.NMHDR" valueType="true" />
          </field>
          <field name="st" id="F:MControl.Win32.WinMethods.NMDATETIMECHANGE.st" access="Public" contract="Normal">
            <type name="WinMethods.SYSTEMTIME" id="T:MControl.Win32.WinMethods.SYSTEMTIME" />
          </field>
        </class>
        <class name="WinMethods.NMDATETIMEFORMAT" id="T:MControl.Win32.WinMethods.NMDATETIMEFORMAT" access="NestedPublic" namespace="MControl.Win32" displayName="WinMethods.NMDATETIMEFORMAT" declaringType="WinMethods">
          <constructor name=".ctor" id="M:MControl.Win32.WinMethods.NMDATETIMEFORMAT.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinMethods.NMDATETIMEFORMAT" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="nmhdr" id="F:MControl.Win32.WinMethods.NMDATETIMEFORMAT.nmhdr" access="Public" contract="Normal">
            <type name="WinMethods.NMHDR" id="T:MControl.Win32.WinMethods.NMHDR" valueType="true" />
          </field>
          <field name="pszDisplay" id="F:MControl.Win32.WinMethods.NMDATETIMEFORMAT.pszDisplay" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </field>
          <field name="pszFormat" id="F:MControl.Win32.WinMethods.NMDATETIMEFORMAT.pszFormat" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </field>
          <field name="st" id="F:MControl.Win32.WinMethods.NMDATETIMEFORMAT.st" access="Public" contract="Normal">
            <type name="WinMethods.SYSTEMTIME" id="T:MControl.Win32.WinMethods.SYSTEMTIME" />
          </field>
          <field name="szDisplay" id="F:MControl.Win32.WinMethods.NMDATETIMEFORMAT.szDisplay" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <attribute name="MarshalAsAttribute" id="T:System.Runtime.InteropServices.MarshalAsAttribute">
              <argument id="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.ByValTStr" />
              <field name="ArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.0" />
              <field name="SizeParamIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" type="System.Int16" value="0" />
              <field name="SizeConst" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" type="System.Int32" value="32" />
              <field name="IidParameterIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex" type="System.Int32" value="0" />
              <field name="SafeArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" type="System.Runtime.InteropServices.VarEnum" value="VarEnum.VT_EMPTY" />
            </attribute>
          </field>
        </class>
        <class name="WinMethods.POINT" id="T:MControl.Win32.WinMethods.POINT" access="NestedPublic" namespace="MControl.Win32" displayName="WinMethods.POINT" declaringType="WinMethods">
          <constructorOverload name=".ctor" id="Overload:MControl.Win32.WinMethods.POINT.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinMethods.POINT" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Win32.WinMethods.POINT.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinMethods.POINT" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Win32.WinMethods.POINT.#ctor(System.Int32,System.Int32)" access="Public" contract="Normal">
              <parameter name="x">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="y">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
          <field name="x" id="F:MControl.Win32.WinMethods.POINT.x" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="y" id="F:MControl.Win32.WinMethods.POINT.y" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </class>
        <class name="WinMethods.SCROLLINFO" id="T:MControl.Win32.WinMethods.SCROLLINFO" access="NestedPublic" namespace="MControl.Win32" displayName="WinMethods.SCROLLINFO" declaringType="WinMethods">
          <constructorOverload name=".ctor" id="Overload:MControl.Win32.WinMethods.SCROLLINFO.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinMethods.SCROLLINFO" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Win32.WinMethods.SCROLLINFO.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinMethods.SCROLLINFO" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Win32.WinMethods.SCROLLINFO.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" access="Public" contract="Normal">
              <parameter name="mask">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="min">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="max">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="page">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
              <parameter name="pos">
                <type name="Int32" id="T:System.Int32" valueType="true" />
              </parameter>
            </constructor>
          </constructorOverload>
          <field name="cbSize" id="F:MControl.Win32.WinMethods.SCROLLINFO.cbSize" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="fMask" id="F:MControl.Win32.WinMethods.SCROLLINFO.fMask" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="nMax" id="F:MControl.Win32.WinMethods.SCROLLINFO.nMax" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="nMin" id="F:MControl.Win32.WinMethods.SCROLLINFO.nMin" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="nPage" id="F:MControl.Win32.WinMethods.SCROLLINFO.nPage" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="nPos" id="F:MControl.Win32.WinMethods.SCROLLINFO.nPos" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="nTrackPos" id="F:MControl.Win32.WinMethods.SCROLLINFO.nTrackPos" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </class>
        <class name="WinMethods.SYSTEMTIME" id="T:MControl.Win32.WinMethods.SYSTEMTIME" access="NestedPublic" namespace="MControl.Win32" displayName="WinMethods.SYSTEMTIME" declaringType="WinMethods">
          <constructor name=".ctor" id="M:MControl.Win32.WinMethods.SYSTEMTIME.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinMethods.SYSTEMTIME" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="wDay" id="F:MControl.Win32.WinMethods.SYSTEMTIME.wDay" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wDayOfWeek" id="F:MControl.Win32.WinMethods.SYSTEMTIME.wDayOfWeek" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wHour" id="F:MControl.Win32.WinMethods.SYSTEMTIME.wHour" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wMilliseconds" id="F:MControl.Win32.WinMethods.SYSTEMTIME.wMilliseconds" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wMinute" id="F:MControl.Win32.WinMethods.SYSTEMTIME.wMinute" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wMonth" id="F:MControl.Win32.WinMethods.SYSTEMTIME.wMonth" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wSecond" id="F:MControl.Win32.WinMethods.SYSTEMTIME.wSecond" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wYear" id="F:MControl.Win32.WinMethods.SYSTEMTIME.wYear" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <method name="ToString" id="M:MControl.Win32.WinMethods.SYSTEMTIME.ToString" access="Public" contract="Override">
            <type name="String" id="T:System.String" />
          </method>
        </class>
        <class name="WinMethods.SYSTEMTIMEARRAY" id="T:MControl.Win32.WinMethods.SYSTEMTIMEARRAY" access="NestedPublic" namespace="MControl.Win32" displayName="WinMethods.SYSTEMTIMEARRAY" declaringType="WinMethods">
          <constructor name=".ctor" id="M:MControl.Win32.WinMethods.SYSTEMTIMEARRAY.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinMethods.SYSTEMTIMEARRAY" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="wDay1" id="F:MControl.Win32.WinMethods.SYSTEMTIMEARRAY.wDay1" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wDay2" id="F:MControl.Win32.WinMethods.SYSTEMTIMEARRAY.wDay2" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wDayOfWeek1" id="F:MControl.Win32.WinMethods.SYSTEMTIMEARRAY.wDayOfWeek1" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wDayOfWeek2" id="F:MControl.Win32.WinMethods.SYSTEMTIMEARRAY.wDayOfWeek2" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wHour1" id="F:MControl.Win32.WinMethods.SYSTEMTIMEARRAY.wHour1" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wHour2" id="F:MControl.Win32.WinMethods.SYSTEMTIMEARRAY.wHour2" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wMilliseconds1" id="F:MControl.Win32.WinMethods.SYSTEMTIMEARRAY.wMilliseconds1" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wMilliseconds2" id="F:MControl.Win32.WinMethods.SYSTEMTIMEARRAY.wMilliseconds2" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wMinute1" id="F:MControl.Win32.WinMethods.SYSTEMTIMEARRAY.wMinute1" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wMinute2" id="F:MControl.Win32.WinMethods.SYSTEMTIMEARRAY.wMinute2" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wMonth1" id="F:MControl.Win32.WinMethods.SYSTEMTIMEARRAY.wMonth1" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wMonth2" id="F:MControl.Win32.WinMethods.SYSTEMTIMEARRAY.wMonth2" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wSecond1" id="F:MControl.Win32.WinMethods.SYSTEMTIMEARRAY.wSecond1" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wSecond2" id="F:MControl.Win32.WinMethods.SYSTEMTIMEARRAY.wSecond2" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wYear1" id="F:MControl.Win32.WinMethods.SYSTEMTIMEARRAY.wYear1" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wYear2" id="F:MControl.Win32.WinMethods.SYSTEMTIMEARRAY.wYear2" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
        </class>
        <class name="WinMethods.TCHITTESTINFO" id="T:MControl.Win32.WinMethods.TCHITTESTINFO" access="NestedPublic" namespace="MControl.Win32" displayName="WinMethods.TCHITTESTINFO" declaringType="WinMethods">
          <attribute name="ComVisibleAttribute" id="T:System.Runtime.InteropServices.ComVisibleAttribute">
            <argument id="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)" type="System.Boolean" value="False" />
          </attribute>
          <constructor name=".ctor" id="M:MControl.Win32.WinMethods.TCHITTESTINFO.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinMethods.TCHITTESTINFO" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="flags" id="F:MControl.Win32.WinMethods.TCHITTESTINFO.flags" access="Public" contract="Normal">
            <type name="WinMethods.TabControlHitTest" id="T:MControl.Win32.WinMethods.TabControlHitTest" valueType="true" />
          </field>
          <field name="pt" id="F:MControl.Win32.WinMethods.TCHITTESTINFO.pt" access="Public" contract="Normal">
            <type name="Point" id="T:System.Drawing.Point" valueType="true" />
          </field>
        </class>
        <class name="WinMethods.TCITEM_T" id="T:MControl.Win32.WinMethods.TCITEM_T" access="NestedPublic" namespace="MControl.Win32" displayName="WinMethods.TCITEM_T" declaringType="WinMethods">
          <constructor name=".ctor" id="M:MControl.Win32.WinMethods.TCITEM_T.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinMethods.TCITEM_T" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="cchTextMax" id="F:MControl.Win32.WinMethods.TCITEM_T.cchTextMax" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="dwState" id="F:MControl.Win32.WinMethods.TCITEM_T.dwState" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="dwStateMask" id="F:MControl.Win32.WinMethods.TCITEM_T.dwStateMask" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="iImage" id="F:MControl.Win32.WinMethods.TCITEM_T.iImage" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="lParam" id="F:MControl.Win32.WinMethods.TCITEM_T.lParam" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="mask" id="F:MControl.Win32.WinMethods.TCITEM_T.mask" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="pszText" id="F:MControl.Win32.WinMethods.TCITEM_T.pszText" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </field>
        </class>
        <class name="WinMethods.TOOLINFO_T" id="T:MControl.Win32.WinMethods.TOOLINFO_T" access="NestedPublic" namespace="MControl.Win32" displayName="WinMethods.TOOLINFO_T" declaringType="WinMethods">
          <constructor name=".ctor" id="M:MControl.Win32.WinMethods.TOOLINFO_T.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinMethods.TOOLINFO_T" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="cbSize" id="F:MControl.Win32.WinMethods.TOOLINFO_T.cbSize" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="hinst" id="F:MControl.Win32.WinMethods.TOOLINFO_T.hinst" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="hwnd" id="F:MControl.Win32.WinMethods.TOOLINFO_T.hwnd" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="lParam" id="F:MControl.Win32.WinMethods.TOOLINFO_T.lParam" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="lpszText" id="F:MControl.Win32.WinMethods.TOOLINFO_T.lpszText" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </field>
          <field name="rect" id="F:MControl.Win32.WinMethods.TOOLINFO_T.rect" access="Public" contract="Normal">
            <type name="WinMethods.RECT" id="T:MControl.Win32.WinMethods.RECT" valueType="true" />
          </field>
          <field name="uFlags" id="F:MControl.Win32.WinMethods.TOOLINFO_T.uFlags" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="uId" id="F:MControl.Win32.WinMethods.TOOLINFO_T.uId" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
        </class>
        <class name="WinMethods.TV_HITTESTINFO" id="T:MControl.Win32.WinMethods.TV_HITTESTINFO" access="NestedPublic" namespace="MControl.Win32" displayName="WinMethods.TV_HITTESTINFO" declaringType="WinMethods">
          <attribute name="ComVisibleAttribute" id="T:System.Runtime.InteropServices.ComVisibleAttribute">
            <argument id="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)" type="System.Boolean" value="False" />
          </attribute>
          <constructor name=".ctor" id="M:MControl.Win32.WinMethods.TV_HITTESTINFO.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinMethods.TV_HITTESTINFO" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="flags" id="F:MControl.Win32.WinMethods.TV_HITTESTINFO.flags" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="hItem" id="F:MControl.Win32.WinMethods.TV_HITTESTINFO.hItem" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="pt_x" id="F:MControl.Win32.WinMethods.TV_HITTESTINFO.pt_x" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="pt_y" id="F:MControl.Win32.WinMethods.TV_HITTESTINFO.pt_y" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </class>
        <class name="WinMsgs" id="T:MControl.Win32.WinMsgs" access="Public" namespace="MControl.Win32" displayName="WinMsgs" sealed="true">
          <constructor name=".ctor" id="M:MControl.Win32.WinMsgs.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Win32.WinMsgs" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="WM_ACTIVATE" id="F:MControl.Win32.WinMsgs.WM_ACTIVATE" access="Public" contract="Static" literal="true" value="6">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_ACTIVATEAPP" id="F:MControl.Win32.WinMsgs.WM_ACTIVATEAPP" access="Public" contract="Static" literal="true" value="28">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_AFXFIRST" id="F:MControl.Win32.WinMsgs.WM_AFXFIRST" access="Public" contract="Static" literal="true" value="864">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_AFXLAST" id="F:MControl.Win32.WinMsgs.WM_AFXLAST" access="Public" contract="Static" literal="true" value="895">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_APP" id="F:MControl.Win32.WinMsgs.WM_APP" access="Public" contract="Static" literal="true" value="32768">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_ASKCBFORMATNAME" id="F:MControl.Win32.WinMsgs.WM_ASKCBFORMATNAME" access="Public" contract="Static" literal="true" value="780">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_CANCELJOURNAL" id="F:MControl.Win32.WinMsgs.WM_CANCELJOURNAL" access="Public" contract="Static" literal="true" value="75">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_CANCELMODE" id="F:MControl.Win32.WinMsgs.WM_CANCELMODE" access="Public" contract="Static" literal="true" value="31">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_CAPTURECHANGED" id="F:MControl.Win32.WinMsgs.WM_CAPTURECHANGED" access="Public" contract="Static" literal="true" value="533">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_CHANGECBCHAIN" id="F:MControl.Win32.WinMsgs.WM_CHANGECBCHAIN" access="Public" contract="Static" literal="true" value="781">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_CHAR" id="F:MControl.Win32.WinMsgs.WM_CHAR" access="Public" contract="Static" literal="true" value="258">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_CHARTOITEM" id="F:MControl.Win32.WinMsgs.WM_CHARTOITEM" access="Public" contract="Static" literal="true" value="47">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_CHILDACTIVATE" id="F:MControl.Win32.WinMsgs.WM_CHILDACTIVATE" access="Public" contract="Static" literal="true" value="34">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_CLEAR" id="F:MControl.Win32.WinMsgs.WM_CLEAR" access="Public" contract="Static" literal="true" value="771">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_CLOSE" id="F:MControl.Win32.WinMsgs.WM_CLOSE" access="Public" contract="Static" literal="true" value="16">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_COMMAND" id="F:MControl.Win32.WinMsgs.WM_COMMAND" access="Public" contract="Static" literal="true" value="273">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_COMMNOTIFY" id="F:MControl.Win32.WinMsgs.WM_COMMNOTIFY" access="Public" contract="Static" literal="true" value="68">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_COMPACTING" id="F:MControl.Win32.WinMsgs.WM_COMPACTING" access="Public" contract="Static" literal="true" value="65">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_COMPAREITEM" id="F:MControl.Win32.WinMsgs.WM_COMPAREITEM" access="Public" contract="Static" literal="true" value="57">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_CONTEXTMENU" id="F:MControl.Win32.WinMsgs.WM_CONTEXTMENU" access="Public" contract="Static" literal="true" value="123">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_COPY" id="F:MControl.Win32.WinMsgs.WM_COPY" access="Public" contract="Static" literal="true" value="769">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_COPYDATA" id="F:MControl.Win32.WinMsgs.WM_COPYDATA" access="Public" contract="Static" literal="true" value="74">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_CREATE" id="F:MControl.Win32.WinMsgs.WM_CREATE" access="Public" contract="Static" literal="true" value="1">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_CTLCOLOR" id="F:MControl.Win32.WinMsgs.WM_CTLCOLOR" access="Public" contract="Static" literal="true" value="312">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_CTLCOLORBTN" id="F:MControl.Win32.WinMsgs.WM_CTLCOLORBTN" access="Public" contract="Static" literal="true" value="309">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_CTLCOLORDLG" id="F:MControl.Win32.WinMsgs.WM_CTLCOLORDLG" access="Public" contract="Static" literal="true" value="310">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_CTLCOLOREDIT" id="F:MControl.Win32.WinMsgs.WM_CTLCOLOREDIT" access="Public" contract="Static" literal="true" value="307">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_CTLCOLORLISTBOX" id="F:MControl.Win32.WinMsgs.WM_CTLCOLORLISTBOX" access="Public" contract="Static" literal="true" value="308">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_CTLCOLORMSGBOX" id="F:MControl.Win32.WinMsgs.WM_CTLCOLORMSGBOX" access="Public" contract="Static" literal="true" value="306">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_CTLCOLORSCROLLBAR" id="F:MControl.Win32.WinMsgs.WM_CTLCOLORSCROLLBAR" access="Public" contract="Static" literal="true" value="311">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_CUT" id="F:MControl.Win32.WinMsgs.WM_CUT" access="Public" contract="Static" literal="true" value="768">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_DEADCHAR" id="F:MControl.Win32.WinMsgs.WM_DEADCHAR" access="Public" contract="Static" literal="true" value="259">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_DELETEITEM" id="F:MControl.Win32.WinMsgs.WM_DELETEITEM" access="Public" contract="Static" literal="true" value="45">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_DESTROY" id="F:MControl.Win32.WinMsgs.WM_DESTROY" access="Public" contract="Static" literal="true" value="2">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_DESTROYCLIPBOARD" id="F:MControl.Win32.WinMsgs.WM_DESTROYCLIPBOARD" access="Public" contract="Static" literal="true" value="775">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_DEVICECHANGE" id="F:MControl.Win32.WinMsgs.WM_DEVICECHANGE" access="Public" contract="Static" literal="true" value="537">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_DEVMODECHANGE" id="F:MControl.Win32.WinMsgs.WM_DEVMODECHANGE" access="Public" contract="Static" literal="true" value="27">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_DISPLAYCHANGE" id="F:MControl.Win32.WinMsgs.WM_DISPLAYCHANGE" access="Public" contract="Static" literal="true" value="126">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_DRAWCLIPBOARD" id="F:MControl.Win32.WinMsgs.WM_DRAWCLIPBOARD" access="Public" contract="Static" literal="true" value="776">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_DRAWITEM" id="F:MControl.Win32.WinMsgs.WM_DRAWITEM" access="Public" contract="Static" literal="true" value="43">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_DROPFILES" id="F:MControl.Win32.WinMsgs.WM_DROPFILES" access="Public" contract="Static" literal="true" value="563">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_ENABLE" id="F:MControl.Win32.WinMsgs.WM_ENABLE" access="Public" contract="Static" literal="true" value="10">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_ENDSESSION" id="F:MControl.Win32.WinMsgs.WM_ENDSESSION" access="Public" contract="Static" literal="true" value="22">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_ENTERIDLE" id="F:MControl.Win32.WinMsgs.WM_ENTERIDLE" access="Public" contract="Static" literal="true" value="289">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_ENTERMENULOOP" id="F:MControl.Win32.WinMsgs.WM_ENTERMENULOOP" access="Public" contract="Static" literal="true" value="529">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_ENTERSIZEMOVE" id="F:MControl.Win32.WinMsgs.WM_ENTERSIZEMOVE" access="Public" contract="Static" literal="true" value="561">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_ERASEBKGND" id="F:MControl.Win32.WinMsgs.WM_ERASEBKGND" access="Public" contract="Static" literal="true" value="20">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_EXITMENULOOP" id="F:MControl.Win32.WinMsgs.WM_EXITMENULOOP" access="Public" contract="Static" literal="true" value="530">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_EXITSIZEMOVE" id="F:MControl.Win32.WinMsgs.WM_EXITSIZEMOVE" access="Public" contract="Static" literal="true" value="562">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_FONTCHANGE" id="F:MControl.Win32.WinMsgs.WM_FONTCHANGE" access="Public" contract="Static" literal="true" value="29">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_GETDLGCODE" id="F:MControl.Win32.WinMsgs.WM_GETDLGCODE" access="Public" contract="Static" literal="true" value="135">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_GETFONT" id="F:MControl.Win32.WinMsgs.WM_GETFONT" access="Public" contract="Static" literal="true" value="49">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_GETHOTKEY" id="F:MControl.Win32.WinMsgs.WM_GETHOTKEY" access="Public" contract="Static" literal="true" value="51">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_GETICON" id="F:MControl.Win32.WinMsgs.WM_GETICON" access="Public" contract="Static" literal="true" value="127">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_GETMINMAXINFO" id="F:MControl.Win32.WinMsgs.WM_GETMINMAXINFO" access="Public" contract="Static" literal="true" value="36">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_GETOBJECT" id="F:MControl.Win32.WinMsgs.WM_GETOBJECT" access="Public" contract="Static" literal="true" value="61">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_GETTEXT" id="F:MControl.Win32.WinMsgs.WM_GETTEXT" access="Public" contract="Static" literal="true" value="13">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_GETTEXTLENGTH" id="F:MControl.Win32.WinMsgs.WM_GETTEXTLENGTH" access="Public" contract="Static" literal="true" value="14">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_HANDHELDFIRST" id="F:MControl.Win32.WinMsgs.WM_HANDHELDFIRST" access="Public" contract="Static" literal="true" value="856">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_HANDHELDLAST" id="F:MControl.Win32.WinMsgs.WM_HANDHELDLAST" access="Public" contract="Static" literal="true" value="863">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_HELP" id="F:MControl.Win32.WinMsgs.WM_HELP" access="Public" contract="Static" literal="true" value="83">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_HOTKEY" id="F:MControl.Win32.WinMsgs.WM_HOTKEY" access="Public" contract="Static" literal="true" value="786">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_HSCROLL" id="F:MControl.Win32.WinMsgs.WM_HSCROLL" access="Public" contract="Static" literal="true" value="276">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_HSCROLLCLIPBOARD" id="F:MControl.Win32.WinMsgs.WM_HSCROLLCLIPBOARD" access="Public" contract="Static" literal="true" value="782">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_ICONERASEBKGND" id="F:MControl.Win32.WinMsgs.WM_ICONERASEBKGND" access="Public" contract="Static" literal="true" value="39">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_IME_CHAR" id="F:MControl.Win32.WinMsgs.WM_IME_CHAR" access="Public" contract="Static" literal="true" value="646">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_IME_COMPOSITION" id="F:MControl.Win32.WinMsgs.WM_IME_COMPOSITION" access="Public" contract="Static" literal="true" value="271">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_IME_COMPOSITIONFULL" id="F:MControl.Win32.WinMsgs.WM_IME_COMPOSITIONFULL" access="Public" contract="Static" literal="true" value="644">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_IME_CONTROL" id="F:MControl.Win32.WinMsgs.WM_IME_CONTROL" access="Public" contract="Static" literal="true" value="643">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_IME_ENDCOMPOSITION" id="F:MControl.Win32.WinMsgs.WM_IME_ENDCOMPOSITION" access="Public" contract="Static" literal="true" value="270">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_IME_KEYDOWN" id="F:MControl.Win32.WinMsgs.WM_IME_KEYDOWN" access="Public" contract="Static" literal="true" value="656">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_IME_KEYLAST" id="F:MControl.Win32.WinMsgs.WM_IME_KEYLAST" access="Public" contract="Static" literal="true" value="271">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_IME_KEYUP" id="F:MControl.Win32.WinMsgs.WM_IME_KEYUP" access="Public" contract="Static" literal="true" value="657">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_IME_NOTIFY" id="F:MControl.Win32.WinMsgs.WM_IME_NOTIFY" access="Public" contract="Static" literal="true" value="642">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_IME_REQUEST" id="F:MControl.Win32.WinMsgs.WM_IME_REQUEST" access="Public" contract="Static" literal="true" value="648">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_IME_SELECT" id="F:MControl.Win32.WinMsgs.WM_IME_SELECT" access="Public" contract="Static" literal="true" value="645">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_IME_SETCONTEXT" id="F:MControl.Win32.WinMsgs.WM_IME_SETCONTEXT" access="Public" contract="Static" literal="true" value="641">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_IME_STARTCOMPOSITION" id="F:MControl.Win32.WinMsgs.WM_IME_STARTCOMPOSITION" access="Public" contract="Static" literal="true" value="269">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_INITDIALOG" id="F:MControl.Win32.WinMsgs.WM_INITDIALOG" access="Public" contract="Static" literal="true" value="272">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_INITMENU" id="F:MControl.Win32.WinMsgs.WM_INITMENU" access="Public" contract="Static" literal="true" value="278">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_INITMENUPOPUP" id="F:MControl.Win32.WinMsgs.WM_INITMENUPOPUP" access="Public" contract="Static" literal="true" value="279">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_INPUTLANGCHANGE" id="F:MControl.Win32.WinMsgs.WM_INPUTLANGCHANGE" access="Public" contract="Static" literal="true" value="81">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_INPUTLANGCHANGEREQUEST" id="F:MControl.Win32.WinMsgs.WM_INPUTLANGCHANGEREQUEST" access="Public" contract="Static" literal="true" value="80">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_KEYDOWN" id="F:MControl.Win32.WinMsgs.WM_KEYDOWN" access="Public" contract="Static" literal="true" value="256">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_KEYLAST" id="F:MControl.Win32.WinMsgs.WM_KEYLAST" access="Public" contract="Static" literal="true" value="264">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_KEYUP" id="F:MControl.Win32.WinMsgs.WM_KEYUP" access="Public" contract="Static" literal="true" value="257">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_KILLFOCUS" id="F:MControl.Win32.WinMsgs.WM_KILLFOCUS" access="Public" contract="Static" literal="true" value="8">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_LBUTTONDBLCLK" id="F:MControl.Win32.WinMsgs.WM_LBUTTONDBLCLK" access="Public" contract="Static" literal="true" value="515">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_LBUTTONDOWN" id="F:MControl.Win32.WinMsgs.WM_LBUTTONDOWN" access="Public" contract="Static" literal="true" value="513">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_LBUTTONUP" id="F:MControl.Win32.WinMsgs.WM_LBUTTONUP" access="Public" contract="Static" literal="true" value="514">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MBUTTONDBLCLK" id="F:MControl.Win32.WinMsgs.WM_MBUTTONDBLCLK" access="Public" contract="Static" literal="true" value="521">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MBUTTONDOWN" id="F:MControl.Win32.WinMsgs.WM_MBUTTONDOWN" access="Public" contract="Static" literal="true" value="519">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MBUTTONUP" id="F:MControl.Win32.WinMsgs.WM_MBUTTONUP" access="Public" contract="Static" literal="true" value="520">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MDIACTIVATE" id="F:MControl.Win32.WinMsgs.WM_MDIACTIVATE" access="Public" contract="Static" literal="true" value="546">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MDICASCADE" id="F:MControl.Win32.WinMsgs.WM_MDICASCADE" access="Public" contract="Static" literal="true" value="551">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MDICREATE" id="F:MControl.Win32.WinMsgs.WM_MDICREATE" access="Public" contract="Static" literal="true" value="544">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MDIDESTROY" id="F:MControl.Win32.WinMsgs.WM_MDIDESTROY" access="Public" contract="Static" literal="true" value="545">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MDIGETACTIVE" id="F:MControl.Win32.WinMsgs.WM_MDIGETACTIVE" access="Public" contract="Static" literal="true" value="553">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MDIICONARRANGE" id="F:MControl.Win32.WinMsgs.WM_MDIICONARRANGE" access="Public" contract="Static" literal="true" value="552">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MDIMAXIMIZE" id="F:MControl.Win32.WinMsgs.WM_MDIMAXIMIZE" access="Public" contract="Static" literal="true" value="549">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MDINEXT" id="F:MControl.Win32.WinMsgs.WM_MDINEXT" access="Public" contract="Static" literal="true" value="548">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MDIREFRESHMENU" id="F:MControl.Win32.WinMsgs.WM_MDIREFRESHMENU" access="Public" contract="Static" literal="true" value="564">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MDIRESTORE" id="F:MControl.Win32.WinMsgs.WM_MDIRESTORE" access="Public" contract="Static" literal="true" value="547">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MDISETMENU" id="F:MControl.Win32.WinMsgs.WM_MDISETMENU" access="Public" contract="Static" literal="true" value="560">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MDITILE" id="F:MControl.Win32.WinMsgs.WM_MDITILE" access="Public" contract="Static" literal="true" value="550">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MEASUREITEM" id="F:MControl.Win32.WinMsgs.WM_MEASUREITEM" access="Public" contract="Static" literal="true" value="44">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MENUCHAR" id="F:MControl.Win32.WinMsgs.WM_MENUCHAR" access="Public" contract="Static" literal="true" value="288">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MENUCOMMAND" id="F:MControl.Win32.WinMsgs.WM_MENUCOMMAND" access="Public" contract="Static" literal="true" value="294">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MENUDRAG" id="F:MControl.Win32.WinMsgs.WM_MENUDRAG" access="Public" contract="Static" literal="true" value="291">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MENUGETOBJECT" id="F:MControl.Win32.WinMsgs.WM_MENUGETOBJECT" access="Public" contract="Static" literal="true" value="292">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MENURBUTTONUP" id="F:MControl.Win32.WinMsgs.WM_MENURBUTTONUP" access="Public" contract="Static" literal="true" value="290">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MENUSELECT" id="F:MControl.Win32.WinMsgs.WM_MENUSELECT" access="Public" contract="Static" literal="true" value="287">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MOUSEACTIVATE" id="F:MControl.Win32.WinMsgs.WM_MOUSEACTIVATE" access="Public" contract="Static" literal="true" value="33">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MOUSEHOVER" id="F:MControl.Win32.WinMsgs.WM_MOUSEHOVER" access="Public" contract="Static" literal="true" value="673">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MOUSELEAVE" id="F:MControl.Win32.WinMsgs.WM_MOUSELEAVE" access="Public" contract="Static" literal="true" value="675">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MOUSEMOVE" id="F:MControl.Win32.WinMsgs.WM_MOUSEMOVE" access="Public" contract="Static" literal="true" value="512">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MOUSEWHEEL" id="F:MControl.Win32.WinMsgs.WM_MOUSEWHEEL" access="Public" contract="Static" literal="true" value="522">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MOVE" id="F:MControl.Win32.WinMsgs.WM_MOVE" access="Public" contract="Static" literal="true" value="3">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_MOVING" id="F:MControl.Win32.WinMsgs.WM_MOVING" access="Public" contract="Static" literal="true" value="534">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NCACTIVATE" id="F:MControl.Win32.WinMsgs.WM_NCACTIVATE" access="Public" contract="Static" literal="true" value="134">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NCCALCSIZE" id="F:MControl.Win32.WinMsgs.WM_NCCALCSIZE" access="Public" contract="Static" literal="true" value="131">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NCCREATE" id="F:MControl.Win32.WinMsgs.WM_NCCREATE" access="Public" contract="Static" literal="true" value="129">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NCDESTROY" id="F:MControl.Win32.WinMsgs.WM_NCDESTROY" access="Public" contract="Static" literal="true" value="130">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NCHITTEST" id="F:MControl.Win32.WinMsgs.WM_NCHITTEST" access="Public" contract="Static" literal="true" value="132">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NCLBUTTONDBLCLK" id="F:MControl.Win32.WinMsgs.WM_NCLBUTTONDBLCLK" access="Public" contract="Static" literal="true" value="163">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NCLBUTTONDOWN" id="F:MControl.Win32.WinMsgs.WM_NCLBUTTONDOWN" access="Public" contract="Static" literal="true" value="161">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NCLBUTTONUP" id="F:MControl.Win32.WinMsgs.WM_NCLBUTTONUP" access="Public" contract="Static" literal="true" value="162">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NCMBUTTONDBLCLK" id="F:MControl.Win32.WinMsgs.WM_NCMBUTTONDBLCLK" access="Public" contract="Static" literal="true" value="169">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NCMBUTTONDOWN" id="F:MControl.Win32.WinMsgs.WM_NCMBUTTONDOWN" access="Public" contract="Static" literal="true" value="167">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NCMBUTTONUP" id="F:MControl.Win32.WinMsgs.WM_NCMBUTTONUP" access="Public" contract="Static" literal="true" value="168">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NCMOUSEMOVE" id="F:MControl.Win32.WinMsgs.WM_NCMOUSEMOVE" access="Public" contract="Static" literal="true" value="160">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NCPAINT" id="F:MControl.Win32.WinMsgs.WM_NCPAINT" access="Public" contract="Static" literal="true" value="133">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NCRBUTTONDBLCLK" id="F:MControl.Win32.WinMsgs.WM_NCRBUTTONDBLCLK" access="Public" contract="Static" literal="true" value="166">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NCRBUTTONDOWN" id="F:MControl.Win32.WinMsgs.WM_NCRBUTTONDOWN" access="Public" contract="Static" literal="true" value="164">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NCRBUTTONUP" id="F:MControl.Win32.WinMsgs.WM_NCRBUTTONUP" access="Public" contract="Static" literal="true" value="165">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NCXBUTTONDOWN" id="F:MControl.Win32.WinMsgs.WM_NCXBUTTONDOWN" access="Public" contract="Static" literal="true" value="171">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NCXBUTTONUP" id="F:MControl.Win32.WinMsgs.WM_NCXBUTTONUP" access="Public" contract="Static" literal="true" value="172">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NEXTDLGCTL" id="F:MControl.Win32.WinMsgs.WM_NEXTDLGCTL" access="Public" contract="Static" literal="true" value="40">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NEXTMENU" id="F:MControl.Win32.WinMsgs.WM_NEXTMENU" access="Public" contract="Static" literal="true" value="531">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NOTIFY" id="F:MControl.Win32.WinMsgs.WM_NOTIFY" access="Public" contract="Static" literal="true" value="78">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NOTIFYFORMAT" id="F:MControl.Win32.WinMsgs.WM_NOTIFYFORMAT" access="Public" contract="Static" literal="true" value="85">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_NULL" id="F:MControl.Win32.WinMsgs.WM_NULL" access="Public" contract="Static" literal="true" value="0">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_PAINT" id="F:MControl.Win32.WinMsgs.WM_PAINT" access="Public" contract="Static" literal="true" value="15">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_PAINTCLIPBOARD" id="F:MControl.Win32.WinMsgs.WM_PAINTCLIPBOARD" access="Public" contract="Static" literal="true" value="777">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_PAINTICON" id="F:MControl.Win32.WinMsgs.WM_PAINTICON" access="Public" contract="Static" literal="true" value="38">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_PALETTECHANGED" id="F:MControl.Win32.WinMsgs.WM_PALETTECHANGED" access="Public" contract="Static" literal="true" value="785">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_PALETTEISCHANGING" id="F:MControl.Win32.WinMsgs.WM_PALETTEISCHANGING" access="Public" contract="Static" literal="true" value="784">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_PARENTNOTIFY" id="F:MControl.Win32.WinMsgs.WM_PARENTNOTIFY" access="Public" contract="Static" literal="true" value="528">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_PASTE" id="F:MControl.Win32.WinMsgs.WM_PASTE" access="Public" contract="Static" literal="true" value="770">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_PENWINFIRST" id="F:MControl.Win32.WinMsgs.WM_PENWINFIRST" access="Public" contract="Static" literal="true" value="896">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_PENWINLAST" id="F:MControl.Win32.WinMsgs.WM_PENWINLAST" access="Public" contract="Static" literal="true" value="911">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_POWER" id="F:MControl.Win32.WinMsgs.WM_POWER" access="Public" contract="Static" literal="true" value="72">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_PRINT" id="F:MControl.Win32.WinMsgs.WM_PRINT" access="Public" contract="Static" literal="true" value="791">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_PRINTCLIENT" id="F:MControl.Win32.WinMsgs.WM_PRINTCLIENT" access="Public" contract="Static" literal="true" value="792">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_QUERYDRAGICON" id="F:MControl.Win32.WinMsgs.WM_QUERYDRAGICON" access="Public" contract="Static" literal="true" value="55">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_QUERYENDSESSION" id="F:MControl.Win32.WinMsgs.WM_QUERYENDSESSION" access="Public" contract="Static" literal="true" value="17">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_QUERYNEWPALETTE" id="F:MControl.Win32.WinMsgs.WM_QUERYNEWPALETTE" access="Public" contract="Static" literal="true" value="783">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_QUERYOPEN" id="F:MControl.Win32.WinMsgs.WM_QUERYOPEN" access="Public" contract="Static" literal="true" value="19">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_QUEUESYNC" id="F:MControl.Win32.WinMsgs.WM_QUEUESYNC" access="Public" contract="Static" literal="true" value="35">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_QUIT" id="F:MControl.Win32.WinMsgs.WM_QUIT" access="Public" contract="Static" literal="true" value="18">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_RBUTTONDBLCLK" id="F:MControl.Win32.WinMsgs.WM_RBUTTONDBLCLK" access="Public" contract="Static" literal="true" value="518">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_RBUTTONDOWN" id="F:MControl.Win32.WinMsgs.WM_RBUTTONDOWN" access="Public" contract="Static" literal="true" value="516">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_RBUTTONUP" id="F:MControl.Win32.WinMsgs.WM_RBUTTONUP" access="Public" contract="Static" literal="true" value="517">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_RENDERALLFORMATS" id="F:MControl.Win32.WinMsgs.WM_RENDERALLFORMATS" access="Public" contract="Static" literal="true" value="774">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_RENDERFORMAT" id="F:MControl.Win32.WinMsgs.WM_RENDERFORMAT" access="Public" contract="Static" literal="true" value="773">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_SETCURSOR" id="F:MControl.Win32.WinMsgs.WM_SETCURSOR" access="Public" contract="Static" literal="true" value="32">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_SETFOCUS" id="F:MControl.Win32.WinMsgs.WM_SETFOCUS" access="Public" contract="Static" literal="true" value="7">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_SETFONT" id="F:MControl.Win32.WinMsgs.WM_SETFONT" access="Public" contract="Static" literal="true" value="48">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_SETHOTKEY" id="F:MControl.Win32.WinMsgs.WM_SETHOTKEY" access="Public" contract="Static" literal="true" value="50">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_SETICON" id="F:MControl.Win32.WinMsgs.WM_SETICON" access="Public" contract="Static" literal="true" value="128">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_SETREDRAW" id="F:MControl.Win32.WinMsgs.WM_SETREDRAW" access="Public" contract="Static" literal="true" value="11">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_SETTEXT" id="F:MControl.Win32.WinMsgs.WM_SETTEXT" access="Public" contract="Static" literal="true" value="12">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_SETTINGCHANGE" id="F:MControl.Win32.WinMsgs.WM_SETTINGCHANGE" access="Public" contract="Static" literal="true" value="26">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_SHOWWINDOW" id="F:MControl.Win32.WinMsgs.WM_SHOWWINDOW" access="Public" contract="Static" literal="true" value="24">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_SIZE" id="F:MControl.Win32.WinMsgs.WM_SIZE" access="Public" contract="Static" literal="true" value="5">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_SIZECLIPBOARD" id="F:MControl.Win32.WinMsgs.WM_SIZECLIPBOARD" access="Public" contract="Static" literal="true" value="779">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_SIZING" id="F:MControl.Win32.WinMsgs.WM_SIZING" access="Public" contract="Static" literal="true" value="532">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_SPOOLERSTATUS" id="F:MControl.Win32.WinMsgs.WM_SPOOLERSTATUS" access="Public" contract="Static" literal="true" value="42">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_STYLECHANGED" id="F:MControl.Win32.WinMsgs.WM_STYLECHANGED" access="Public" contract="Static" literal="true" value="125">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_STYLECHANGING" id="F:MControl.Win32.WinMsgs.WM_STYLECHANGING" access="Public" contract="Static" literal="true" value="124">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_SYNCPAINT" id="F:MControl.Win32.WinMsgs.WM_SYNCPAINT" access="Public" contract="Static" literal="true" value="136">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_SYSCHAR" id="F:MControl.Win32.WinMsgs.WM_SYSCHAR" access="Public" contract="Static" literal="true" value="262">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_SYSCOLORCHANGE" id="F:MControl.Win32.WinMsgs.WM_SYSCOLORCHANGE" access="Public" contract="Static" literal="true" value="21">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_SYSCOMMAND" id="F:MControl.Win32.WinMsgs.WM_SYSCOMMAND" access="Public" contract="Static" literal="true" value="274">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_SYSDEADCHAR" id="F:MControl.Win32.WinMsgs.WM_SYSDEADCHAR" access="Public" contract="Static" literal="true" value="263">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_SYSKEYDOWN" id="F:MControl.Win32.WinMsgs.WM_SYSKEYDOWN" access="Public" contract="Static" literal="true" value="260">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_SYSKEYUP" id="F:MControl.Win32.WinMsgs.WM_SYSKEYUP" access="Public" contract="Static" literal="true" value="261">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_TCARD" id="F:MControl.Win32.WinMsgs.WM_TCARD" access="Public" contract="Static" literal="true" value="82">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_TIMECHANGE" id="F:MControl.Win32.WinMsgs.WM_TIMECHANGE" access="Public" contract="Static" literal="true" value="30">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_TIMER" id="F:MControl.Win32.WinMsgs.WM_TIMER" access="Public" contract="Static" literal="true" value="275">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_UNDO" id="F:MControl.Win32.WinMsgs.WM_UNDO" access="Public" contract="Static" literal="true" value="772">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_UNINITMENUPOPUP" id="F:MControl.Win32.WinMsgs.WM_UNINITMENUPOPUP" access="Public" contract="Static" literal="true" value="293">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_USER" id="F:MControl.Win32.WinMsgs.WM_USER" access="Public" contract="Static" literal="true" value="1024">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_USERCHANGED" id="F:MControl.Win32.WinMsgs.WM_USERCHANGED" access="Public" contract="Static" literal="true" value="84">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_VKEYTOITEM" id="F:MControl.Win32.WinMsgs.WM_VKEYTOITEM" access="Public" contract="Static" literal="true" value="46">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_VSCROLL" id="F:MControl.Win32.WinMsgs.WM_VSCROLL" access="Public" contract="Static" literal="true" value="277">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_VSCROLLCLIPBOARD" id="F:MControl.Win32.WinMsgs.WM_VSCROLLCLIPBOARD" access="Public" contract="Static" literal="true" value="778">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_WINDOWPOSCHANGED" id="F:MControl.Win32.WinMsgs.WM_WINDOWPOSCHANGED" access="Public" contract="Static" literal="true" value="71">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_WINDOWPOSCHANGING" id="F:MControl.Win32.WinMsgs.WM_WINDOWPOSCHANGING" access="Public" contract="Static" literal="true" value="70">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_WININICHANGE" id="F:MControl.Win32.WinMsgs.WM_WININICHANGE" access="Public" contract="Static" literal="true" value="26">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_XBUTTONDBLCLK" id="F:MControl.Win32.WinMsgs.WM_XBUTTONDBLCLK" access="Public" contract="Static" literal="true" value="525">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_XBUTTONDOWN" id="F:MControl.Win32.WinMsgs.WM_XBUTTONDOWN" access="Public" contract="Static" literal="true" value="523">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="WM_XBUTTONUP" id="F:MControl.Win32.WinMsgs.WM_XBUTTONUP" access="Public" contract="Static" literal="true" value="524">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </class>
        <structure name="BITMAP" id="T:MControl.Win32.BITMAP" access="Public" namespace="MControl.Win32" displayName="BITMAP">
          <field name="bmBits" id="F:MControl.Win32.BITMAP.bmBits" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="bmBitsPixel" id="F:MControl.Win32.BITMAP.bmBitsPixel" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="bmHeight" id="F:MControl.Win32.BITMAP.bmHeight" access="Public" contract="Normal">
            <type name="Int64" id="T:System.Int64" valueType="true" />
          </field>
          <field name="bmPlanes" id="F:MControl.Win32.BITMAP.bmPlanes" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="bmType" id="F:MControl.Win32.BITMAP.bmType" access="Public" contract="Normal">
            <type name="Int64" id="T:System.Int64" valueType="true" />
          </field>
          <field name="bmWidth" id="F:MControl.Win32.BITMAP.bmWidth" access="Public" contract="Normal">
            <type name="Int64" id="T:System.Int64" valueType="true" />
          </field>
          <field name="bmWidthBytes" id="F:MControl.Win32.BITMAP.bmWidthBytes" access="Public" contract="Normal">
            <type name="Int64" id="T:System.Int64" valueType="true" />
          </field>
        </structure>
        <structure name="BITMAPINFO_FLAT" id="T:MControl.Win32.BITMAPINFO_FLAT" access="Public" namespace="MControl.Win32" displayName="BITMAPINFO_FLAT">
          <field name="bmiColors" id="F:MControl.Win32.BITMAPINFO_FLAT.bmiColors" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true">
              <array rank="1" />
            </type>
            <attribute name="MarshalAsAttribute" id="T:System.Runtime.InteropServices.MarshalAsAttribute">
              <argument id="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.ByValArray" />
              <field name="ArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.0" />
              <field name="SizeParamIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" type="System.Int16" value="0" />
              <field name="SizeConst" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" type="System.Int32" value="1024" />
              <field name="IidParameterIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex" type="System.Int32" value="0" />
              <field name="SafeArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" type="System.Runtime.InteropServices.VarEnum" value="VarEnum.VT_EMPTY" />
            </attribute>
          </field>
          <field name="bmiHeader_biBitCount" id="F:MControl.Win32.BITMAPINFO_FLAT.bmiHeader_biBitCount" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="bmiHeader_biClrImportant" id="F:MControl.Win32.BITMAPINFO_FLAT.bmiHeader_biClrImportant" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="bmiHeader_biClrUsed" id="F:MControl.Win32.BITMAPINFO_FLAT.bmiHeader_biClrUsed" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="bmiHeader_biCompression" id="F:MControl.Win32.BITMAPINFO_FLAT.bmiHeader_biCompression" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="bmiHeader_biHeight" id="F:MControl.Win32.BITMAPINFO_FLAT.bmiHeader_biHeight" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="bmiHeader_biPlanes" id="F:MControl.Win32.BITMAPINFO_FLAT.bmiHeader_biPlanes" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="bmiHeader_biSize" id="F:MControl.Win32.BITMAPINFO_FLAT.bmiHeader_biSize" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="bmiHeader_biSizeImage" id="F:MControl.Win32.BITMAPINFO_FLAT.bmiHeader_biSizeImage" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="bmiHeader_biWidth" id="F:MControl.Win32.BITMAPINFO_FLAT.bmiHeader_biWidth" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="bmiHeader_biXPelsPerMeter" id="F:MControl.Win32.BITMAPINFO_FLAT.bmiHeader_biXPelsPerMeter" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="bmiHeader_biYPelsPerMeter" id="F:MControl.Win32.BITMAPINFO_FLAT.bmiHeader_biYPelsPerMeter" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="BLENDFUNCTION" id="T:MControl.Win32.BLENDFUNCTION" access="Public" namespace="MControl.Win32" displayName="BLENDFUNCTION">
          <field name="AlphaFormat" id="F:MControl.Win32.BLENDFUNCTION.AlphaFormat" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true" />
          </field>
          <field name="BlendFlags" id="F:MControl.Win32.BLENDFUNCTION.BlendFlags" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true" />
          </field>
          <field name="BlendOp" id="F:MControl.Win32.BLENDFUNCTION.BlendOp" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true" />
          </field>
          <field name="SourceConstantAlpha" id="F:MControl.Win32.BLENDFUNCTION.SourceConstantAlpha" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true" />
          </field>
        </structure>
        <structure name="CREATESTRUCT" id="T:MControl.Win32.CREATESTRUCT" access="Public" namespace="MControl.Win32" displayName="CREATESTRUCT" />
        <structure name="DLLVERSIONINFO" id="T:MControl.Win32.DLLVERSIONINFO" access="Public" namespace="MControl.Win32" displayName="DLLVERSIONINFO">
          <field name="cbSize" id="F:MControl.Win32.DLLVERSIONINFO.cbSize" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="dwBuildNumber" id="F:MControl.Win32.DLLVERSIONINFO.dwBuildNumber" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="dwMajorVersion" id="F:MControl.Win32.DLLVERSIONINFO.dwMajorVersion" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="dwMinorVersion" id="F:MControl.Win32.DLLVERSIONINFO.dwMinorVersion" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="dwPlatformID" id="F:MControl.Win32.DLLVERSIONINFO.dwPlatformID" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="HD_HITTESTINFO" id="T:MControl.Win32.HD_HITTESTINFO" access="Public" namespace="MControl.Win32" displayName="HD_HITTESTINFO">
          <field name="flags" id="F:MControl.Win32.HD_HITTESTINFO.flags" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="iItem" id="F:MControl.Win32.HD_HITTESTINFO.iItem" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="pt" id="F:MControl.Win32.HD_HITTESTINFO.pt" access="Public" contract="Normal">
            <type name="POINT" id="T:MControl.Win32.POINT" valueType="true" />
          </field>
        </structure>
        <structure name="HDITEM" id="T:MControl.Win32.HDITEM" access="Public" namespace="MControl.Win32" displayName="HDITEM">
          <field name="cchTextMax" id="F:MControl.Win32.HDITEM.cchTextMax" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="cxy" id="F:MControl.Win32.HDITEM.cxy" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="fmt" id="F:MControl.Win32.HDITEM.fmt" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="hbm" id="F:MControl.Win32.HDITEM.hbm" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="iImage" id="F:MControl.Win32.HDITEM.iImage" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="iOrder" id="F:MControl.Win32.HDITEM.iOrder" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="lParam" id="F:MControl.Win32.HDITEM.lParam" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="mask" id="F:MControl.Win32.HDITEM.mask" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="pszText" id="F:MControl.Win32.HDITEM.pszText" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
        </structure>
        <structure name="LogBrush" id="T:MControl.Win32.LogBrush" access="Public" namespace="MControl.Win32" displayName="LogBrush">
          <field name="lbColor" id="F:MControl.Win32.LogBrush.lbColor" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="lbHatch" id="F:MControl.Win32.LogBrush.lbHatch" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="lbStyle" id="F:MControl.Win32.LogBrush.lbStyle" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="LOGBRUSH" id="T:MControl.Win32.LOGBRUSH" access="Public" namespace="MControl.Win32" displayName="LOGBRUSH">
          <field name="lbColor" id="F:MControl.Win32.LOGBRUSH.lbColor" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="lbHatch" id="F:MControl.Win32.LOGBRUSH.lbHatch" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="lbStyle" id="F:MControl.Win32.LOGBRUSH.lbStyle" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="LVITEM" id="T:MControl.Win32.LVITEM" access="Public" namespace="MControl.Win32" displayName="LVITEM">
          <field name="cchTextMax" id="F:MControl.Win32.LVITEM.cchTextMax" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="iImage" id="F:MControl.Win32.LVITEM.iImage" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="iIndent" id="F:MControl.Win32.LVITEM.iIndent" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="iItem" id="F:MControl.Win32.LVITEM.iItem" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="iSubItem" id="F:MControl.Win32.LVITEM.iSubItem" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="lParam" id="F:MControl.Win32.LVITEM.lParam" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="mask" id="F:MControl.Win32.LVITEM.mask" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="pszText" id="F:MControl.Win32.LVITEM.pszText" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="state" id="F:MControl.Win32.LVITEM.state" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="stateMask" id="F:MControl.Win32.LVITEM.stateMask" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
        </structure>
        <structure name="MOUSEHOOKSTRUCT" id="T:MControl.Win32.MOUSEHOOKSTRUCT" access="Public" namespace="MControl.Win32" displayName="MOUSEHOOKSTRUCT">
          <field name="dwExtraInfo" id="F:MControl.Win32.MOUSEHOOKSTRUCT.dwExtraInfo" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="hwnd" id="F:MControl.Win32.MOUSEHOOKSTRUCT.hwnd" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="pt" id="F:MControl.Win32.MOUSEHOOKSTRUCT.pt" access="Public" contract="Normal">
            <type name="POINT" id="T:MControl.Win32.POINT" valueType="true" />
          </field>
          <field name="wHitTestCode" id="F:MControl.Win32.MOUSEHOOKSTRUCT.wHitTestCode" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="MSG" id="T:MControl.Win32.MSG" access="Public" namespace="MControl.Win32" displayName="MSG">
          <field name="hwnd" id="F:MControl.Win32.MSG.hwnd" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="lParam" id="F:MControl.Win32.MSG.lParam" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="message" id="F:MControl.Win32.MSG.message" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="pt_x" id="F:MControl.Win32.MSG.pt_x" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="pt_y" id="F:MControl.Win32.MSG.pt_y" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="time" id="F:MControl.Win32.MSG.time" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="wParam" id="F:MControl.Win32.MSG.wParam" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
        </structure>
        <structure name="NMCUSTOMDRAW" id="T:MControl.Win32.NMCUSTOMDRAW" access="Public" namespace="MControl.Win32" displayName="NMCUSTOMDRAW">
          <field name="dwDrawStage" id="F:MControl.Win32.NMCUSTOMDRAW.dwDrawStage" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="dwItemSpec" id="F:MControl.Win32.NMCUSTOMDRAW.dwItemSpec" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="hdc" id="F:MControl.Win32.NMCUSTOMDRAW.hdc" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="hdr" id="F:MControl.Win32.NMCUSTOMDRAW.hdr" access="Public" contract="Normal">
            <type name="NMHDR" id="T:MControl.Win32.NMHDR" valueType="true" />
          </field>
          <field name="lItemlParam" id="F:MControl.Win32.NMCUSTOMDRAW.lItemlParam" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="rc" id="F:MControl.Win32.NMCUSTOMDRAW.rc" access="Public" contract="Normal">
            <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
          </field>
          <field name="uItemState" id="F:MControl.Win32.NMCUSTOMDRAW.uItemState" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="NMHDR" id="T:MControl.Win32.NMHDR" access="Public" namespace="MControl.Win32" displayName="NMHDR">
          <field name="code" id="F:MControl.Win32.NMHDR.code" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="hwndFrom" id="F:MControl.Win32.NMHDR.hwndFrom" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="idFrom" id="F:MControl.Win32.NMHDR.idFrom" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="NMLVCUSTOMDRAW" id="T:MControl.Win32.NMLVCUSTOMDRAW" access="Public" namespace="MControl.Win32" displayName="NMLVCUSTOMDRAW">
          <field name="clrText" id="F:MControl.Win32.NMLVCUSTOMDRAW.clrText" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="clrTextBk" id="F:MControl.Win32.NMLVCUSTOMDRAW.clrTextBk" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="iSubItem" id="F:MControl.Win32.NMLVCUSTOMDRAW.iSubItem" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="nmcd" id="F:MControl.Win32.NMLVCUSTOMDRAW.nmcd" access="Public" contract="Normal">
            <type name="NMCUSTOMDRAW" id="T:MControl.Win32.NMCUSTOMDRAW" valueType="true" />
          </field>
        </structure>
        <structure name="NMREBARCHEVRON" id="T:MControl.Win32.NMREBARCHEVRON" access="Public" namespace="MControl.Win32" displayName="NMREBARCHEVRON">
          <field name="hdr" id="F:MControl.Win32.NMREBARCHEVRON.hdr" access="Public" contract="Normal">
            <type name="NMHDR" id="T:MControl.Win32.NMHDR" valueType="true" />
          </field>
          <field name="lParam" id="F:MControl.Win32.NMREBARCHEVRON.lParam" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="lParamNM" id="F:MControl.Win32.NMREBARCHEVRON.lParamNM" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="rc" id="F:MControl.Win32.NMREBARCHEVRON.rc" access="Public" contract="Normal">
            <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
          </field>
          <field name="uBand" id="F:MControl.Win32.NMREBARCHEVRON.uBand" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="wID" id="F:MControl.Win32.NMREBARCHEVRON.wID" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="NMTBCUSTOMDRAW" id="T:MControl.Win32.NMTBCUSTOMDRAW" access="Public" namespace="MControl.Win32" displayName="NMTBCUSTOMDRAW">
          <field name="clrBtnFace" id="F:MControl.Win32.NMTBCUSTOMDRAW.clrBtnFace" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="clrBtnHighlight" id="F:MControl.Win32.NMTBCUSTOMDRAW.clrBtnHighlight" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="clrHighlightHotTrack" id="F:MControl.Win32.NMTBCUSTOMDRAW.clrHighlightHotTrack" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="clrMark" id="F:MControl.Win32.NMTBCUSTOMDRAW.clrMark" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="clrText" id="F:MControl.Win32.NMTBCUSTOMDRAW.clrText" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="clrTextHighlight" id="F:MControl.Win32.NMTBCUSTOMDRAW.clrTextHighlight" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="hbrLines" id="F:MControl.Win32.NMTBCUSTOMDRAW.hbrLines" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="hbrMonoDither" id="F:MControl.Win32.NMTBCUSTOMDRAW.hbrMonoDither" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="hpenLines" id="F:MControl.Win32.NMTBCUSTOMDRAW.hpenLines" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="nHLStringBkMode" id="F:MControl.Win32.NMTBCUSTOMDRAW.nHLStringBkMode" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="nStringBkMode" id="F:MControl.Win32.NMTBCUSTOMDRAW.nStringBkMode" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="nmcd" id="F:MControl.Win32.NMTBCUSTOMDRAW.nmcd" access="Public" contract="Normal">
            <type name="NMCUSTOMDRAW" id="T:MControl.Win32.NMCUSTOMDRAW" valueType="true" />
          </field>
          <field name="rcText" id="F:MControl.Win32.NMTBCUSTOMDRAW.rcText" access="Public" contract="Normal">
            <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
          </field>
        </structure>
        <structure name="NMTOOLBAR" id="T:MControl.Win32.NMTOOLBAR" access="Public" namespace="MControl.Win32" displayName="NMTOOLBAR">
          <field name="cchText" id="F:MControl.Win32.NMTOOLBAR.cchText" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="hdr" id="F:MControl.Win32.NMTOOLBAR.hdr" access="Public" contract="Normal">
            <type name="NMHDR" id="T:MControl.Win32.NMHDR" valueType="true" />
          </field>
          <field name="iItem" id="F:MControl.Win32.NMTOOLBAR.iItem" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="pszText" id="F:MControl.Win32.NMTOOLBAR.pszText" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="rcButton" id="F:MControl.Win32.NMTOOLBAR.rcButton" access="Public" contract="Normal">
            <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
          </field>
          <field name="tbButton" id="F:MControl.Win32.NMTOOLBAR.tbButton" access="Public" contract="Normal">
            <type name="TBBUTTON" id="T:MControl.Win32.TBBUTTON" valueType="true" />
          </field>
        </structure>
        <structure name="NMTVCUSTOMDRAW" id="T:MControl.Win32.NMTVCUSTOMDRAW" access="Public" namespace="MControl.Win32" displayName="NMTVCUSTOMDRAW">
          <field name="clrText" id="F:MControl.Win32.NMTVCUSTOMDRAW.clrText" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="clrTextBk" id="F:MControl.Win32.NMTVCUSTOMDRAW.clrTextBk" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="iLevel" id="F:MControl.Win32.NMTVCUSTOMDRAW.iLevel" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="nmcd" id="F:MControl.Win32.NMTVCUSTOMDRAW.nmcd" access="Public" contract="Normal">
            <type name="NMCUSTOMDRAW" id="T:MControl.Win32.NMCUSTOMDRAW" valueType="true" />
          </field>
        </structure>
        <structure name="NOTIFYICONDATA" id="T:MControl.Win32.NOTIFYICONDATA" access="Public" namespace="MControl.Win32" displayName="NOTIFYICONDATA">
          <field name="cbSize" id="F:MControl.Win32.NOTIFYICONDATA.cbSize" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="dwInfoFlags" id="F:MControl.Win32.NOTIFYICONDATA.dwInfoFlags" access="Public" contract="Normal">
            <type name="NotifyInfoFlags" id="T:MControl.Win32.NotifyInfoFlags" valueType="true" />
          </field>
          <field name="dwState" id="F:MControl.Win32.NOTIFYICONDATA.dwState" access="Public" contract="Normal">
            <type name="NotifyState" id="T:MControl.Win32.NotifyState" valueType="true" />
          </field>
          <field name="dwStateMask" id="F:MControl.Win32.NOTIFYICONDATA.dwStateMask" access="Public" contract="Normal">
            <type name="NotifyState" id="T:MControl.Win32.NotifyState" valueType="true" />
          </field>
          <field name="hIcon" id="F:MControl.Win32.NOTIFYICONDATA.hIcon" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="hWnd" id="F:MControl.Win32.NOTIFYICONDATA.hWnd" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="szInfo" id="F:MControl.Win32.NOTIFYICONDATA.szInfo" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <attribute name="MarshalAsAttribute" id="T:System.Runtime.InteropServices.MarshalAsAttribute">
              <argument id="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.ByValTStr" />
              <field name="ArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.0" />
              <field name="SizeParamIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" type="System.Int16" value="0" />
              <field name="SizeConst" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" type="System.Int32" value="256" />
              <field name="IidParameterIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex" type="System.Int32" value="0" />
              <field name="SafeArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" type="System.Runtime.InteropServices.VarEnum" value="VarEnum.VT_EMPTY" />
            </attribute>
          </field>
          <field name="szInfoTitle" id="F:MControl.Win32.NOTIFYICONDATA.szInfoTitle" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <attribute name="MarshalAsAttribute" id="T:System.Runtime.InteropServices.MarshalAsAttribute">
              <argument id="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.ByValTStr" />
              <field name="ArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.0" />
              <field name="SizeParamIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" type="System.Int16" value="0" />
              <field name="SizeConst" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" type="System.Int32" value="64" />
              <field name="IidParameterIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex" type="System.Int32" value="0" />
              <field name="SafeArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" type="System.Runtime.InteropServices.VarEnum" value="VarEnum.VT_EMPTY" />
            </attribute>
          </field>
          <field name="szTip" id="F:MControl.Win32.NOTIFYICONDATA.szTip" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <attribute name="MarshalAsAttribute" id="T:System.Runtime.InteropServices.MarshalAsAttribute">
              <argument id="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.ByValTStr" />
              <field name="ArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.0" />
              <field name="SizeParamIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" type="System.Int16" value="0" />
              <field name="SizeConst" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" type="System.Int32" value="128" />
              <field name="IidParameterIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex" type="System.Int32" value="0" />
              <field name="SafeArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" type="System.Runtime.InteropServices.VarEnum" value="VarEnum.VT_EMPTY" />
            </attribute>
          </field>
          <field name="uCallbackMessage" id="F:MControl.Win32.NOTIFYICONDATA.uCallbackMessage" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="uFlags" id="F:MControl.Win32.NOTIFYICONDATA.uFlags" access="Public" contract="Normal">
            <type name="NotifyFlags" id="T:MControl.Win32.NotifyFlags" valueType="true" />
          </field>
          <field name="uID" id="F:MControl.Win32.NOTIFYICONDATA.uID" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="uTimeoutOrVersion" id="F:MControl.Win32.NOTIFYICONDATA.uTimeoutOrVersion" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
        </structure>
        <structure name="PAINTSTRUCT" id="T:MControl.Win32.PAINTSTRUCT" access="Public" namespace="MControl.Win32" displayName="PAINTSTRUCT">
          <field name="Reserved1" id="F:MControl.Win32.PAINTSTRUCT.Reserved1" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="Reserved2" id="F:MControl.Win32.PAINTSTRUCT.Reserved2" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="Reserved3" id="F:MControl.Win32.PAINTSTRUCT.Reserved3" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="Reserved4" id="F:MControl.Win32.PAINTSTRUCT.Reserved4" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="Reserved5" id="F:MControl.Win32.PAINTSTRUCT.Reserved5" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="Reserved6" id="F:MControl.Win32.PAINTSTRUCT.Reserved6" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="Reserved7" id="F:MControl.Win32.PAINTSTRUCT.Reserved7" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="Reserved8" id="F:MControl.Win32.PAINTSTRUCT.Reserved8" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="fErase" id="F:MControl.Win32.PAINTSTRUCT.fErase" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="fIncUpdate" id="F:MControl.Win32.PAINTSTRUCT.fIncUpdate" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="fRestore" id="F:MControl.Win32.PAINTSTRUCT.fRestore" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="hdc" id="F:MControl.Win32.PAINTSTRUCT.hdc" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="rcPaint" id="F:MControl.Win32.PAINTSTRUCT.rcPaint" access="Public" contract="Normal">
            <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
          </field>
        </structure>
        <structure name="PALETTEENTRY" id="T:MControl.Win32.PALETTEENTRY" access="Public" namespace="MControl.Win32" displayName="PALETTEENTRY">
          <field name="peBlue" id="F:MControl.Win32.PALETTEENTRY.peBlue" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true" />
          </field>
          <field name="peFlags" id="F:MControl.Win32.PALETTEENTRY.peFlags" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true" />
          </field>
          <field name="peGreen" id="F:MControl.Win32.PALETTEENTRY.peGreen" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true" />
          </field>
          <field name="peRed" id="F:MControl.Win32.PALETTEENTRY.peRed" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true" />
          </field>
        </structure>
        <structure name="PARAFORMAT2" id="T:MControl.Win32.PARAFORMAT2" access="Public" namespace="MControl.Win32" displayName="PARAFORMAT2">
          <field name="bLineSpacingRule" id="F:MControl.Win32.PARAFORMAT2.bLineSpacingRule" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true" />
          </field>
          <field name="bOutlineLevel" id="F:MControl.Win32.PARAFORMAT2.bOutlineLevel" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true" />
          </field>
          <field name="cTabCount" id="F:MControl.Win32.PARAFORMAT2.cTabCount" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="cbSize" id="F:MControl.Win32.PARAFORMAT2.cbSize" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="dwMask" id="F:MControl.Win32.PARAFORMAT2.dwMask" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="dxOffset" id="F:MControl.Win32.PARAFORMAT2.dxOffset" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="dxRightIndent" id="F:MControl.Win32.PARAFORMAT2.dxRightIndent" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="dxStartIndent" id="F:MControl.Win32.PARAFORMAT2.dxStartIndent" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="dyLineSpacing" id="F:MControl.Win32.PARAFORMAT2.dyLineSpacing" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="dySpaceAfter" id="F:MControl.Win32.PARAFORMAT2.dySpaceAfter" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="dySpaceBefore" id="F:MControl.Win32.PARAFORMAT2.dySpaceBefore" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="rgxTabs" id="F:MControl.Win32.PARAFORMAT2.rgxTabs" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true">
              <array rank="1" />
            </type>
            <attribute name="MarshalAsAttribute" id="T:System.Runtime.InteropServices.MarshalAsAttribute">
              <argument id="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.ByValArray" />
              <field name="ArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.0" />
              <field name="SizeParamIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" type="System.Int16" value="0" />
              <field name="SizeConst" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" type="System.Int32" value="32" />
              <field name="IidParameterIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex" type="System.Int32" value="0" />
              <field name="SafeArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" type="System.Runtime.InteropServices.VarEnum" value="VarEnum.VT_EMPTY" />
            </attribute>
          </field>
          <field name="sStyle" id="F:MControl.Win32.PARAFORMAT2.sStyle" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="wAlignment" id="F:MControl.Win32.PARAFORMAT2.wAlignment" access="Public" contract="Normal">
            <type name="UInt16" id="T:System.UInt16" valueType="true" />
          </field>
          <field name="wBorderSpace" id="F:MControl.Win32.PARAFORMAT2.wBorderSpace" access="Public" contract="Normal">
            <type name="UInt16" id="T:System.UInt16" valueType="true" />
          </field>
          <field name="wBorderWidth" id="F:MControl.Win32.PARAFORMAT2.wBorderWidth" access="Public" contract="Normal">
            <type name="UInt16" id="T:System.UInt16" valueType="true" />
          </field>
          <field name="wBorders" id="F:MControl.Win32.PARAFORMAT2.wBorders" access="Public" contract="Normal">
            <type name="UInt16" id="T:System.UInt16" valueType="true" />
          </field>
          <field name="wEffects" id="F:MControl.Win32.PARAFORMAT2.wEffects" access="Public" contract="Normal">
            <type name="UInt16" id="T:System.UInt16" valueType="true" />
          </field>
          <field name="wNumbering" id="F:MControl.Win32.PARAFORMAT2.wNumbering" access="Public" contract="Normal">
            <type name="UInt16" id="T:System.UInt16" valueType="true" />
          </field>
          <field name="wNumberingStart" id="F:MControl.Win32.PARAFORMAT2.wNumberingStart" access="Public" contract="Normal">
            <type name="UInt16" id="T:System.UInt16" valueType="true" />
          </field>
          <field name="wNumberingStyle" id="F:MControl.Win32.PARAFORMAT2.wNumberingStyle" access="Public" contract="Normal">
            <type name="UInt16" id="T:System.UInt16" valueType="true" />
          </field>
          <field name="wNumberingTab" id="F:MControl.Win32.PARAFORMAT2.wNumberingTab" access="Public" contract="Normal">
            <type name="UInt16" id="T:System.UInt16" valueType="true" />
          </field>
          <field name="wShadingStyle" id="F:MControl.Win32.PARAFORMAT2.wShadingStyle" access="Public" contract="Normal">
            <type name="UInt16" id="T:System.UInt16" valueType="true" />
          </field>
          <field name="wShadingWeight" id="F:MControl.Win32.PARAFORMAT2.wShadingWeight" access="Public" contract="Normal">
            <type name="UInt16" id="T:System.UInt16" valueType="true" />
          </field>
        </structure>
        <structure name="POINT" id="T:MControl.Win32.POINT" access="Public" namespace="MControl.Win32" displayName="POINT">
          <constructor name=".ctor" id="M:MControl.Win32.POINT.#ctor(System.Int32,System.Int32)" access="Public" contract="Normal">
            <parameter name="x">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="y">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </constructor>
          <field name="x" id="F:MControl.Win32.POINT.x" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="y" id="F:MControl.Win32.POINT.y" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="POINTSTRUCT" id="T:MControl.Win32.POINTSTRUCT" access="Public" namespace="MControl.Win32" displayName="POINTSTRUCT">
          <constructor name=".ctor" id="M:MControl.Win32.POINTSTRUCT.#ctor(System.Int32,System.Int32)" access="Public" contract="Normal">
            <parameter name="x">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="y">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </constructor>
          <field name="x" id="F:MControl.Win32.POINTSTRUCT.x" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="y" id="F:MControl.Win32.POINTSTRUCT.y" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="REBARBANDINFO" id="T:MControl.Win32.REBARBANDINFO" access="Public" namespace="MControl.Win32" displayName="REBARBANDINFO">
          <field name="cbSize" id="F:MControl.Win32.REBARBANDINFO.cbSize" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="cch" id="F:MControl.Win32.REBARBANDINFO.cch" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="clrBack" id="F:MControl.Win32.REBARBANDINFO.clrBack" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="clrFore" id="F:MControl.Win32.REBARBANDINFO.clrFore" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="cx" id="F:MControl.Win32.REBARBANDINFO.cx" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="cxHeader" id="F:MControl.Win32.REBARBANDINFO.cxHeader" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="cxIdeal" id="F:MControl.Win32.REBARBANDINFO.cxIdeal" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="cxMinChild" id="F:MControl.Win32.REBARBANDINFO.cxMinChild" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="cyChild" id="F:MControl.Win32.REBARBANDINFO.cyChild" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="cyIntegral" id="F:MControl.Win32.REBARBANDINFO.cyIntegral" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="cyMaxChild" id="F:MControl.Win32.REBARBANDINFO.cyMaxChild" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="cyMinChild" id="F:MControl.Win32.REBARBANDINFO.cyMinChild" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="fMask" id="F:MControl.Win32.REBARBANDINFO.fMask" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="fStyle" id="F:MControl.Win32.REBARBANDINFO.fStyle" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="hbmBack" id="F:MControl.Win32.REBARBANDINFO.hbmBack" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="hwndChild" id="F:MControl.Win32.REBARBANDINFO.hwndChild" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="iImage" id="F:MControl.Win32.REBARBANDINFO.iImage" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="lParam" id="F:MControl.Win32.REBARBANDINFO.lParam" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="lpText" id="F:MControl.Win32.REBARBANDINFO.lpText" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="wID" id="F:MControl.Win32.REBARBANDINFO.wID" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="Rect" id="T:MControl.Win32.Rect" access="Public" namespace="MControl.Win32" displayName="Rect">
          <field name="Bottom" id="F:MControl.Win32.Rect.Bottom" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="Left" id="F:MControl.Win32.Rect.Left" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="Right" id="F:MControl.Win32.Rect.Right" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="Top" id="F:MControl.Win32.Rect.Top" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="RECT" id="T:MControl.Win32.RECT" access="Public" namespace="MControl.Win32" displayName="RECT">
          <constructor name=".ctor" id="M:MControl.Win32.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)" access="Public" contract="Normal">
            <parameter name="left">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="top">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="right">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="bottom">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </constructor>
          <field name="bottom" id="F:MControl.Win32.RECT.bottom" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="left" id="F:MControl.Win32.RECT.left" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="right" id="F:MControl.Win32.RECT.right" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="top" id="F:MControl.Win32.RECT.top" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <method name="FromXYWH" id="M:MControl.Win32.RECT.FromXYWH(System.Int32,System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
            <parameter name="x">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="y">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="width">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="height">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <operator name="op_Implicit" id="M:MControl.Win32.RECT.op_Implicit(MControl.Win32.RECT)~System.Drawing.Rectangle" access="Public" contract="Static">
            <type name="Rectangle" id="T:System.Drawing.Rectangle" valueType="true" />
            <parameter name="rect">
              <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
            </parameter>
          </operator>
        </structure>
        <structure name="RGBQUAD" id="T:MControl.Win32.RGBQUAD" access="Public" namespace="MControl.Win32" displayName="RGBQUAD">
          <field name="rgbBlue" id="F:MControl.Win32.RGBQUAD.rgbBlue" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true" />
          </field>
          <field name="rgbGreen" id="F:MControl.Win32.RGBQUAD.rgbGreen" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true" />
          </field>
          <field name="rgbRed" id="F:MControl.Win32.RGBQUAD.rgbRed" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true" />
          </field>
          <field name="rgbReserved" id="F:MControl.Win32.RGBQUAD.rgbReserved" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true" />
          </field>
        </structure>
        <structure name="SCROLLINFO" id="T:MControl.Win32.SCROLLINFO" access="Public" namespace="MControl.Win32" displayName="SCROLLINFO">
          <field name="cbSize" id="F:MControl.Win32.SCROLLINFO.cbSize" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="fMask" id="F:MControl.Win32.SCROLLINFO.fMask" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="nMax" id="F:MControl.Win32.SCROLLINFO.nMax" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="nMin" id="F:MControl.Win32.SCROLLINFO.nMin" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="nPage" id="F:MControl.Win32.SCROLLINFO.nPage" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="nPos" id="F:MControl.Win32.SCROLLINFO.nPos" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="nTrackPos" id="F:MControl.Win32.SCROLLINFO.nTrackPos" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="SIZE" id="T:MControl.Win32.SIZE" access="Public" namespace="MControl.Win32" displayName="SIZE">
          <constructor name=".ctor" id="M:MControl.Win32.SIZE.#ctor(System.Int32,System.Int32)" access="Public" contract="Normal">
            <parameter name="cx">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="cy">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </constructor>
          <field name="cx" id="F:MControl.Win32.SIZE.cx" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="cy" id="F:MControl.Win32.SIZE.cy" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="STRINGBUFFER" id="T:MControl.Win32.STRINGBUFFER" access="Public" namespace="MControl.Win32" displayName="STRINGBUFFER">
          <field name="szText" id="F:MControl.Win32.STRINGBUFFER.szText" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <attribute name="MarshalAsAttribute" id="T:System.Runtime.InteropServices.MarshalAsAttribute">
              <argument id="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.ByValTStr" />
              <field name="ArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.0" />
              <field name="SizeParamIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" type="System.Int16" value="0" />
              <field name="SizeConst" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" type="System.Int32" value="512" />
              <field name="IidParameterIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex" type="System.Int32" value="0" />
              <field name="SafeArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" type="System.Runtime.InteropServices.VarEnum" value="VarEnum.VT_EMPTY" />
            </attribute>
          </field>
        </structure>
        <structure name="TBBUTTON" id="T:MControl.Win32.TBBUTTON" access="Public" namespace="MControl.Win32" displayName="TBBUTTON">
          <field name="bReserved0" id="F:MControl.Win32.TBBUTTON.bReserved0" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true" />
          </field>
          <field name="bReserved1" id="F:MControl.Win32.TBBUTTON.bReserved1" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true" />
          </field>
          <field name="dwData" id="F:MControl.Win32.TBBUTTON.dwData" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="fsState" id="F:MControl.Win32.TBBUTTON.fsState" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true" />
          </field>
          <field name="fsStyle" id="F:MControl.Win32.TBBUTTON.fsStyle" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true" />
          </field>
          <field name="iBitmap" id="F:MControl.Win32.TBBUTTON.iBitmap" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="iString" id="F:MControl.Win32.TBBUTTON.iString" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="idCommand" id="F:MControl.Win32.TBBUTTON.idCommand" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="TBBUTTONINFO" id="T:MControl.Win32.TBBUTTONINFO" access="Public" namespace="MControl.Win32" displayName="TBBUTTONINFO">
          <field name="cbSize" id="F:MControl.Win32.TBBUTTONINFO.cbSize" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="cchText" id="F:MControl.Win32.TBBUTTONINFO.cchText" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="cx" id="F:MControl.Win32.TBBUTTONINFO.cx" access="Public" contract="Normal">
            <type name="Int16" id="T:System.Int16" valueType="true" />
          </field>
          <field name="dwMask" id="F:MControl.Win32.TBBUTTONINFO.dwMask" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="fsState" id="F:MControl.Win32.TBBUTTONINFO.fsState" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true" />
          </field>
          <field name="fsStyle" id="F:MControl.Win32.TBBUTTONINFO.fsStyle" access="Public" contract="Normal">
            <type name="Byte" id="T:System.Byte" valueType="true" />
          </field>
          <field name="iImage" id="F:MControl.Win32.TBBUTTONINFO.iImage" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="idCommand" id="F:MControl.Win32.TBBUTTONINFO.idCommand" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="lParam" id="F:MControl.Win32.TBBUTTONINFO.lParam" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="pszText" id="F:MControl.Win32.TBBUTTONINFO.pszText" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
        </structure>
        <structure name="TOOLTIPTEXT" id="T:MControl.Win32.TOOLTIPTEXT" access="Public" namespace="MControl.Win32" displayName="TOOLTIPTEXT">
          <field name="hdr" id="F:MControl.Win32.TOOLTIPTEXT.hdr" access="Public" contract="Normal">
            <type name="NMHDR" id="T:MControl.Win32.NMHDR" valueType="true" />
          </field>
          <field name="hinst" id="F:MControl.Win32.TOOLTIPTEXT.hinst" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="lpszText" id="F:MControl.Win32.TOOLTIPTEXT.lpszText" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="szText" id="F:MControl.Win32.TOOLTIPTEXT.szText" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <attribute name="MarshalAsAttribute" id="T:System.Runtime.InteropServices.MarshalAsAttribute">
              <argument id="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.ByValTStr" />
              <field name="ArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.0" />
              <field name="SizeParamIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" type="System.Int16" value="0" />
              <field name="SizeConst" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" type="System.Int32" value="80" />
              <field name="IidParameterIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex" type="System.Int32" value="0" />
              <field name="SafeArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" type="System.Runtime.InteropServices.VarEnum" value="VarEnum.VT_EMPTY" />
            </attribute>
          </field>
          <field name="uFlags" id="F:MControl.Win32.TOOLTIPTEXT.uFlags" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="TOOLTIPTEXTA" id="T:MControl.Win32.TOOLTIPTEXTA" access="Public" namespace="MControl.Win32" displayName="TOOLTIPTEXTA">
          <field name="hdr" id="F:MControl.Win32.TOOLTIPTEXTA.hdr" access="Public" contract="Normal">
            <type name="NMHDR" id="T:MControl.Win32.NMHDR" valueType="true" />
          </field>
          <field name="hinst" id="F:MControl.Win32.TOOLTIPTEXTA.hinst" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="lpszText" id="F:MControl.Win32.TOOLTIPTEXTA.lpszText" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="szText" id="F:MControl.Win32.TOOLTIPTEXTA.szText" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <attribute name="MarshalAsAttribute" id="T:System.Runtime.InteropServices.MarshalAsAttribute">
              <argument id="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.ByValTStr" />
              <field name="ArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" type="System.Runtime.InteropServices.UnmanagedType" value="UnmanagedType.0" />
              <field name="SizeParamIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" type="System.Int16" value="0" />
              <field name="SizeConst" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" type="System.Int32" value="80" />
              <field name="IidParameterIndex" id="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex" type="System.Int32" value="0" />
              <field name="SafeArraySubType" id="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" type="System.Runtime.InteropServices.VarEnum" value="VarEnum.VT_EMPTY" />
            </attribute>
          </field>
          <field name="uFlags" id="F:MControl.Win32.TOOLTIPTEXTA.uFlags" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="TRACKMOUSEEVENTS" id="T:MControl.Win32.TRACKMOUSEEVENTS" access="Public" namespace="MControl.Win32" displayName="TRACKMOUSEEVENTS">
          <field name="cbSize" id="F:MControl.Win32.TRACKMOUSEEVENTS.cbSize" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="dwFlags" id="F:MControl.Win32.TRACKMOUSEEVENTS.dwFlags" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="dwHoverTime" id="F:MControl.Win32.TRACKMOUSEEVENTS.dwHoverTime" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="hWnd" id="F:MControl.Win32.TRACKMOUSEEVENTS.hWnd" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
        </structure>
        <structure name="TVITEM" id="T:MControl.Win32.TVITEM" access="Public" namespace="MControl.Win32" displayName="TVITEM">
          <field name="cChildren" id="F:MControl.Win32.TVITEM.cChildren" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="cchTextMax" id="F:MControl.Win32.TVITEM.cchTextMax" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="hItem" id="F:MControl.Win32.TVITEM.hItem" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="iImage" id="F:MControl.Win32.TVITEM.iImage" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="iSelectedImage" id="F:MControl.Win32.TVITEM.iSelectedImage" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="lParam" id="F:MControl.Win32.TVITEM.lParam" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="mask" id="F:MControl.Win32.TVITEM.mask" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="pszText" id="F:MControl.Win32.TVITEM.pszText" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="state" id="F:MControl.Win32.TVITEM.state" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="stateMask" id="F:MControl.Win32.TVITEM.stateMask" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
        </structure>
        <structure name="TVITEMEX" id="T:MControl.Win32.TVITEMEX" access="Public" namespace="MControl.Win32" displayName="TVITEMEX">
          <field name="cChildren" id="F:MControl.Win32.TVITEMEX.cChildren" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="cchTextMax" id="F:MControl.Win32.TVITEMEX.cchTextMax" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="hItem" id="F:MControl.Win32.TVITEMEX.hItem" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="iImage" id="F:MControl.Win32.TVITEMEX.iImage" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="iIntegral" id="F:MControl.Win32.TVITEMEX.iIntegral" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="iSelectedImage" id="F:MControl.Win32.TVITEMEX.iSelectedImage" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="lParam" id="F:MControl.Win32.TVITEMEX.lParam" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="mask" id="F:MControl.Win32.TVITEMEX.mask" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="pszText" id="F:MControl.Win32.TVITEMEX.pszText" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </field>
          <field name="state" id="F:MControl.Win32.TVITEMEX.state" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="stateMask" id="F:MControl.Win32.TVITEMEX.stateMask" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="UDACCEL" id="T:MControl.Win32.UDACCEL" access="Public" namespace="MControl.Win32" displayName="UDACCEL">
          <field name="nInc" id="F:MControl.Win32.UDACCEL.nInc" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="nSec" id="F:MControl.Win32.UDACCEL.nSec" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
        </structure>
        <structure name="WINDOWPLACEMENT" id="T:MControl.Win32.WINDOWPLACEMENT" access="Public" namespace="MControl.Win32" displayName="WINDOWPLACEMENT">
          <field name="flags" id="F:MControl.Win32.WINDOWPLACEMENT.flags" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="length" id="F:MControl.Win32.WINDOWPLACEMENT.length" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
          <field name="ptMaxPosition" id="F:MControl.Win32.WINDOWPLACEMENT.ptMaxPosition" access="Public" contract="Normal">
            <type name="POINT" id="T:MControl.Win32.POINT" valueType="true" />
          </field>
          <field name="ptMinPosition" id="F:MControl.Win32.WINDOWPLACEMENT.ptMinPosition" access="Public" contract="Normal">
            <type name="POINT" id="T:MControl.Win32.POINT" valueType="true" />
          </field>
          <field name="rcNormalPosition" id="F:MControl.Win32.WINDOWPLACEMENT.rcNormalPosition" access="Public" contract="Normal">
            <type name="RECT" id="T:MControl.Win32.RECT" valueType="true" />
          </field>
          <field name="showCmd" id="F:MControl.Win32.WINDOWPLACEMENT.showCmd" access="Public" contract="Normal">
            <type name="UInt32" id="T:System.UInt32" valueType="true" />
          </field>
        </structure>
        <structure name="WinMethods.NMHDR" id="T:MControl.Win32.WinMethods.NMHDR" access="NestedPublic" namespace="MControl.Win32" displayName="WinMethods.NMHDR" declaringType="WinMethods">
          <field name="code" id="F:MControl.Win32.WinMethods.NMHDR.code" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="hwndFrom" id="F:MControl.Win32.WinMethods.NMHDR.hwndFrom" access="Public" contract="Normal">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </field>
          <field name="idFrom" id="F:MControl.Win32.WinMethods.NMHDR.idFrom" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
        </structure>
        <structure name="WinMethods.RECT" id="T:MControl.Win32.WinMethods.RECT" access="NestedPublic" namespace="MControl.Win32" displayName="WinMethods.RECT" declaringType="WinMethods">
          <constructor name=".ctor" id="M:MControl.Win32.WinMethods.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)" access="Public" contract="Normal">
            <parameter name="left">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="top">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="right">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="bottom">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </constructor>
          <field name="bottom" id="F:MControl.Win32.WinMethods.RECT.bottom" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="left" id="F:MControl.Win32.WinMethods.RECT.left" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="right" id="F:MControl.Win32.WinMethods.RECT.right" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <field name="top" id="F:MControl.Win32.WinMethods.RECT.top" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </field>
          <method name="FromXYWH" id="M:MControl.Win32.WinMethods.RECT.FromXYWH(System.Int32,System.Int32,System.Int32,System.Int32)" access="Public" contract="Static">
            <type name="WinMethods.RECT" id="T:MControl.Win32.WinMethods.RECT" valueType="true" />
            <parameter name="x">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="y">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="width">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="height">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
        </structure>
        <enumeration name="ActivateState" id="T:MControl.Win32.ActivateState" displayName="ActivateState" namespace="MControl.Win32" access="Public">
          <field name="WA_INACTIVE" id="F:MControl.Win32.ActivateState.WA_INACTIVE" value="0" />
          <field name="WA_ACTIVE" id="F:MControl.Win32.ActivateState.WA_ACTIVE" value="1" />
          <field name="WA_CLICKACTIVE" id="F:MControl.Win32.ActivateState.WA_CLICKACTIVE" value="2" />
        </enumeration>
        <enumeration name="AlphaFlags" id="T:MControl.Win32.AlphaFlags" displayName="AlphaFlags" namespace="MControl.Win32" access="Public" baseTypeId="T:System.Byte">
          <field name="AC_SRC_OVER" id="F:MControl.Win32.AlphaFlags.AC_SRC_OVER" value="0" />
          <field name="AC_SRC_ALPHA" id="F:MControl.Win32.AlphaFlags.AC_SRC_ALPHA" value="1" />
        </enumeration>
        <enumeration name="AnimateFlags" id="T:MControl.Win32.AnimateFlags" displayName="AnimateFlags" namespace="MControl.Win32" access="Public">
          <field name="AW_HOR_POSITIVE" id="F:MControl.Win32.AnimateFlags.AW_HOR_POSITIVE" value="1" />
          <field name="AW_HOR_NEGATIVE" id="F:MControl.Win32.AnimateFlags.AW_HOR_NEGATIVE" value="2" />
          <field name="AW_VER_POSITIVE" id="F:MControl.Win32.AnimateFlags.AW_VER_POSITIVE" value="4" />
          <field name="AW_VER_NEGATIVE" id="F:MControl.Win32.AnimateFlags.AW_VER_NEGATIVE" value="8" />
          <field name="AW_CENTER" id="F:MControl.Win32.AnimateFlags.AW_CENTER" value="16" />
          <field name="AW_HIDE" id="F:MControl.Win32.AnimateFlags.AW_HIDE" value="65536" />
          <field name="AW_ACTIVATE" id="F:MControl.Win32.AnimateFlags.AW_ACTIVATE" value="131072" />
          <field name="AW_SLIDE" id="F:MControl.Win32.AnimateFlags.AW_SLIDE" value="262144" />
          <field name="AW_BLEND" id="F:MControl.Win32.AnimateFlags.AW_BLEND" value="524288" />
          <field name="AW_System" id="F:MControl.Win32.AnimateFlags.AW_System" value="1048576" />
          <field name="AW_SlideCenter" id="F:MControl.Win32.AnimateFlags.AW_SlideCenter" value="262160" />
          <field name="AW_HorVerPositive" id="F:MControl.Win32.AnimateFlags.AW_HorVerPositive" value="262149" />
          <field name="AW_HorVerNegative" id="F:MControl.Win32.AnimateFlags.AW_HorVerNegative" value="262154" />
          <field name="AW_HorPosVerNegative" id="F:MControl.Win32.AnimateFlags.AW_HorPosVerNegative" value="262153" />
          <field name="AW_HorNegVerPositive" id="F:MControl.Win32.AnimateFlags.AW_HorNegVerPositive" value="262150" />
        </enumeration>
        <enumeration name="BackgroundMode" id="T:MControl.Win32.BackgroundMode" displayName="BackgroundMode" namespace="MControl.Win32" access="Public">
          <field name="TRANSPARENT" id="F:MControl.Win32.BackgroundMode.TRANSPARENT" value="1" />
          <field name="OPAQUE" id="F:MControl.Win32.BackgroundMode.OPAQUE" value="2" />
        </enumeration>
        <enumeration name="BrushStyles" id="T:MControl.Win32.BrushStyles" displayName="BrushStyles" namespace="MControl.Win32" access="Public">
          <field name="BS_SOLID" id="F:MControl.Win32.BrushStyles.BS_SOLID" value="0" />
          <field name="BS_NULL" id="F:MControl.Win32.BrushStyles.BS_NULL" value="1" />
          <field name="BS_HOLLOW" id="F:MControl.Win32.BrushStyles.BS_HOLLOW" value="1" />
          <field name="BS_HATCHED" id="F:MControl.Win32.BrushStyles.BS_HATCHED" value="2" />
          <field name="BS_PATTERN" id="F:MControl.Win32.BrushStyles.BS_PATTERN" value="3" />
          <field name="BS_INDEXED" id="F:MControl.Win32.BrushStyles.BS_INDEXED" value="4" />
          <field name="BS_DIBPATTERN" id="F:MControl.Win32.BrushStyles.BS_DIBPATTERN" value="5" />
          <field name="BS_DIBPATTERNPT" id="F:MControl.Win32.BrushStyles.BS_DIBPATTERNPT" value="6" />
          <field name="BS_PATTERN8X8" id="F:MControl.Win32.BrushStyles.BS_PATTERN8X8" value="7" />
          <field name="BS_DIBPATTERN8X8" id="F:MControl.Win32.BrushStyles.BS_DIBPATTERN8X8" value="8" />
          <field name="BS_MONOPATTERN" id="F:MControl.Win32.BrushStyles.BS_MONOPATTERN" value="9" />
        </enumeration>
        <enumeration name="ClipboardFormats" id="T:MControl.Win32.ClipboardFormats" displayName="ClipboardFormats" namespace="MControl.Win32" access="Public" baseTypeId="T:System.UInt32">
          <field name="CF_TEXT" id="F:MControl.Win32.ClipboardFormats.CF_TEXT" value="1" />
          <field name="CF_BITMAP" id="F:MControl.Win32.ClipboardFormats.CF_BITMAP" value="2" />
          <field name="CF_METAFILEPICT" id="F:MControl.Win32.ClipboardFormats.CF_METAFILEPICT" value="3" />
          <field name="CF_SYLK" id="F:MControl.Win32.ClipboardFormats.CF_SYLK" value="4" />
          <field name="CF_DIF" id="F:MControl.Win32.ClipboardFormats.CF_DIF" value="5" />
          <field name="CF_TIFF" id="F:MControl.Win32.ClipboardFormats.CF_TIFF" value="6" />
          <field name="CF_OEMTEXT" id="F:MControl.Win32.ClipboardFormats.CF_OEMTEXT" value="7" />
          <field name="CF_DIB" id="F:MControl.Win32.ClipboardFormats.CF_DIB" value="8" />
          <field name="CF_PALETTE" id="F:MControl.Win32.ClipboardFormats.CF_PALETTE" value="9" />
          <field name="CF_PENDATA" id="F:MControl.Win32.ClipboardFormats.CF_PENDATA" value="10" />
          <field name="CF_RIFF" id="F:MControl.Win32.ClipboardFormats.CF_RIFF" value="11" />
          <field name="CF_WAVE" id="F:MControl.Win32.ClipboardFormats.CF_WAVE" value="12" />
          <field name="CF_UNICODETEXT" id="F:MControl.Win32.ClipboardFormats.CF_UNICODETEXT" value="13" />
          <field name="CF_ENHMETAFILE" id="F:MControl.Win32.ClipboardFormats.CF_ENHMETAFILE" value="14" />
          <field name="CF_HDROP" id="F:MControl.Win32.ClipboardFormats.CF_HDROP" value="15" />
          <field name="CF_LOCALE" id="F:MControl.Win32.ClipboardFormats.CF_LOCALE" value="16" />
          <field name="CF_MAX" id="F:MControl.Win32.ClipboardFormats.CF_MAX" value="17" />
          <field name="CF_OWNERDISPLAY" id="F:MControl.Win32.ClipboardFormats.CF_OWNERDISPLAY" value="128" />
          <field name="CF_DSPTEXT" id="F:MControl.Win32.ClipboardFormats.CF_DSPTEXT" value="129" />
          <field name="CF_DSPBITMAP" id="F:MControl.Win32.ClipboardFormats.CF_DSPBITMAP" value="130" />
          <field name="CF_DSPMETAFILEPICT" id="F:MControl.Win32.ClipboardFormats.CF_DSPMETAFILEPICT" value="131" />
          <field name="CF_DSPENHMETAFILE" id="F:MControl.Win32.ClipboardFormats.CF_DSPENHMETAFILE" value="142" />
          <field name="CF_PRIVATEFIRST" id="F:MControl.Win32.ClipboardFormats.CF_PRIVATEFIRST" value="512" />
          <field name="CF_PRIVATELAST" id="F:MControl.Win32.ClipboardFormats.CF_PRIVATELAST" value="767" />
          <field name="CF_GDIOBJFIRST" id="F:MControl.Win32.ClipboardFormats.CF_GDIOBJFIRST" value="768" />
          <field name="CF_GDIOBJLAST" id="F:MControl.Win32.ClipboardFormats.CF_GDIOBJLAST" value="1023" />
        </enumeration>
        <enumeration name="CombineFlags" id="T:MControl.Win32.CombineFlags" displayName="CombineFlags" namespace="MControl.Win32" access="Public">
          <field name="RGN_AND" id="F:MControl.Win32.CombineFlags.RGN_AND" value="1" />
          <field name="RGN_OR" id="F:MControl.Win32.CombineFlags.RGN_OR" value="2" />
          <field name="RGN_XOR" id="F:MControl.Win32.CombineFlags.RGN_XOR" value="3" />
          <field name="RGN_DIFF" id="F:MControl.Win32.CombineFlags.RGN_DIFF" value="4" />
          <field name="RGN_COPY" id="F:MControl.Win32.CombineFlags.RGN_COPY" value="5" />
        </enumeration>
        <enumeration name="ComboBoxMessages" id="T:MControl.Win32.ComboBoxMessages" displayName="ComboBoxMessages" namespace="MControl.Win32" access="Public">
          <field name="CB_GETDROPPEDSTATE" id="F:MControl.Win32.ComboBoxMessages.CB_GETDROPPEDSTATE" value="343" />
        </enumeration>
        <enumeration name="CommonControlInitFlags" id="T:MControl.Win32.CommonControlInitFlags" displayName="CommonControlInitFlags" namespace="MControl.Win32" access="Public">
          <field name="ICC_LISTVIEW_CLASSES" id="F:MControl.Win32.CommonControlInitFlags.ICC_LISTVIEW_CLASSES" value="1" />
          <field name="ICC_TREEVIEW_CLASSES" id="F:MControl.Win32.CommonControlInitFlags.ICC_TREEVIEW_CLASSES" value="2" />
          <field name="ICC_BAR_CLASSES" id="F:MControl.Win32.CommonControlInitFlags.ICC_BAR_CLASSES" value="4" />
          <field name="ICC_TAB_CLASSES" id="F:MControl.Win32.CommonControlInitFlags.ICC_TAB_CLASSES" value="8" />
          <field name="ICC_UPDOWN_CLASS" id="F:MControl.Win32.CommonControlInitFlags.ICC_UPDOWN_CLASS" value="16" />
          <field name="ICC_PROGRESS_CLASS" id="F:MControl.Win32.CommonControlInitFlags.ICC_PROGRESS_CLASS" value="32" />
          <field name="ICC_HOTKEY_CLASS" id="F:MControl.Win32.CommonControlInitFlags.ICC_HOTKEY_CLASS" value="64" />
          <field name="ICC_ANIMATE_CLASS" id="F:MControl.Win32.CommonControlInitFlags.ICC_ANIMATE_CLASS" value="128" />
          <field name="ICC_WIN95_CLASSES" id="F:MControl.Win32.CommonControlInitFlags.ICC_WIN95_CLASSES" value="255" />
          <field name="ICC_DATE_CLASSES" id="F:MControl.Win32.CommonControlInitFlags.ICC_DATE_CLASSES" value="256" />
          <field name="ICC_USEREX_CLASSES" id="F:MControl.Win32.CommonControlInitFlags.ICC_USEREX_CLASSES" value="512" />
          <field name="ICC_COOL_CLASSES" id="F:MControl.Win32.CommonControlInitFlags.ICC_COOL_CLASSES" value="1024" />
          <field name="ICC_INTERNET_CLASSES" id="F:MControl.Win32.CommonControlInitFlags.ICC_INTERNET_CLASSES" value="2048" />
          <field name="ICC_PAGESCROLLER_CLASS" id="F:MControl.Win32.CommonControlInitFlags.ICC_PAGESCROLLER_CLASS" value="4096" />
          <field name="ICC_NATIVEFNTCTL_CLASS" id="F:MControl.Win32.CommonControlInitFlags.ICC_NATIVEFNTCTL_CLASS" value="8192" />
        </enumeration>
        <enumeration name="CommonControlStyles" id="T:MControl.Win32.CommonControlStyles" displayName="CommonControlStyles" namespace="MControl.Win32" access="Public">
          <field name="CCS_TOP" id="F:MControl.Win32.CommonControlStyles.CCS_TOP" value="1" />
          <field name="CCS_NOMOVEY" id="F:MControl.Win32.CommonControlStyles.CCS_NOMOVEY" value="2" />
          <field name="CCS_BOTTOM" id="F:MControl.Win32.CommonControlStyles.CCS_BOTTOM" value="3" />
          <field name="CCS_NORESIZE" id="F:MControl.Win32.CommonControlStyles.CCS_NORESIZE" value="4" />
          <field name="CCS_NOPARENTALIGN" id="F:MControl.Win32.CommonControlStyles.CCS_NOPARENTALIGN" value="8" />
          <field name="CCS_ADJUSTABLE" id="F:MControl.Win32.CommonControlStyles.CCS_ADJUSTABLE" value="32" />
          <field name="CCS_NODIVIDER" id="F:MControl.Win32.CommonControlStyles.CCS_NODIVIDER" value="64" />
          <field name="CCS_VERT" id="F:MControl.Win32.CommonControlStyles.CCS_VERT" value="128" />
          <field name="CCS_LEFT" id="F:MControl.Win32.CommonControlStyles.CCS_LEFT" value="129" />
          <field name="CCS_RIGHT" id="F:MControl.Win32.CommonControlStyles.CCS_RIGHT" value="131" />
          <field name="CCS_NOMOVEX" id="F:MControl.Win32.CommonControlStyles.CCS_NOMOVEX" value="130" />
        </enumeration>
        <enumeration name="Cursors" id="T:MControl.Win32.Cursors" displayName="Cursors" namespace="MControl.Win32" access="Public" baseTypeId="T:System.UInt32">
          <field name="IDC_ARROW" id="F:MControl.Win32.Cursors.IDC_ARROW" value="32512" />
          <field name="IDC_IBEAM" id="F:MControl.Win32.Cursors.IDC_IBEAM" value="32513" />
          <field name="IDC_WAIT" id="F:MControl.Win32.Cursors.IDC_WAIT" value="32514" />
          <field name="IDC_CROSS" id="F:MControl.Win32.Cursors.IDC_CROSS" value="32515" />
          <field name="IDC_UPARROW" id="F:MControl.Win32.Cursors.IDC_UPARROW" value="32516" />
          <field name="IDC_SIZE" id="F:MControl.Win32.Cursors.IDC_SIZE" value="32640" />
          <field name="IDC_ICON" id="F:MControl.Win32.Cursors.IDC_ICON" value="32641" />
          <field name="IDC_SIZENWSE" id="F:MControl.Win32.Cursors.IDC_SIZENWSE" value="32642" />
          <field name="IDC_SIZENESW" id="F:MControl.Win32.Cursors.IDC_SIZENESW" value="32643" />
          <field name="IDC_SIZEWE" id="F:MControl.Win32.Cursors.IDC_SIZEWE" value="32644" />
          <field name="IDC_SIZENS" id="F:MControl.Win32.Cursors.IDC_SIZENS" value="32645" />
          <field name="IDC_SIZEALL" id="F:MControl.Win32.Cursors.IDC_SIZEALL" value="32646" />
          <field name="IDC_NO" id="F:MControl.Win32.Cursors.IDC_NO" value="32648" />
          <field name="IDC_HAND" id="F:MControl.Win32.Cursors.IDC_HAND" value="32649" />
          <field name="IDC_APPSTARTING" id="F:MControl.Win32.Cursors.IDC_APPSTARTING" value="32650" />
          <field name="IDC_HELP" id="F:MControl.Win32.Cursors.IDC_HELP" value="32651" />
        </enumeration>
        <enumeration name="CursorType" id="T:MControl.Win32.CursorType" displayName="CursorType" namespace="MControl.Win32" access="Public" baseTypeId="T:System.UInt32">
          <field name="IDC_ARROW" id="F:MControl.Win32.CursorType.IDC_ARROW" value="32512" />
          <field name="IDC_IBEAM" id="F:MControl.Win32.CursorType.IDC_IBEAM" value="32513" />
          <field name="IDC_WAIT" id="F:MControl.Win32.CursorType.IDC_WAIT" value="32514" />
          <field name="IDC_CROSS" id="F:MControl.Win32.CursorType.IDC_CROSS" value="32515" />
          <field name="IDC_UPARROW" id="F:MControl.Win32.CursorType.IDC_UPARROW" value="32516" />
          <field name="IDC_SIZE" id="F:MControl.Win32.CursorType.IDC_SIZE" value="32640" />
          <field name="IDC_ICON" id="F:MControl.Win32.CursorType.IDC_ICON" value="32641" />
          <field name="IDC_SIZENWSE" id="F:MControl.Win32.CursorType.IDC_SIZENWSE" value="32642" />
          <field name="IDC_SIZENESW" id="F:MControl.Win32.CursorType.IDC_SIZENESW" value="32643" />
          <field name="IDC_SIZEWE" id="F:MControl.Win32.CursorType.IDC_SIZEWE" value="32644" />
          <field name="IDC_SIZENS" id="F:MControl.Win32.CursorType.IDC_SIZENS" value="32645" />
          <field name="IDC_SIZEALL" id="F:MControl.Win32.CursorType.IDC_SIZEALL" value="32646" />
          <field name="IDC_NO" id="F:MControl.Win32.CursorType.IDC_NO" value="32648" />
          <field name="IDC_HAND" id="F:MControl.Win32.CursorType.IDC_HAND" value="32649" />
          <field name="IDC_APPSTARTING" id="F:MControl.Win32.CursorType.IDC_APPSTARTING" value="32650" />
          <field name="IDC_HELP" id="F:MControl.Win32.CursorType.IDC_HELP" value="32651" />
        </enumeration>
        <enumeration name="CustomDrawDrawStateFlags" id="T:MControl.Win32.CustomDrawDrawStateFlags" displayName="CustomDrawDrawStateFlags" namespace="MControl.Win32" access="Public">
          <field name="CDDS_PREPAINT" id="F:MControl.Win32.CustomDrawDrawStateFlags.CDDS_PREPAINT" value="1" />
          <field name="CDDS_POSTPAINT" id="F:MControl.Win32.CustomDrawDrawStateFlags.CDDS_POSTPAINT" value="2" />
          <field name="CDDS_PREERASE" id="F:MControl.Win32.CustomDrawDrawStateFlags.CDDS_PREERASE" value="3" />
          <field name="CDDS_POSTERASE" id="F:MControl.Win32.CustomDrawDrawStateFlags.CDDS_POSTERASE" value="4" />
          <field name="CDDS_ITEM" id="F:MControl.Win32.CustomDrawDrawStateFlags.CDDS_ITEM" value="65536" />
          <field name="CDDS_ITEMPREPAINT" id="F:MControl.Win32.CustomDrawDrawStateFlags.CDDS_ITEMPREPAINT" value="65537" />
          <field name="CDDS_ITEMPOSTPAINT" id="F:MControl.Win32.CustomDrawDrawStateFlags.CDDS_ITEMPOSTPAINT" value="65538" />
          <field name="CDDS_ITEMPREERASE" id="F:MControl.Win32.CustomDrawDrawStateFlags.CDDS_ITEMPREERASE" value="65539" />
          <field name="CDDS_ITEMPOSTERASE" id="F:MControl.Win32.CustomDrawDrawStateFlags.CDDS_ITEMPOSTERASE" value="65540" />
          <field name="CDDS_SUBITEM" id="F:MControl.Win32.CustomDrawDrawStateFlags.CDDS_SUBITEM" value="131072" />
        </enumeration>
        <enumeration name="CustomDrawItemStateFlags" id="T:MControl.Win32.CustomDrawItemStateFlags" displayName="CustomDrawItemStateFlags" namespace="MControl.Win32" access="Public">
          <field name="CDIS_SELECTED" id="F:MControl.Win32.CustomDrawItemStateFlags.CDIS_SELECTED" value="1" />
          <field name="CDIS_GRAYED" id="F:MControl.Win32.CustomDrawItemStateFlags.CDIS_GRAYED" value="2" />
          <field name="CDIS_DISABLED" id="F:MControl.Win32.CustomDrawItemStateFlags.CDIS_DISABLED" value="4" />
          <field name="CDIS_CHECKED" id="F:MControl.Win32.CustomDrawItemStateFlags.CDIS_CHECKED" value="8" />
          <field name="CDIS_FOCUS" id="F:MControl.Win32.CustomDrawItemStateFlags.CDIS_FOCUS" value="16" />
          <field name="CDIS_DEFAULT" id="F:MControl.Win32.CustomDrawItemStateFlags.CDIS_DEFAULT" value="32" />
          <field name="CDIS_HOT" id="F:MControl.Win32.CustomDrawItemStateFlags.CDIS_HOT" value="64" />
          <field name="CDIS_MARKED" id="F:MControl.Win32.CustomDrawItemStateFlags.CDIS_MARKED" value="128" />
          <field name="CDIS_INDETERMINATE" id="F:MControl.Win32.CustomDrawItemStateFlags.CDIS_INDETERMINATE" value="256" />
        </enumeration>
        <enumeration name="CustomDrawReturnFlags" id="T:MControl.Win32.CustomDrawReturnFlags" displayName="CustomDrawReturnFlags" namespace="MControl.Win32" access="Public">
          <field name="CDRF_DODEFAULT" id="F:MControl.Win32.CustomDrawReturnFlags.CDRF_DODEFAULT" value="0" />
          <field name="CDRF_NEWFONT" id="F:MControl.Win32.CustomDrawReturnFlags.CDRF_NEWFONT" value="2" />
          <field name="CDRF_SKIPDEFAULT" id="F:MControl.Win32.CustomDrawReturnFlags.CDRF_SKIPDEFAULT" value="4" />
          <field name="CDRF_NOTIFYPOSTPAINT" id="F:MControl.Win32.CustomDrawReturnFlags.CDRF_NOTIFYPOSTPAINT" value="16" />
          <field name="CDRF_NOTIFYITEMDRAW" id="F:MControl.Win32.CustomDrawReturnFlags.CDRF_NOTIFYITEMDRAW" value="32" />
          <field name="CDRF_NOTIFYSUBITEMDRAW" id="F:MControl.Win32.CustomDrawReturnFlags.CDRF_NOTIFYSUBITEMDRAW" value="32" />
          <field name="CDRF_NOTIFYPOSTERASE" id="F:MControl.Win32.CustomDrawReturnFlags.CDRF_NOTIFYPOSTERASE" value="64" />
        </enumeration>
        <enumeration name="DialogCodes" id="T:MControl.Win32.DialogCodes" displayName="DialogCodes" namespace="MControl.Win32" access="Public">
          <field name="DLGC_WANTARROWS" id="F:MControl.Win32.DialogCodes.DLGC_WANTARROWS" value="1" />
          <field name="DLGC_WANTTAB" id="F:MControl.Win32.DialogCodes.DLGC_WANTTAB" value="2" />
          <field name="DLGC_WANTALLKEYS" id="F:MControl.Win32.DialogCodes.DLGC_WANTALLKEYS" value="4" />
          <field name="DLGC_WANTMESSAGE" id="F:MControl.Win32.DialogCodes.DLGC_WANTMESSAGE" value="4" />
          <field name="DLGC_HASSETSEL" id="F:MControl.Win32.DialogCodes.DLGC_HASSETSEL" value="8" />
          <field name="DLGC_DEFPUSHBUTTON" id="F:MControl.Win32.DialogCodes.DLGC_DEFPUSHBUTTON" value="16" />
          <field name="DLGC_UNDEFPUSHBUTTON" id="F:MControl.Win32.DialogCodes.DLGC_UNDEFPUSHBUTTON" value="32" />
          <field name="DLGC_RADIOBUTTON" id="F:MControl.Win32.DialogCodes.DLGC_RADIOBUTTON" value="64" />
          <field name="DLGC_WANTCHARS" id="F:MControl.Win32.DialogCodes.DLGC_WANTCHARS" value="128" />
          <field name="DLGC_STATIC" id="F:MControl.Win32.DialogCodes.DLGC_STATIC" value="256" />
          <field name="DLGC_BUTTON" id="F:MControl.Win32.DialogCodes.DLGC_BUTTON" value="8192" />
        </enumeration>
        <enumeration name="DrawTextFormatFlags" id="T:MControl.Win32.DrawTextFormatFlags" displayName="DrawTextFormatFlags" namespace="MControl.Win32" access="Public">
          <field name="DT_TOP" id="F:MControl.Win32.DrawTextFormatFlags.DT_TOP" value="0" />
          <field name="DT_LEFT" id="F:MControl.Win32.DrawTextFormatFlags.DT_LEFT" value="0" />
          <field name="DT_CENTER" id="F:MControl.Win32.DrawTextFormatFlags.DT_CENTER" value="1" />
          <field name="DT_RIGHT" id="F:MControl.Win32.DrawTextFormatFlags.DT_RIGHT" value="2" />
          <field name="DT_VCENTER" id="F:MControl.Win32.DrawTextFormatFlags.DT_VCENTER" value="4" />
          <field name="DT_BOTTOM" id="F:MControl.Win32.DrawTextFormatFlags.DT_BOTTOM" value="8" />
          <field name="DT_WORDBREAK" id="F:MControl.Win32.DrawTextFormatFlags.DT_WORDBREAK" value="16" />
          <field name="DT_SINGLELINE" id="F:MControl.Win32.DrawTextFormatFlags.DT_SINGLELINE" value="32" />
          <field name="DT_EXPANDTABS" id="F:MControl.Win32.DrawTextFormatFlags.DT_EXPANDTABS" value="64" />
          <field name="DT_TABSTOP" id="F:MControl.Win32.DrawTextFormatFlags.DT_TABSTOP" value="128" />
          <field name="DT_NOCLIP" id="F:MControl.Win32.DrawTextFormatFlags.DT_NOCLIP" value="256" />
          <field name="DT_EXTERNALLEADING" id="F:MControl.Win32.DrawTextFormatFlags.DT_EXTERNALLEADING" value="512" />
          <field name="DT_CALCRECT" id="F:MControl.Win32.DrawTextFormatFlags.DT_CALCRECT" value="1024" />
          <field name="DT_NOPREFIX" id="F:MControl.Win32.DrawTextFormatFlags.DT_NOPREFIX" value="2048" />
          <field name="DT_INTERNAL" id="F:MControl.Win32.DrawTextFormatFlags.DT_INTERNAL" value="4096" />
          <field name="DT_EDITCONTROL" id="F:MControl.Win32.DrawTextFormatFlags.DT_EDITCONTROL" value="8192" />
          <field name="DT_PATH_ELLIPSIS" id="F:MControl.Win32.DrawTextFormatFlags.DT_PATH_ELLIPSIS" value="16384" />
          <field name="DT_END_ELLIPSIS" id="F:MControl.Win32.DrawTextFormatFlags.DT_END_ELLIPSIS" value="32768" />
          <field name="DT_MODIFYSTRING" id="F:MControl.Win32.DrawTextFormatFlags.DT_MODIFYSTRING" value="65536" />
          <field name="DT_RTLREADING" id="F:MControl.Win32.DrawTextFormatFlags.DT_RTLREADING" value="131072" />
          <field name="DT_WORD_ELLIPSIS" id="F:MControl.Win32.DrawTextFormatFlags.DT_WORD_ELLIPSIS" value="262144" />
        </enumeration>
        <enumeration name="EditConrolNotifyMsg" id="T:MControl.Win32.EditConrolNotifyMsg" displayName="EditConrolNotifyMsg" namespace="MControl.Win32" access="Public">
          <field name="EN_SETFOCUS" id="F:MControl.Win32.EditConrolNotifyMsg.EN_SETFOCUS" value="256" />
          <field name="EN_KILLFOCUS" id="F:MControl.Win32.EditConrolNotifyMsg.EN_KILLFOCUS" value="512" />
          <field name="EN_CHANGE" id="F:MControl.Win32.EditConrolNotifyMsg.EN_CHANGE" value="768" />
          <field name="EN_UPDATE" id="F:MControl.Win32.EditConrolNotifyMsg.EN_UPDATE" value="1024" />
          <field name="EN_ERRSPACE" id="F:MControl.Win32.EditConrolNotifyMsg.EN_ERRSPACE" value="1280" />
          <field name="EN_MAXTEXT" id="F:MControl.Win32.EditConrolNotifyMsg.EN_MAXTEXT" value="1281" />
          <field name="EN_HSCROLL" id="F:MControl.Win32.EditConrolNotifyMsg.EN_HSCROLL" value="1537" />
          <field name="EN_VSCROLL" id="F:MControl.Win32.EditConrolNotifyMsg.EN_VSCROLL" value="1538" />
        </enumeration>
        <enumeration name="EditControlMsg" id="T:MControl.Win32.EditControlMsg" displayName="EditControlMsg" namespace="MControl.Win32" access="Public">
          <field name="EM_GETSEL" id="F:MControl.Win32.EditControlMsg.EM_GETSEL" value="176" />
          <field name="EM_SETSEL" id="F:MControl.Win32.EditControlMsg.EM_SETSEL" value="177" />
          <field name="EM_GETRECT" id="F:MControl.Win32.EditControlMsg.EM_GETRECT" value="178" />
          <field name="EM_SETRECT" id="F:MControl.Win32.EditControlMsg.EM_SETRECT" value="179" />
          <field name="EM_SETRECTNP" id="F:MControl.Win32.EditControlMsg.EM_SETRECTNP" value="180" />
          <field name="EM_SCROLL" id="F:MControl.Win32.EditControlMsg.EM_SCROLL" value="181" />
          <field name="EM_LINESCROLL" id="F:MControl.Win32.EditControlMsg.EM_LINESCROLL" value="182" />
          <field name="EM_SCROLLCARET" id="F:MControl.Win32.EditControlMsg.EM_SCROLLCARET" value="183" />
          <field name="EM_GETMODIFY" id="F:MControl.Win32.EditControlMsg.EM_GETMODIFY" value="184" />
          <field name="EM_SETMODIFY" id="F:MControl.Win32.EditControlMsg.EM_SETMODIFY" value="185" />
          <field name="EM_GETLINECOUNT" id="F:MControl.Win32.EditControlMsg.EM_GETLINECOUNT" value="186" />
          <field name="EM_LINEINDEX" id="F:MControl.Win32.EditControlMsg.EM_LINEINDEX" value="187" />
          <field name="EM_SETHANDLE" id="F:MControl.Win32.EditControlMsg.EM_SETHANDLE" value="188" />
          <field name="EM_GETHANDLE" id="F:MControl.Win32.EditControlMsg.EM_GETHANDLE" value="189" />
          <field name="EM_GETTHUMB" id="F:MControl.Win32.EditControlMsg.EM_GETTHUMB" value="190" />
          <field name="EM_LINELENGTH" id="F:MControl.Win32.EditControlMsg.EM_LINELENGTH" value="193" />
          <field name="EM_REPLACESEL" id="F:MControl.Win32.EditControlMsg.EM_REPLACESEL" value="194" />
          <field name="EM_GETLINE" id="F:MControl.Win32.EditControlMsg.EM_GETLINE" value="196" />
          <field name="EM_LIMITTEXT" id="F:MControl.Win32.EditControlMsg.EM_LIMITTEXT" value="197" />
          <field name="EM_CANUNDO" id="F:MControl.Win32.EditControlMsg.EM_CANUNDO" value="198" />
          <field name="EM_UNDO" id="F:MControl.Win32.EditControlMsg.EM_UNDO" value="199" />
          <field name="EM_FMTLINES" id="F:MControl.Win32.EditControlMsg.EM_FMTLINES" value="200" />
          <field name="EM_LINEFROMCHAR" id="F:MControl.Win32.EditControlMsg.EM_LINEFROMCHAR" value="201" />
          <field name="EM_SETTABSTOPS" id="F:MControl.Win32.EditControlMsg.EM_SETTABSTOPS" value="203" />
          <field name="EM_SETPASSWORDCHAR" id="F:MControl.Win32.EditControlMsg.EM_SETPASSWORDCHAR" value="204" />
          <field name="EM_EMPTYUNDOBUFFER" id="F:MControl.Win32.EditControlMsg.EM_EMPTYUNDOBUFFER" value="205" />
          <field name="EM_GETFIRSTVISIBLELINE" id="F:MControl.Win32.EditControlMsg.EM_GETFIRSTVISIBLELINE" value="206" />
          <field name="EM_SETREADONLY" id="F:MControl.Win32.EditControlMsg.EM_SETREADONLY" value="207" />
          <field name="EM_SETWORDBREAKPROC" id="F:MControl.Win32.EditControlMsg.EM_SETWORDBREAKPROC" value="208" />
          <field name="EM_GETWORDBREAKPROC" id="F:MControl.Win32.EditControlMsg.EM_GETWORDBREAKPROC" value="209" />
          <field name="EM_GETPASSWORDCHAR" id="F:MControl.Win32.EditControlMsg.EM_GETPASSWORDCHAR" value="210" />
          <field name="EM_SETMARGINS" id="F:MControl.Win32.EditControlMsg.EM_SETMARGINS" value="211" />
          <field name="EM_GETMARGINS" id="F:MControl.Win32.EditControlMsg.EM_GETMARGINS" value="212" />
          <field name="EM_SETLIMITTEXT" id="F:MControl.Win32.EditControlMsg.EM_SETLIMITTEXT" value="197" />
          <field name="EM_GETLIMITTEXT" id="F:MControl.Win32.EditControlMsg.EM_GETLIMITTEXT" value="213" />
          <field name="EM_POSFROMCHAR" id="F:MControl.Win32.EditControlMsg.EM_POSFROMCHAR" value="214" />
          <field name="EM_CHARFROMPOS" id="F:MControl.Win32.EditControlMsg.EM_CHARFROMPOS" value="215" />
          <field name="EM_SETIMESTATUS" id="F:MControl.Win32.EditControlMsg.EM_SETIMESTATUS" value="216" />
          <field name="EM_GETIMESTATUS" id="F:MControl.Win32.EditControlMsg.EM_GETIMESTATUS" value="217" />
        </enumeration>
        <enumeration name="EditControlSetMargin" id="T:MControl.Win32.EditControlSetMargin" displayName="EditControlSetMargin" namespace="MControl.Win32" access="Public">
          <field name="EC_LEFTMARGIN" id="F:MControl.Win32.EditControlSetMargin.EC_LEFTMARGIN" value="1" />
          <field name="EC_RIGHTMARGIN" id="F:MControl.Win32.EditControlSetMargin.EC_RIGHTMARGIN" value="2" />
          <field name="EC_USEFONTINFO" id="F:MControl.Win32.EditControlSetMargin.EC_USEFONTINFO" value="65535" />
        </enumeration>
        <enumeration name="EditControlStyles" id="T:MControl.Win32.EditControlStyles" displayName="EditControlStyles" namespace="MControl.Win32" access="Public">
          <field name="ES_LEFT" id="F:MControl.Win32.EditControlStyles.ES_LEFT" value="0" />
          <field name="ES_CENTER" id="F:MControl.Win32.EditControlStyles.ES_CENTER" value="1" />
          <field name="ES_RIGHT" id="F:MControl.Win32.EditControlStyles.ES_RIGHT" value="2" />
          <field name="ES_MULTILINE" id="F:MControl.Win32.EditControlStyles.ES_MULTILINE" value="4" />
          <field name="ES_UPPERCASE" id="F:MControl.Win32.EditControlStyles.ES_UPPERCASE" value="8" />
          <field name="ES_LOWERCASE" id="F:MControl.Win32.EditControlStyles.ES_LOWERCASE" value="16" />
          <field name="ES_PASSWORD" id="F:MControl.Win32.EditControlStyles.ES_PASSWORD" value="32" />
          <field name="ES_AUTOVSCROLL" id="F:MControl.Win32.EditControlStyles.ES_AUTOVSCROLL" value="64" />
          <field name="ES_AUTOHSCROLL" id="F:MControl.Win32.EditControlStyles.ES_AUTOHSCROLL" value="128" />
          <field name="ES_NOHIDESEL" id="F:MControl.Win32.EditControlStyles.ES_NOHIDESEL" value="256" />
          <field name="ES_OEMCONVERT" id="F:MControl.Win32.EditControlStyles.ES_OEMCONVERT" value="1024" />
          <field name="ES_READONLY" id="F:MControl.Win32.EditControlStyles.ES_READONLY" value="2048" />
          <field name="ES_WANTRETURN" id="F:MControl.Win32.EditControlStyles.ES_WANTRETURN" value="4096" />
          <field name="ES_NUMBER" id="F:MControl.Win32.EditControlStyles.ES_NUMBER" value="8192" />
        </enumeration>
        <enumeration name="EnableScrollBarFlags" id="T:MControl.Win32.EnableScrollBarFlags" displayName="EnableScrollBarFlags" namespace="MControl.Win32" access="Public">
          <field name="ESB_ENABLE_BOTH" id="F:MControl.Win32.EnableScrollBarFlags.ESB_ENABLE_BOTH" value="0" />
          <field name="ESB_DISABLE_BOTH" id="F:MControl.Win32.EnableScrollBarFlags.ESB_DISABLE_BOTH" value="3" />
          <field name="ESB_DISABLE_LEFT" id="F:MControl.Win32.EnableScrollBarFlags.ESB_DISABLE_LEFT" value="1" />
          <field name="ESB_DISABLE_RIGHT" id="F:MControl.Win32.EnableScrollBarFlags.ESB_DISABLE_RIGHT" value="2" />
          <field name="ESB_DISABLE_UP" id="F:MControl.Win32.EnableScrollBarFlags.ESB_DISABLE_UP" value="1" />
          <field name="ESB_DISABLE_DOWN" id="F:MControl.Win32.EnableScrollBarFlags.ESB_DISABLE_DOWN" value="2" />
          <field name="ESB_DISABLE_LTUP" id="F:MControl.Win32.EnableScrollBarFlags.ESB_DISABLE_LTUP" value="1" />
          <field name="ESB_DISABLE_RTDN" id="F:MControl.Win32.EnableScrollBarFlags.ESB_DISABLE_RTDN" value="2" />
        </enumeration>
        <enumeration name="GetDCExFlags" id="T:MControl.Win32.GetDCExFlags" displayName="GetDCExFlags" namespace="MControl.Win32" access="Public">
          <field name="DCX_WINDOW" id="F:MControl.Win32.GetDCExFlags.DCX_WINDOW" value="1" />
          <field name="DCX_CACHE" id="F:MControl.Win32.GetDCExFlags.DCX_CACHE" value="2" />
          <field name="DCX_NORESETATTRS" id="F:MControl.Win32.GetDCExFlags.DCX_NORESETATTRS" value="4" />
          <field name="DCX_CLIPCHILDREN" id="F:MControl.Win32.GetDCExFlags.DCX_CLIPCHILDREN" value="8" />
          <field name="DCX_CLIPSIBLINGS" id="F:MControl.Win32.GetDCExFlags.DCX_CLIPSIBLINGS" value="16" />
          <field name="DCX_PARENTCLIP" id="F:MControl.Win32.GetDCExFlags.DCX_PARENTCLIP" value="32" />
          <field name="DCX_EXCLUDERGN" id="F:MControl.Win32.GetDCExFlags.DCX_EXCLUDERGN" value="64" />
          <field name="DCX_INTERSECTRGN" id="F:MControl.Win32.GetDCExFlags.DCX_INTERSECTRGN" value="128" />
          <field name="DCX_EXCLUDEUPDATE" id="F:MControl.Win32.GetDCExFlags.DCX_EXCLUDEUPDATE" value="256" />
          <field name="DCX_INTERSECTUPDATE" id="F:MControl.Win32.GetDCExFlags.DCX_INTERSECTUPDATE" value="512" />
          <field name="DCX_LOCKWINDOWUPDATE" id="F:MControl.Win32.GetDCExFlags.DCX_LOCKWINDOWUPDATE" value="1024" />
          <field name="DCX_VALIDATE" id="F:MControl.Win32.GetDCExFlags.DCX_VALIDATE" value="2097152" />
        </enumeration>
        <enumeration name="GetWindowLongFlags" id="T:MControl.Win32.GetWindowLongFlags" displayName="GetWindowLongFlags" namespace="MControl.Win32" access="Public">
          <field name="GWL_WNDPROC" id="F:MControl.Win32.GetWindowLongFlags.GWL_WNDPROC" value="-4" />
          <field name="GWL_HINSTANCE" id="F:MControl.Win32.GetWindowLongFlags.GWL_HINSTANCE" value="-6" />
          <field name="GWL_HWNDPARENT" id="F:MControl.Win32.GetWindowLongFlags.GWL_HWNDPARENT" value="-8" />
          <field name="GWL_STYLE" id="F:MControl.Win32.GetWindowLongFlags.GWL_STYLE" value="-16" />
          <field name="GWL_EXSTYLE" id="F:MControl.Win32.GetWindowLongFlags.GWL_EXSTYLE" value="-20" />
          <field name="GWL_USERDATA" id="F:MControl.Win32.GetWindowLongFlags.GWL_USERDATA" value="-21" />
          <field name="GWL_ID" id="F:MControl.Win32.GetWindowLongFlags.GWL_ID" value="-12" />
        </enumeration>
        <enumeration name="HatchStyles" id="T:MControl.Win32.HatchStyles" displayName="HatchStyles" namespace="MControl.Win32" access="Public">
          <field name="HS_HORIZONTAL" id="F:MControl.Win32.HatchStyles.HS_HORIZONTAL" value="0" />
          <field name="HS_VERTICAL" id="F:MControl.Win32.HatchStyles.HS_VERTICAL" value="1" />
          <field name="HS_FDIAGONAL" id="F:MControl.Win32.HatchStyles.HS_FDIAGONAL" value="2" />
          <field name="HS_BDIAGONAL" id="F:MControl.Win32.HatchStyles.HS_BDIAGONAL" value="3" />
          <field name="HS_CROSS" id="F:MControl.Win32.HatchStyles.HS_CROSS" value="4" />
          <field name="HS_DIAGCROSS" id="F:MControl.Win32.HatchStyles.HS_DIAGCROSS" value="5" />
        </enumeration>
        <enumeration name="HeaderControlHitTestFlags" id="T:MControl.Win32.HeaderControlHitTestFlags" displayName="HeaderControlHitTestFlags" namespace="MControl.Win32" access="Public" baseTypeId="T:System.UInt32">
          <field name="HHT_NOWHERE" id="F:MControl.Win32.HeaderControlHitTestFlags.HHT_NOWHERE" value="1" />
          <field name="HHT_ONHEADER" id="F:MControl.Win32.HeaderControlHitTestFlags.HHT_ONHEADER" value="2" />
          <field name="HHT_ONDIVIDER" id="F:MControl.Win32.HeaderControlHitTestFlags.HHT_ONDIVIDER" value="4" />
          <field name="HHT_ONDIVOPEN" id="F:MControl.Win32.HeaderControlHitTestFlags.HHT_ONDIVOPEN" value="8" />
          <field name="HHT_ABOVE" id="F:MControl.Win32.HeaderControlHitTestFlags.HHT_ABOVE" value="256" />
          <field name="HHT_BELOW" id="F:MControl.Win32.HeaderControlHitTestFlags.HHT_BELOW" value="512" />
          <field name="HHT_TORIGHT" id="F:MControl.Win32.HeaderControlHitTestFlags.HHT_TORIGHT" value="1024" />
          <field name="HHT_TOLEFT" id="F:MControl.Win32.HeaderControlHitTestFlags.HHT_TOLEFT" value="2048" />
        </enumeration>
        <enumeration name="HeaderControlMessages" id="T:MControl.Win32.HeaderControlMessages" displayName="HeaderControlMessages" namespace="MControl.Win32" access="Public">
          <field name="HDM_FIRST" id="F:MControl.Win32.HeaderControlMessages.HDM_FIRST" value="4608" />
          <field name="HDM_GETITEMRECT" id="F:MControl.Win32.HeaderControlMessages.HDM_GETITEMRECT" value="4615" />
          <field name="HDM_HITTEST" id="F:MControl.Win32.HeaderControlMessages.HDM_HITTEST" value="4614" />
          <field name="HDM_SETIMAGELIST" id="F:MControl.Win32.HeaderControlMessages.HDM_SETIMAGELIST" value="4616" />
          <field name="HDM_GETITEMW" id="F:MControl.Win32.HeaderControlMessages.HDM_GETITEMW" value="4619" />
          <field name="HDM_ORDERTOINDEX" id="F:MControl.Win32.HeaderControlMessages.HDM_ORDERTOINDEX" value="4623" />
        </enumeration>
        <enumeration name="HeaderControlNotifications" id="T:MControl.Win32.HeaderControlNotifications" displayName="HeaderControlNotifications" namespace="MControl.Win32" access="Public">
          <field name="HDN_FIRST" id="F:MControl.Win32.HeaderControlNotifications.HDN_FIRST" value="-300" />
          <field name="HDN_BEGINTRACKW" id="F:MControl.Win32.HeaderControlNotifications.HDN_BEGINTRACKW" value="-326" />
          <field name="HDN_ENDTRACKW" id="F:MControl.Win32.HeaderControlNotifications.HDN_ENDTRACKW" value="-327" />
          <field name="HDN_ITEMCLICKW" id="F:MControl.Win32.HeaderControlNotifications.HDN_ITEMCLICKW" value="-322" />
        </enumeration>
        <enumeration name="HeaderItemFlags" id="T:MControl.Win32.HeaderItemFlags" displayName="HeaderItemFlags" namespace="MControl.Win32" access="Public">
          <field name="HDI_WIDTH" id="F:MControl.Win32.HeaderItemFlags.HDI_WIDTH" value="1" />
          <field name="HDI_HEIGHT" id="F:MControl.Win32.HeaderItemFlags.HDI_HEIGHT" value="1" />
          <field name="HDI_TEXT" id="F:MControl.Win32.HeaderItemFlags.HDI_TEXT" value="2" />
          <field name="HDI_FORMAT" id="F:MControl.Win32.HeaderItemFlags.HDI_FORMAT" value="4" />
          <field name="HDI_LPARAM" id="F:MControl.Win32.HeaderItemFlags.HDI_LPARAM" value="8" />
          <field name="HDI_BITMAP" id="F:MControl.Win32.HeaderItemFlags.HDI_BITMAP" value="16" />
          <field name="HDI_IMAGE" id="F:MControl.Win32.HeaderItemFlags.HDI_IMAGE" value="32" />
          <field name="HDI_DI_SETITEM" id="F:MControl.Win32.HeaderItemFlags.HDI_DI_SETITEM" value="64" />
          <field name="HDI_ORDER" id="F:MControl.Win32.HeaderItemFlags.HDI_ORDER" value="128" />
        </enumeration>
        <enumeration name="HitTest" id="T:MControl.Win32.HitTest" displayName="HitTest" namespace="MControl.Win32" access="Public">
          <field name="HTERROR" id="F:MControl.Win32.HitTest.HTERROR" value="-2" />
          <field name="HTTRANSPARENT" id="F:MControl.Win32.HitTest.HTTRANSPARENT" value="-1" />
          <field name="HTNOWHERE" id="F:MControl.Win32.HitTest.HTNOWHERE" value="0" />
          <field name="HTCLIENT" id="F:MControl.Win32.HitTest.HTCLIENT" value="1" />
          <field name="HTCAPTION" id="F:MControl.Win32.HitTest.HTCAPTION" value="2" />
          <field name="HTSYSMENU" id="F:MControl.Win32.HitTest.HTSYSMENU" value="3" />
          <field name="HTGROWBOX" id="F:MControl.Win32.HitTest.HTGROWBOX" value="4" />
          <field name="HTSIZE" id="F:MControl.Win32.HitTest.HTSIZE" value="4" />
          <field name="HTMENU" id="F:MControl.Win32.HitTest.HTMENU" value="5" />
          <field name="HTHSCROLL" id="F:MControl.Win32.HitTest.HTHSCROLL" value="6" />
          <field name="HTVSCROLL" id="F:MControl.Win32.HitTest.HTVSCROLL" value="7" />
          <field name="HTMINBUTTON" id="F:MControl.Win32.HitTest.HTMINBUTTON" value="8" />
          <field name="HTMAXBUTTON" id="F:MControl.Win32.HitTest.HTMAXBUTTON" value="9" />
          <field name="HTLEFT" id="F:MControl.Win32.HitTest.HTLEFT" value="10" />
          <field name="HTRIGHT" id="F:MControl.Win32.HitTest.HTRIGHT" value="11" />
          <field name="HTTOP" id="F:MControl.Win32.HitTest.HTTOP" value="12" />
          <field name="HTTOPLEFT" id="F:MControl.Win32.HitTest.HTTOPLEFT" value="13" />
          <field name="HTTOPRIGHT" id="F:MControl.Win32.HitTest.HTTOPRIGHT" value="14" />
          <field name="HTBOTTOM" id="F:MControl.Win32.HitTest.HTBOTTOM" value="15" />
          <field name="HTBOTTOMLEFT" id="F:MControl.Win32.HitTest.HTBOTTOMLEFT" value="16" />
          <field name="HTBOTTOMRIGHT" id="F:MControl.Win32.HitTest.HTBOTTOMRIGHT" value="17" />
          <field name="HTBORDER" id="F:MControl.Win32.HitTest.HTBORDER" value="18" />
          <field name="HTREDUCE" id="F:MControl.Win32.HitTest.HTREDUCE" value="8" />
          <field name="HTZOOM" id="F:MControl.Win32.HitTest.HTZOOM" value="9" />
          <field name="HTSIZEFIRST" id="F:MControl.Win32.HitTest.HTSIZEFIRST" value="10" />
          <field name="HTSIZELAST" id="F:MControl.Win32.HitTest.HTSIZELAST" value="17" />
          <field name="HTOBJECT" id="F:MControl.Win32.HitTest.HTOBJECT" value="19" />
          <field name="HTCLOSE" id="F:MControl.Win32.HitTest.HTCLOSE" value="20" />
          <field name="HTHELP" id="F:MControl.Win32.HitTest.HTHELP" value="21" />
        </enumeration>
        <enumeration name="ImageListFlags" id="T:MControl.Win32.ImageListFlags" displayName="ImageListFlags" namespace="MControl.Win32" access="Public">
          <field name="ILC_MASK" id="F:MControl.Win32.ImageListFlags.ILC_MASK" value="1" />
          <field name="ILC_COLOR" id="F:MControl.Win32.ImageListFlags.ILC_COLOR" value="0" />
          <field name="ILC_COLORDDB" id="F:MControl.Win32.ImageListFlags.ILC_COLORDDB" value="254" />
          <field name="ILC_COLOR4" id="F:MControl.Win32.ImageListFlags.ILC_COLOR4" value="4" />
          <field name="ILC_COLOR8" id="F:MControl.Win32.ImageListFlags.ILC_COLOR8" value="8" />
          <field name="ILC_COLOR16" id="F:MControl.Win32.ImageListFlags.ILC_COLOR16" value="16" />
          <field name="ILC_COLOR24" id="F:MControl.Win32.ImageListFlags.ILC_COLOR24" value="24" />
          <field name="ILC_COLOR32" id="F:MControl.Win32.ImageListFlags.ILC_COLOR32" value="32" />
          <field name="ILC_PALETTE" id="F:MControl.Win32.ImageListFlags.ILC_PALETTE" value="2048" />
        </enumeration>
        <enumeration name="ListViewItemFlags" id="T:MControl.Win32.ListViewItemFlags" displayName="ListViewItemFlags" namespace="MControl.Win32" access="Public">
          <field name="LVIF_TEXT" id="F:MControl.Win32.ListViewItemFlags.LVIF_TEXT" value="1" />
          <field name="LVIF_IMAGE" id="F:MControl.Win32.ListViewItemFlags.LVIF_IMAGE" value="2" />
          <field name="LVIF_PARAM" id="F:MControl.Win32.ListViewItemFlags.LVIF_PARAM" value="4" />
          <field name="LVIF_STATE" id="F:MControl.Win32.ListViewItemFlags.LVIF_STATE" value="8" />
          <field name="LVIF_INDENT" id="F:MControl.Win32.ListViewItemFlags.LVIF_INDENT" value="16" />
          <field name="LVIF_NORECOMPUTE" id="F:MControl.Win32.ListViewItemFlags.LVIF_NORECOMPUTE" value="2048" />
        </enumeration>
        <enumeration name="ListViewMessages" id="T:MControl.Win32.ListViewMessages" displayName="ListViewMessages" namespace="MControl.Win32" access="Public">
          <field name="LVM_FIRST" id="F:MControl.Win32.ListViewMessages.LVM_FIRST" value="4096" />
          <field name="LVM_GETSUBITEMRECT" id="F:MControl.Win32.ListViewMessages.LVM_GETSUBITEMRECT" value="4152" />
          <field name="LVM_GETITEMSTATE" id="F:MControl.Win32.ListViewMessages.LVM_GETITEMSTATE" value="4140" />
          <field name="LVM_GETITEMTEXTW" id="F:MControl.Win32.ListViewMessages.LVM_GETITEMTEXTW" value="4211" />
        </enumeration>
        <enumeration name="ListViewNotifications" id="T:MControl.Win32.ListViewNotifications" displayName="ListViewNotifications" namespace="MControl.Win32" access="Public">
          <field name="LVN_FIRST" id="F:MControl.Win32.ListViewNotifications.LVN_FIRST" value="-100" />
          <field name="LVN_GETDISPINFOW" id="F:MControl.Win32.ListViewNotifications.LVN_GETDISPINFOW" value="-177" />
          <field name="LVN_SETDISPINFOA" id="F:MControl.Win32.ListViewNotifications.LVN_SETDISPINFOA" value="-151" />
        </enumeration>
        <enumeration name="MenuCharReturnValues" id="T:MControl.Win32.MenuCharReturnValues" displayName="MenuCharReturnValues" namespace="MControl.Win32" access="Public">
          <field name="MNC_IGNORE" id="F:MControl.Win32.MenuCharReturnValues.MNC_IGNORE" value="0" />
          <field name="MNC_CLOSE" id="F:MControl.Win32.MenuCharReturnValues.MNC_CLOSE" value="1" />
          <field name="MNC_EXECUTE" id="F:MControl.Win32.MenuCharReturnValues.MNC_EXECUTE" value="2" />
          <field name="MNC_SELECT" id="F:MControl.Win32.MenuCharReturnValues.MNC_SELECT" value="3" />
        </enumeration>
        <enumeration name="MouseActivateFlags" id="T:MControl.Win32.MouseActivateFlags" displayName="MouseActivateFlags" namespace="MControl.Win32" access="Public">
          <field name="MA_ACTIVATE" id="F:MControl.Win32.MouseActivateFlags.MA_ACTIVATE" value="1" />
          <field name="MA_ACTIVATEANDEAT" id="F:MControl.Win32.MouseActivateFlags.MA_ACTIVATEANDEAT" value="2" />
          <field name="MA_NOACTIVATE" id="F:MControl.Win32.MouseActivateFlags.MA_NOACTIVATE" value="3" />
          <field name="MA_NOACTIVATEANDEAT" id="F:MControl.Win32.MouseActivateFlags.MA_NOACTIVATEANDEAT" value="4" />
        </enumeration>
        <enumeration name="MouseHookFilters" id="T:MControl.Win32.MouseHookFilters" displayName="MouseHookFilters" namespace="MControl.Win32" access="Public">
          <field name="MSGF_DIALOGBOX" id="F:MControl.Win32.MouseHookFilters.MSGF_DIALOGBOX" value="0" />
          <field name="MSGF_MESSAGEBOX" id="F:MControl.Win32.MouseHookFilters.MSGF_MESSAGEBOX" value="1" />
          <field name="MSGF_MENU" id="F:MControl.Win32.MouseHookFilters.MSGF_MENU" value="2" />
          <field name="MSGF_SCROLLBAR" id="F:MControl.Win32.MouseHookFilters.MSGF_SCROLLBAR" value="5" />
          <field name="MSGF_NEXTWINDOW" id="F:MControl.Win32.MouseHookFilters.MSGF_NEXTWINDOW" value="6" />
        </enumeration>
        <enumeration name="Msg" id="T:MControl.Win32.Msg" displayName="Msg" namespace="MControl.Win32" access="Public">
          <field name="WmMouseActivate" id="F:MControl.Win32.Msg.WmMouseActivate" value="33" />
          <field name="WmUser" id="F:MControl.Win32.Msg.WmUser" value="1024" />
          <field name="WmMouseWhell" id="F:MControl.Win32.Msg.WmMouseWhell" value="522" />
          <field name="WmKeyDown" id="F:MControl.Win32.Msg.WmKeyDown" value="256" />
          <field name="WmKeyUp" id="F:MControl.Win32.Msg.WmKeyUp" value="257" />
          <field name="WmChar" id="F:MControl.Win32.Msg.WmChar" value="258" />
          <field name="WmlButtonUp" id="F:MControl.Win32.Msg.WmlButtonUp" value="514" />
          <field name="WmlButtonDown" id="F:MControl.Win32.Msg.WmlButtonDown" value="513" />
          <field name="WmmButtonDown" id="F:MControl.Win32.Msg.WmmButtonDown" value="519" />
          <field name="WmmButtonUp" id="F:MControl.Win32.Msg.WmmButtonUp" value="520" />
          <field name="WmlButtonDblClk" id="F:MControl.Win32.Msg.WmlButtonDblClk" value="515" />
          <field name="WmReflect" id="F:MControl.Win32.Msg.WmReflect" value="8192" />
        </enumeration>
        <enumeration name="Msgs" id="T:MControl.Win32.Msgs" displayName="Msgs" namespace="MControl.Win32" access="Public">
          <field name="WM_NULL" id="F:MControl.Win32.Msgs.WM_NULL" value="0" />
          <field name="WM_CREATE" id="F:MControl.Win32.Msgs.WM_CREATE" value="1" />
          <field name="WM_DESTROY" id="F:MControl.Win32.Msgs.WM_DESTROY" value="2" />
          <field name="WM_MOVE" id="F:MControl.Win32.Msgs.WM_MOVE" value="3" />
          <field name="WM_SIZE" id="F:MControl.Win32.Msgs.WM_SIZE" value="5" />
          <field name="WM_ACTIVATE" id="F:MControl.Win32.Msgs.WM_ACTIVATE" value="6" />
          <field name="WM_SETFOCUS" id="F:MControl.Win32.Msgs.WM_SETFOCUS" value="7" />
          <field name="WM_KILLFOCUS" id="F:MControl.Win32.Msgs.WM_KILLFOCUS" value="8" />
          <field name="WM_ENABLE" id="F:MControl.Win32.Msgs.WM_ENABLE" value="10" />
          <field name="WM_SETREDRAW" id="F:MControl.Win32.Msgs.WM_SETREDRAW" value="11" />
          <field name="WM_SETTEXT" id="F:MControl.Win32.Msgs.WM_SETTEXT" value="12" />
          <field name="WM_GETTEXT" id="F:MControl.Win32.Msgs.WM_GETTEXT" value="13" />
          <field name="WM_GETTEXTLENGTH" id="F:MControl.Win32.Msgs.WM_GETTEXTLENGTH" value="14" />
          <field name="WM_PAINT" id="F:MControl.Win32.Msgs.WM_PAINT" value="15" />
          <field name="WM_CLOSE" id="F:MControl.Win32.Msgs.WM_CLOSE" value="16" />
          <field name="WM_QUERYENDSESSION" id="F:MControl.Win32.Msgs.WM_QUERYENDSESSION" value="17" />
          <field name="WM_QUIT" id="F:MControl.Win32.Msgs.WM_QUIT" value="18" />
          <field name="WM_QUERYOPEN" id="F:MControl.Win32.Msgs.WM_QUERYOPEN" value="19" />
          <field name="WM_ERASEBKGND" id="F:MControl.Win32.Msgs.WM_ERASEBKGND" value="20" />
          <field name="WM_SYSCOLORCHANGE" id="F:MControl.Win32.Msgs.WM_SYSCOLORCHANGE" value="21" />
          <field name="WM_ENDSESSION" id="F:MControl.Win32.Msgs.WM_ENDSESSION" value="22" />
          <field name="WM_SHOWWINDOW" id="F:MControl.Win32.Msgs.WM_SHOWWINDOW" value="24" />
          <field name="WM_CTLCOLOR" id="F:MControl.Win32.Msgs.WM_CTLCOLOR" value="25" />
          <field name="WM_WININICHANGE" id="F:MControl.Win32.Msgs.WM_WININICHANGE" value="26" />
          <field name="WM_SETTINGCHANGE" id="F:MControl.Win32.Msgs.WM_SETTINGCHANGE" value="26" />
          <field name="WM_DEVMODECHANGE" id="F:MControl.Win32.Msgs.WM_DEVMODECHANGE" value="27" />
          <field name="WM_ACTIVATEAPP" id="F:MControl.Win32.Msgs.WM_ACTIVATEAPP" value="28" />
          <field name="WM_FONTCHANGE" id="F:MControl.Win32.Msgs.WM_FONTCHANGE" value="29" />
          <field name="WM_TIMECHANGE" id="F:MControl.Win32.Msgs.WM_TIMECHANGE" value="30" />
          <field name="WM_CANCELMODE" id="F:MControl.Win32.Msgs.WM_CANCELMODE" value="31" />
          <field name="WM_SETCURSOR" id="F:MControl.Win32.Msgs.WM_SETCURSOR" value="32" />
          <field name="WM_MOUSEACTIVATE" id="F:MControl.Win32.Msgs.WM_MOUSEACTIVATE" value="33" />
          <field name="WM_CHILDACTIVATE" id="F:MControl.Win32.Msgs.WM_CHILDACTIVATE" value="34" />
          <field name="WM_QUEUESYNC" id="F:MControl.Win32.Msgs.WM_QUEUESYNC" value="35" />
          <field name="WM_GETMINMAXINFO" id="F:MControl.Win32.Msgs.WM_GETMINMAXINFO" value="36" />
          <field name="WM_PAINTICON" id="F:MControl.Win32.Msgs.WM_PAINTICON" value="38" />
          <field name="WM_ICONERASEBKGND" id="F:MControl.Win32.Msgs.WM_ICONERASEBKGND" value="39" />
          <field name="WM_NEXTDLGCTL" id="F:MControl.Win32.Msgs.WM_NEXTDLGCTL" value="40" />
          <field name="WM_SPOOLERSTATUS" id="F:MControl.Win32.Msgs.WM_SPOOLERSTATUS" value="42" />
          <field name="WM_DRAWITEM" id="F:MControl.Win32.Msgs.WM_DRAWITEM" value="43" />
          <field name="WM_MEASUREITEM" id="F:MControl.Win32.Msgs.WM_MEASUREITEM" value="44" />
          <field name="WM_DELETEITEM" id="F:MControl.Win32.Msgs.WM_DELETEITEM" value="45" />
          <field name="WM_VKEYTOITEM" id="F:MControl.Win32.Msgs.WM_VKEYTOITEM" value="46" />
          <field name="WM_CHARTOITEM" id="F:MControl.Win32.Msgs.WM_CHARTOITEM" value="47" />
          <field name="WM_SETFONT" id="F:MControl.Win32.Msgs.WM_SETFONT" value="48" />
          <field name="WM_GETFONT" id="F:MControl.Win32.Msgs.WM_GETFONT" value="49" />
          <field name="WM_SETHOTKEY" id="F:MControl.Win32.Msgs.WM_SETHOTKEY" value="50" />
          <field name="WM_GETHOTKEY" id="F:MControl.Win32.Msgs.WM_GETHOTKEY" value="51" />
          <field name="WM_QUERYDRAGICON" id="F:MControl.Win32.Msgs.WM_QUERYDRAGICON" value="55" />
          <field name="WM_COMPAREITEM" id="F:MControl.Win32.Msgs.WM_COMPAREITEM" value="57" />
          <field name="WM_GETOBJECT" id="F:MControl.Win32.Msgs.WM_GETOBJECT" value="61" />
          <field name="WM_COMPACTING" id="F:MControl.Win32.Msgs.WM_COMPACTING" value="65" />
          <field name="WM_COMMNOTIFY" id="F:MControl.Win32.Msgs.WM_COMMNOTIFY" value="68" />
          <field name="WM_WINDOWPOSCHANGING" id="F:MControl.Win32.Msgs.WM_WINDOWPOSCHANGING" value="70" />
          <field name="WM_WINDOWPOSCHANGED" id="F:MControl.Win32.Msgs.WM_WINDOWPOSCHANGED" value="71" />
          <field name="WM_POWER" id="F:MControl.Win32.Msgs.WM_POWER" value="72" />
          <field name="WM_COPYDATA" id="F:MControl.Win32.Msgs.WM_COPYDATA" value="74" />
          <field name="WM_CANCELJOURNAL" id="F:MControl.Win32.Msgs.WM_CANCELJOURNAL" value="75" />
          <field name="WM_NOTIFY" id="F:MControl.Win32.Msgs.WM_NOTIFY" value="78" />
          <field name="WM_INPUTLANGCHANGEREQUEST" id="F:MControl.Win32.Msgs.WM_INPUTLANGCHANGEREQUEST" value="80" />
          <field name="WM_INPUTLANGCHANGE" id="F:MControl.Win32.Msgs.WM_INPUTLANGCHANGE" value="81" />
          <field name="WM_TCARD" id="F:MControl.Win32.Msgs.WM_TCARD" value="82" />
          <field name="WM_HELP" id="F:MControl.Win32.Msgs.WM_HELP" value="83" />
          <field name="WM_USERCHANGED" id="F:MControl.Win32.Msgs.WM_USERCHANGED" value="84" />
          <field name="WM_NOTIFYFORMAT" id="F:MControl.Win32.Msgs.WM_NOTIFYFORMAT" value="85" />
          <field name="WM_CONTEXTMENU" id="F:MControl.Win32.Msgs.WM_CONTEXTMENU" value="123" />
          <field name="WM_STYLECHANGING" id="F:MControl.Win32.Msgs.WM_STYLECHANGING" value="124" />
          <field name="WM_STYLECHANGED" id="F:MControl.Win32.Msgs.WM_STYLECHANGED" value="125" />
          <field name="WM_DISPLAYCHANGE" id="F:MControl.Win32.Msgs.WM_DISPLAYCHANGE" value="126" />
          <field name="WM_GETICON" id="F:MControl.Win32.Msgs.WM_GETICON" value="127" />
          <field name="WM_SETICON" id="F:MControl.Win32.Msgs.WM_SETICON" value="128" />
          <field name="WM_NCCREATE" id="F:MControl.Win32.Msgs.WM_NCCREATE" value="129" />
          <field name="WM_NCDESTROY" id="F:MControl.Win32.Msgs.WM_NCDESTROY" value="130" />
          <field name="WM_NCCALCSIZE" id="F:MControl.Win32.Msgs.WM_NCCALCSIZE" value="131" />
          <field name="WM_NCHITTEST" id="F:MControl.Win32.Msgs.WM_NCHITTEST" value="132" />
          <field name="WM_NCPAINT" id="F:MControl.Win32.Msgs.WM_NCPAINT" value="133" />
          <field name="WM_NCACTIVATE" id="F:MControl.Win32.Msgs.WM_NCACTIVATE" value="134" />
          <field name="WM_GETDLGCODE" id="F:MControl.Win32.Msgs.WM_GETDLGCODE" value="135" />
          <field name="WM_SYNCPAINT" id="F:MControl.Win32.Msgs.WM_SYNCPAINT" value="136" />
          <field name="WM_NCMOUSEMOVE" id="F:MControl.Win32.Msgs.WM_NCMOUSEMOVE" value="160" />
          <field name="WM_NCLBUTTONDOWN" id="F:MControl.Win32.Msgs.WM_NCLBUTTONDOWN" value="161" />
          <field name="WM_NCLBUTTONUP" id="F:MControl.Win32.Msgs.WM_NCLBUTTONUP" value="162" />
          <field name="WM_NCLBUTTONDBLCLK" id="F:MControl.Win32.Msgs.WM_NCLBUTTONDBLCLK" value="163" />
          <field name="WM_NCRBUTTONDOWN" id="F:MControl.Win32.Msgs.WM_NCRBUTTONDOWN" value="164" />
          <field name="WM_NCRBUTTONUP" id="F:MControl.Win32.Msgs.WM_NCRBUTTONUP" value="165" />
          <field name="WM_NCRBUTTONDBLCLK" id="F:MControl.Win32.Msgs.WM_NCRBUTTONDBLCLK" value="166" />
          <field name="WM_NCMBUTTONDOWN" id="F:MControl.Win32.Msgs.WM_NCMBUTTONDOWN" value="167" />
          <field name="WM_NCMBUTTONUP" id="F:MControl.Win32.Msgs.WM_NCMBUTTONUP" value="168" />
          <field name="WM_NCMBUTTONDBLCLK" id="F:MControl.Win32.Msgs.WM_NCMBUTTONDBLCLK" value="169" />
          <field name="WM_NCXBUTTONDOWN" id="F:MControl.Win32.Msgs.WM_NCXBUTTONDOWN" value="171" />
          <field name="WM_NCXBUTTONUP" id="F:MControl.Win32.Msgs.WM_NCXBUTTONUP" value="172" />
          <field name="WM_KEYDOWN" id="F:MControl.Win32.Msgs.WM_KEYDOWN" value="256" />
          <field name="WM_KEYUP" id="F:MControl.Win32.Msgs.WM_KEYUP" value="257" />
          <field name="WM_CHAR" id="F:MControl.Win32.Msgs.WM_CHAR" value="258" />
          <field name="WM_DEADCHAR" id="F:MControl.Win32.Msgs.WM_DEADCHAR" value="259" />
          <field name="WM_SYSKEYDOWN" id="F:MControl.Win32.Msgs.WM_SYSKEYDOWN" value="260" />
          <field name="WM_SYSKEYUP" id="F:MControl.Win32.Msgs.WM_SYSKEYUP" value="261" />
          <field name="WM_SYSCHAR" id="F:MControl.Win32.Msgs.WM_SYSCHAR" value="262" />
          <field name="WM_SYSDEADCHAR" id="F:MControl.Win32.Msgs.WM_SYSDEADCHAR" value="263" />
          <field name="WM_KEYLAST" id="F:MControl.Win32.Msgs.WM_KEYLAST" value="264" />
          <field name="WM_IME_STARTCOMPOSITION" id="F:MControl.Win32.Msgs.WM_IME_STARTCOMPOSITION" value="269" />
          <field name="WM_IME_ENDCOMPOSITION" id="F:MControl.Win32.Msgs.WM_IME_ENDCOMPOSITION" value="270" />
          <field name="WM_IME_COMPOSITION" id="F:MControl.Win32.Msgs.WM_IME_COMPOSITION" value="271" />
          <field name="WM_IME_KEYLAST" id="F:MControl.Win32.Msgs.WM_IME_KEYLAST" value="271" />
          <field name="WM_INITDIALOG" id="F:MControl.Win32.Msgs.WM_INITDIALOG" value="272" />
          <field name="WM_COMMAND" id="F:MControl.Win32.Msgs.WM_COMMAND" value="273" />
          <field name="WM_SYSCOMMAND" id="F:MControl.Win32.Msgs.WM_SYSCOMMAND" value="274" />
          <field name="WM_TIMER" id="F:MControl.Win32.Msgs.WM_TIMER" value="275" />
          <field name="WM_HSCROLL" id="F:MControl.Win32.Msgs.WM_HSCROLL" value="276" />
          <field name="WM_VSCROLL" id="F:MControl.Win32.Msgs.WM_VSCROLL" value="277" />
          <field name="WM_INITMENU" id="F:MControl.Win32.Msgs.WM_INITMENU" value="278" />
          <field name="WM_INITMENUPOPUP" id="F:MControl.Win32.Msgs.WM_INITMENUPOPUP" value="279" />
          <field name="WM_MENUSELECT" id="F:MControl.Win32.Msgs.WM_MENUSELECT" value="287" />
          <field name="WM_MENUCHAR" id="F:MControl.Win32.Msgs.WM_MENUCHAR" value="288" />
          <field name="WM_ENTERIDLE" id="F:MControl.Win32.Msgs.WM_ENTERIDLE" value="289" />
          <field name="WM_MENURBUTTONUP" id="F:MControl.Win32.Msgs.WM_MENURBUTTONUP" value="290" />
          <field name="WM_MENUDRAG" id="F:MControl.Win32.Msgs.WM_MENUDRAG" value="291" />
          <field name="WM_MENUGETOBJECT" id="F:MControl.Win32.Msgs.WM_MENUGETOBJECT" value="292" />
          <field name="WM_UNINITMENUPOPUP" id="F:MControl.Win32.Msgs.WM_UNINITMENUPOPUP" value="293" />
          <field name="WM_MENUCOMMAND" id="F:MControl.Win32.Msgs.WM_MENUCOMMAND" value="294" />
          <field name="WM_CTLCOLORMSGBOX" id="F:MControl.Win32.Msgs.WM_CTLCOLORMSGBOX" value="306" />
          <field name="WM_CTLCOLOREDIT" id="F:MControl.Win32.Msgs.WM_CTLCOLOREDIT" value="307" />
          <field name="WM_CTLCOLORLISTBOX" id="F:MControl.Win32.Msgs.WM_CTLCOLORLISTBOX" value="308" />
          <field name="WM_CTLCOLORBTN" id="F:MControl.Win32.Msgs.WM_CTLCOLORBTN" value="309" />
          <field name="WM_CTLCOLORDLG" id="F:MControl.Win32.Msgs.WM_CTLCOLORDLG" value="310" />
          <field name="WM_CTLCOLORSCROLLBAR" id="F:MControl.Win32.Msgs.WM_CTLCOLORSCROLLBAR" value="311" />
          <field name="WM_CTLCOLORSTATIC" id="F:MControl.Win32.Msgs.WM_CTLCOLORSTATIC" value="312" />
          <field name="WM_MOUSEMOVE" id="F:MControl.Win32.Msgs.WM_MOUSEMOVE" value="512" />
          <field name="WM_LBUTTONDOWN" id="F:MControl.Win32.Msgs.WM_LBUTTONDOWN" value="513" />
          <field name="WM_LBUTTONUP" id="F:MControl.Win32.Msgs.WM_LBUTTONUP" value="514" />
          <field name="WM_LBUTTONDBLCLK" id="F:MControl.Win32.Msgs.WM_LBUTTONDBLCLK" value="515" />
          <field name="WM_RBUTTONDOWN" id="F:MControl.Win32.Msgs.WM_RBUTTONDOWN" value="516" />
          <field name="WM_RBUTTONUP" id="F:MControl.Win32.Msgs.WM_RBUTTONUP" value="517" />
          <field name="WM_RBUTTONDBLCLK" id="F:MControl.Win32.Msgs.WM_RBUTTONDBLCLK" value="518" />
          <field name="WM_MBUTTONDOWN" id="F:MControl.Win32.Msgs.WM_MBUTTONDOWN" value="519" />
          <field name="WM_MBUTTONUP" id="F:MControl.Win32.Msgs.WM_MBUTTONUP" value="520" />
          <field name="WM_MBUTTONDBLCLK" id="F:MControl.Win32.Msgs.WM_MBUTTONDBLCLK" value="521" />
          <field name="WM_MOUSEWHEEL" id="F:MControl.Win32.Msgs.WM_MOUSEWHEEL" value="522" />
          <field name="WM_XBUTTONDOWN" id="F:MControl.Win32.Msgs.WM_XBUTTONDOWN" value="523" />
          <field name="WM_XBUTTONUP" id="F:MControl.Win32.Msgs.WM_XBUTTONUP" value="524" />
          <field name="WM_XBUTTONDBLCLK" id="F:MControl.Win32.Msgs.WM_XBUTTONDBLCLK" value="525" />
          <field name="WM_PARENTNOTIFY" id="F:MControl.Win32.Msgs.WM_PARENTNOTIFY" value="528" />
          <field name="WM_ENTERMENULOOP" id="F:MControl.Win32.Msgs.WM_ENTERMENULOOP" value="529" />
          <field name="WM_EXITMENULOOP" id="F:MControl.Win32.Msgs.WM_EXITMENULOOP" value="530" />
          <field name="WM_NEXTMENU" id="F:MControl.Win32.Msgs.WM_NEXTMENU" value="531" />
          <field name="WM_SIZING" id="F:MControl.Win32.Msgs.WM_SIZING" value="532" />
          <field name="WM_CAPTURECHANGED" id="F:MControl.Win32.Msgs.WM_CAPTURECHANGED" value="533" />
          <field name="WM_MOVING" id="F:MControl.Win32.Msgs.WM_MOVING" value="534" />
          <field name="WM_DEVICECHANGE" id="F:MControl.Win32.Msgs.WM_DEVICECHANGE" value="537" />
          <field name="WM_MDICREATE" id="F:MControl.Win32.Msgs.WM_MDICREATE" value="544" />
          <field name="WM_MDIDESTROY" id="F:MControl.Win32.Msgs.WM_MDIDESTROY" value="545" />
          <field name="WM_MDIACTIVATE" id="F:MControl.Win32.Msgs.WM_MDIACTIVATE" value="546" />
          <field name="WM_MDIRESTORE" id="F:MControl.Win32.Msgs.WM_MDIRESTORE" value="547" />
          <field name="WM_MDINEXT" id="F:MControl.Win32.Msgs.WM_MDINEXT" value="548" />
          <field name="WM_MDIMAXIMIZE" id="F:MControl.Win32.Msgs.WM_MDIMAXIMIZE" value="549" />
          <field name="WM_MDITILE" id="F:MControl.Win32.Msgs.WM_MDITILE" value="550" />
          <field name="WM_MDICASCADE" id="F:MControl.Win32.Msgs.WM_MDICASCADE" value="551" />
          <field name="WM_MDIICONARRANGE" id="F:MControl.Win32.Msgs.WM_MDIICONARRANGE" value="552" />
          <field name="WM_MDIGETACTIVE" id="F:MControl.Win32.Msgs.WM_MDIGETACTIVE" value="553" />
          <field name="WM_MDISETMENU" id="F:MControl.Win32.Msgs.WM_MDISETMENU" value="560" />
          <field name="WM_ENTERSIZEMOVE" id="F:MControl.Win32.Msgs.WM_ENTERSIZEMOVE" value="561" />
          <field name="WM_EXITSIZEMOVE" id="F:MControl.Win32.Msgs.WM_EXITSIZEMOVE" value="562" />
          <field name="WM_DROPFILES" id="F:MControl.Win32.Msgs.WM_DROPFILES" value="563" />
          <field name="WM_MDIREFRESHMENU" id="F:MControl.Win32.Msgs.WM_MDIREFRESHMENU" value="564" />
          <field name="WM_IME_SETCONTEXT" id="F:MControl.Win32.Msgs.WM_IME_SETCONTEXT" value="641" />
          <field name="WM_IME_NOTIFY" id="F:MControl.Win32.Msgs.WM_IME_NOTIFY" value="642" />
          <field name="WM_IME_CONTROL" id="F:MControl.Win32.Msgs.WM_IME_CONTROL" value="643" />
          <field name="WM_IME_COMPOSITIONFULL" id="F:MControl.Win32.Msgs.WM_IME_COMPOSITIONFULL" value="644" />
          <field name="WM_IME_SELECT" id="F:MControl.Win32.Msgs.WM_IME_SELECT" value="645" />
          <field name="WM_IME_CHAR" id="F:MControl.Win32.Msgs.WM_IME_CHAR" value="646" />
          <field name="WM_IME_REQUEST" id="F:MControl.Win32.Msgs.WM_IME_REQUEST" value="648" />
          <field name="WM_IME_KEYDOWN" id="F:MControl.Win32.Msgs.WM_IME_KEYDOWN" value="656" />
          <field name="WM_IME_KEYUP" id="F:MControl.Win32.Msgs.WM_IME_KEYUP" value="657" />
          <field name="WM_MOUSEHOVER" id="F:MControl.Win32.Msgs.WM_MOUSEHOVER" value="673" />
          <field name="WM_MOUSELEAVE" id="F:MControl.Win32.Msgs.WM_MOUSELEAVE" value="675" />
          <field name="WM_CUT" id="F:MControl.Win32.Msgs.WM_CUT" value="768" />
          <field name="WM_COPY" id="F:MControl.Win32.Msgs.WM_COPY" value="769" />
          <field name="WM_PASTE" id="F:MControl.Win32.Msgs.WM_PASTE" value="770" />
          <field name="WM_CLEAR" id="F:MControl.Win32.Msgs.WM_CLEAR" value="771" />
          <field name="WM_UNDO" id="F:MControl.Win32.Msgs.WM_UNDO" value="772" />
          <field name="WM_RENDERFORMAT" id="F:MControl.Win32.Msgs.WM_RENDERFORMAT" value="773" />
          <field name="WM_RENDERALLFORMATS" id="F:MControl.Win32.Msgs.WM_RENDERALLFORMATS" value="774" />
          <field name="WM_DESTROYCLIPBOARD" id="F:MControl.Win32.Msgs.WM_DESTROYCLIPBOARD" value="775" />
          <field name="WM_DRAWCLIPBOARD" id="F:MControl.Win32.Msgs.WM_DRAWCLIPBOARD" value="776" />
          <field name="WM_PAINTCLIPBOARD" id="F:MControl.Win32.Msgs.WM_PAINTCLIPBOARD" value="777" />
          <field name="WM_VSCROLLCLIPBOARD" id="F:MControl.Win32.Msgs.WM_VSCROLLCLIPBOARD" value="778" />
          <field name="WM_SIZECLIPBOARD" id="F:MControl.Win32.Msgs.WM_SIZECLIPBOARD" value="779" />
          <field name="WM_ASKCBFORMATNAME" id="F:MControl.Win32.Msgs.WM_ASKCBFORMATNAME" value="780" />
          <field name="WM_CHANGECBCHAIN" id="F:MControl.Win32.Msgs.WM_CHANGECBCHAIN" value="781" />
          <field name="WM_HSCROLLCLIPBOARD" id="F:MControl.Win32.Msgs.WM_HSCROLLCLIPBOARD" value="782" />
          <field name="WM_QUERYNEWPALETTE" id="F:MControl.Win32.Msgs.WM_QUERYNEWPALETTE" value="783" />
          <field name="WM_PALETTEISCHANGING" id="F:MControl.Win32.Msgs.WM_PALETTEISCHANGING" value="784" />
          <field name="WM_PALETTECHANGED" id="F:MControl.Win32.Msgs.WM_PALETTECHANGED" value="785" />
          <field name="WM_HOTKEY" id="F:MControl.Win32.Msgs.WM_HOTKEY" value="786" />
          <field name="WM_PRINT" id="F:MControl.Win32.Msgs.WM_PRINT" value="791" />
          <field name="WM_PRINTCLIENT" id="F:MControl.Win32.Msgs.WM_PRINTCLIENT" value="792" />
          <field name="WM_HANDHELDFIRST" id="F:MControl.Win32.Msgs.WM_HANDHELDFIRST" value="856" />
          <field name="WM_HANDHELDLAST" id="F:MControl.Win32.Msgs.WM_HANDHELDLAST" value="863" />
          <field name="WM_AFXFIRST" id="F:MControl.Win32.Msgs.WM_AFXFIRST" value="864" />
          <field name="WM_AFXLAST" id="F:MControl.Win32.Msgs.WM_AFXLAST" value="895" />
          <field name="WM_PENWINFIRST" id="F:MControl.Win32.Msgs.WM_PENWINFIRST" value="896" />
          <field name="WM_PENWINLAST" id="F:MControl.Win32.Msgs.WM_PENWINLAST" value="911" />
          <field name="WM_APP" id="F:MControl.Win32.Msgs.WM_APP" value="32768" />
          <field name="WM_USER" id="F:MControl.Win32.Msgs.WM_USER" value="1024" />
        </enumeration>
        <enumeration name="NotificationMessages" id="T:MControl.Win32.NotificationMessages" displayName="NotificationMessages" namespace="MControl.Win32" access="Public">
          <field name="NM_FIRST" id="F:MControl.Win32.NotificationMessages.NM_FIRST" value="0" />
          <field name="NM_CUSTOMDRAW" id="F:MControl.Win32.NotificationMessages.NM_CUSTOMDRAW" value="-12" />
          <field name="NM_NCHITTEST" id="F:MControl.Win32.NotificationMessages.NM_NCHITTEST" value="-14" />
        </enumeration>
        <enumeration name="NotifyCommand" id="T:MControl.Win32.NotifyCommand" displayName="NotifyCommand" namespace="MControl.Win32" access="Public">
          <field name="NIM_ADD" id="F:MControl.Win32.NotifyCommand.NIM_ADD" value="0" />
          <field name="NIM_MODIFY" id="F:MControl.Win32.NotifyCommand.NIM_MODIFY" value="1" />
          <field name="NIM_DELETE" id="F:MControl.Win32.NotifyCommand.NIM_DELETE" value="2" />
          <field name="NIM_SETFOCUS" id="F:MControl.Win32.NotifyCommand.NIM_SETFOCUS" value="3" />
          <field name="NIM_SETVERSION" id="F:MControl.Win32.NotifyCommand.NIM_SETVERSION" value="4" />
        </enumeration>
        <enumeration name="NotifyFlags" id="T:MControl.Win32.NotifyFlags" displayName="NotifyFlags" namespace="MControl.Win32" access="Public" flags="true">
          <attribute name="FlagsAttribute" id="T:System.FlagsAttribute" />
          <field name="NIF_MESSAGE" id="F:MControl.Win32.NotifyFlags.NIF_MESSAGE" value="1" />
          <field name="NIF_ICON" id="F:MControl.Win32.NotifyFlags.NIF_ICON" value="2" />
          <field name="NIF_TIP" id="F:MControl.Win32.NotifyFlags.NIF_TIP" value="4" />
          <field name="NIF_STATE" id="F:MControl.Win32.NotifyFlags.NIF_STATE" value="8" />
          <field name="NIF_INFO" id="F:MControl.Win32.NotifyFlags.NIF_INFO" value="16" />
        </enumeration>
        <enumeration name="NotifyInfoFlags" id="T:MControl.Win32.NotifyInfoFlags" displayName="NotifyInfoFlags" namespace="MControl.Win32" access="Public" flags="true">
          <attribute name="FlagsAttribute" id="T:System.FlagsAttribute" />
          <field name="NIIF_NONE" id="F:MControl.Win32.NotifyInfoFlags.NIIF_NONE" value="0" />
          <field name="NIIF_INFO" id="F:MControl.Win32.NotifyInfoFlags.NIIF_INFO" value="1" />
          <field name="NIIF_WARNING" id="F:MControl.Win32.NotifyInfoFlags.NIIF_WARNING" value="2" />
          <field name="NIIF_ERROR" id="F:MControl.Win32.NotifyInfoFlags.NIIF_ERROR" value="3" />
        </enumeration>
        <enumeration name="NotifyState" id="T:MControl.Win32.NotifyState" displayName="NotifyState" namespace="MControl.Win32" access="Public">
          <field name="NIS_HIDDEN" id="F:MControl.Win32.NotifyState.NIS_HIDDEN" value="1" />
          <field name="NIS_SHAREDICON" id="F:MControl.Win32.NotifyState.NIS_SHAREDICON" value="2" />
        </enumeration>
        <enumeration name="ObjectTypes" id="T:MControl.Win32.ObjectTypes" displayName="ObjectTypes" namespace="MControl.Win32" access="Public">
          <field name="OBJ_PEN" id="F:MControl.Win32.ObjectTypes.OBJ_PEN" value="1" />
          <field name="OBJ_BRUSH" id="F:MControl.Win32.ObjectTypes.OBJ_BRUSH" value="2" />
          <field name="OBJ_DC" id="F:MControl.Win32.ObjectTypes.OBJ_DC" value="3" />
          <field name="OBJ_METADC" id="F:MControl.Win32.ObjectTypes.OBJ_METADC" value="4" />
          <field name="OBJ_PAL" id="F:MControl.Win32.ObjectTypes.OBJ_PAL" value="5" />
          <field name="OBJ_FONT" id="F:MControl.Win32.ObjectTypes.OBJ_FONT" value="6" />
          <field name="OBJ_BITMAP" id="F:MControl.Win32.ObjectTypes.OBJ_BITMAP" value="7" />
          <field name="OBJ_REGION" id="F:MControl.Win32.ObjectTypes.OBJ_REGION" value="8" />
          <field name="OBJ_METAFILE" id="F:MControl.Win32.ObjectTypes.OBJ_METAFILE" value="9" />
          <field name="OBJ_MEMDC" id="F:MControl.Win32.ObjectTypes.OBJ_MEMDC" value="10" />
          <field name="OBJ_EXTPEN" id="F:MControl.Win32.ObjectTypes.OBJ_EXTPEN" value="11" />
          <field name="OBJ_ENHMETADC" id="F:MControl.Win32.ObjectTypes.OBJ_ENHMETADC" value="12" />
          <field name="OBJ_ENHMETAFILE" id="F:MControl.Win32.ObjectTypes.OBJ_ENHMETAFILE" value="13" />
        </enumeration>
        <enumeration name="PatBltTypes" id="T:MControl.Win32.PatBltTypes" displayName="PatBltTypes" namespace="MControl.Win32" access="Public">
          <field name="SRCCOPY" id="F:MControl.Win32.PatBltTypes.SRCCOPY" value="13369376" />
          <field name="SRCPAINT" id="F:MControl.Win32.PatBltTypes.SRCPAINT" value="15597702" />
          <field name="SRCAND" id="F:MControl.Win32.PatBltTypes.SRCAND" value="8913094" />
          <field name="SRCINVERT" id="F:MControl.Win32.PatBltTypes.SRCINVERT" value="6684742" />
          <field name="SRCERASE" id="F:MControl.Win32.PatBltTypes.SRCERASE" value="4457256" />
          <field name="NOTSRCCOPY" id="F:MControl.Win32.PatBltTypes.NOTSRCCOPY" value="3342344" />
          <field name="NOTSRCERASE" id="F:MControl.Win32.PatBltTypes.NOTSRCERASE" value="1114278" />
          <field name="MERGECOPY" id="F:MControl.Win32.PatBltTypes.MERGECOPY" value="12583114" />
          <field name="MERGEPAINT" id="F:MControl.Win32.PatBltTypes.MERGEPAINT" value="12255782" />
          <field name="PATCOPY" id="F:MControl.Win32.PatBltTypes.PATCOPY" value="15728673" />
          <field name="PATPAINT" id="F:MControl.Win32.PatBltTypes.PATPAINT" value="16452105" />
          <field name="PATINVERT" id="F:MControl.Win32.PatBltTypes.PATINVERT" value="5898313" />
          <field name="DSTINVERT" id="F:MControl.Win32.PatBltTypes.DSTINVERT" value="5570569" />
          <field name="BLACKNESS" id="F:MControl.Win32.PatBltTypes.BLACKNESS" value="66" />
          <field name="WHITENESS" id="F:MControl.Win32.PatBltTypes.WHITENESS" value="16711778" />
        </enumeration>
        <enumeration name="PeekMessageFlags" id="T:MControl.Win32.PeekMessageFlags" displayName="PeekMessageFlags" namespace="MControl.Win32" access="Public">
          <field name="PM_NOREMOVE" id="F:MControl.Win32.PeekMessageFlags.PM_NOREMOVE" value="0" />
          <field name="PM_REMOVE" id="F:MControl.Win32.PeekMessageFlags.PM_REMOVE" value="1" />
          <field name="PM_NOYIELD" id="F:MControl.Win32.PeekMessageFlags.PM_NOYIELD" value="2" />
        </enumeration>
        <enumeration name="RasterOperations" id="T:MControl.Win32.RasterOperations" displayName="RasterOperations" namespace="MControl.Win32" access="Public" baseTypeId="T:System.UInt32">
          <field name="SRCCOPY" id="F:MControl.Win32.RasterOperations.SRCCOPY" value="13369376" />
          <field name="SRCPAINT" id="F:MControl.Win32.RasterOperations.SRCPAINT" value="15597702" />
          <field name="SRCAND" id="F:MControl.Win32.RasterOperations.SRCAND" value="8913094" />
          <field name="SRCINVERT" id="F:MControl.Win32.RasterOperations.SRCINVERT" value="6684742" />
          <field name="SRCERASE" id="F:MControl.Win32.RasterOperations.SRCERASE" value="4457256" />
          <field name="NOTSRCCOPY" id="F:MControl.Win32.RasterOperations.NOTSRCCOPY" value="3342344" />
          <field name="NOTSRCERASE" id="F:MControl.Win32.RasterOperations.NOTSRCERASE" value="1114278" />
          <field name="MERGECOPY" id="F:MControl.Win32.RasterOperations.MERGECOPY" value="12583114" />
          <field name="MERGEPAINT" id="F:MControl.Win32.RasterOperations.MERGEPAINT" value="12255782" />
          <field name="PATCOPY" id="F:MControl.Win32.RasterOperations.PATCOPY" value="15728673" />
          <field name="PATPAINT" id="F:MControl.Win32.RasterOperations.PATPAINT" value="16452105" />
          <field name="PATINVERT" id="F:MControl.Win32.RasterOperations.PATINVERT" value="5898313" />
          <field name="DSTINVERT" id="F:MControl.Win32.RasterOperations.DSTINVERT" value="5570569" />
          <field name="BLACKNESS" id="F:MControl.Win32.RasterOperations.BLACKNESS" value="66" />
          <field name="WHITENESS" id="F:MControl.Win32.RasterOperations.WHITENESS" value="16711778" />
        </enumeration>
        <enumeration name="RebarInfoMask" id="T:MControl.Win32.RebarInfoMask" displayName="RebarInfoMask" namespace="MControl.Win32" access="Public">
          <field name="RBBIM_STYLE" id="F:MControl.Win32.RebarInfoMask.RBBIM_STYLE" value="1" />
          <field name="RBBIM_COLORS" id="F:MControl.Win32.RebarInfoMask.RBBIM_COLORS" value="2" />
          <field name="RBBIM_TEXT" id="F:MControl.Win32.RebarInfoMask.RBBIM_TEXT" value="4" />
          <field name="RBBIM_IMAGE" id="F:MControl.Win32.RebarInfoMask.RBBIM_IMAGE" value="8" />
          <field name="RBBIM_CHILD" id="F:MControl.Win32.RebarInfoMask.RBBIM_CHILD" value="16" />
          <field name="RBBIM_CHILDSIZE" id="F:MControl.Win32.RebarInfoMask.RBBIM_CHILDSIZE" value="32" />
          <field name="RBBIM_SIZE" id="F:MControl.Win32.RebarInfoMask.RBBIM_SIZE" value="64" />
          <field name="RBBIM_BACKGROUND" id="F:MControl.Win32.RebarInfoMask.RBBIM_BACKGROUND" value="128" />
          <field name="RBBIM_ID" id="F:MControl.Win32.RebarInfoMask.RBBIM_ID" value="256" />
          <field name="RBBIM_IDEALSIZE" id="F:MControl.Win32.RebarInfoMask.RBBIM_IDEALSIZE" value="512" />
          <field name="RBBIM_LPARAM" id="F:MControl.Win32.RebarInfoMask.RBBIM_LPARAM" value="1024" />
          <field name="BBIM_HEADERSIZE" id="F:MControl.Win32.RebarInfoMask.BBIM_HEADERSIZE" value="2048" />
        </enumeration>
        <enumeration name="RebarMessages" id="T:MControl.Win32.RebarMessages" displayName="RebarMessages" namespace="MControl.Win32" access="Public">
          <field name="CCM_FIRST" id="F:MControl.Win32.RebarMessages.CCM_FIRST" value="8192" />
          <field name="WM_USER" id="F:MControl.Win32.RebarMessages.WM_USER" value="1024" />
          <field name="RB_INSERTBANDA" id="F:MControl.Win32.RebarMessages.RB_INSERTBANDA" value="1025" />
          <field name="RB_DELETEBAND" id="F:MControl.Win32.RebarMessages.RB_DELETEBAND" value="1026" />
          <field name="RB_GETBARINFO" id="F:MControl.Win32.RebarMessages.RB_GETBARINFO" value="1027" />
          <field name="RB_SETBARINFO" id="F:MControl.Win32.RebarMessages.RB_SETBARINFO" value="1028" />
          <field name="RB_GETBANDINFO" id="F:MControl.Win32.RebarMessages.RB_GETBANDINFO" value="1029" />
          <field name="RB_SETBANDINFOA" id="F:MControl.Win32.RebarMessages.RB_SETBANDINFOA" value="1030" />
          <field name="RB_SETPARENT" id="F:MControl.Win32.RebarMessages.RB_SETPARENT" value="1031" />
          <field name="RB_HITTEST" id="F:MControl.Win32.RebarMessages.RB_HITTEST" value="1032" />
          <field name="RB_GETRECT" id="F:MControl.Win32.RebarMessages.RB_GETRECT" value="1033" />
          <field name="RB_INSERTBANDW" id="F:MControl.Win32.RebarMessages.RB_INSERTBANDW" value="1034" />
          <field name="RB_SETBANDINFOW" id="F:MControl.Win32.RebarMessages.RB_SETBANDINFOW" value="1035" />
          <field name="RB_GETBANDCOUNT" id="F:MControl.Win32.RebarMessages.RB_GETBANDCOUNT" value="1036" />
          <field name="RB_GETROWCOUNT" id="F:MControl.Win32.RebarMessages.RB_GETROWCOUNT" value="1037" />
          <field name="RB_GETROWHEIGHT" id="F:MControl.Win32.RebarMessages.RB_GETROWHEIGHT" value="1038" />
          <field name="RB_IDTOINDEX" id="F:MControl.Win32.RebarMessages.RB_IDTOINDEX" value="1040" />
          <field name="RB_GETTOOLTIPS" id="F:MControl.Win32.RebarMessages.RB_GETTOOLTIPS" value="1041" />
          <field name="RB_SETTOOLTIPS" id="F:MControl.Win32.RebarMessages.RB_SETTOOLTIPS" value="1042" />
          <field name="RB_SETBKCOLOR" id="F:MControl.Win32.RebarMessages.RB_SETBKCOLOR" value="1043" />
          <field name="RB_GETBKCOLOR" id="F:MControl.Win32.RebarMessages.RB_GETBKCOLOR" value="1044" />
          <field name="RB_SETTEXTCOLOR" id="F:MControl.Win32.RebarMessages.RB_SETTEXTCOLOR" value="1045" />
          <field name="RB_GETTEXTCOLOR" id="F:MControl.Win32.RebarMessages.RB_GETTEXTCOLOR" value="1046" />
          <field name="RB_SIZETORECT" id="F:MControl.Win32.RebarMessages.RB_SIZETORECT" value="1047" />
          <field name="RB_SETCOLORSCHEME" id="F:MControl.Win32.RebarMessages.RB_SETCOLORSCHEME" value="8194" />
          <field name="RB_GETCOLORSCHEME" id="F:MControl.Win32.RebarMessages.RB_GETCOLORSCHEME" value="8195" />
          <field name="RB_BEGINDRAG" id="F:MControl.Win32.RebarMessages.RB_BEGINDRAG" value="1048" />
          <field name="RB_ENDDRAG" id="F:MControl.Win32.RebarMessages.RB_ENDDRAG" value="1049" />
          <field name="RB_DRAGMOVE" id="F:MControl.Win32.RebarMessages.RB_DRAGMOVE" value="1050" />
          <field name="RB_GETBARHEIGHT" id="F:MControl.Win32.RebarMessages.RB_GETBARHEIGHT" value="1051" />
          <field name="RB_GETBANDINFOW" id="F:MControl.Win32.RebarMessages.RB_GETBANDINFOW" value="1052" />
          <field name="RB_GETBANDINFOA" id="F:MControl.Win32.RebarMessages.RB_GETBANDINFOA" value="1053" />
          <field name="RB_MINIMIZEBAND" id="F:MControl.Win32.RebarMessages.RB_MINIMIZEBAND" value="1054" />
          <field name="RB_MAXIMIZEBAND" id="F:MControl.Win32.RebarMessages.RB_MAXIMIZEBAND" value="1055" />
          <field name="RB_GETDROPTARGET" id="F:MControl.Win32.RebarMessages.RB_GETDROPTARGET" value="8196" />
          <field name="RB_GETBANDBORDERS" id="F:MControl.Win32.RebarMessages.RB_GETBANDBORDERS" value="1058" />
          <field name="RB_SHOWBAND" id="F:MControl.Win32.RebarMessages.RB_SHOWBAND" value="1059" />
          <field name="RB_SETPALETTE" id="F:MControl.Win32.RebarMessages.RB_SETPALETTE" value="1061" />
          <field name="RB_GETPALETTE" id="F:MControl.Win32.RebarMessages.RB_GETPALETTE" value="1062" />
          <field name="RB_MOVEBAND" id="F:MControl.Win32.RebarMessages.RB_MOVEBAND" value="1063" />
          <field name="RB_SETUNICODEFORMAT" id="F:MControl.Win32.RebarMessages.RB_SETUNICODEFORMAT" value="8197" />
          <field name="RB_GETUNICODEFORMAT" id="F:MControl.Win32.RebarMessages.RB_GETUNICODEFORMAT" value="8198" />
        </enumeration>
        <enumeration name="RebarNotifications" id="T:MControl.Win32.RebarNotifications" displayName="RebarNotifications" namespace="MControl.Win32" access="Public">
          <field name="RBN_FIRST" id="F:MControl.Win32.RebarNotifications.RBN_FIRST" value="-831" />
          <field name="RBN_HEIGHTCHANGE" id="F:MControl.Win32.RebarNotifications.RBN_HEIGHTCHANGE" value="-831" />
          <field name="RBN_GETOBJECT" id="F:MControl.Win32.RebarNotifications.RBN_GETOBJECT" value="-832" />
          <field name="RBN_LAYOUTCHANGED" id="F:MControl.Win32.RebarNotifications.RBN_LAYOUTCHANGED" value="-833" />
          <field name="RBN_AUTOSIZE" id="F:MControl.Win32.RebarNotifications.RBN_AUTOSIZE" value="-834" />
          <field name="RBN_BEGINDRAG" id="F:MControl.Win32.RebarNotifications.RBN_BEGINDRAG" value="-835" />
          <field name="RBN_ENDDRAG" id="F:MControl.Win32.RebarNotifications.RBN_ENDDRAG" value="-836" />
          <field name="RBN_DELETINGBAND" id="F:MControl.Win32.RebarNotifications.RBN_DELETINGBAND" value="-837" />
          <field name="RBN_DELETEDBAND" id="F:MControl.Win32.RebarNotifications.RBN_DELETEDBAND" value="-838" />
          <field name="RBN_CHILDSIZE" id="F:MControl.Win32.RebarNotifications.RBN_CHILDSIZE" value="-839" />
          <field name="RBN_CHEVRONPUSHED" id="F:MControl.Win32.RebarNotifications.RBN_CHEVRONPUSHED" value="-841" />
        </enumeration>
        <enumeration name="RebarStyles" id="T:MControl.Win32.RebarStyles" displayName="RebarStyles" namespace="MControl.Win32" access="Public">
          <field name="RBS_TOOLTIPS" id="F:MControl.Win32.RebarStyles.RBS_TOOLTIPS" value="256" />
          <field name="RBS_VARHEIGHT" id="F:MControl.Win32.RebarStyles.RBS_VARHEIGHT" value="512" />
          <field name="RBS_BANDBORDERS" id="F:MControl.Win32.RebarStyles.RBS_BANDBORDERS" value="1024" />
          <field name="RBS_FIXEDORDER" id="F:MControl.Win32.RebarStyles.RBS_FIXEDORDER" value="2048" />
          <field name="RBS_REGISTERDROP" id="F:MControl.Win32.RebarStyles.RBS_REGISTERDROP" value="4096" />
          <field name="RBS_AUTOSIZE" id="F:MControl.Win32.RebarStyles.RBS_AUTOSIZE" value="8192" />
          <field name="RBS_VERTICALGRIPPER" id="F:MControl.Win32.RebarStyles.RBS_VERTICALGRIPPER" value="16384" />
          <field name="RBS_DBLCLKTOGGLE" id="F:MControl.Win32.RebarStyles.RBS_DBLCLKTOGGLE" value="32768" />
        </enumeration>
        <enumeration name="RebarStylesEx" id="T:MControl.Win32.RebarStylesEx" displayName="RebarStylesEx" namespace="MControl.Win32" access="Public">
          <field name="RBBS_BREAK" id="F:MControl.Win32.RebarStylesEx.RBBS_BREAK" value="1" />
          <field name="RBBS_CHILDEDGE" id="F:MControl.Win32.RebarStylesEx.RBBS_CHILDEDGE" value="4" />
          <field name="RBBS_FIXEDBMP" id="F:MControl.Win32.RebarStylesEx.RBBS_FIXEDBMP" value="32" />
          <field name="RBBS_GRIPPERALWAYS" id="F:MControl.Win32.RebarStylesEx.RBBS_GRIPPERALWAYS" value="128" />
          <field name="RBBS_USECHEVRON" id="F:MControl.Win32.RebarStylesEx.RBBS_USECHEVRON" value="512" />
        </enumeration>
        <enumeration name="ReflectedMessages" id="T:MControl.Win32.ReflectedMessages" displayName="ReflectedMessages" namespace="MControl.Win32" access="Public">
          <field name="OCM__BASE" id="F:MControl.Win32.ReflectedMessages.OCM__BASE" value="8192" />
          <field name="OCM_COMMAND" id="F:MControl.Win32.ReflectedMessages.OCM_COMMAND" value="8465" />
          <field name="OCM_CTLCOLORBTN" id="F:MControl.Win32.ReflectedMessages.OCM_CTLCOLORBTN" value="8501" />
          <field name="OCM_CTLCOLOREDIT" id="F:MControl.Win32.ReflectedMessages.OCM_CTLCOLOREDIT" value="8499" />
          <field name="OCM_CTLCOLORDLG" id="F:MControl.Win32.ReflectedMessages.OCM_CTLCOLORDLG" value="8502" />
          <field name="OCM_CTLCOLORLISTBOX" id="F:MControl.Win32.ReflectedMessages.OCM_CTLCOLORLISTBOX" value="8500" />
          <field name="OCM_CTLCOLORMSGBOX" id="F:MControl.Win32.ReflectedMessages.OCM_CTLCOLORMSGBOX" value="8498" />
          <field name="OCM_CTLCOLORSCROLLBAR" id="F:MControl.Win32.ReflectedMessages.OCM_CTLCOLORSCROLLBAR" value="8503" />
          <field name="OCM_CTLCOLORSTATIC" id="F:MControl.Win32.ReflectedMessages.OCM_CTLCOLORSTATIC" value="8504" />
          <field name="OCM_CTLCOLOR" id="F:MControl.Win32.ReflectedMessages.OCM_CTLCOLOR" value="8217" />
          <field name="OCM_DRAWITEM" id="F:MControl.Win32.ReflectedMessages.OCM_DRAWITEM" value="8235" />
          <field name="OCM_MEASUREITEM" id="F:MControl.Win32.ReflectedMessages.OCM_MEASUREITEM" value="8236" />
          <field name="OCM_DELETEITEM" id="F:MControl.Win32.ReflectedMessages.OCM_DELETEITEM" value="8237" />
          <field name="OCM_VKEYTOITEM" id="F:MControl.Win32.ReflectedMessages.OCM_VKEYTOITEM" value="8238" />
          <field name="OCM_CHARTOITEM" id="F:MControl.Win32.ReflectedMessages.OCM_CHARTOITEM" value="8239" />
          <field name="OCM_COMPAREITEM" id="F:MControl.Win32.ReflectedMessages.OCM_COMPAREITEM" value="8249" />
          <field name="OCM_HSCROLL" id="F:MControl.Win32.ReflectedMessages.OCM_HSCROLL" value="8468" />
          <field name="OCM_VSCROLL" id="F:MControl.Win32.ReflectedMessages.OCM_VSCROLL" value="8469" />
          <field name="OCM_PARENTNOTIFY" id="F:MControl.Win32.ReflectedMessages.OCM_PARENTNOTIFY" value="8720" />
          <field name="OCM_NOTIFY" id="F:MControl.Win32.ReflectedMessages.OCM_NOTIFY" value="8270" />
        </enumeration>
        <enumeration name="RichEditAlignment" id="T:MControl.Win32.RichEditAlignment" displayName="RichEditAlignment" namespace="MControl.Win32" access="Public">
          <field name="PFA_LEFT" id="F:MControl.Win32.RichEditAlignment.PFA_LEFT" value="1" />
          <field name="PFA_RIGHT" id="F:MControl.Win32.RichEditAlignment.PFA_RIGHT" value="2" />
          <field name="PFA_CENTER" id="F:MControl.Win32.RichEditAlignment.PFA_CENTER" value="3" />
          <field name="PFA_JUSTIFY" id="F:MControl.Win32.RichEditAlignment.PFA_JUSTIFY" value="4" />
          <field name="PFA_FULL_INTERWORD" id="F:MControl.Win32.RichEditAlignment.PFA_FULL_INTERWORD" value="4" />
        </enumeration>
        <enumeration name="RichEditMask" id="T:MControl.Win32.RichEditMask" displayName="RichEditMask" namespace="MControl.Win32" access="Public" flags="true">
          <attribute name="FlagsAttribute" id="T:System.FlagsAttribute" />
          <field name="PFM_ALIGNMENT" id="F:MControl.Win32.RichEditMask.PFM_ALIGNMENT" value="8" />
          <field name="PFM_BORDER" id="F:MControl.Win32.RichEditMask.PFM_BORDER" value="2048" />
          <field name="PFM_LINESPACING" id="F:MControl.Win32.RichEditMask.PFM_LINESPACING" value="256" />
          <field name="PFM_NUMBERING" id="F:MControl.Win32.RichEditMask.PFM_NUMBERING" value="32" />
          <field name="PFM_NUMBERINGSTART" id="F:MControl.Win32.RichEditMask.PFM_NUMBERINGSTART" value="32768" />
          <field name="PFM_NUMBERINGSTYLE" id="F:MControl.Win32.RichEditMask.PFM_NUMBERINGSTYLE" value="8192" />
          <field name="PFM_NUMBERINGTAB" id="F:MControl.Win32.RichEditMask.PFM_NUMBERINGTAB" value="16384" />
          <field name="PFM_OFFSET" id="F:MControl.Win32.RichEditMask.PFM_OFFSET" value="4" />
          <field name="PFM_OFFSETINDENT" id="F:MControl.Win32.RichEditMask.PFM_OFFSETINDENT" value="-2147483648" />
          <field name="PFM_RIGHTINDENT" id="F:MControl.Win32.RichEditMask.PFM_RIGHTINDENT" value="2" />
          <field name="PFM_SHADING" id="F:MControl.Win32.RichEditMask.PFM_SHADING" value="4096" />
          <field name="PFM_SPACEAFTER" id="F:MControl.Win32.RichEditMask.PFM_SPACEAFTER" value="128" />
          <field name="PFM_SPACEBEFORE" id="F:MControl.Win32.RichEditMask.PFM_SPACEBEFORE" value="64" />
          <field name="PFM_STARTINDENT" id="F:MControl.Win32.RichEditMask.PFM_STARTINDENT" value="1" />
          <field name="PFM_STYLE" id="F:MControl.Win32.RichEditMask.PFM_STYLE" value="1024" />
          <field name="PFM_TABSTOPS" id="F:MControl.Win32.RichEditMask.PFM_TABSTOPS" value="16" />
        </enumeration>
        <enumeration name="RichEditMessages" id="T:MControl.Win32.RichEditMessages" displayName="RichEditMessages" namespace="MControl.Win32" access="Public">
          <field name="EM_CANPASTE" id="F:MControl.Win32.RichEditMessages.EM_CANPASTE" value="1074" />
          <field name="EM_DISPLAYBAND" id="F:MControl.Win32.RichEditMessages.EM_DISPLAYBAND" value="1075" />
          <field name="EM_EXGETSEL" id="F:MControl.Win32.RichEditMessages.EM_EXGETSEL" value="1076" />
          <field name="EM_EXLIMITTEXT" id="F:MControl.Win32.RichEditMessages.EM_EXLIMITTEXT" value="1077" />
          <field name="EM_EXLINEFROMCHAR" id="F:MControl.Win32.RichEditMessages.EM_EXLINEFROMCHAR" value="1078" />
          <field name="EM_EXSETSEL" id="F:MControl.Win32.RichEditMessages.EM_EXSETSEL" value="1079" />
          <field name="EM_FINDTEXT" id="F:MControl.Win32.RichEditMessages.EM_FINDTEXT" value="1080" />
          <field name="EM_FORMATRANGE" id="F:MControl.Win32.RichEditMessages.EM_FORMATRANGE" value="1081" />
          <field name="EM_GETCHARFORMAT" id="F:MControl.Win32.RichEditMessages.EM_GETCHARFORMAT" value="1082" />
          <field name="EM_GETEVENTMASK" id="F:MControl.Win32.RichEditMessages.EM_GETEVENTMASK" value="1083" />
          <field name="EM_GETOLEINTERFACE" id="F:MControl.Win32.RichEditMessages.EM_GETOLEINTERFACE" value="1084" />
          <field name="EM_GETPARAFORMAT" id="F:MControl.Win32.RichEditMessages.EM_GETPARAFORMAT" value="1085" />
          <field name="EM_GETSELTEXT" id="F:MControl.Win32.RichEditMessages.EM_GETSELTEXT" value="1086" />
          <field name="EM_HIDESELECTION" id="F:MControl.Win32.RichEditMessages.EM_HIDESELECTION" value="1087" />
          <field name="EM_PASTESPECIAL" id="F:MControl.Win32.RichEditMessages.EM_PASTESPECIAL" value="1088" />
          <field name="EM_REQUESTRESIZE" id="F:MControl.Win32.RichEditMessages.EM_REQUESTRESIZE" value="1089" />
          <field name="EM_SELECTIONTYPE" id="F:MControl.Win32.RichEditMessages.EM_SELECTIONTYPE" value="1090" />
          <field name="EM_SETBKGNDCOLOR" id="F:MControl.Win32.RichEditMessages.EM_SETBKGNDCOLOR" value="1091" />
          <field name="EM_SETCHARFORMAT" id="F:MControl.Win32.RichEditMessages.EM_SETCHARFORMAT" value="1092" />
          <field name="EM_SETEVENTMASK" id="F:MControl.Win32.RichEditMessages.EM_SETEVENTMASK" value="1093" />
          <field name="EM_SETOLECALLBACK" id="F:MControl.Win32.RichEditMessages.EM_SETOLECALLBACK" value="1094" />
          <field name="EM_SETPARAFORMAT" id="F:MControl.Win32.RichEditMessages.EM_SETPARAFORMAT" value="1095" />
          <field name="EM_SETTARGETDEVICE" id="F:MControl.Win32.RichEditMessages.EM_SETTARGETDEVICE" value="1096" />
          <field name="EM_STREAMIN" id="F:MControl.Win32.RichEditMessages.EM_STREAMIN" value="1097" />
          <field name="EM_STREAMOUT" id="F:MControl.Win32.RichEditMessages.EM_STREAMOUT" value="1098" />
          <field name="EM_GETTEXTRANGE" id="F:MControl.Win32.RichEditMessages.EM_GETTEXTRANGE" value="1099" />
          <field name="EM_FINDWORDBREAK" id="F:MControl.Win32.RichEditMessages.EM_FINDWORDBREAK" value="1100" />
          <field name="EM_SETOPTIONS" id="F:MControl.Win32.RichEditMessages.EM_SETOPTIONS" value="1101" />
          <field name="EM_GETOPTIONS" id="F:MControl.Win32.RichEditMessages.EM_GETOPTIONS" value="1102" />
          <field name="EM_FINDTEXTEX" id="F:MControl.Win32.RichEditMessages.EM_FINDTEXTEX" value="1103" />
          <field name="EM_SETTYPOGRAPHYOPTIONS" id="F:MControl.Win32.RichEditMessages.EM_SETTYPOGRAPHYOPTIONS" value="1226" />
          <field name="EM_GETTYPOGRAPHYOPTIONS" id="F:MControl.Win32.RichEditMessages.EM_GETTYPOGRAPHYOPTIONS" value="1227" />
        </enumeration>
        <enumeration name="RichEditNumbering" id="T:MControl.Win32.RichEditNumbering" displayName="RichEditNumbering" namespace="MControl.Win32" access="Public">
          <field name="PFN_NONE" id="F:MControl.Win32.RichEditNumbering.PFN_NONE" value="0" />
          <field name="PFN_BULLET" id="F:MControl.Win32.RichEditNumbering.PFN_BULLET" value="1" />
          <field name="PFN_ARABIC" id="F:MControl.Win32.RichEditNumbering.PFN_ARABIC" value="2" />
          <field name="PFN_LCLETTER" id="F:MControl.Win32.RichEditNumbering.PFN_LCLETTER" value="3" />
          <field name="PFN_UCLETTER" id="F:MControl.Win32.RichEditNumbering.PFN_UCLETTER" value="4" />
          <field name="PFN_LCROMAN" id="F:MControl.Win32.RichEditNumbering.PFN_LCROMAN" value="5" />
          <field name="PFN_UCROMAN" id="F:MControl.Win32.RichEditNumbering.PFN_UCROMAN" value="6" />
        </enumeration>
        <enumeration name="RichEditNumberingStyle" id="T:MControl.Win32.RichEditNumberingStyle" displayName="RichEditNumberingStyle" namespace="MControl.Win32" access="Public">
          <field name="None" id="F:MControl.Win32.RichEditNumberingStyle.None" value="0" />
          <field name="Enclose" id="F:MControl.Win32.RichEditNumberingStyle.Enclose" value="256" />
          <field name="Folllows" id="F:MControl.Win32.RichEditNumberingStyle.Folllows" value="512" />
          <field name="Number" id="F:MControl.Win32.RichEditNumberingStyle.Number" value="768" />
          <field name="Continue" id="F:MControl.Win32.RichEditNumberingStyle.Continue" value="1024" />
          <field name="UseStart" id="F:MControl.Win32.RichEditNumberingStyle.UseStart" value="32768" />
        </enumeration>
        <enumeration name="RichEditTypography" id="T:MControl.Win32.RichEditTypography" displayName="RichEditTypography" namespace="MControl.Win32" access="Public">
          <field name="TO_ADVANCEDTYPOGRAPHY" id="F:MControl.Win32.RichEditTypography.TO_ADVANCEDTYPOGRAPHY" value="1" />
          <field name="TO_SIMPLELINEBREAK" id="F:MControl.Win32.RichEditTypography.TO_SIMPLELINEBREAK" value="2" />
        </enumeration>
        <enumeration name="ScrollBarFlags" id="T:MControl.Win32.ScrollBarFlags" displayName="ScrollBarFlags" namespace="MControl.Win32" access="Public">
          <field name="SBS_HORZ" id="F:MControl.Win32.ScrollBarFlags.SBS_HORZ" value="0" />
          <field name="SBS_VERT" id="F:MControl.Win32.ScrollBarFlags.SBS_VERT" value="1" />
          <field name="SBS_TOPALIGN" id="F:MControl.Win32.ScrollBarFlags.SBS_TOPALIGN" value="2" />
          <field name="SBS_LEFTALIGN" id="F:MControl.Win32.ScrollBarFlags.SBS_LEFTALIGN" value="2" />
          <field name="SBS_BOTTOMALIGN" id="F:MControl.Win32.ScrollBarFlags.SBS_BOTTOMALIGN" value="4" />
          <field name="SBS_RIGHTALIGN" id="F:MControl.Win32.ScrollBarFlags.SBS_RIGHTALIGN" value="4" />
          <field name="SBS_SIZEBOXTOPLEFTALIGN" id="F:MControl.Win32.ScrollBarFlags.SBS_SIZEBOXTOPLEFTALIGN" value="2" />
          <field name="SBS_SIZEBOXBOTTOMRIGHTALIGN" id="F:MControl.Win32.ScrollBarFlags.SBS_SIZEBOXBOTTOMRIGHTALIGN" value="4" />
          <field name="SBS_SIZEBOX" id="F:MControl.Win32.ScrollBarFlags.SBS_SIZEBOX" value="8" />
          <field name="SBS_SIZEGRIP" id="F:MControl.Win32.ScrollBarFlags.SBS_SIZEGRIP" value="16" />
        </enumeration>
        <enumeration name="ScrollBarInfoFlags" id="T:MControl.Win32.ScrollBarInfoFlags" displayName="ScrollBarInfoFlags" namespace="MControl.Win32" access="Public">
          <field name="SIF_RANGE" id="F:MControl.Win32.ScrollBarInfoFlags.SIF_RANGE" value="1" />
          <field name="SIF_PAGE" id="F:MControl.Win32.ScrollBarInfoFlags.SIF_PAGE" value="2" />
          <field name="SIF_POS" id="F:MControl.Win32.ScrollBarInfoFlags.SIF_POS" value="4" />
          <field name="SIF_DISABLENOSCROLL" id="F:MControl.Win32.ScrollBarInfoFlags.SIF_DISABLENOSCROLL" value="8" />
          <field name="SIF_TRACKPOS" id="F:MControl.Win32.ScrollBarInfoFlags.SIF_TRACKPOS" value="16" />
          <field name="SIF_ALL" id="F:MControl.Win32.ScrollBarInfoFlags.SIF_ALL" value="23" />
        </enumeration>
        <enumeration name="ScrollBarRequests" id="T:MControl.Win32.ScrollBarRequests" displayName="ScrollBarRequests" namespace="MControl.Win32" access="Public">
          <field name="SB_LINEUP" id="F:MControl.Win32.ScrollBarRequests.SB_LINEUP" value="0" />
          <field name="SB_LINELEFT" id="F:MControl.Win32.ScrollBarRequests.SB_LINELEFT" value="0" />
          <field name="SB_LINEDOWN" id="F:MControl.Win32.ScrollBarRequests.SB_LINEDOWN" value="1" />
          <field name="SB_LINERIGHT" id="F:MControl.Win32.ScrollBarRequests.SB_LINERIGHT" value="1" />
          <field name="SB_PAGEUP" id="F:MControl.Win32.ScrollBarRequests.SB_PAGEUP" value="2" />
          <field name="SB_PAGELEFT" id="F:MControl.Win32.ScrollBarRequests.SB_PAGELEFT" value="2" />
          <field name="SB_PAGEDOWN" id="F:MControl.Win32.ScrollBarRequests.SB_PAGEDOWN" value="3" />
          <field name="SB_PAGERIGHT" id="F:MControl.Win32.ScrollBarRequests.SB_PAGERIGHT" value="3" />
          <field name="SB_THUMBPOSITION" id="F:MControl.Win32.ScrollBarRequests.SB_THUMBPOSITION" value="4" />
          <field name="SB_THUMBTRACK" id="F:MControl.Win32.ScrollBarRequests.SB_THUMBTRACK" value="5" />
          <field name="SB_TOP" id="F:MControl.Win32.ScrollBarRequests.SB_TOP" value="6" />
          <field name="SB_LEFT" id="F:MControl.Win32.ScrollBarRequests.SB_LEFT" value="6" />
          <field name="SB_BOTTOM" id="F:MControl.Win32.ScrollBarRequests.SB_BOTTOM" value="7" />
          <field name="SB_RIGHT" id="F:MControl.Win32.ScrollBarRequests.SB_RIGHT" value="7" />
          <field name="SB_ENDSCROLL" id="F:MControl.Win32.ScrollBarRequests.SB_ENDSCROLL" value="8" />
        </enumeration>
        <enumeration name="ScrollBarTypes" id="T:MControl.Win32.ScrollBarTypes" displayName="ScrollBarTypes" namespace="MControl.Win32" access="Public">
          <field name="SB_HORZ" id="F:MControl.Win32.ScrollBarTypes.SB_HORZ" value="0" />
          <field name="SB_VERT" id="F:MControl.Win32.ScrollBarTypes.SB_VERT" value="1" />
          <field name="SB_CTL" id="F:MControl.Win32.ScrollBarTypes.SB_CTL" value="2" />
          <field name="SB_BOTH" id="F:MControl.Win32.ScrollBarTypes.SB_BOTH" value="3" />
        </enumeration>
        <enumeration name="ScrollWindowExFlags" id="T:MControl.Win32.ScrollWindowExFlags" displayName="ScrollWindowExFlags" namespace="MControl.Win32" access="Public">
          <field name="SW_SCROLLCHILDREN" id="F:MControl.Win32.ScrollWindowExFlags.SW_SCROLLCHILDREN" value="1" />
          <field name="SW_INVALIDATE" id="F:MControl.Win32.ScrollWindowExFlags.SW_INVALIDATE" value="2" />
          <field name="SW_ERASE" id="F:MControl.Win32.ScrollWindowExFlags.SW_ERASE" value="4" />
          <field name="SW_SMOOTHSCROLL" id="F:MControl.Win32.ScrollWindowExFlags.SW_SMOOTHSCROLL" value="16" />
        </enumeration>
        <enumeration name="SetWindowLongOffsets" id="T:MControl.Win32.SetWindowLongOffsets" displayName="SetWindowLongOffsets" namespace="MControl.Win32" access="Public">
          <field name="GWL_WNDPROC" id="F:MControl.Win32.SetWindowLongOffsets.GWL_WNDPROC" value="-4" />
          <field name="GWL_HINSTANCE" id="F:MControl.Win32.SetWindowLongOffsets.GWL_HINSTANCE" value="-6" />
          <field name="GWL_HWNDPARENT" id="F:MControl.Win32.SetWindowLongOffsets.GWL_HWNDPARENT" value="-8" />
          <field name="GWL_STYLE" id="F:MControl.Win32.SetWindowLongOffsets.GWL_STYLE" value="-16" />
          <field name="GWL_EXSTYLE" id="F:MControl.Win32.SetWindowLongOffsets.GWL_EXSTYLE" value="-20" />
          <field name="GWL_USERDATA" id="F:MControl.Win32.SetWindowLongOffsets.GWL_USERDATA" value="-21" />
          <field name="GWL_ID" id="F:MControl.Win32.SetWindowLongOffsets.GWL_ID" value="-12" />
        </enumeration>
        <enumeration name="SetWindowPosFlags" id="T:MControl.Win32.SetWindowPosFlags" displayName="SetWindowPosFlags" namespace="MControl.Win32" access="Public" baseTypeId="T:System.UInt32">
          <field name="SWP_NOSIZE" id="F:MControl.Win32.SetWindowPosFlags.SWP_NOSIZE" value="1" />
          <field name="SWP_NOMOVE" id="F:MControl.Win32.SetWindowPosFlags.SWP_NOMOVE" value="2" />
          <field name="SWP_NOZORDER" id="F:MControl.Win32.SetWindowPosFlags.SWP_NOZORDER" value="4" />
          <field name="SWP_NOREDRAW" id="F:MControl.Win32.SetWindowPosFlags.SWP_NOREDRAW" value="8" />
          <field name="SWP_NOACTIVATE" id="F:MControl.Win32.SetWindowPosFlags.SWP_NOACTIVATE" value="16" />
          <field name="SWP_FRAMECHANGED" id="F:MControl.Win32.SetWindowPosFlags.SWP_FRAMECHANGED" value="32" />
          <field name="SWP_SHOWWINDOW" id="F:MControl.Win32.SetWindowPosFlags.SWP_SHOWWINDOW" value="64" />
          <field name="SWP_HIDEWINDOW" id="F:MControl.Win32.SetWindowPosFlags.SWP_HIDEWINDOW" value="128" />
          <field name="SWP_NOCOPYBITS" id="F:MControl.Win32.SetWindowPosFlags.SWP_NOCOPYBITS" value="256" />
          <field name="SWP_NOOWNERZORDER" id="F:MControl.Win32.SetWindowPosFlags.SWP_NOOWNERZORDER" value="512" />
          <field name="SWP_NOSENDCHANGING" id="F:MControl.Win32.SetWindowPosFlags.SWP_NOSENDCHANGING" value="1024" />
          <field name="SWP_DRAWFRAME" id="F:MControl.Win32.SetWindowPosFlags.SWP_DRAWFRAME" value="32" />
          <field name="SWP_NOREPOSITION" id="F:MControl.Win32.SetWindowPosFlags.SWP_NOREPOSITION" value="512" />
          <field name="SWP_DEFERERASE" id="F:MControl.Win32.SetWindowPosFlags.SWP_DEFERERASE" value="8192" />
          <field name="SWP_ASYNCWINDOWPOS" id="F:MControl.Win32.SetWindowPosFlags.SWP_ASYNCWINDOWPOS" value="16384" />
        </enumeration>
        <enumeration name="SetWindowPosZ" id="T:MControl.Win32.SetWindowPosZ" displayName="SetWindowPosZ" namespace="MControl.Win32" access="Public">
          <field name="HWND_TOP" id="F:MControl.Win32.SetWindowPosZ.HWND_TOP" value="0" />
          <field name="HWND_BOTTOM" id="F:MControl.Win32.SetWindowPosZ.HWND_BOTTOM" value="1" />
          <field name="HWND_TOPMOST" id="F:MControl.Win32.SetWindowPosZ.HWND_TOPMOST" value="-1" />
          <field name="HWND_NOTOPMOST" id="F:MControl.Win32.SetWindowPosZ.HWND_NOTOPMOST" value="-2" />
        </enumeration>
        <enumeration name="SetWindowPosZOrder" id="T:MControl.Win32.SetWindowPosZOrder" displayName="SetWindowPosZOrder" namespace="MControl.Win32" access="Public">
          <field name="HWND_TOP" id="F:MControl.Win32.SetWindowPosZOrder.HWND_TOP" value="0" />
          <field name="HWND_BOTTOM" id="F:MControl.Win32.SetWindowPosZOrder.HWND_BOTTOM" value="1" />
          <field name="HWND_TOPMOST" id="F:MControl.Win32.SetWindowPosZOrder.HWND_TOPMOST" value="-1" />
          <field name="HWND_NOTOPMOST" id="F:MControl.Win32.SetWindowPosZOrder.HWND_NOTOPMOST" value="-2" />
        </enumeration>
        <enumeration name="ShowWindowStyles" id="T:MControl.Win32.ShowWindowStyles" displayName="ShowWindowStyles" namespace="MControl.Win32" access="Public" baseTypeId="T:System.Int16">
          <field name="SW_HIDE" id="F:MControl.Win32.ShowWindowStyles.SW_HIDE" value="0" />
          <field name="SW_SHOWNORMAL" id="F:MControl.Win32.ShowWindowStyles.SW_SHOWNORMAL" value="1" />
          <field name="SW_NORMAL" id="F:MControl.Win32.ShowWindowStyles.SW_NORMAL" value="1" />
          <field name="SW_SHOWMINIMIZED" id="F:MControl.Win32.ShowWindowStyles.SW_SHOWMINIMIZED" value="2" />
          <field name="SW_SHOWMAXIMIZED" id="F:MControl.Win32.ShowWindowStyles.SW_SHOWMAXIMIZED" value="3" />
          <field name="SW_MAXIMIZE" id="F:MControl.Win32.ShowWindowStyles.SW_MAXIMIZE" value="3" />
          <field name="SW_SHOWNOACTIVATE" id="F:MControl.Win32.ShowWindowStyles.SW_SHOWNOACTIVATE" value="4" />
          <field name="SW_SHOW" id="F:MControl.Win32.ShowWindowStyles.SW_SHOW" value="5" />
          <field name="SW_MINIMIZE" id="F:MControl.Win32.ShowWindowStyles.SW_MINIMIZE" value="6" />
          <field name="SW_SHOWMINNOACTIVE" id="F:MControl.Win32.ShowWindowStyles.SW_SHOWMINNOACTIVE" value="7" />
          <field name="SW_SHOWNA" id="F:MControl.Win32.ShowWindowStyles.SW_SHOWNA" value="8" />
          <field name="SW_RESTORE" id="F:MControl.Win32.ShowWindowStyles.SW_RESTORE" value="9" />
          <field name="SW_SHOWDEFAULT" id="F:MControl.Win32.ShowWindowStyles.SW_SHOWDEFAULT" value="10" />
          <field name="SW_FORCEMINIMIZE" id="F:MControl.Win32.ShowWindowStyles.SW_FORCEMINIMIZE" value="11" />
          <field name="SW_MAX" id="F:MControl.Win32.ShowWindowStyles.SW_MAX" value="11" />
        </enumeration>
        <enumeration name="SPIActions" id="T:MControl.Win32.SPIActions" displayName="SPIActions" namespace="MControl.Win32" access="Public">
          <field name="SPI_GETBEEP" id="F:MControl.Win32.SPIActions.SPI_GETBEEP" value="1" />
          <field name="SPI_SETBEEP" id="F:MControl.Win32.SPIActions.SPI_SETBEEP" value="2" />
          <field name="SPI_GETMOUSE" id="F:MControl.Win32.SPIActions.SPI_GETMOUSE" value="3" />
          <field name="SPI_SETMOUSE" id="F:MControl.Win32.SPIActions.SPI_SETMOUSE" value="4" />
          <field name="SPI_GETBORDER" id="F:MControl.Win32.SPIActions.SPI_GETBORDER" value="5" />
          <field name="SPI_SETBORDER" id="F:MControl.Win32.SPIActions.SPI_SETBORDER" value="6" />
          <field name="SPI_GETKEYBOARDSPEED" id="F:MControl.Win32.SPIActions.SPI_GETKEYBOARDSPEED" value="10" />
          <field name="SPI_SETKEYBOARDSPEED" id="F:MControl.Win32.SPIActions.SPI_SETKEYBOARDSPEED" value="11" />
          <field name="SPI_LANGDRIVER" id="F:MControl.Win32.SPIActions.SPI_LANGDRIVER" value="12" />
          <field name="SPI_ICONHORIZONTALSPACING" id="F:MControl.Win32.SPIActions.SPI_ICONHORIZONTALSPACING" value="13" />
          <field name="SPI_GETSCREENSAVETIMEOUT" id="F:MControl.Win32.SPIActions.SPI_GETSCREENSAVETIMEOUT" value="14" />
          <field name="SPI_SETSCREENSAVETIMEOUT" id="F:MControl.Win32.SPIActions.SPI_SETSCREENSAVETIMEOUT" value="15" />
          <field name="SPI_GETSCREENSAVEACTIVE" id="F:MControl.Win32.SPIActions.SPI_GETSCREENSAVEACTIVE" value="16" />
          <field name="SPI_SETSCREENSAVEACTIVE" id="F:MControl.Win32.SPIActions.SPI_SETSCREENSAVEACTIVE" value="17" />
          <field name="SPI_GETGRIDGRANULARITY" id="F:MControl.Win32.SPIActions.SPI_GETGRIDGRANULARITY" value="18" />
          <field name="SPI_SETGRIDGRANULARITY" id="F:MControl.Win32.SPIActions.SPI_SETGRIDGRANULARITY" value="19" />
          <field name="SPI_SETDESKWALLPAPER" id="F:MControl.Win32.SPIActions.SPI_SETDESKWALLPAPER" value="20" />
          <field name="SPI_SETDESKPATTERN" id="F:MControl.Win32.SPIActions.SPI_SETDESKPATTERN" value="21" />
          <field name="SPI_GETKEYBOARDDELAY" id="F:MControl.Win32.SPIActions.SPI_GETKEYBOARDDELAY" value="22" />
          <field name="SPI_SETKEYBOARDDELAY" id="F:MControl.Win32.SPIActions.SPI_SETKEYBOARDDELAY" value="23" />
          <field name="SPI_ICONVERTICALSPACING" id="F:MControl.Win32.SPIActions.SPI_ICONVERTICALSPACING" value="24" />
          <field name="SPI_GETICONTITLEWRAP" id="F:MControl.Win32.SPIActions.SPI_GETICONTITLEWRAP" value="25" />
          <field name="SPI_SETICONTITLEWRAP" id="F:MControl.Win32.SPIActions.SPI_SETICONTITLEWRAP" value="26" />
          <field name="SPI_GETMENUDROPALIGNMENT" id="F:MControl.Win32.SPIActions.SPI_GETMENUDROPALIGNMENT" value="27" />
          <field name="SPI_SETMENUDROPALIGNMENT" id="F:MControl.Win32.SPIActions.SPI_SETMENUDROPALIGNMENT" value="28" />
          <field name="SPI_SETDOUBLECLKWIDTH" id="F:MControl.Win32.SPIActions.SPI_SETDOUBLECLKWIDTH" value="29" />
          <field name="SPI_SETDOUBLECLKHEIGHT" id="F:MControl.Win32.SPIActions.SPI_SETDOUBLECLKHEIGHT" value="30" />
          <field name="SPI_GETICONTITLELOGFONT" id="F:MControl.Win32.SPIActions.SPI_GETICONTITLELOGFONT" value="31" />
          <field name="SPI_SETDOUBLECLICKTIME" id="F:MControl.Win32.SPIActions.SPI_SETDOUBLECLICKTIME" value="32" />
          <field name="SPI_SETMOUSEBUTTONSWAP" id="F:MControl.Win32.SPIActions.SPI_SETMOUSEBUTTONSWAP" value="33" />
          <field name="SPI_SETICONTITLELOGFONT" id="F:MControl.Win32.SPIActions.SPI_SETICONTITLELOGFONT" value="34" />
          <field name="SPI_GETFASTTASKSWITCH" id="F:MControl.Win32.SPIActions.SPI_GETFASTTASKSWITCH" value="35" />
          <field name="SPI_SETFASTTASKSWITCH" id="F:MControl.Win32.SPIActions.SPI_SETFASTTASKSWITCH" value="36" />
          <field name="SPI_SETDRAGFULLWINDOWS" id="F:MControl.Win32.SPIActions.SPI_SETDRAGFULLWINDOWS" value="37" />
          <field name="SPI_GETDRAGFULLWINDOWS" id="F:MControl.Win32.SPIActions.SPI_GETDRAGFULLWINDOWS" value="38" />
          <field name="SPI_GETNONCLIENTMETRICS" id="F:MControl.Win32.SPIActions.SPI_GETNONCLIENTMETRICS" value="41" />
          <field name="SPI_SETNONCLIENTMETRICS" id="F:MControl.Win32.SPIActions.SPI_SETNONCLIENTMETRICS" value="42" />
          <field name="SPI_GETMINIMIZEDMETRICS" id="F:MControl.Win32.SPIActions.SPI_GETMINIMIZEDMETRICS" value="43" />
          <field name="SPI_SETMINIMIZEDMETRICS" id="F:MControl.Win32.SPIActions.SPI_SETMINIMIZEDMETRICS" value="44" />
          <field name="SPI_GETICONMETRICS" id="F:MControl.Win32.SPIActions.SPI_GETICONMETRICS" value="45" />
          <field name="SPI_SETICONMETRICS" id="F:MControl.Win32.SPIActions.SPI_SETICONMETRICS" value="46" />
          <field name="SPI_SETWORKAREA" id="F:MControl.Win32.SPIActions.SPI_SETWORKAREA" value="47" />
          <field name="SPI_GETWORKAREA" id="F:MControl.Win32.SPIActions.SPI_GETWORKAREA" value="48" />
          <field name="SPI_SETPENWINDOWS" id="F:MControl.Win32.SPIActions.SPI_SETPENWINDOWS" value="49" />
          <field name="SPI_GETHIGHCONTRAST" id="F:MControl.Win32.SPIActions.SPI_GETHIGHCONTRAST" value="66" />
          <field name="SPI_SETHIGHCONTRAST" id="F:MControl.Win32.SPIActions.SPI_SETHIGHCONTRAST" value="67" />
          <field name="SPI_GETKEYBOARDPREF" id="F:MControl.Win32.SPIActions.SPI_GETKEYBOARDPREF" value="68" />
          <field name="SPI_SETKEYBOARDPREF" id="F:MControl.Win32.SPIActions.SPI_SETKEYBOARDPREF" value="69" />
          <field name="SPI_GETSCREENREADER" id="F:MControl.Win32.SPIActions.SPI_GETSCREENREADER" value="70" />
          <field name="SPI_SETSCREENREADER" id="F:MControl.Win32.SPIActions.SPI_SETSCREENREADER" value="71" />
          <field name="SPI_GETANIMATION" id="F:MControl.Win32.SPIActions.SPI_GETANIMATION" value="72" />
          <field name="SPI_SETANIMATION" id="F:MControl.Win32.SPIActions.SPI_SETANIMATION" value="73" />
          <field name="SPI_GETFONTSMOOTHING" id="F:MControl.Win32.SPIActions.SPI_GETFONTSMOOTHING" value="74" />
          <field name="SPI_SETFONTSMOOTHING" id="F:MControl.Win32.SPIActions.SPI_SETFONTSMOOTHING" value="75" />
          <field name="SPI_SETDRAGWIDTH" id="F:MControl.Win32.SPIActions.SPI_SETDRAGWIDTH" value="76" />
          <field name="SPI_SETDRAGHEIGHT" id="F:MControl.Win32.SPIActions.SPI_SETDRAGHEIGHT" value="77" />
          <field name="SPI_SETHANDHELD" id="F:MControl.Win32.SPIActions.SPI_SETHANDHELD" value="78" />
          <field name="SPI_GETLOWPOWERTIMEOUT" id="F:MControl.Win32.SPIActions.SPI_GETLOWPOWERTIMEOUT" value="79" />
          <field name="SPI_GETPOWEROFFTIMEOUT" id="F:MControl.Win32.SPIActions.SPI_GETPOWEROFFTIMEOUT" value="80" />
          <field name="SPI_SETLOWPOWERTIMEOUT" id="F:MControl.Win32.SPIActions.SPI_SETLOWPOWERTIMEOUT" value="81" />
          <field name="SPI_SETPOWEROFFTIMEOUT" id="F:MControl.Win32.SPIActions.SPI_SETPOWEROFFTIMEOUT" value="82" />
          <field name="SPI_GETLOWPOWERACTIVE" id="F:MControl.Win32.SPIActions.SPI_GETLOWPOWERACTIVE" value="83" />
          <field name="SPI_GETPOWEROFFACTIVE" id="F:MControl.Win32.SPIActions.SPI_GETPOWEROFFACTIVE" value="84" />
          <field name="SPI_SETLOWPOWERACTIVE" id="F:MControl.Win32.SPIActions.SPI_SETLOWPOWERACTIVE" value="85" />
          <field name="SPI_SETPOWEROFFACTIVE" id="F:MControl.Win32.SPIActions.SPI_SETPOWEROFFACTIVE" value="86" />
          <field name="SPI_SETCURSORS" id="F:MControl.Win32.SPIActions.SPI_SETCURSORS" value="87" />
          <field name="SPI_SETICONS" id="F:MControl.Win32.SPIActions.SPI_SETICONS" value="88" />
          <field name="SPI_GETDEFAULTINPUTLANG" id="F:MControl.Win32.SPIActions.SPI_GETDEFAULTINPUTLANG" value="89" />
          <field name="SPI_SETDEFAULTINPUTLANG" id="F:MControl.Win32.SPIActions.SPI_SETDEFAULTINPUTLANG" value="90" />
          <field name="SPI_SETLANGTOGGLE" id="F:MControl.Win32.SPIActions.SPI_SETLANGTOGGLE" value="91" />
          <field name="SPI_GETWINDOWSEXTENSION" id="F:MControl.Win32.SPIActions.SPI_GETWINDOWSEXTENSION" value="92" />
          <field name="SPI_SETMOUSETRAILS" id="F:MControl.Win32.SPIActions.SPI_SETMOUSETRAILS" value="93" />
          <field name="SPI_GETMOUSETRAILS" id="F:MControl.Win32.SPIActions.SPI_GETMOUSETRAILS" value="94" />
          <field name="SPI_SETSCREENSAVERRUNNING" id="F:MControl.Win32.SPIActions.SPI_SETSCREENSAVERRUNNING" value="97" />
          <field name="SPI_SCREENSAVERRUNNING" id="F:MControl.Win32.SPIActions.SPI_SCREENSAVERRUNNING" value="97" />
          <field name="SPI_GETFILTERKEYS" id="F:MControl.Win32.SPIActions.SPI_GETFILTERKEYS" value="50" />
          <field name="SPI_SETFILTERKEYS" id="F:MControl.Win32.SPIActions.SPI_SETFILTERKEYS" value="51" />
          <field name="SPI_GETTOGGLEKEYS" id="F:MControl.Win32.SPIActions.SPI_GETTOGGLEKEYS" value="52" />
          <field name="SPI_SETTOGGLEKEYS" id="F:MControl.Win32.SPIActions.SPI_SETTOGGLEKEYS" value="53" />
          <field name="SPI_GETMOUSEKEYS" id="F:MControl.Win32.SPIActions.SPI_GETMOUSEKEYS" value="54" />
          <field name="SPI_SETMOUSEKEYS" id="F:MControl.Win32.SPIActions.SPI_SETMOUSEKEYS" value="55" />
          <field name="SPI_GETSHOWSOUNDS" id="F:MControl.Win32.SPIActions.SPI_GETSHOWSOUNDS" value="56" />
          <field name="SPI_SETSHOWSOUNDS" id="F:MControl.Win32.SPIActions.SPI_SETSHOWSOUNDS" value="57" />
          <field name="SPI_GETSTICKYKEYS" id="F:MControl.Win32.SPIActions.SPI_GETSTICKYKEYS" value="58" />
          <field name="SPI_SETSTICKYKEYS" id="F:MControl.Win32.SPIActions.SPI_SETSTICKYKEYS" value="59" />
          <field name="SPI_GETACCESSTIMEOUT" id="F:MControl.Win32.SPIActions.SPI_GETACCESSTIMEOUT" value="60" />
          <field name="SPI_SETACCESSTIMEOUT" id="F:MControl.Win32.SPIActions.SPI_SETACCESSTIMEOUT" value="61" />
          <field name="SPI_GETSERIALKEYS" id="F:MControl.Win32.SPIActions.SPI_GETSERIALKEYS" value="62" />
          <field name="SPI_SETSERIALKEYS" id="F:MControl.Win32.SPIActions.SPI_SETSERIALKEYS" value="63" />
          <field name="SPI_GETSOUNDSENTRY" id="F:MControl.Win32.SPIActions.SPI_GETSOUNDSENTRY" value="64" />
          <field name="SPI_SETSOUNDSENTRY" id="F:MControl.Win32.SPIActions.SPI_SETSOUNDSENTRY" value="65" />
          <field name="SPI_GETSNAPTODEFBUTTON" id="F:MControl.Win32.SPIActions.SPI_GETSNAPTODEFBUTTON" value="95" />
          <field name="SPI_SETSNAPTODEFBUTTON" id="F:MControl.Win32.SPIActions.SPI_SETSNAPTODEFBUTTON" value="96" />
          <field name="SPI_GETMOUSEHOVERWIDTH" id="F:MControl.Win32.SPIActions.SPI_GETMOUSEHOVERWIDTH" value="98" />
          <field name="SPI_SETMOUSEHOVERWIDTH" id="F:MControl.Win32.SPIActions.SPI_SETMOUSEHOVERWIDTH" value="99" />
          <field name="SPI_GETMOUSEHOVERHEIGHT" id="F:MControl.Win32.SPIActions.SPI_GETMOUSEHOVERHEIGHT" value="100" />
          <field name="SPI_SETMOUSEHOVERHEIGHT" id="F:MControl.Win32.SPIActions.SPI_SETMOUSEHOVERHEIGHT" value="101" />
          <field name="SPI_GETMOUSEHOVERTIME" id="F:MControl.Win32.SPIActions.SPI_GETMOUSEHOVERTIME" value="102" />
          <field name="SPI_SETMOUSEHOVERTIME" id="F:MControl.Win32.SPIActions.SPI_SETMOUSEHOVERTIME" value="103" />
          <field name="SPI_GETWHEELSCROLLLINES" id="F:MControl.Win32.SPIActions.SPI_GETWHEELSCROLLLINES" value="104" />
          <field name="SPI_SETWHEELSCROLLLINES" id="F:MControl.Win32.SPIActions.SPI_SETWHEELSCROLLLINES" value="105" />
          <field name="SPI_GETMENUSHOWDELAY" id="F:MControl.Win32.SPIActions.SPI_GETMENUSHOWDELAY" value="106" />
          <field name="SPI_SETMENUSHOWDELAY" id="F:MControl.Win32.SPIActions.SPI_SETMENUSHOWDELAY" value="107" />
          <field name="SPI_GETSHOWIMEUI" id="F:MControl.Win32.SPIActions.SPI_GETSHOWIMEUI" value="110" />
          <field name="SPI_SETSHOWIMEUI" id="F:MControl.Win32.SPIActions.SPI_SETSHOWIMEUI" value="111" />
          <field name="SPI_GETMOUSESPEED" id="F:MControl.Win32.SPIActions.SPI_GETMOUSESPEED" value="112" />
          <field name="SPI_SETMOUSESPEED" id="F:MControl.Win32.SPIActions.SPI_SETMOUSESPEED" value="113" />
          <field name="SPI_GETSCREENSAVERRUNNING" id="F:MControl.Win32.SPIActions.SPI_GETSCREENSAVERRUNNING" value="114" />
          <field name="SPI_GETDESKWALLPAPER" id="F:MControl.Win32.SPIActions.SPI_GETDESKWALLPAPER" value="115" />
          <field name="SPI_GETACTIVEWINDOWTRACKING" id="F:MControl.Win32.SPIActions.SPI_GETACTIVEWINDOWTRACKING" value="4096" />
          <field name="SPI_SETACTIVEWINDOWTRACKING" id="F:MControl.Win32.SPIActions.SPI_SETACTIVEWINDOWTRACKING" value="4097" />
          <field name="SPI_GETMENUANIMATION" id="F:MControl.Win32.SPIActions.SPI_GETMENUANIMATION" value="4098" />
          <field name="SPI_SETMENUANIMATION" id="F:MControl.Win32.SPIActions.SPI_SETMENUANIMATION" value="4099" />
          <field name="SPI_GETCOMBOBOXANIMATION" id="F:MControl.Win32.SPIActions.SPI_GETCOMBOBOXANIMATION" value="4100" />
          <field name="SPI_SETCOMBOBOXANIMATION" id="F:MControl.Win32.SPIActions.SPI_SETCOMBOBOXANIMATION" value="4101" />
          <field name="SPI_GETLISTBOXSMOOTHSCROLLING" id="F:MControl.Win32.SPIActions.SPI_GETLISTBOXSMOOTHSCROLLING" value="4102" />
          <field name="SPI_SETLISTBOXSMOOTHSCROLLING" id="F:MControl.Win32.SPIActions.SPI_SETLISTBOXSMOOTHSCROLLING" value="4103" />
          <field name="SPI_GETGRADIENTCAPTIONS" id="F:MControl.Win32.SPIActions.SPI_GETGRADIENTCAPTIONS" value="4104" />
          <field name="SPI_SETGRADIENTCAPTIONS" id="F:MControl.Win32.SPIActions.SPI_SETGRADIENTCAPTIONS" value="4105" />
          <field name="SPI_GETKEYBOARDCUES" id="F:MControl.Win32.SPIActions.SPI_GETKEYBOARDCUES" value="4106" />
          <field name="SPI_SETKEYBOARDCUES" id="F:MControl.Win32.SPIActions.SPI_SETKEYBOARDCUES" value="4107" />
          <field name="SPI_GETMENUUNDERLINES" id="F:MControl.Win32.SPIActions.SPI_GETMENUUNDERLINES" value="4106" />
          <field name="SPI_SETMENUUNDERLINES" id="F:MControl.Win32.SPIActions.SPI_SETMENUUNDERLINES" value="4107" />
          <field name="SPI_GETACTIVEWNDTRKZORDER" id="F:MControl.Win32.SPIActions.SPI_GETACTIVEWNDTRKZORDER" value="4108" />
          <field name="SPI_SETACTIVEWNDTRKZORDER" id="F:MControl.Win32.SPIActions.SPI_SETACTIVEWNDTRKZORDER" value="4109" />
          <field name="SPI_GETHOTTRACKING" id="F:MControl.Win32.SPIActions.SPI_GETHOTTRACKING" value="4110" />
          <field name="SPI_SETHOTTRACKING" id="F:MControl.Win32.SPIActions.SPI_SETHOTTRACKING" value="4111" />
          <field name="SPI_GETMENUFADE" id="F:MControl.Win32.SPIActions.SPI_GETMENUFADE" value="4114" />
          <field name="SPI_SETMENUFADE" id="F:MControl.Win32.SPIActions.SPI_SETMENUFADE" value="4115" />
          <field name="SPI_GETSELECTIONFADE" id="F:MControl.Win32.SPIActions.SPI_GETSELECTIONFADE" value="4116" />
          <field name="SPI_SETSELECTIONFADE" id="F:MControl.Win32.SPIActions.SPI_SETSELECTIONFADE" value="4117" />
          <field name="SPI_GETTOOLTIPANIMATION" id="F:MControl.Win32.SPIActions.SPI_GETTOOLTIPANIMATION" value="4118" />
          <field name="SPI_SETTOOLTIPANIMATION" id="F:MControl.Win32.SPIActions.SPI_SETTOOLTIPANIMATION" value="4119" />
          <field name="SPI_GETTOOLTIPFADE" id="F:MControl.Win32.SPIActions.SPI_GETTOOLTIPFADE" value="4120" />
          <field name="SPI_SETTOOLTIPFADE" id="F:MControl.Win32.SPIActions.SPI_SETTOOLTIPFADE" value="4121" />
          <field name="SPI_GETCURSORSHADOW" id="F:MControl.Win32.SPIActions.SPI_GETCURSORSHADOW" value="4122" />
          <field name="SPI_SETCURSORSHADOW" id="F:MControl.Win32.SPIActions.SPI_SETCURSORSHADOW" value="4123" />
          <field name="SPI_GETMOUSESONAR" id="F:MControl.Win32.SPIActions.SPI_GETMOUSESONAR" value="4124" />
          <field name="SPI_SETMOUSESONAR" id="F:MControl.Win32.SPIActions.SPI_SETMOUSESONAR" value="4125" />
          <field name="SPI_GETMOUSECLICKLOCK" id="F:MControl.Win32.SPIActions.SPI_GETMOUSECLICKLOCK" value="4126" />
          <field name="SPI_SETMOUSECLICKLOCK" id="F:MControl.Win32.SPIActions.SPI_SETMOUSECLICKLOCK" value="4127" />
          <field name="SPI_GETMOUSEVANISH" id="F:MControl.Win32.SPIActions.SPI_GETMOUSEVANISH" value="4128" />
          <field name="SPI_SETMOUSEVANISH" id="F:MControl.Win32.SPIActions.SPI_SETMOUSEVANISH" value="4129" />
          <field name="SPI_GETFLATMENU" id="F:MControl.Win32.SPIActions.SPI_GETFLATMENU" value="4130" />
          <field name="SPI_SETFLATMENU" id="F:MControl.Win32.SPIActions.SPI_SETFLATMENU" value="4131" />
          <field name="SPI_GETDROPSHADOW" id="F:MControl.Win32.SPIActions.SPI_GETDROPSHADOW" value="4132" />
          <field name="SPI_SETDROPSHADOW" id="F:MControl.Win32.SPIActions.SPI_SETDROPSHADOW" value="4133" />
          <field name="SPI_GETUIEFFECTS" id="F:MControl.Win32.SPIActions.SPI_GETUIEFFECTS" value="4158" />
          <field name="SPI_SETUIEFFECTS" id="F:MControl.Win32.SPIActions.SPI_SETUIEFFECTS" value="4159" />
          <field name="SPI_GETFOREGROUNDLOCKTIMEOUT" id="F:MControl.Win32.SPIActions.SPI_GETFOREGROUNDLOCKTIMEOUT" value="8192" />
          <field name="SPI_SETFOREGROUNDLOCKTIMEOUT" id="F:MControl.Win32.SPIActions.SPI_SETFOREGROUNDLOCKTIMEOUT" value="8193" />
          <field name="SPI_GETACTIVEWNDTRKTIMEOUT" id="F:MControl.Win32.SPIActions.SPI_GETACTIVEWNDTRKTIMEOUT" value="8194" />
          <field name="SPI_SETACTIVEWNDTRKTIMEOUT" id="F:MControl.Win32.SPIActions.SPI_SETACTIVEWNDTRKTIMEOUT" value="8195" />
          <field name="SPI_GETFOREGROUNDFLASHCOUNT" id="F:MControl.Win32.SPIActions.SPI_GETFOREGROUNDFLASHCOUNT" value="8196" />
          <field name="SPI_SETFOREGROUNDFLASHCOUNT" id="F:MControl.Win32.SPIActions.SPI_SETFOREGROUNDFLASHCOUNT" value="8197" />
          <field name="SPI_GETCARETWIDTH" id="F:MControl.Win32.SPIActions.SPI_GETCARETWIDTH" value="8198" />
          <field name="SPI_SETCARETWIDTH" id="F:MControl.Win32.SPIActions.SPI_SETCARETWIDTH" value="8199" />
          <field name="SPI_GETMOUSECLICKLOCKTIME" id="F:MControl.Win32.SPIActions.SPI_GETMOUSECLICKLOCKTIME" value="8200" />
          <field name="SPI_SETMOUSECLICKLOCKTIME" id="F:MControl.Win32.SPIActions.SPI_SETMOUSECLICKLOCKTIME" value="8201" />
          <field name="SPI_GETFONTSMOOTHINGTYPE" id="F:MControl.Win32.SPIActions.SPI_GETFONTSMOOTHINGTYPE" value="8202" />
          <field name="SPI_SETFONTSMOOTHINGTYPE" id="F:MControl.Win32.SPIActions.SPI_SETFONTSMOOTHINGTYPE" value="8203" />
          <field name="SPI_GETFONTSMOOTHINGCONTRAST" id="F:MControl.Win32.SPIActions.SPI_GETFONTSMOOTHINGCONTRAST" value="8204" />
          <field name="SPI_SETFONTSMOOTHINGCONTRAST" id="F:MControl.Win32.SPIActions.SPI_SETFONTSMOOTHINGCONTRAST" value="8205" />
          <field name="SPI_GETFOCUSBORDERWIDTH" id="F:MControl.Win32.SPIActions.SPI_GETFOCUSBORDERWIDTH" value="8206" />
          <field name="SPI_SETFOCUSBORDERWIDTH" id="F:MControl.Win32.SPIActions.SPI_SETFOCUSBORDERWIDTH" value="8207" />
          <field name="SPI_GETFOCUSBORDERHEIGHT" id="F:MControl.Win32.SPIActions.SPI_GETFOCUSBORDERHEIGHT" value="8208" />
          <field name="SPI_SETFOCUSBORDERHEIGHT" id="F:MControl.Win32.SPIActions.SPI_SETFOCUSBORDERHEIGHT" value="8209" />
        </enumeration>
        <enumeration name="SpinControlMsg" id="T:MControl.Win32.SpinControlMsg" displayName="SpinControlMsg" namespace="MControl.Win32" access="Public">
          <field name="WM_USER" id="F:MControl.Win32.SpinControlMsg.WM_USER" value="1024" />
          <field name="CCM_FIRST" id="F:MControl.Win32.SpinControlMsg.CCM_FIRST" value="8192" />
          <field name="CCM_SETUNICODEFORMAT" id="F:MControl.Win32.SpinControlMsg.CCM_SETUNICODEFORMAT" value="8197" />
          <field name="CCM_GETUNICODEFORMAT" id="F:MControl.Win32.SpinControlMsg.CCM_GETUNICODEFORMAT" value="8198" />
          <field name="UDM_SETRANGE" id="F:MControl.Win32.SpinControlMsg.UDM_SETRANGE" value="1125" />
          <field name="UDM_GETRANGE" id="F:MControl.Win32.SpinControlMsg.UDM_GETRANGE" value="1126" />
          <field name="UDM_SETPOS" id="F:MControl.Win32.SpinControlMsg.UDM_SETPOS" value="1127" />
          <field name="UDM_GETPOS" id="F:MControl.Win32.SpinControlMsg.UDM_GETPOS" value="1128" />
          <field name="UDM_SETBUDDY" id="F:MControl.Win32.SpinControlMsg.UDM_SETBUDDY" value="1129" />
          <field name="UDM_GETBUDDY" id="F:MControl.Win32.SpinControlMsg.UDM_GETBUDDY" value="1130" />
          <field name="UDM_SETACCEL" id="F:MControl.Win32.SpinControlMsg.UDM_SETACCEL" value="1131" />
          <field name="UDM_GETACCEL" id="F:MControl.Win32.SpinControlMsg.UDM_GETACCEL" value="1132" />
          <field name="UDM_SETBASE" id="F:MControl.Win32.SpinControlMsg.UDM_SETBASE" value="1133" />
          <field name="UDM_GETBASE" id="F:MControl.Win32.SpinControlMsg.UDM_GETBASE" value="1134" />
          <field name="UDM_SETRANGE32" id="F:MControl.Win32.SpinControlMsg.UDM_SETRANGE32" value="1135" />
          <field name="UDM_GETRANGE32" id="F:MControl.Win32.SpinControlMsg.UDM_GETRANGE32" value="1136" />
          <field name="UDM_SETUNICODEFORMAT" id="F:MControl.Win32.SpinControlMsg.UDM_SETUNICODEFORMAT" value="8197" />
          <field name="UDM_GETUNICODEFORMAT" id="F:MControl.Win32.SpinControlMsg.UDM_GETUNICODEFORMAT" value="8198" />
          <field name="UDM_SETPOS32" id="F:MControl.Win32.SpinControlMsg.UDM_SETPOS32" value="1137" />
          <field name="UDM_GETPOS32" id="F:MControl.Win32.SpinControlMsg.UDM_GETPOS32" value="1138" />
        </enumeration>
        <enumeration name="SpinControlStyles" id="T:MControl.Win32.SpinControlStyles" displayName="SpinControlStyles" namespace="MControl.Win32" access="Public">
          <field name="UDS_WRAP" id="F:MControl.Win32.SpinControlStyles.UDS_WRAP" value="1" />
          <field name="UDS_SETBUDDYINT" id="F:MControl.Win32.SpinControlStyles.UDS_SETBUDDYINT" value="2" />
          <field name="UDS_ALIGNRIGHT" id="F:MControl.Win32.SpinControlStyles.UDS_ALIGNRIGHT" value="4" />
          <field name="UDS_ALIGNLEFT" id="F:MControl.Win32.SpinControlStyles.UDS_ALIGNLEFT" value="8" />
          <field name="UDS_AUTOBUDDY" id="F:MControl.Win32.SpinControlStyles.UDS_AUTOBUDDY" value="16" />
          <field name="UDS_ARROWKEYS" id="F:MControl.Win32.SpinControlStyles.UDS_ARROWKEYS" value="32" />
          <field name="UDS_HORZ" id="F:MControl.Win32.SpinControlStyles.UDS_HORZ" value="64" />
          <field name="UDS_NOTHOUSANDS" id="F:MControl.Win32.SpinControlStyles.UDS_NOTHOUSANDS" value="128" />
          <field name="UDS_HOTTRACK" id="F:MControl.Win32.SpinControlStyles.UDS_HOTTRACK" value="256" />
        </enumeration>
        <enumeration name="SPIWinINIFlags" id="T:MControl.Win32.SPIWinINIFlags" displayName="SPIWinINIFlags" namespace="MControl.Win32" access="Public">
          <field name="SPIF_UPDATEINIFILE" id="F:MControl.Win32.SPIWinINIFlags.SPIF_UPDATEINIFILE" value="1" />
          <field name="SPIF_SENDWININICHANGE" id="F:MControl.Win32.SPIWinINIFlags.SPIF_SENDWININICHANGE" value="2" />
          <field name="SPIF_SENDCHANGE" id="F:MControl.Win32.SPIWinINIFlags.SPIF_SENDCHANGE" value="2" />
        </enumeration>
        <enumeration name="StrechModeFlags" id="T:MControl.Win32.StrechModeFlags" displayName="StrechModeFlags" namespace="MControl.Win32" access="Public">
          <field name="BLACKONWHITE" id="F:MControl.Win32.StrechModeFlags.BLACKONWHITE" value="1" />
          <field name="WHITEONBLACK" id="F:MControl.Win32.StrechModeFlags.WHITEONBLACK" value="2" />
          <field name="COLORONCOLOR" id="F:MControl.Win32.StrechModeFlags.COLORONCOLOR" value="3" />
          <field name="HALFTONE" id="F:MControl.Win32.StrechModeFlags.HALFTONE" value="4" />
          <field name="MAXSTRETCHBLTMODE" id="F:MControl.Win32.StrechModeFlags.MAXSTRETCHBLTMODE" value="4" />
        </enumeration>
        <enumeration name="SubItemPortion" id="T:MControl.Win32.SubItemPortion" displayName="SubItemPortion" namespace="MControl.Win32" access="Public">
          <field name="LVIR_BOUNDS" id="F:MControl.Win32.SubItemPortion.LVIR_BOUNDS" value="0" />
          <field name="LVIR_ICON" id="F:MControl.Win32.SubItemPortion.LVIR_ICON" value="1" />
          <field name="LVIR_LABEL" id="F:MControl.Win32.SubItemPortion.LVIR_LABEL" value="2" />
        </enumeration>
        <enumeration name="SystemMetricsCodes" id="T:MControl.Win32.SystemMetricsCodes" displayName="SystemMetricsCodes" namespace="MControl.Win32" access="Public">
          <field name="SM_CXSCREEN" id="F:MControl.Win32.SystemMetricsCodes.SM_CXSCREEN" value="0" />
          <field name="SM_CYSCREEN" id="F:MControl.Win32.SystemMetricsCodes.SM_CYSCREEN" value="1" />
          <field name="SM_CXVSCROLL" id="F:MControl.Win32.SystemMetricsCodes.SM_CXVSCROLL" value="2" />
          <field name="SM_CYHSCROLL" id="F:MControl.Win32.SystemMetricsCodes.SM_CYHSCROLL" value="3" />
          <field name="SM_CYCAPTION" id="F:MControl.Win32.SystemMetricsCodes.SM_CYCAPTION" value="4" />
          <field name="SM_CXBORDER" id="F:MControl.Win32.SystemMetricsCodes.SM_CXBORDER" value="5" />
          <field name="SM_CYBORDER" id="F:MControl.Win32.SystemMetricsCodes.SM_CYBORDER" value="6" />
          <field name="SM_CXDLGFRAME" id="F:MControl.Win32.SystemMetricsCodes.SM_CXDLGFRAME" value="7" />
          <field name="SM_CYDLGFRAME" id="F:MControl.Win32.SystemMetricsCodes.SM_CYDLGFRAME" value="8" />
          <field name="SM_CYVTHUMB" id="F:MControl.Win32.SystemMetricsCodes.SM_CYVTHUMB" value="9" />
          <field name="SM_CXHTHUMB" id="F:MControl.Win32.SystemMetricsCodes.SM_CXHTHUMB" value="10" />
          <field name="SM_CXICON" id="F:MControl.Win32.SystemMetricsCodes.SM_CXICON" value="11" />
          <field name="SM_CYICON" id="F:MControl.Win32.SystemMetricsCodes.SM_CYICON" value="12" />
          <field name="SM_CXCURSOR" id="F:MControl.Win32.SystemMetricsCodes.SM_CXCURSOR" value="13" />
          <field name="SM_CYCURSOR" id="F:MControl.Win32.SystemMetricsCodes.SM_CYCURSOR" value="14" />
          <field name="SM_CYMENU" id="F:MControl.Win32.SystemMetricsCodes.SM_CYMENU" value="15" />
          <field name="SM_CXFULLSCREEN" id="F:MControl.Win32.SystemMetricsCodes.SM_CXFULLSCREEN" value="16" />
          <field name="SM_CYFULLSCREEN" id="F:MControl.Win32.SystemMetricsCodes.SM_CYFULLSCREEN" value="17" />
          <field name="SM_CYKANJIWINDOW" id="F:MControl.Win32.SystemMetricsCodes.SM_CYKANJIWINDOW" value="18" />
          <field name="SM_MOUSEPRESENT" id="F:MControl.Win32.SystemMetricsCodes.SM_MOUSEPRESENT" value="19" />
          <field name="SM_CYVSCROLL" id="F:MControl.Win32.SystemMetricsCodes.SM_CYVSCROLL" value="20" />
          <field name="SM_CXHSCROLL" id="F:MControl.Win32.SystemMetricsCodes.SM_CXHSCROLL" value="21" />
          <field name="SM_DEBUG" id="F:MControl.Win32.SystemMetricsCodes.SM_DEBUG" value="22" />
          <field name="SM_SWAPBUTTON" id="F:MControl.Win32.SystemMetricsCodes.SM_SWAPBUTTON" value="23" />
          <field name="SM_RESERVED1" id="F:MControl.Win32.SystemMetricsCodes.SM_RESERVED1" value="24" />
          <field name="SM_RESERVED2" id="F:MControl.Win32.SystemMetricsCodes.SM_RESERVED2" value="25" />
          <field name="SM_RESERVED3" id="F:MControl.Win32.SystemMetricsCodes.SM_RESERVED3" value="26" />
          <field name="SM_RESERVED4" id="F:MControl.Win32.SystemMetricsCodes.SM_RESERVED4" value="27" />
          <field name="SM_CXMIN" id="F:MControl.Win32.SystemMetricsCodes.SM_CXMIN" value="28" />
          <field name="SM_CYMIN" id="F:MControl.Win32.SystemMetricsCodes.SM_CYMIN" value="29" />
          <field name="SM_CXSIZE" id="F:MControl.Win32.SystemMetricsCodes.SM_CXSIZE" value="30" />
          <field name="SM_CYSIZE" id="F:MControl.Win32.SystemMetricsCodes.SM_CYSIZE" value="31" />
          <field name="SM_CXFRAME" id="F:MControl.Win32.SystemMetricsCodes.SM_CXFRAME" value="32" />
          <field name="SM_CYFRAME" id="F:MControl.Win32.SystemMetricsCodes.SM_CYFRAME" value="33" />
          <field name="SM_CXMINTRACK" id="F:MControl.Win32.SystemMetricsCodes.SM_CXMINTRACK" value="34" />
          <field name="SM_CYMINTRACK" id="F:MControl.Win32.SystemMetricsCodes.SM_CYMINTRACK" value="35" />
          <field name="SM_CXDOUBLECLK" id="F:MControl.Win32.SystemMetricsCodes.SM_CXDOUBLECLK" value="36" />
          <field name="SM_CYDOUBLECLK" id="F:MControl.Win32.SystemMetricsCodes.SM_CYDOUBLECLK" value="37" />
          <field name="SM_CXICONSPACING" id="F:MControl.Win32.SystemMetricsCodes.SM_CXICONSPACING" value="38" />
          <field name="SM_CYICONSPACING" id="F:MControl.Win32.SystemMetricsCodes.SM_CYICONSPACING" value="39" />
          <field name="SM_MENUDROPALIGNMENT" id="F:MControl.Win32.SystemMetricsCodes.SM_MENUDROPALIGNMENT" value="40" />
          <field name="SM_PENWINDOWS" id="F:MControl.Win32.SystemMetricsCodes.SM_PENWINDOWS" value="41" />
          <field name="SM_DBCSENABLED" id="F:MControl.Win32.SystemMetricsCodes.SM_DBCSENABLED" value="42" />
          <field name="SM_CMOUSEBUTTONS" id="F:MControl.Win32.SystemMetricsCodes.SM_CMOUSEBUTTONS" value="43" />
          <field name="SM_CXFIXEDFRAME" id="F:MControl.Win32.SystemMetricsCodes.SM_CXFIXEDFRAME" value="7" />
          <field name="SM_CYFIXEDFRAME" id="F:MControl.Win32.SystemMetricsCodes.SM_CYFIXEDFRAME" value="8" />
          <field name="SM_CXSIZEFRAME" id="F:MControl.Win32.SystemMetricsCodes.SM_CXSIZEFRAME" value="32" />
          <field name="SM_CYSIZEFRAME" id="F:MControl.Win32.SystemMetricsCodes.SM_CYSIZEFRAME" value="33" />
          <field name="SM_SECURE" id="F:MControl.Win32.SystemMetricsCodes.SM_SECURE" value="44" />
          <field name="SM_CXEDGE" id="F:MControl.Win32.SystemMetricsCodes.SM_CXEDGE" value="45" />
          <field name="SM_CYEDGE" id="F:MControl.Win32.SystemMetricsCodes.SM_CYEDGE" value="46" />
          <field name="SM_CXMINSPACING" id="F:MControl.Win32.SystemMetricsCodes.SM_CXMINSPACING" value="47" />
          <field name="SM_CYMINSPACING" id="F:MControl.Win32.SystemMetricsCodes.SM_CYMINSPACING" value="48" />
          <field name="SM_CXSMICON" id="F:MControl.Win32.SystemMetricsCodes.SM_CXSMICON" value="49" />
          <field name="SM_CYSMICON" id="F:MControl.Win32.SystemMetricsCodes.SM_CYSMICON" value="50" />
          <field name="SM_CYSMCAPTION" id="F:MControl.Win32.SystemMetricsCodes.SM_CYSMCAPTION" value="51" />
          <field name="SM_CXSMSIZE" id="F:MControl.Win32.SystemMetricsCodes.SM_CXSMSIZE" value="52" />
          <field name="SM_CYSMSIZE" id="F:MControl.Win32.SystemMetricsCodes.SM_CYSMSIZE" value="53" />
          <field name="SM_CXMENUSIZE" id="F:MControl.Win32.SystemMetricsCodes.SM_CXMENUSIZE" value="54" />
          <field name="SM_CYMENUSIZE" id="F:MControl.Win32.SystemMetricsCodes.SM_CYMENUSIZE" value="55" />
          <field name="SM_ARRANGE" id="F:MControl.Win32.SystemMetricsCodes.SM_ARRANGE" value="56" />
          <field name="SM_CXMINIMIZED" id="F:MControl.Win32.SystemMetricsCodes.SM_CXMINIMIZED" value="57" />
          <field name="SM_CYMINIMIZED" id="F:MControl.Win32.SystemMetricsCodes.SM_CYMINIMIZED" value="58" />
          <field name="SM_CXMAXTRACK" id="F:MControl.Win32.SystemMetricsCodes.SM_CXMAXTRACK" value="59" />
          <field name="SM_CYMAXTRACK" id="F:MControl.Win32.SystemMetricsCodes.SM_CYMAXTRACK" value="60" />
          <field name="SM_CXMAXIMIZED" id="F:MControl.Win32.SystemMetricsCodes.SM_CXMAXIMIZED" value="61" />
          <field name="SM_CYMAXIMIZED" id="F:MControl.Win32.SystemMetricsCodes.SM_CYMAXIMIZED" value="62" />
          <field name="SM_NETWORK" id="F:MControl.Win32.SystemMetricsCodes.SM_NETWORK" value="63" />
          <field name="SM_CLEANBOOT" id="F:MControl.Win32.SystemMetricsCodes.SM_CLEANBOOT" value="67" />
          <field name="SM_CXDRAG" id="F:MControl.Win32.SystemMetricsCodes.SM_CXDRAG" value="68" />
          <field name="SM_CYDRAG" id="F:MControl.Win32.SystemMetricsCodes.SM_CYDRAG" value="69" />
          <field name="SM_SHOWSOUNDS" id="F:MControl.Win32.SystemMetricsCodes.SM_SHOWSOUNDS" value="70" />
          <field name="SM_CXMENUCHECK" id="F:MControl.Win32.SystemMetricsCodes.SM_CXMENUCHECK" value="71" />
          <field name="SM_CYMENUCHECK" id="F:MControl.Win32.SystemMetricsCodes.SM_CYMENUCHECK" value="72" />
          <field name="SM_SLOWMACHINE" id="F:MControl.Win32.SystemMetricsCodes.SM_SLOWMACHINE" value="73" />
          <field name="SM_MIDEASTENABLED" id="F:MControl.Win32.SystemMetricsCodes.SM_MIDEASTENABLED" value="74" />
          <field name="SM_MOUSEWHEELPRESENT" id="F:MControl.Win32.SystemMetricsCodes.SM_MOUSEWHEELPRESENT" value="75" />
          <field name="SM_XVIRTUALSCREEN" id="F:MControl.Win32.SystemMetricsCodes.SM_XVIRTUALSCREEN" value="76" />
          <field name="SM_YVIRTUALSCREEN" id="F:MControl.Win32.SystemMetricsCodes.SM_YVIRTUALSCREEN" value="77" />
          <field name="SM_CXVIRTUALSCREEN" id="F:MControl.Win32.SystemMetricsCodes.SM_CXVIRTUALSCREEN" value="78" />
          <field name="SM_CYVIRTUALSCREEN" id="F:MControl.Win32.SystemMetricsCodes.SM_CYVIRTUALSCREEN" value="79" />
          <field name="SM_CMONITORS" id="F:MControl.Win32.SystemMetricsCodes.SM_CMONITORS" value="80" />
          <field name="SM_SAMEDISPLAYFORMAT" id="F:MControl.Win32.SystemMetricsCodes.SM_SAMEDISPLAYFORMAT" value="81" />
          <field name="SM_CMETRICS" id="F:MControl.Win32.SystemMetricsCodes.SM_CMETRICS" value="83" />
        </enumeration>
        <enumeration name="ToolBarButtonInfoFlags" id="T:MControl.Win32.ToolBarButtonInfoFlags" displayName="ToolBarButtonInfoFlags" namespace="MControl.Win32" access="Public">
          <field name="TBIF_IMAGE" id="F:MControl.Win32.ToolBarButtonInfoFlags.TBIF_IMAGE" value="1" />
          <field name="TBIF_TEXT" id="F:MControl.Win32.ToolBarButtonInfoFlags.TBIF_TEXT" value="2" />
          <field name="TBIF_STATE" id="F:MControl.Win32.ToolBarButtonInfoFlags.TBIF_STATE" value="4" />
          <field name="TBIF_STYLE" id="F:MControl.Win32.ToolBarButtonInfoFlags.TBIF_STYLE" value="8" />
          <field name="TBIF_LPARAM" id="F:MControl.Win32.ToolBarButtonInfoFlags.TBIF_LPARAM" value="16" />
          <field name="TBIF_COMMAND" id="F:MControl.Win32.ToolBarButtonInfoFlags.TBIF_COMMAND" value="32" />
          <field name="TBIF_SIZE" id="F:MControl.Win32.ToolBarButtonInfoFlags.TBIF_SIZE" value="64" />
          <field name="I_IMAGECALLBACK" id="F:MControl.Win32.ToolBarButtonInfoFlags.I_IMAGECALLBACK" value="-1" />
          <field name="I_IMAGENONE" id="F:MControl.Win32.ToolBarButtonInfoFlags.I_IMAGENONE" value="-2" />
        </enumeration>
        <enumeration name="ToolBarButtonStates" id="T:MControl.Win32.ToolBarButtonStates" displayName="ToolBarButtonStates" namespace="MControl.Win32" access="Public">
          <field name="TBSTATE_CHECKED" id="F:MControl.Win32.ToolBarButtonStates.TBSTATE_CHECKED" value="1" />
          <field name="TBSTATE_PRESSED" id="F:MControl.Win32.ToolBarButtonStates.TBSTATE_PRESSED" value="2" />
          <field name="TBSTATE_ENABLED" id="F:MControl.Win32.ToolBarButtonStates.TBSTATE_ENABLED" value="4" />
          <field name="TBSTATE_HIDDEN" id="F:MControl.Win32.ToolBarButtonStates.TBSTATE_HIDDEN" value="8" />
          <field name="TBSTATE_INDETERMINATE" id="F:MControl.Win32.ToolBarButtonStates.TBSTATE_INDETERMINATE" value="16" />
          <field name="TBSTATE_WRAP" id="F:MControl.Win32.ToolBarButtonStates.TBSTATE_WRAP" value="32" />
          <field name="TBSTATE_ELLIPSES" id="F:MControl.Win32.ToolBarButtonStates.TBSTATE_ELLIPSES" value="64" />
          <field name="TBSTATE_MARKED" id="F:MControl.Win32.ToolBarButtonStates.TBSTATE_MARKED" value="128" />
        </enumeration>
        <enumeration name="ToolBarButtonStyles" id="T:MControl.Win32.ToolBarButtonStyles" displayName="ToolBarButtonStyles" namespace="MControl.Win32" access="Public">
          <field name="TBSTYLE_BUTTON" id="F:MControl.Win32.ToolBarButtonStyles.TBSTYLE_BUTTON" value="0" />
          <field name="TBSTYLE_SEP" id="F:MControl.Win32.ToolBarButtonStyles.TBSTYLE_SEP" value="1" />
          <field name="TBSTYLE_CHECK" id="F:MControl.Win32.ToolBarButtonStyles.TBSTYLE_CHECK" value="2" />
          <field name="TBSTYLE_GROUP" id="F:MControl.Win32.ToolBarButtonStyles.TBSTYLE_GROUP" value="4" />
          <field name="TBSTYLE_CHECKGROUP" id="F:MControl.Win32.ToolBarButtonStyles.TBSTYLE_CHECKGROUP" value="6" />
          <field name="TBSTYLE_DROPDOWN" id="F:MControl.Win32.ToolBarButtonStyles.TBSTYLE_DROPDOWN" value="8" />
          <field name="TBSTYLE_AUTOSIZE" id="F:MControl.Win32.ToolBarButtonStyles.TBSTYLE_AUTOSIZE" value="16" />
          <field name="TBSTYLE_NOPREFIX" id="F:MControl.Win32.ToolBarButtonStyles.TBSTYLE_NOPREFIX" value="32" />
          <field name="TBSTYLE_TOOLTIPS" id="F:MControl.Win32.ToolBarButtonStyles.TBSTYLE_TOOLTIPS" value="256" />
          <field name="TBSTYLE_WRAPABLE" id="F:MControl.Win32.ToolBarButtonStyles.TBSTYLE_WRAPABLE" value="512" />
          <field name="TBSTYLE_ALTDRAG" id="F:MControl.Win32.ToolBarButtonStyles.TBSTYLE_ALTDRAG" value="1024" />
          <field name="TBSTYLE_FLAT" id="F:MControl.Win32.ToolBarButtonStyles.TBSTYLE_FLAT" value="2048" />
          <field name="TBSTYLE_LIST" id="F:MControl.Win32.ToolBarButtonStyles.TBSTYLE_LIST" value="4096" />
          <field name="TBSTYLE_CUSTOMERASE" id="F:MControl.Win32.ToolBarButtonStyles.TBSTYLE_CUSTOMERASE" value="8192" />
          <field name="TBSTYLE_REGISTERDROP" id="F:MControl.Win32.ToolBarButtonStyles.TBSTYLE_REGISTERDROP" value="16384" />
          <field name="TBSTYLE_TRANSPARENT" id="F:MControl.Win32.ToolBarButtonStyles.TBSTYLE_TRANSPARENT" value="32768" />
          <field name="TBSTYLE_EX_DRAWDDARROWS" id="F:MControl.Win32.ToolBarButtonStyles.TBSTYLE_EX_DRAWDDARROWS" value="1" />
        </enumeration>
        <enumeration name="ToolBarExStyles" id="T:MControl.Win32.ToolBarExStyles" displayName="ToolBarExStyles" namespace="MControl.Win32" access="Public">
          <field name="TBSTYLE_EX_DRAWDDARROWS" id="F:MControl.Win32.ToolBarExStyles.TBSTYLE_EX_DRAWDDARROWS" value="1" />
          <field name="TBSTYLE_EX_HIDECLIPPEDBUTTONS" id="F:MControl.Win32.ToolBarExStyles.TBSTYLE_EX_HIDECLIPPEDBUTTONS" value="16" />
          <field name="TBSTYLE_EX_DOUBLEBUFFER" id="F:MControl.Win32.ToolBarExStyles.TBSTYLE_EX_DOUBLEBUFFER" value="128" />
        </enumeration>
        <enumeration name="ToolBarMessages" id="T:MControl.Win32.ToolBarMessages" displayName="ToolBarMessages" namespace="MControl.Win32" access="Public">
          <field name="WM_USER" id="F:MControl.Win32.ToolBarMessages.WM_USER" value="1024" />
          <field name="TB_ENABLEBUTTON" id="F:MControl.Win32.ToolBarMessages.TB_ENABLEBUTTON" value="1025" />
          <field name="TB_CHECKBUTTON" id="F:MControl.Win32.ToolBarMessages.TB_CHECKBUTTON" value="1026" />
          <field name="TB_PRESSBUTTON" id="F:MControl.Win32.ToolBarMessages.TB_PRESSBUTTON" value="1027" />
          <field name="TB_HIDEBUTTON" id="F:MControl.Win32.ToolBarMessages.TB_HIDEBUTTON" value="1028" />
          <field name="TB_INDETERMINATE" id="F:MControl.Win32.ToolBarMessages.TB_INDETERMINATE" value="1029" />
          <field name="TB_MARKBUTTON" id="F:MControl.Win32.ToolBarMessages.TB_MARKBUTTON" value="1030" />
          <field name="TB_ISBUTTONENABLED" id="F:MControl.Win32.ToolBarMessages.TB_ISBUTTONENABLED" value="1033" />
          <field name="TB_ISBUTTONCHECKED" id="F:MControl.Win32.ToolBarMessages.TB_ISBUTTONCHECKED" value="1034" />
          <field name="TB_ISBUTTONPRESSED" id="F:MControl.Win32.ToolBarMessages.TB_ISBUTTONPRESSED" value="1035" />
          <field name="TB_ISBUTTONHIDDEN" id="F:MControl.Win32.ToolBarMessages.TB_ISBUTTONHIDDEN" value="1036" />
          <field name="TB_ISBUTTONINDETERMINATE" id="F:MControl.Win32.ToolBarMessages.TB_ISBUTTONINDETERMINATE" value="1037" />
          <field name="TB_ISBUTTONHIGHLIGHTED" id="F:MControl.Win32.ToolBarMessages.TB_ISBUTTONHIGHLIGHTED" value="1038" />
          <field name="TB_SETSTATE" id="F:MControl.Win32.ToolBarMessages.TB_SETSTATE" value="1041" />
          <field name="TB_GETSTATE" id="F:MControl.Win32.ToolBarMessages.TB_GETSTATE" value="1042" />
          <field name="TB_ADDBITMAP" id="F:MControl.Win32.ToolBarMessages.TB_ADDBITMAP" value="1043" />
          <field name="TB_ADDBUTTONSA" id="F:MControl.Win32.ToolBarMessages.TB_ADDBUTTONSA" value="1044" />
          <field name="TB_INSERTBUTTONA" id="F:MControl.Win32.ToolBarMessages.TB_INSERTBUTTONA" value="1045" />
          <field name="TB_ADDBUTTONS" id="F:MControl.Win32.ToolBarMessages.TB_ADDBUTTONS" value="1044" />
          <field name="TB_INSERTBUTTON" id="F:MControl.Win32.ToolBarMessages.TB_INSERTBUTTON" value="1045" />
          <field name="TB_DELETEBUTTON" id="F:MControl.Win32.ToolBarMessages.TB_DELETEBUTTON" value="1046" />
          <field name="TB_GETBUTTON" id="F:MControl.Win32.ToolBarMessages.TB_GETBUTTON" value="1047" />
          <field name="TB_BUTTONCOUNT" id="F:MControl.Win32.ToolBarMessages.TB_BUTTONCOUNT" value="1048" />
          <field name="TB_COMMANDTOINDEX" id="F:MControl.Win32.ToolBarMessages.TB_COMMANDTOINDEX" value="1049" />
          <field name="TB_SAVERESTOREA" id="F:MControl.Win32.ToolBarMessages.TB_SAVERESTOREA" value="1050" />
          <field name="TB_CUSTOMIZE" id="F:MControl.Win32.ToolBarMessages.TB_CUSTOMIZE" value="1051" />
          <field name="TB_ADDSTRINGA" id="F:MControl.Win32.ToolBarMessages.TB_ADDSTRINGA" value="1052" />
          <field name="TB_GETITEMRECT" id="F:MControl.Win32.ToolBarMessages.TB_GETITEMRECT" value="1053" />
          <field name="TB_BUTTONSTRUCTSIZE" id="F:MControl.Win32.ToolBarMessages.TB_BUTTONSTRUCTSIZE" value="1054" />
          <field name="TB_SETBUTTONSIZE" id="F:MControl.Win32.ToolBarMessages.TB_SETBUTTONSIZE" value="1055" />
          <field name="TB_SETBITMAPSIZE" id="F:MControl.Win32.ToolBarMessages.TB_SETBITMAPSIZE" value="1056" />
          <field name="TB_AUTOSIZE" id="F:MControl.Win32.ToolBarMessages.TB_AUTOSIZE" value="1057" />
          <field name="TB_GETTOOLTIPS" id="F:MControl.Win32.ToolBarMessages.TB_GETTOOLTIPS" value="1059" />
          <field name="TB_SETTOOLTIPS" id="F:MControl.Win32.ToolBarMessages.TB_SETTOOLTIPS" value="1060" />
          <field name="TB_SETPARENT" id="F:MControl.Win32.ToolBarMessages.TB_SETPARENT" value="1061" />
          <field name="TB_SETROWS" id="F:MControl.Win32.ToolBarMessages.TB_SETROWS" value="1063" />
          <field name="TB_GETROWS" id="F:MControl.Win32.ToolBarMessages.TB_GETROWS" value="1064" />
          <field name="TB_GETBITMAPFLAGS" id="F:MControl.Win32.ToolBarMessages.TB_GETBITMAPFLAGS" value="1065" />
          <field name="TB_SETCMDID" id="F:MControl.Win32.ToolBarMessages.TB_SETCMDID" value="1066" />
          <field name="TB_CHANGEBITMAP" id="F:MControl.Win32.ToolBarMessages.TB_CHANGEBITMAP" value="1067" />
          <field name="TB_GETBITMAP" id="F:MControl.Win32.ToolBarMessages.TB_GETBITMAP" value="1068" />
          <field name="TB_GETBUTTONTEXTA" id="F:MControl.Win32.ToolBarMessages.TB_GETBUTTONTEXTA" value="1069" />
          <field name="TB_GETBUTTONTEXTW" id="F:MControl.Win32.ToolBarMessages.TB_GETBUTTONTEXTW" value="1099" />
          <field name="TB_REPLACEBITMAP" id="F:MControl.Win32.ToolBarMessages.TB_REPLACEBITMAP" value="1070" />
          <field name="TB_SETINDENT" id="F:MControl.Win32.ToolBarMessages.TB_SETINDENT" value="1071" />
          <field name="TB_SETIMAGELIST" id="F:MControl.Win32.ToolBarMessages.TB_SETIMAGELIST" value="1072" />
          <field name="TB_GETIMAGELIST" id="F:MControl.Win32.ToolBarMessages.TB_GETIMAGELIST" value="1073" />
          <field name="TB_LOADIMAGES" id="F:MControl.Win32.ToolBarMessages.TB_LOADIMAGES" value="1074" />
          <field name="TB_GETRECT" id="F:MControl.Win32.ToolBarMessages.TB_GETRECT" value="1075" />
          <field name="TB_SETHOTIMAGELIST" id="F:MControl.Win32.ToolBarMessages.TB_SETHOTIMAGELIST" value="1076" />
          <field name="TB_GETHOTIMAGELIST" id="F:MControl.Win32.ToolBarMessages.TB_GETHOTIMAGELIST" value="1077" />
          <field name="TB_SETDISABLEDIMAGELIST" id="F:MControl.Win32.ToolBarMessages.TB_SETDISABLEDIMAGELIST" value="1078" />
          <field name="TB_GETDISABLEDIMAGELIST" id="F:MControl.Win32.ToolBarMessages.TB_GETDISABLEDIMAGELIST" value="1079" />
          <field name="TB_SETSTYLE" id="F:MControl.Win32.ToolBarMessages.TB_SETSTYLE" value="1080" />
          <field name="TB_GETSTYLE" id="F:MControl.Win32.ToolBarMessages.TB_GETSTYLE" value="1081" />
          <field name="TB_GETBUTTONSIZE" id="F:MControl.Win32.ToolBarMessages.TB_GETBUTTONSIZE" value="1082" />
          <field name="TB_SETBUTTONWIDTH" id="F:MControl.Win32.ToolBarMessages.TB_SETBUTTONWIDTH" value="1083" />
          <field name="TB_SETMAXTEXTROWS" id="F:MControl.Win32.ToolBarMessages.TB_SETMAXTEXTROWS" value="1084" />
          <field name="TB_GETTEXTROWS" id="F:MControl.Win32.ToolBarMessages.TB_GETTEXTROWS" value="1085" />
          <field name="TB_GETOBJECT" id="F:MControl.Win32.ToolBarMessages.TB_GETOBJECT" value="1086" />
          <field name="TB_GETBUTTONINFOW" id="F:MControl.Win32.ToolBarMessages.TB_GETBUTTONINFOW" value="1087" />
          <field name="TB_SETBUTTONINFOW" id="F:MControl.Win32.ToolBarMessages.TB_SETBUTTONINFOW" value="1088" />
          <field name="TB_GETBUTTONINFOA" id="F:MControl.Win32.ToolBarMessages.TB_GETBUTTONINFOA" value="1089" />
          <field name="TB_SETBUTTONINFOA" id="F:MControl.Win32.ToolBarMessages.TB_SETBUTTONINFOA" value="1090" />
          <field name="TB_INSERTBUTTONW" id="F:MControl.Win32.ToolBarMessages.TB_INSERTBUTTONW" value="1091" />
          <field name="TB_ADDBUTTONSW" id="F:MControl.Win32.ToolBarMessages.TB_ADDBUTTONSW" value="1092" />
          <field name="TB_HITTEST" id="F:MControl.Win32.ToolBarMessages.TB_HITTEST" value="1093" />
          <field name="TB_SETDRAWTEXTFLAGS" id="F:MControl.Win32.ToolBarMessages.TB_SETDRAWTEXTFLAGS" value="1094" />
          <field name="TB_GETHOTITEM" id="F:MControl.Win32.ToolBarMessages.TB_GETHOTITEM" value="1095" />
          <field name="TB_SETHOTITEM" id="F:MControl.Win32.ToolBarMessages.TB_SETHOTITEM" value="1096" />
          <field name="TB_SETANCHORHIGHLIGHT" id="F:MControl.Win32.ToolBarMessages.TB_SETANCHORHIGHLIGHT" value="1097" />
          <field name="TB_GETANCHORHIGHLIGHT" id="F:MControl.Win32.ToolBarMessages.TB_GETANCHORHIGHLIGHT" value="1098" />
          <field name="TB_SAVERESTOREW" id="F:MControl.Win32.ToolBarMessages.TB_SAVERESTOREW" value="1100" />
          <field name="TB_ADDSTRINGW" id="F:MControl.Win32.ToolBarMessages.TB_ADDSTRINGW" value="1101" />
          <field name="TB_MAPACCELERATORA" id="F:MControl.Win32.ToolBarMessages.TB_MAPACCELERATORA" value="1102" />
          <field name="TB_GETINSERTMARK" id="F:MControl.Win32.ToolBarMessages.TB_GETINSERTMARK" value="1103" />
          <field name="TB_SETINSERTMARK" id="F:MControl.Win32.ToolBarMessages.TB_SETINSERTMARK" value="1104" />
          <field name="TB_INSERTMARKHITTEST" id="F:MControl.Win32.ToolBarMessages.TB_INSERTMARKHITTEST" value="1105" />
          <field name="TB_MOVEBUTTON" id="F:MControl.Win32.ToolBarMessages.TB_MOVEBUTTON" value="1106" />
          <field name="TB_GETMAXSIZE" id="F:MControl.Win32.ToolBarMessages.TB_GETMAXSIZE" value="1107" />
          <field name="TB_SETEXTENDEDSTYLE" id="F:MControl.Win32.ToolBarMessages.TB_SETEXTENDEDSTYLE" value="1108" />
          <field name="TB_GETEXTENDEDSTYLE" id="F:MControl.Win32.ToolBarMessages.TB_GETEXTENDEDSTYLE" value="1109" />
          <field name="TB_GETPADDING" id="F:MControl.Win32.ToolBarMessages.TB_GETPADDING" value="1110" />
          <field name="TB_SETPADDING" id="F:MControl.Win32.ToolBarMessages.TB_SETPADDING" value="1111" />
          <field name="TB_SETINSERTMARKCOLOR" id="F:MControl.Win32.ToolBarMessages.TB_SETINSERTMARKCOLOR" value="1112" />
          <field name="TB_GETINSERTMARKCOLOR" id="F:MControl.Win32.ToolBarMessages.TB_GETINSERTMARKCOLOR" value="1113" />
        </enumeration>
        <enumeration name="ToolBarNotifications" id="T:MControl.Win32.ToolBarNotifications" displayName="ToolBarNotifications" namespace="MControl.Win32" access="Public">
          <field name="TTN_NEEDTEXTA" id="F:MControl.Win32.ToolBarNotifications.TTN_NEEDTEXTA" value="-520" />
          <field name="TTN_NEEDTEXTW" id="F:MControl.Win32.ToolBarNotifications.TTN_NEEDTEXTW" value="-530" />
          <field name="TBN_QUERYINSERT" id="F:MControl.Win32.ToolBarNotifications.TBN_QUERYINSERT" value="-706" />
          <field name="TBN_DROPDOWN" id="F:MControl.Win32.ToolBarNotifications.TBN_DROPDOWN" value="-710" />
          <field name="TBN_HOTITEMCHANGE" id="F:MControl.Win32.ToolBarNotifications.TBN_HOTITEMCHANGE" value="-713" />
        </enumeration>
        <enumeration name="ToolBarStyles" id="T:MControl.Win32.ToolBarStyles" displayName="ToolBarStyles" namespace="MControl.Win32" access="Public">
          <field name="TBSTYLE_BUTTON" id="F:MControl.Win32.ToolBarStyles.TBSTYLE_BUTTON" value="0" />
          <field name="TBSTYLE_SEP" id="F:MControl.Win32.ToolBarStyles.TBSTYLE_SEP" value="1" />
          <field name="TBSTYLE_CHECK" id="F:MControl.Win32.ToolBarStyles.TBSTYLE_CHECK" value="2" />
          <field name="TBSTYLE_GROUP" id="F:MControl.Win32.ToolBarStyles.TBSTYLE_GROUP" value="4" />
          <field name="TBSTYLE_CHECKGROUP" id="F:MControl.Win32.ToolBarStyles.TBSTYLE_CHECKGROUP" value="6" />
          <field name="TBSTYLE_DROPDOWN" id="F:MControl.Win32.ToolBarStyles.TBSTYLE_DROPDOWN" value="8" />
          <field name="TBSTYLE_AUTOSIZE" id="F:MControl.Win32.ToolBarStyles.TBSTYLE_AUTOSIZE" value="16" />
          <field name="TBSTYLE_NOPREFIX" id="F:MControl.Win32.ToolBarStyles.TBSTYLE_NOPREFIX" value="32" />
          <field name="TBSTYLE_TOOLTIPS" id="F:MControl.Win32.ToolBarStyles.TBSTYLE_TOOLTIPS" value="256" />
          <field name="TBSTYLE_WRAPABLE" id="F:MControl.Win32.ToolBarStyles.TBSTYLE_WRAPABLE" value="512" />
          <field name="TBSTYLE_ALTDRAG" id="F:MControl.Win32.ToolBarStyles.TBSTYLE_ALTDRAG" value="1024" />
          <field name="TBSTYLE_FLAT" id="F:MControl.Win32.ToolBarStyles.TBSTYLE_FLAT" value="2048" />
          <field name="TBSTYLE_LIST" id="F:MControl.Win32.ToolBarStyles.TBSTYLE_LIST" value="4096" />
          <field name="TBSTYLE_CUSTOMERASE" id="F:MControl.Win32.ToolBarStyles.TBSTYLE_CUSTOMERASE" value="8192" />
          <field name="TBSTYLE_REGISTERDROP" id="F:MControl.Win32.ToolBarStyles.TBSTYLE_REGISTERDROP" value="16384" />
          <field name="TBSTYLE_TRANSPARENT" id="F:MControl.Win32.ToolBarStyles.TBSTYLE_TRANSPARENT" value="32768" />
          <field name="TBSTYLE_EX_DRAWDDARROWS" id="F:MControl.Win32.ToolBarStyles.TBSTYLE_EX_DRAWDDARROWS" value="1" />
        </enumeration>
        <enumeration name="ToolTipFlags" id="T:MControl.Win32.ToolTipFlags" displayName="ToolTipFlags" namespace="MControl.Win32" access="Public">
          <field name="TTF_CENTERTIP" id="F:MControl.Win32.ToolTipFlags.TTF_CENTERTIP" value="2" />
          <field name="TTF_RTLREADING" id="F:MControl.Win32.ToolTipFlags.TTF_RTLREADING" value="4" />
          <field name="TTF_SUBCLASS" id="F:MControl.Win32.ToolTipFlags.TTF_SUBCLASS" value="16" />
          <field name="TTF_TRACK" id="F:MControl.Win32.ToolTipFlags.TTF_TRACK" value="32" />
          <field name="TTF_ABSOLUTE" id="F:MControl.Win32.ToolTipFlags.TTF_ABSOLUTE" value="128" />
          <field name="TTF_TRANSPARENT" id="F:MControl.Win32.ToolTipFlags.TTF_TRANSPARENT" value="256" />
          <field name="TTF_DI_SETITEM" id="F:MControl.Win32.ToolTipFlags.TTF_DI_SETITEM" value="32768" />
        </enumeration>
        <enumeration name="TrackerEventFlags" id="T:MControl.Win32.TrackerEventFlags" displayName="TrackerEventFlags" namespace="MControl.Win32" access="Public" baseTypeId="T:System.UInt32">
          <field name="TME_HOVER" id="F:MControl.Win32.TrackerEventFlags.TME_HOVER" value="1" />
          <field name="TME_LEAVE" id="F:MControl.Win32.TrackerEventFlags.TME_LEAVE" value="2" />
          <field name="TME_QUERY" id="F:MControl.Win32.TrackerEventFlags.TME_QUERY" value="1073741824" />
          <field name="TME_CANCEL" id="F:MControl.Win32.TrackerEventFlags.TME_CANCEL" value="2147483648" />
        </enumeration>
        <enumeration name="TreeViewItemFlags" id="T:MControl.Win32.TreeViewItemFlags" displayName="TreeViewItemFlags" namespace="MControl.Win32" access="Public">
          <field name="TVIF_TEXT" id="F:MControl.Win32.TreeViewItemFlags.TVIF_TEXT" value="1" />
          <field name="TVIF_IMAGE" id="F:MControl.Win32.TreeViewItemFlags.TVIF_IMAGE" value="2" />
          <field name="TVIF_PARAM" id="F:MControl.Win32.TreeViewItemFlags.TVIF_PARAM" value="4" />
          <field name="TVIF_STATE" id="F:MControl.Win32.TreeViewItemFlags.TVIF_STATE" value="8" />
          <field name="TVIF_HANDLE" id="F:MControl.Win32.TreeViewItemFlags.TVIF_HANDLE" value="16" />
          <field name="TVIF_SELECTEDIMAGE" id="F:MControl.Win32.TreeViewItemFlags.TVIF_SELECTEDIMAGE" value="32" />
          <field name="TVIF_CHILDREN" id="F:MControl.Win32.TreeViewItemFlags.TVIF_CHILDREN" value="64" />
          <field name="TVIF_INTEGRAL" id="F:MControl.Win32.TreeViewItemFlags.TVIF_INTEGRAL" value="128" />
        </enumeration>
        <enumeration name="TreeViewMessages" id="T:MControl.Win32.TreeViewMessages" displayName="TreeViewMessages" namespace="MControl.Win32" access="Public">
          <field name="TV_FIRST" id="F:MControl.Win32.TreeViewMessages.TV_FIRST" value="4352" />
          <field name="TVM_GETITEMRECT" id="F:MControl.Win32.TreeViewMessages.TVM_GETITEMRECT" value="4356" />
          <field name="TVM_GETITEMW" id="F:MControl.Win32.TreeViewMessages.TVM_GETITEMW" value="4414" />
        </enumeration>
        <enumeration name="UpdateLayeredWindowsFlags" id="T:MControl.Win32.UpdateLayeredWindowsFlags" displayName="UpdateLayeredWindowsFlags" namespace="MControl.Win32" access="Public">
          <field name="ULW_COLORKEY" id="F:MControl.Win32.UpdateLayeredWindowsFlags.ULW_COLORKEY" value="1" />
          <field name="ULW_ALPHA" id="F:MControl.Win32.UpdateLayeredWindowsFlags.ULW_ALPHA" value="2" />
          <field name="ULW_OPAQUE" id="F:MControl.Win32.UpdateLayeredWindowsFlags.ULW_OPAQUE" value="4" />
        </enumeration>
        <enumeration name="VirtualKeys" id="T:MControl.Win32.VirtualKeys" displayName="VirtualKeys" namespace="MControl.Win32" access="Public">
          <field name="VK_LBUTTON" id="F:MControl.Win32.VirtualKeys.VK_LBUTTON" value="1" />
          <field name="VK_CANCEL" id="F:MControl.Win32.VirtualKeys.VK_CANCEL" value="3" />
          <field name="VK_BACK" id="F:MControl.Win32.VirtualKeys.VK_BACK" value="8" />
          <field name="VK_TAB" id="F:MControl.Win32.VirtualKeys.VK_TAB" value="9" />
          <field name="VK_CLEAR" id="F:MControl.Win32.VirtualKeys.VK_CLEAR" value="12" />
          <field name="VK_RETURN" id="F:MControl.Win32.VirtualKeys.VK_RETURN" value="13" />
          <field name="VK_SHIFT" id="F:MControl.Win32.VirtualKeys.VK_SHIFT" value="16" />
          <field name="VK_CONTROL" id="F:MControl.Win32.VirtualKeys.VK_CONTROL" value="17" />
          <field name="VK_MENU" id="F:MControl.Win32.VirtualKeys.VK_MENU" value="18" />
          <field name="VK_CAPITAL" id="F:MControl.Win32.VirtualKeys.VK_CAPITAL" value="20" />
          <field name="VK_ESCAPE" id="F:MControl.Win32.VirtualKeys.VK_ESCAPE" value="27" />
          <field name="VK_SPACE" id="F:MControl.Win32.VirtualKeys.VK_SPACE" value="32" />
          <field name="VK_PRIOR" id="F:MControl.Win32.VirtualKeys.VK_PRIOR" value="33" />
          <field name="VK_NEXT" id="F:MControl.Win32.VirtualKeys.VK_NEXT" value="34" />
          <field name="VK_END" id="F:MControl.Win32.VirtualKeys.VK_END" value="35" />
          <field name="VK_HOME" id="F:MControl.Win32.VirtualKeys.VK_HOME" value="36" />
          <field name="VK_LEFT" id="F:MControl.Win32.VirtualKeys.VK_LEFT" value="37" />
          <field name="VK_UP" id="F:MControl.Win32.VirtualKeys.VK_UP" value="38" />
          <field name="VK_RIGHT" id="F:MControl.Win32.VirtualKeys.VK_RIGHT" value="39" />
          <field name="VK_DOWN" id="F:MControl.Win32.VirtualKeys.VK_DOWN" value="40" />
          <field name="VK_SELECT" id="F:MControl.Win32.VirtualKeys.VK_SELECT" value="41" />
          <field name="VK_EXECUTE" id="F:MControl.Win32.VirtualKeys.VK_EXECUTE" value="43" />
          <field name="VK_SNAPSHOT" id="F:MControl.Win32.VirtualKeys.VK_SNAPSHOT" value="44" />
          <field name="VK_HELP" id="F:MControl.Win32.VirtualKeys.VK_HELP" value="47" />
          <field name="VK_0" id="F:MControl.Win32.VirtualKeys.VK_0" value="48" />
          <field name="VK_1" id="F:MControl.Win32.VirtualKeys.VK_1" value="49" />
          <field name="VK_2" id="F:MControl.Win32.VirtualKeys.VK_2" value="50" />
          <field name="VK_3" id="F:MControl.Win32.VirtualKeys.VK_3" value="51" />
          <field name="VK_4" id="F:MControl.Win32.VirtualKeys.VK_4" value="52" />
          <field name="VK_5" id="F:MControl.Win32.VirtualKeys.VK_5" value="53" />
          <field name="VK_6" id="F:MControl.Win32.VirtualKeys.VK_6" value="54" />
          <field name="VK_7" id="F:MControl.Win32.VirtualKeys.VK_7" value="55" />
          <field name="VK_8" id="F:MControl.Win32.VirtualKeys.VK_8" value="56" />
          <field name="VK_9" id="F:MControl.Win32.VirtualKeys.VK_9" value="57" />
          <field name="VK_A" id="F:MControl.Win32.VirtualKeys.VK_A" value="65" />
          <field name="VK_B" id="F:MControl.Win32.VirtualKeys.VK_B" value="66" />
          <field name="VK_C" id="F:MControl.Win32.VirtualKeys.VK_C" value="67" />
          <field name="VK_D" id="F:MControl.Win32.VirtualKeys.VK_D" value="68" />
          <field name="VK_E" id="F:MControl.Win32.VirtualKeys.VK_E" value="69" />
          <field name="VK_F" id="F:MControl.Win32.VirtualKeys.VK_F" value="70" />
          <field name="VK_G" id="F:MControl.Win32.VirtualKeys.VK_G" value="71" />
          <field name="VK_H" id="F:MControl.Win32.VirtualKeys.VK_H" value="72" />
          <field name="VK_I" id="F:MControl.Win32.VirtualKeys.VK_I" value="73" />
          <field name="VK_J" id="F:MControl.Win32.VirtualKeys.VK_J" value="74" />
          <field name="VK_K" id="F:MControl.Win32.VirtualKeys.VK_K" value="75" />
          <field name="VK_L" id="F:MControl.Win32.VirtualKeys.VK_L" value="76" />
          <field name="VK_M" id="F:MControl.Win32.VirtualKeys.VK_M" value="77" />
          <field name="VK_N" id="F:MControl.Win32.VirtualKeys.VK_N" value="78" />
          <field name="VK_O" id="F:MControl.Win32.VirtualKeys.VK_O" value="79" />
          <field name="VK_P" id="F:MControl.Win32.VirtualKeys.VK_P" value="80" />
          <field name="VK_Q" id="F:MControl.Win32.VirtualKeys.VK_Q" value="81" />
          <field name="VK_R" id="F:MControl.Win32.VirtualKeys.VK_R" value="82" />
          <field name="VK_S" id="F:MControl.Win32.VirtualKeys.VK_S" value="83" />
          <field name="VK_T" id="F:MControl.Win32.VirtualKeys.VK_T" value="84" />
          <field name="VK_U" id="F:MControl.Win32.VirtualKeys.VK_U" value="85" />
          <field name="VK_V" id="F:MControl.Win32.VirtualKeys.VK_V" value="86" />
          <field name="VK_W" id="F:MControl.Win32.VirtualKeys.VK_W" value="87" />
          <field name="VK_X" id="F:MControl.Win32.VirtualKeys.VK_X" value="88" />
          <field name="VK_Y" id="F:MControl.Win32.VirtualKeys.VK_Y" value="89" />
          <field name="VK_Z" id="F:MControl.Win32.VirtualKeys.VK_Z" value="90" />
          <field name="VK_NUMPAD0" id="F:MControl.Win32.VirtualKeys.VK_NUMPAD0" value="96" />
          <field name="VK_NUMPAD1" id="F:MControl.Win32.VirtualKeys.VK_NUMPAD1" value="97" />
          <field name="VK_NUMPAD2" id="F:MControl.Win32.VirtualKeys.VK_NUMPAD2" value="98" />
          <field name="VK_NUMPAD3" id="F:MControl.Win32.VirtualKeys.VK_NUMPAD3" value="99" />
          <field name="VK_NUMPAD4" id="F:MControl.Win32.VirtualKeys.VK_NUMPAD4" value="100" />
          <field name="VK_NUMPAD5" id="F:MControl.Win32.VirtualKeys.VK_NUMPAD5" value="101" />
          <field name="VK_NUMPAD6" id="F:MControl.Win32.VirtualKeys.VK_NUMPAD6" value="102" />
          <field name="VK_NUMPAD7" id="F:MControl.Win32.VirtualKeys.VK_NUMPAD7" value="103" />
          <field name="VK_NUMPAD8" id="F:MControl.Win32.VirtualKeys.VK_NUMPAD8" value="104" />
          <field name="VK_NUMPAD9" id="F:MControl.Win32.VirtualKeys.VK_NUMPAD9" value="105" />
          <field name="VK_MULTIPLY" id="F:MControl.Win32.VirtualKeys.VK_MULTIPLY" value="106" />
          <field name="VK_ADD" id="F:MControl.Win32.VirtualKeys.VK_ADD" value="107" />
          <field name="VK_SEPARATOR" id="F:MControl.Win32.VirtualKeys.VK_SEPARATOR" value="108" />
          <field name="VK_SUBTRACT" id="F:MControl.Win32.VirtualKeys.VK_SUBTRACT" value="109" />
          <field name="VK_DECIMAL" id="F:MControl.Win32.VirtualKeys.VK_DECIMAL" value="110" />
          <field name="VK_DIVIDE" id="F:MControl.Win32.VirtualKeys.VK_DIVIDE" value="111" />
          <field name="VK_ATTN" id="F:MControl.Win32.VirtualKeys.VK_ATTN" value="246" />
          <field name="VK_CRSEL" id="F:MControl.Win32.VirtualKeys.VK_CRSEL" value="247" />
          <field name="VK_EXSEL" id="F:MControl.Win32.VirtualKeys.VK_EXSEL" value="248" />
          <field name="VK_EREOF" id="F:MControl.Win32.VirtualKeys.VK_EREOF" value="249" />
          <field name="VK_PLAY" id="F:MControl.Win32.VirtualKeys.VK_PLAY" value="250" />
          <field name="VK_ZOOM" id="F:MControl.Win32.VirtualKeys.VK_ZOOM" value="251" />
          <field name="VK_NONAME" id="F:MControl.Win32.VirtualKeys.VK_NONAME" value="252" />
          <field name="VK_PA1" id="F:MControl.Win32.VirtualKeys.VK_PA1" value="253" />
          <field name="VK_OEM_CLEAR" id="F:MControl.Win32.VirtualKeys.VK_OEM_CLEAR" value="254" />
          <field name="VK_LWIN" id="F:MControl.Win32.VirtualKeys.VK_LWIN" value="91" />
          <field name="VK_RWIN" id="F:MControl.Win32.VirtualKeys.VK_RWIN" value="92" />
          <field name="VK_APPS" id="F:MControl.Win32.VirtualKeys.VK_APPS" value="93" />
          <field name="VK_LSHIFT" id="F:MControl.Win32.VirtualKeys.VK_LSHIFT" value="160" />
          <field name="VK_RSHIFT" id="F:MControl.Win32.VirtualKeys.VK_RSHIFT" value="161" />
          <field name="VK_LCONTROL" id="F:MControl.Win32.VirtualKeys.VK_LCONTROL" value="162" />
          <field name="VK_RCONTROL" id="F:MControl.Win32.VirtualKeys.VK_RCONTROL" value="163" />
          <field name="VK_LMENU" id="F:MControl.Win32.VirtualKeys.VK_LMENU" value="164" />
          <field name="VK_RMENU" id="F:MControl.Win32.VirtualKeys.VK_RMENU" value="165" />
        </enumeration>
        <enumeration name="WindowExStyles" id="T:MControl.Win32.WindowExStyles" displayName="WindowExStyles" namespace="MControl.Win32" access="Public">
          <field name="WS_EX_DLGMODALFRAME" id="F:MControl.Win32.WindowExStyles.WS_EX_DLGMODALFRAME" value="1" />
          <field name="WS_EX_NOPARENTNOTIFY" id="F:MControl.Win32.WindowExStyles.WS_EX_NOPARENTNOTIFY" value="4" />
          <field name="WS_EX_TOPMOST" id="F:MControl.Win32.WindowExStyles.WS_EX_TOPMOST" value="8" />
          <field name="WS_EX_ACCEPTFILES" id="F:MControl.Win32.WindowExStyles.WS_EX_ACCEPTFILES" value="16" />
          <field name="WS_EX_TRANSPARENT" id="F:MControl.Win32.WindowExStyles.WS_EX_TRANSPARENT" value="32" />
          <field name="WS_EX_MDICHILD" id="F:MControl.Win32.WindowExStyles.WS_EX_MDICHILD" value="64" />
          <field name="WS_EX_TOOLWINDOW" id="F:MControl.Win32.WindowExStyles.WS_EX_TOOLWINDOW" value="128" />
          <field name="WS_EX_WINDOWEDGE" id="F:MControl.Win32.WindowExStyles.WS_EX_WINDOWEDGE" value="256" />
          <field name="WS_EX_CLIENTEDGE" id="F:MControl.Win32.WindowExStyles.WS_EX_CLIENTEDGE" value="512" />
          <field name="WS_EX_CONTEXTHELP" id="F:MControl.Win32.WindowExStyles.WS_EX_CONTEXTHELP" value="1024" />
          <field name="WS_EX_RIGHT" id="F:MControl.Win32.WindowExStyles.WS_EX_RIGHT" value="4096" />
          <field name="WS_EX_LEFT" id="F:MControl.Win32.WindowExStyles.WS_EX_LEFT" value="0" />
          <field name="WS_EX_RTLREADING" id="F:MControl.Win32.WindowExStyles.WS_EX_RTLREADING" value="8192" />
          <field name="WS_EX_LTRREADING" id="F:MControl.Win32.WindowExStyles.WS_EX_LTRREADING" value="0" />
          <field name="WS_EX_LEFTSCROLLBAR" id="F:MControl.Win32.WindowExStyles.WS_EX_LEFTSCROLLBAR" value="16384" />
          <field name="WS_EX_RIGHTSCROLLBAR" id="F:MControl.Win32.WindowExStyles.WS_EX_RIGHTSCROLLBAR" value="0" />
          <field name="WS_EX_CONTROLPARENT" id="F:MControl.Win32.WindowExStyles.WS_EX_CONTROLPARENT" value="65536" />
          <field name="WS_EX_STATICEDGE" id="F:MControl.Win32.WindowExStyles.WS_EX_STATICEDGE" value="131072" />
          <field name="WS_EX_APPWINDOW" id="F:MControl.Win32.WindowExStyles.WS_EX_APPWINDOW" value="262144" />
          <field name="WS_EX_OVERLAPPEDWINDOW" id="F:MControl.Win32.WindowExStyles.WS_EX_OVERLAPPEDWINDOW" value="768" />
          <field name="WS_EX_PALETTEWINDOW" id="F:MControl.Win32.WindowExStyles.WS_EX_PALETTEWINDOW" value="392" />
          <field name="WS_EX_LAYERED" id="F:MControl.Win32.WindowExStyles.WS_EX_LAYERED" value="524288" />
        </enumeration>
        <enumeration name="WindowsHookCodes" id="T:MControl.Win32.WindowsHookCodes" displayName="WindowsHookCodes" namespace="MControl.Win32" access="Public">
          <field name="WH_MSGFILTER" id="F:MControl.Win32.WindowsHookCodes.WH_MSGFILTER" value="-1" />
          <field name="WH_JOURNALRECORD" id="F:MControl.Win32.WindowsHookCodes.WH_JOURNALRECORD" value="0" />
          <field name="WH_JOURNALPLAYBACK" id="F:MControl.Win32.WindowsHookCodes.WH_JOURNALPLAYBACK" value="1" />
          <field name="WH_KEYBOARD" id="F:MControl.Win32.WindowsHookCodes.WH_KEYBOARD" value="2" />
          <field name="WH_GETMESSAGE" id="F:MControl.Win32.WindowsHookCodes.WH_GETMESSAGE" value="3" />
          <field name="WH_CALLWNDPROC" id="F:MControl.Win32.WindowsHookCodes.WH_CALLWNDPROC" value="4" />
          <field name="WH_CBT" id="F:MControl.Win32.WindowsHookCodes.WH_CBT" value="5" />
          <field name="WH_SYSMSGFILTER" id="F:MControl.Win32.WindowsHookCodes.WH_SYSMSGFILTER" value="6" />
          <field name="WH_MOUSE" id="F:MControl.Win32.WindowsHookCodes.WH_MOUSE" value="7" />
          <field name="WH_HARDWARE" id="F:MControl.Win32.WindowsHookCodes.WH_HARDWARE" value="8" />
          <field name="WH_DEBUG" id="F:MControl.Win32.WindowsHookCodes.WH_DEBUG" value="9" />
          <field name="WH_SHELL" id="F:MControl.Win32.WindowsHookCodes.WH_SHELL" value="10" />
          <field name="WH_FOREGROUNDIDLE" id="F:MControl.Win32.WindowsHookCodes.WH_FOREGROUNDIDLE" value="11" />
          <field name="WH_CALLWNDPROCRET" id="F:MControl.Win32.WindowsHookCodes.WH_CALLWNDPROCRET" value="12" />
          <field name="WH_KEYBOARD_LL" id="F:MControl.Win32.WindowsHookCodes.WH_KEYBOARD_LL" value="13" />
          <field name="WH_MOUSE_LL" id="F:MControl.Win32.WindowsHookCodes.WH_MOUSE_LL" value="14" />
        </enumeration>
        <enumeration name="WindowStyles" id="T:MControl.Win32.WindowStyles" displayName="WindowStyles" namespace="MControl.Win32" access="Public" baseTypeId="T:System.UInt32">
          <field name="WS_OVERLAPPED" id="F:MControl.Win32.WindowStyles.WS_OVERLAPPED" value="0" />
          <field name="WS_POPUP" id="F:MControl.Win32.WindowStyles.WS_POPUP" value="2147483648" />
          <field name="WS_CHILD" id="F:MControl.Win32.WindowStyles.WS_CHILD" value="1073741824" />
          <field name="WS_MINIMIZE" id="F:MControl.Win32.WindowStyles.WS_MINIMIZE" value="536870912" />
          <field name="WS_VISIBLE" id="F:MControl.Win32.WindowStyles.WS_VISIBLE" value="268435456" />
          <field name="WS_DISABLED" id="F:MControl.Win32.WindowStyles.WS_DISABLED" value="134217728" />
          <field name="WS_CLIPSIBLINGS" id="F:MControl.Win32.WindowStyles.WS_CLIPSIBLINGS" value="67108864" />
          <field name="WS_CLIPCHILDREN" id="F:MControl.Win32.WindowStyles.WS_CLIPCHILDREN" value="33554432" />
          <field name="WS_MAXIMIZE" id="F:MControl.Win32.WindowStyles.WS_MAXIMIZE" value="16777216" />
          <field name="WS_CAPTION" id="F:MControl.Win32.WindowStyles.WS_CAPTION" value="12582912" />
          <field name="WS_BORDER" id="F:MControl.Win32.WindowStyles.WS_BORDER" value="8388608" />
          <field name="WS_DLGFRAME" id="F:MControl.Win32.WindowStyles.WS_DLGFRAME" value="4194304" />
          <field name="WS_VSCROLL" id="F:MControl.Win32.WindowStyles.WS_VSCROLL" value="2097152" />
          <field name="WS_HSCROLL" id="F:MControl.Win32.WindowStyles.WS_HSCROLL" value="1048576" />
          <field name="WS_SYSMENU" id="F:MControl.Win32.WindowStyles.WS_SYSMENU" value="524288" />
          <field name="WS_THICKFRAME" id="F:MControl.Win32.WindowStyles.WS_THICKFRAME" value="262144" />
          <field name="WS_GROUP" id="F:MControl.Win32.WindowStyles.WS_GROUP" value="131072" />
          <field name="WS_TABSTOP" id="F:MControl.Win32.WindowStyles.WS_TABSTOP" value="65536" />
          <field name="WS_MINIMIZEBOX" id="F:MControl.Win32.WindowStyles.WS_MINIMIZEBOX" value="131072" />
          <field name="WS_MAXIMIZEBOX" id="F:MControl.Win32.WindowStyles.WS_MAXIMIZEBOX" value="65536" />
          <field name="WS_TILED" id="F:MControl.Win32.WindowStyles.WS_TILED" value="0" />
          <field name="WS_ICONIC" id="F:MControl.Win32.WindowStyles.WS_ICONIC" value="536870912" />
          <field name="WS_SIZEBOX" id="F:MControl.Win32.WindowStyles.WS_SIZEBOX" value="262144" />
          <field name="WS_POPUPWINDOW" id="F:MControl.Win32.WindowStyles.WS_POPUPWINDOW" value="2156396544" />
          <field name="WS_OVERLAPPEDWINDOW" id="F:MControl.Win32.WindowStyles.WS_OVERLAPPEDWINDOW" value="13565952" />
          <field name="WS_TILEDWINDOW" id="F:MControl.Win32.WindowStyles.WS_TILEDWINDOW" value="13565952" />
          <field name="WS_CHILDWINDOW" id="F:MControl.Win32.WindowStyles.WS_CHILDWINDOW" value="1073741824" />
        </enumeration>
        <enumeration name="WinMethods.TabControlHitTest" id="T:MControl.Win32.WinMethods.TabControlHitTest" displayName="WinMethods.TabControlHitTest" namespace="MControl.Win32" access="NestedPublic" flags="true">
          <attribute name="FlagsAttribute" id="T:System.FlagsAttribute" />
          <field name="TCHT_NOWHERE" id="F:MControl.Win32.WinMethods.TabControlHitTest.TCHT_NOWHERE" value="1" />
          <field name="TCHT_ONITEMICON" id="F:MControl.Win32.WinMethods.TabControlHitTest.TCHT_ONITEMICON" value="2" />
          <field name="TCHT_ONITEMLABEL" id="F:MControl.Win32.WinMethods.TabControlHitTest.TCHT_ONITEMLABEL" value="4" />
        </enumeration>
        <delegate name="WinAPI.HookProc" displayName="WinAPI.HookProc" namespace="MControl.Win32" id="T:MControl.Win32.WinAPI.HookProc" access="NestedPublic">
          <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          <parameter name="nCode">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </parameter>
          <parameter name="wParam">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </parameter>
          <parameter name="lParam">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </parameter>
        </delegate>
        <delegate name="WinMethods.EnumChildrenCallback" displayName="WinMethods.EnumChildrenCallback" namespace="MControl.Win32" id="T:MControl.Win32.WinMethods.EnumChildrenCallback" access="NestedPublic">
          <type name="Boolean" id="T:System.Boolean" valueType="true" />
          <parameter name="hwnd">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </parameter>
          <parameter name="lParam">
            <type name="IntPtr" id="T:System.IntPtr" valueType="true" />
          </parameter>
        </delegate>
      </namespace>
      <namespace name="MControl.Xml" id="N:MControl.Xml">
        <class name="CodeSerializer" id="T:MControl.Xml.CodeSerializer" access="Public" namespace="MControl.Xml" displayName="CodeSerializer">
          <base name="CodeDomSerializer" id="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" displayName="System.ComponentModel.Design.Serialization.CodeDomSerializer">
            <base name="CodeDomSerializerBase" id="T:System.ComponentModel.Design.Serialization.CodeDomSerializerBase" displayName="System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
          </base>
          <constructor name=".ctor" id="M:MControl.Xml.CodeSerializer.#ctor(System.Type)" access="Public" contract="Normal">
            <parameter name="objectType">
              <type name="Type" id="T:System.Type" />
            </parameter>
          </constructor>
          <method name="Deserialize" id="M:MControl.Xml.CodeSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)" access="Public" contract="Override">
            <type name="Object" id="T:System.Object" />
            <parameter name="manager">
              <type name="IDesignerSerializationManager" id="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
            </parameter>
            <parameter name="codeObject">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
          <method name="Serialize" id="M:MControl.Xml.CodeSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)" access="Public" contract="Override">
            <type name="Object" id="T:System.Object" />
            <parameter name="manager">
              <type name="IDesignerSerializationManager" id="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
            </parameter>
            <parameter name="value">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
        </class>
        <class name="ObjectToXml" id="T:MControl.Xml.ObjectToXml" access="Public" namespace="MControl.Xml" displayName="ObjectToXml">
          <constructor name=".ctor" id="M:MControl.Xml.ObjectToXml.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Xml.ObjectToXml" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="Instance" id="F:MControl.Xml.ObjectToXml.Instance" access="Public" contract="Static">
            <type name="ObjectToXml" id="T:MControl.Xml.ObjectToXml" />
          </field>
          <method name="Serialize" id="M:MControl.Xml.ObjectToXml.Serialize(System.Object)" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <parameter name="CodeObject">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
        </class>
        <class name="ObjectXmlSerializer" id="T:MControl.Xml.ObjectXmlSerializer" access="Public" namespace="MControl.Xml" displayName="ObjectXmlSerializer">
          <base name="XmlSerializerBase" id="T:MControl.Xml.XmlSerializerBase" displayName="MControl.Xml.XmlSerializerBase" />
          <constructor name=".ctor" id="M:MControl.Xml.ObjectXmlSerializer.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Xml.ObjectXmlSerializer" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="Instance" id="F:MControl.Xml.ObjectXmlSerializer.Instance" access="Public" contract="Static">
            <type name="ObjectXmlSerializer" id="T:MControl.Xml.ObjectXmlSerializer" />
          </field>
          <method name="Serialize" id="M:MControl.Xml.ObjectXmlSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)" access="Public" contract="Override">
            <type name="String" id="T:System.String" />
            <parameter name="m">
              <type name="IDesignerSerializationManager" id="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
            </parameter>
            <parameter name="CodeObject">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
        </class>
        <class name="StringXmlSerializer" id="T:MControl.Xml.StringXmlSerializer" access="Public" namespace="MControl.Xml" displayName="StringXmlSerializer">
          <base name="XmlSerializerBase" id="T:MControl.Xml.XmlSerializerBase" displayName="MControl.Xml.XmlSerializerBase" />
          <constructor name=".ctor" id="M:MControl.Xml.StringXmlSerializer.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Xml.StringXmlSerializer" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="Instance" id="F:MControl.Xml.StringXmlSerializer.Instance" access="Public" contract="Static">
            <type name="StringXmlSerializer" id="T:MControl.Xml.StringXmlSerializer" />
          </field>
          <method name="Serialize" id="M:MControl.Xml.StringXmlSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)" access="Public" contract="Override">
            <type name="String" id="T:System.String" />
            <parameter name="m">
              <type name="IDesignerSerializationManager" id="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
            </parameter>
            <parameter name="CodeObject">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
        </class>
        <class name="XmlBuilder" id="T:MControl.Xml.XmlBuilder" access="Public" namespace="MControl.Xml" displayName="XmlBuilder">
          <implements name="IDisposable" id="T:System.IDisposable" />
          <constructor name=".ctor" id="M:MControl.Xml.XmlBuilder.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Xml.XmlBuilder" /> class.</autoText></summary></documentation>
          </constructor>
          <property name="Document" id="P:MControl.Xml.XmlBuilder.Document" access="Public" contract="Normal">
            <type name="XmlDocument" id="T:System.Xml.XmlDocument" />
            <get access="Public" />
          </property>
          <methodOverload name="AppendAttribute" id="Overload:MControl.Xml.XmlBuilder.AppendAttribute">
            <method name="AppendAttribute" id="M:MControl.Xml.XmlBuilder.AppendAttribute(System.String,System.String)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="Name">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="Value">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="AppendAttribute" id="M:MControl.Xml.XmlBuilder.AppendAttribute(System.String,System.String,System.Xml.XmlNode)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="Name">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="Value">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="xNode">
                <type name="XmlNode" id="T:System.Xml.XmlNode" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="AppendCDATA" id="Overload:MControl.Xml.XmlBuilder.AppendCDATA">
            <method name="AppendCDATA" id="M:MControl.Xml.XmlBuilder.AppendCDATA(System.String,System.String)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="Name">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="Value">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="AppendCDATA" id="M:MControl.Xml.XmlBuilder.AppendCDATA(System.String,System.String,System.Xml.XmlNode)" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="Name">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="Value">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="xNode">
                <type name="XmlNode" id="T:System.Xml.XmlNode" />
              </parameter>
            </method>
          </methodOverload>
          <method name="AppendElement" id="M:MControl.Xml.XmlBuilder.AppendElement(System.String,System.String,System.Xml.XmlNode)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="Name">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="Value">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="xNode">
              <type name="XmlNode" id="T:System.Xml.XmlNode" />
            </parameter>
          </method>
          <method name="AppendNode" id="M:MControl.Xml.XmlBuilder.AppendNode(System.String,System.String)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="Name">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="Value">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <methodOverload name="AppendNodeList" id="Overload:MControl.Xml.XmlBuilder.AppendNodeList">
            <method name="AppendNodeList" id="M:MControl.Xml.XmlBuilder.AppendNodeList(System.String,System.String[],System.String[])" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="NodeName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="Names">
                <type name="String" id="T:System.String">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="Values">
                <type name="String" id="T:System.String">
                  <array rank="1" />
                </type>
              </parameter>
            </method>
            <method name="AppendNodeList" id="M:MControl.Xml.XmlBuilder.AppendNodeList(System.Xml.XmlNode,System.String[],System.String[])" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="xNode">
                <type name="XmlNode" id="T:System.Xml.XmlNode" />
              </parameter>
              <parameter name="Names">
                <type name="String" id="T:System.String">
                  <array rank="1" />
                </type>
              </parameter>
              <parameter name="Values">
                <type name="String" id="T:System.String">
                  <array rank="1" />
                </type>
              </parameter>
            </method>
            <method name="AppendNodeList" id="M:MControl.Xml.XmlBuilder.AppendNodeList(System.String,System.String,System.String[])" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="NodeName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="Names">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="Values">
                <type name="String" id="T:System.String">
                  <array rank="1" />
                </type>
              </parameter>
            </method>
            <method name="AppendNodeList" id="M:MControl.Xml.XmlBuilder.AppendNodeList(System.Xml.XmlNode,System.String,System.String[])" access="Public" contract="Normal">
              <type name="Void" id="T:System.Void" valueType="true" />
              <parameter name="xNode">
                <type name="XmlNode" id="T:System.Xml.XmlNode" />
              </parameter>
              <parameter name="Names">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="Values">
                <type name="String" id="T:System.String">
                  <array rank="1" />
                </type>
              </parameter>
            </method>
          </methodOverload>
          <method name="CreateAttribute" id="M:MControl.Xml.XmlBuilder.CreateAttribute(System.String,System.String)" access="Public" contract="Normal">
            <type name="XmlAttribute" id="T:System.Xml.XmlAttribute" />
            <parameter name="Name">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="Value">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="CreateElement" id="M:MControl.Xml.XmlBuilder.CreateElement(System.String,System.String)" access="Public" contract="Normal">
            <type name="XmlElement" id="T:System.Xml.XmlElement" />
            <parameter name="Name">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="Value">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="CreateXmlNode" id="M:MControl.Xml.XmlBuilder.CreateXmlNode(System.String,System.String,System.Xml.XmlNodeType)" access="Public" contract="Normal">
            <type name="XmlNode" id="T:System.Xml.XmlNode" />
            <parameter name="Name">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="Value">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="type">
              <type name="XmlNodeType" id="T:System.Xml.XmlNodeType" valueType="true" />
            </parameter>
          </method>
          <method name="Dispose" id="M:MControl.Xml.XmlBuilder.Dispose" access="Public" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="Dispose" id="M:System.IDisposable.Dispose" interface="IDisposable" interfaceId="T:System.IDisposable" declaringType="System.IDisposable" />
          </method>
        </class>
        <class name="xmlElement" id="T:MControl.Xml.xmlElement" access="Public" namespace="MControl.Xml" displayName="xmlElement">
          <constructorOverload name=".ctor" id="Overload:MControl.Xml.xmlElement.#ctor" explicitInterfaceImplementation="true">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Xml.xmlElement" /> class.</autoText></summary></documentation>
            <constructor name=".ctor" id="M:MControl.Xml.xmlElement.#ctor" access="Public" contract="Normal">
              <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Xml.xmlElement" /> class.</autoText></summary></documentation>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Xml.xmlElement.#ctor(System.String)" access="Public" contract="Normal">
              <parameter name="strName">
                <type name="String" id="T:System.String" />
              </parameter>
            </constructor>
          </constructorOverload>
          <field name="_strName" id="F:MControl.Xml.xmlElement._strName" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </field>
          <method name="addAttrib" id="M:MControl.Xml.xmlElement.addAttrib(System.String,System.String)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="strAttribName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="strAttribValue">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="setName" id="M:MControl.Xml.xmlElement.setName(System.String)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="strName">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="write" id="M:MControl.Xml.xmlElement.write(MControl.Xml.xmlWriter,System.Int32,System.Boolean,System.Boolean)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="writer">
              <type name="xmlWriter" id="T:MControl.Xml.xmlWriter" />
            </parameter>
            <parameter name="nDeltaLevel">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="bIndent">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="bEOL">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="writeClosingTag" id="M:MControl.Xml.xmlElement.writeClosingTag(MControl.Xml.xmlWriter,System.Int32,System.Boolean,System.Boolean)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="writer">
              <type name="xmlWriter" id="T:MControl.Xml.xmlWriter" />
            </parameter>
            <parameter name="nDeltaLevel">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="bIndent">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="bEOL">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="writeEmpty" id="M:MControl.Xml.xmlElement.writeEmpty(MControl.Xml.xmlWriter,System.Int32,System.Boolean,System.Boolean)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="writer">
              <type name="xmlWriter" id="T:MControl.Xml.xmlWriter" />
            </parameter>
            <parameter name="nDeltaLevel">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
            <parameter name="bIndent">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
            <parameter name="bEOL">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="writePInstruction" id="M:MControl.Xml.xmlElement.writePInstruction(MControl.Xml.xmlWriter,System.Int32)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="writer">
              <type name="xmlWriter" id="T:MControl.Xml.xmlWriter" />
            </parameter>
            <parameter name="nDeltaLevel">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
        </class>
        <class name="xmlParser" id="T:MControl.Xml.xmlParser" access="Public" namespace="MControl.Xml" displayName="xmlParser">
          <constructor name=".ctor" id="M:MControl.Xml.xmlParser.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Xml.xmlParser" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="ReadXmlFile" id="M:MControl.Xml.xmlParser.ReadXmlFile(System.String)" access="Public" contract="Normal">
            <type name="DataSet" id="T:System.Data.DataSet" />
            <parameter name="file">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="ReadXmlStream" id="M:MControl.Xml.xmlParser.ReadXmlStream(System.String)" access="Public" contract="Normal">
            <type name="DataSet" id="T:System.Data.DataSet" />
            <parameter name="s">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="XmlParser" id="T:MControl.Xml.XmlParser" access="Public" namespace="MControl.Xml" displayName="XmlParser">
          <implements name="IDisposable" id="T:System.IDisposable" />
          <constructorOverload name=".ctor" id="Overload:MControl.Xml.XmlParser.#ctor" explicitInterfaceImplementation="true">
            <constructor name=".ctor" id="M:MControl.Xml.XmlParser.#ctor(System.Xml.XmlDocument)" access="Public" contract="Normal">
              <parameter name="xml">
                <type name="XmlDocument" id="T:System.Xml.XmlDocument" />
              </parameter>
            </constructor>
            <constructor name=".ctor" id="M:MControl.Xml.XmlParser.#ctor(System.String)" access="Public" contract="Normal">
              <parameter name="xml">
                <type name="String" id="T:System.String" />
              </parameter>
            </constructor>
          </constructorOverload>
          <property name="Document" id="P:MControl.Xml.XmlParser.Document" access="Public" contract="Normal">
            <type name="XmlDocument" id="T:System.Xml.XmlDocument" />
            <get access="Public" />
          </property>
          <method name="Dispose" id="M:MControl.Xml.XmlParser.Dispose" access="Public" contract="Virtual">
            <type name="Void" id="T:System.Void" valueType="true" />
            <implements name="Dispose" id="M:System.IDisposable.Dispose" interface="IDisposable" interfaceId="T:System.IDisposable" declaringType="System.IDisposable" />
          </method>
          <method name="GetAttributeValue" id="M:MControl.Xml.XmlParser.GetAttributeValue(System.Xml.XmlNode,System.String,System.Boolean)" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <parameter name="xNode">
              <type name="XmlNode" id="T:System.Xml.XmlNode" />
            </parameter>
            <parameter name="AttributeName">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="raiseError">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="GetNodeInnerText" id="M:MControl.Xml.XmlParser.GetNodeInnerText(System.String,System.Boolean)" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <parameter name="Xpath">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="raiseError">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="GetNodeListValues" id="Overload:MControl.Xml.XmlParser.GetNodeListValues">
            <method name="GetNodeListValues" id="M:MControl.Xml.XmlParser.GetNodeListValues(System.Xml.XmlNode,System.String,System.Boolean)" access="Public" contract="Normal">
              <type name="String" id="T:System.String">
                <array rank="1" />
              </type>
              <parameter name="Node">
                <type name="XmlNode" id="T:System.Xml.XmlNode" />
              </parameter>
              <parameter name="Xpath">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="raiseError">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
            <method name="GetNodeListValues" id="M:MControl.Xml.XmlParser.GetNodeListValues(System.Xml.XmlNodeList,System.Boolean)" access="Public" contract="Normal">
              <type name="String" id="T:System.String">
                <array rank="1" />
              </type>
              <parameter name="list">
                <type name="XmlNodeList" id="T:System.Xml.XmlNodeList" />
              </parameter>
              <parameter name="raiseError">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
            <method name="GetNodeListValues" id="M:MControl.Xml.XmlParser.GetNodeListValues(System.Xml.XmlNode,System.String,System.Boolean,System.String[0:,0:]@)" access="Public" contract="Normal">
              <type name="String" id="T:System.String">
                <array rank="1" />
              </type>
              <parameter name="Node">
                <type name="XmlNode" id="T:System.Xml.XmlNode" />
              </parameter>
              <parameter name="Xpath">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="raiseError">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="attributes" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetNodeListValues" id="M:MControl.Xml.XmlParser.GetNodeListValues(System.Xml.XmlNodeList,System.Boolean,System.String[0:,0:]@)" access="Public" contract="Normal">
              <type name="String" id="T:System.String">
                <array rank="1" />
              </type>
              <parameter name="list">
                <type name="XmlNodeList" id="T:System.Xml.XmlNodeList" />
              </parameter>
              <parameter name="raiseError">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
              <parameter name="attributes" direction="ref">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="GetNodeValue" id="M:MControl.Xml.XmlParser.GetNodeValue(System.String,System.Boolean)" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
            <parameter name="Xpath">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="raiseError">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <method name="SelectNodes" id="M:MControl.Xml.XmlParser.SelectNodes(System.Xml.XmlNode,System.String,System.Boolean)" access="Public" contract="Normal">
            <type name="XmlNodeList" id="T:System.Xml.XmlNodeList" />
            <parameter name="Node">
              <type name="XmlNode" id="T:System.Xml.XmlNode" />
            </parameter>
            <parameter name="Xpath">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="raiseError">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
          <methodOverload name="SelectSingleNode" id="Overload:MControl.Xml.XmlParser.SelectSingleNode">
            <method name="SelectSingleNode" id="M:MControl.Xml.XmlParser.SelectSingleNode(System.Xml.XmlNode,System.String,System.Boolean)" access="Public" contract="Normal">
              <type name="XmlNode" id="T:System.Xml.XmlNode" />
              <parameter name="Node">
                <type name="XmlNode" id="T:System.Xml.XmlNode" />
              </parameter>
              <parameter name="Xpath">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="raiseError">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
            <method name="SelectSingleNode" id="M:MControl.Xml.XmlParser.SelectSingleNode(System.String,System.Boolean)" access="Public" contract="Normal">
              <type name="XmlNode" id="T:System.Xml.XmlNode" />
              <parameter name="Xpath">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="raiseError">
                <type name="Boolean" id="T:System.Boolean" valueType="true" />
              </parameter>
            </method>
          </methodOverload>
          <method name="ValidateXmlAttribute" id="M:MControl.Xml.XmlParser.ValidateXmlAttribute(System.Xml.XmlAttribute)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="attrib">
              <type name="XmlAttribute" id="T:System.Xml.XmlAttribute" />
            </parameter>
          </method>
          <method name="ValidateXmlNode" id="M:MControl.Xml.XmlParser.ValidateXmlNode(System.Xml.XmlNode)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="node">
              <type name="XmlNode" id="T:System.Xml.XmlNode" />
            </parameter>
          </method>
        </class>
        <class name="xmlReader" id="T:MControl.Xml.xmlReader" access="Public" namespace="MControl.Xml" displayName="xmlReader">
          <constructor name=".ctor" id="M:MControl.Xml.xmlReader.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Xml.xmlReader" /> class.</autoText></summary></documentation>
          </constructor>
          <field name="IDS_BADATTRIBUTEVALUESYNTAX" id="F:MControl.Xml.xmlReader.IDS_BADATTRIBUTEVALUESYNTAX" access="Public" contract="Static" literal="true" value="There should not be a quote char at the end of a line">
            <type name="String" id="T:System.String" />
          </field>
          <field name="IDS_BADBEGINNODESYMBOL" id="F:MControl.Xml.xmlReader.IDS_BADBEGINNODESYMBOL" access="Public" contract="Static" literal="true" value="Bad '&lt;' symbol">
            <type name="String" id="T:System.String" />
          </field>
          <field name="IDS_EMPTYELEMENTNAME" id="F:MControl.Xml.xmlReader.IDS_EMPTYELEMENTNAME" access="Public" contract="Static" literal="true" value="Empty element name">
            <type name="String" id="T:System.String" />
          </field>
          <field name="IDS_GENERICSYNTAXERROR" id="F:MControl.Xml.xmlReader.IDS_GENERICSYNTAXERROR" access="Public" contract="Static" literal="true" value="Syntax error">
            <type name="String" id="T:System.String" />
          </field>
          <field name="IDS_MISSINGATTRIBNAME" id="F:MControl.Xml.xmlReader.IDS_MISSINGATTRIBNAME" access="Public" contract="Static" literal="true" value="Missing attribute name before '='">
            <type name="String" id="T:System.String" />
          </field>
          <field name="IDS_MISSINGEQUALSYMBOL" id="F:MControl.Xml.xmlReader.IDS_MISSINGEQUALSYMBOL" access="Public" contract="Static" literal="true" value="Missing '=' after attribute name">
            <type name="String" id="T:System.String" />
          </field>
          <field name="IDS_NOBEGINNODESYMBOLINEOL" id="F:MControl.Xml.xmlReader.IDS_NOBEGINNODESYMBOLINEOL" access="Public" contract="Static" literal="true" value="'&lt;' symbol not allowed at the end of a line">
            <type name="String" id="T:System.String" />
          </field>
          <field name="IDS_NOEQUALSYMBOLINEOL" id="F:MControl.Xml.xmlReader.IDS_NOEQUALSYMBOLINEOL" access="Public" contract="Static" literal="true" value="There should not be a '=' symbol at the end of a line">
            <type name="String" id="T:System.String" />
          </field>
          <method name="close" id="M:MControl.Xml.xmlReader.close" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
          </method>
          <method name="getAttribName" id="M:MControl.Xml.xmlReader.getAttribName" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </method>
          <method name="getAttribValue" id="M:MControl.Xml.xmlReader.getAttribValue" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </method>
          <method name="getCurrentLine" id="M:MControl.Xml.xmlReader.getCurrentLine" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </method>
          <method name="getLastError" id="M:MControl.Xml.xmlReader.getLastError" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </method>
          <method name="getNodeName" id="M:MControl.Xml.xmlReader.getNodeName" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </method>
          <method name="getNodeType" id="M:MControl.Xml.xmlReader.getNodeType" access="Public" contract="Normal">
            <type name="NODETYPE" id="T:MControl.Xml.NODETYPE" valueType="true" />
          </method>
          <method name="open" id="M:MControl.Xml.xmlReader.open(System.String)" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="strFilename">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="parseContent" id="M:MControl.Xml.xmlReader.parseContent" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
          </method>
          <method name="readString" id="M:MControl.Xml.xmlReader.readString" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
          </method>
          <method name="showMsgBoxOnError" id="M:MControl.Xml.xmlReader.showMsgBoxOnError(System.Boolean)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="bShow">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
            </parameter>
          </method>
        </class>
        <class name="XMLSerializer" id="T:MControl.Xml.XMLSerializer" access="Public" namespace="MControl.Xml" displayName="XMLSerializer">
          <constructor name=".ctor" id="M:MControl.Xml.XMLSerializer.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Xml.XMLSerializer" /> class.</autoText></summary></documentation>
          </constructor>
          <methodOverload name="Load" id="Overload:MControl.Xml.XMLSerializer.Load">
            <method name="Load" id="M:MControl.Xml.XMLSerializer.Load(System.Object,System.String)" access="Public" contract="Virtual">
              <type name="Object" id="T:System.Object" />
              <parameter name="obj">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="XMLFilePathName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="Load" id="M:MControl.Xml.XMLSerializer.Load(System.Object,System.String,MControl.Xml.SerializedFormatType)" access="Public" contract="Virtual">
              <type name="Object" id="T:System.Object" />
              <parameter name="obj">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="XMLFilePathName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="SerializedFormat">
                <type name="SerializedFormatType" id="T:MControl.Xml.SerializedFormatType" valueType="true" />
              </parameter>
            </method>
            <method name="Load" id="M:MControl.Xml.XMLSerializer.Load(System.Object,System.String,MControl.Xml.SerializedFormatType,System.IO.IsolatedStorage.IsolatedStorageFile)" access="Public" contract="Virtual">
              <type name="Object" id="T:System.Object" />
              <parameter name="obj">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="XMLFilePathName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="SerializedFormat">
                <type name="SerializedFormatType" id="T:MControl.Xml.SerializedFormatType" valueType="true" />
              </parameter>
              <parameter name="isolatedStorageFolder">
                <type name="IsolatedStorageFile" id="T:System.IO.IsolatedStorage.IsolatedStorageFile" />
              </parameter>
            </method>
            <method name="Load" id="M:MControl.Xml.XMLSerializer.Load(System.Object,System.String,System.IO.IsolatedStorage.IsolatedStorageFile)" access="Public" contract="Virtual">
              <type name="Object" id="T:System.Object" />
              <parameter name="obj">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="XMLFilePathName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="isolatedStorageFolder">
                <type name="IsolatedStorageFile" id="T:System.IO.IsolatedStorage.IsolatedStorageFile" />
              </parameter>
            </method>
          </methodOverload>
          <methodOverload name="Save" id="Overload:MControl.Xml.XMLSerializer.Save">
            <method name="Save" id="M:MControl.Xml.XMLSerializer.Save(System.Object,System.String)" access="Public" contract="Virtual">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="ObjectToSave">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="XMLFilePathName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="Save" id="M:MControl.Xml.XMLSerializer.Save(System.Object,System.String,MControl.Xml.SerializedFormatType)" access="Public" contract="Virtual">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="ObjectToSave">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="XMLFilePathName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="SerializedFormat">
                <type name="SerializedFormatType" id="T:MControl.Xml.SerializedFormatType" valueType="true" />
              </parameter>
            </method>
            <method name="Save" id="M:MControl.Xml.XMLSerializer.Save(System.Object,System.String,MControl.Xml.SerializedFormatType,System.IO.IsolatedStorage.IsolatedStorageFile)" access="Public" contract="Virtual">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="ObjectToSave">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="XMLFilePathName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="SerializedFormat">
                <type name="SerializedFormatType" id="T:MControl.Xml.SerializedFormatType" valueType="true" />
              </parameter>
              <parameter name="isolatedStorageFolder">
                <type name="IsolatedStorageFile" id="T:System.IO.IsolatedStorage.IsolatedStorageFile" />
              </parameter>
            </method>
            <method name="Save" id="M:MControl.Xml.XMLSerializer.Save(System.Object,System.String,System.IO.IsolatedStorage.IsolatedStorageFile)" access="Public" contract="Virtual">
              <type name="Boolean" id="T:System.Boolean" valueType="true" />
              <parameter name="ObjectToSave">
                <type name="Object" id="T:System.Object" />
              </parameter>
              <parameter name="XMLFilePathName">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="isolatedStorageFolder">
                <type name="IsolatedStorageFile" id="T:System.IO.IsolatedStorage.IsolatedStorageFile" />
              </parameter>
            </method>
          </methodOverload>
        </class>
        <class name="XmlSerializerBase" id="T:MControl.Xml.XmlSerializerBase" access="Public" namespace="MControl.Xml" displayName="XmlSerializerBase" abstract="true">
          <derivedBy id="T:MControl.Xml.ObjectXmlSerializer" displayName="MControl.Xml.ObjectXmlSerializer" />
          <derivedBy id="T:MControl.Xml.StringXmlSerializer" displayName="MControl.Xml.StringXmlSerializer" />
          <constructor name=".ctor" id="M:MControl.Xml.XmlSerializerBase.#ctor" access="Family" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Xml.XmlSerializerBase" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="Serialize" id="M:MControl.Xml.XmlSerializerBase.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)" access="Public" contract="Abstract">
            <type name="String" id="T:System.String" />
            <parameter name="m">
              <type name="IDesignerSerializationManager" id="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
            </parameter>
            <parameter name="CodeObject">
              <type name="Object" id="T:System.Object" />
            </parameter>
          </method>
        </class>
        <class name="XmlUtil" id="T:MControl.Xml.XmlUtil" access="Public" namespace="MControl.Xml" displayName="XmlUtil">
          <constructor name=".ctor" id="M:MControl.Xml.XmlUtil.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Xml.XmlUtil" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="AppendAttribute" id="M:MControl.Xml.XmlUtil.AppendAttribute(System.String,System.String,System.Xml.XmlDocument,System.Xml.XmlNode)" access="Public" contract="Static">
            <type name="XmlAttribute" id="T:System.Xml.XmlAttribute" />
            <parameter name="Name">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="Value">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="xmlDoc">
              <type name="XmlDocument" id="T:System.Xml.XmlDocument" />
            </parameter>
            <parameter name="xNode">
              <type name="XmlNode" id="T:System.Xml.XmlNode" />
            </parameter>
          </method>
          <method name="CreateAttribute" id="M:MControl.Xml.XmlUtil.CreateAttribute(System.String,System.String,System.Xml.XmlDocument)" access="Public" contract="Static">
            <type name="XmlAttribute" id="T:System.Xml.XmlAttribute" />
            <parameter name="Name">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="Value">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="xmlDoc">
              <type name="XmlDocument" id="T:System.Xml.XmlDocument" />
            </parameter>
          </method>
          <method name="CreateCDATA" id="M:MControl.Xml.XmlUtil.CreateCDATA(System.String,System.String,System.Xml.XmlDocument)" access="Public" contract="Static">
            <type name="XmlNode" id="T:System.Xml.XmlNode" />
            <parameter name="Name">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="Value">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="xmlDoc">
              <type name="XmlDocument" id="T:System.Xml.XmlDocument" />
            </parameter>
          </method>
          <method name="CreateNode" id="M:MControl.Xml.XmlUtil.CreateNode(System.String,System.String,System.Xml.XmlDocument)" access="Public" contract="Static">
            <type name="XmlNode" id="T:System.Xml.XmlNode" />
            <parameter name="Name">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="Value">
              <type name="String" id="T:System.String" />
            </parameter>
            <parameter name="xmlDoc">
              <type name="XmlDocument" id="T:System.Xml.XmlDocument" />
            </parameter>
          </method>
          <methodOverload name="GetAttributeValue" id="Overload:MControl.Xml.XmlUtil.GetAttributeValue" contract="Static">
            <method name="GetAttributeValue" id="M:MControl.Xml.XmlUtil.GetAttributeValue(System.Xml.XmlNode,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="xNode">
                <type name="XmlNode" id="T:System.Xml.XmlNode" />
              </parameter>
              <parameter name="AttributeName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
            <method name="GetAttributeValue" id="M:MControl.Xml.XmlUtil.GetAttributeValue(System.Xml.XmlNode,System.String,System.String)" access="Public" contract="Static">
              <type name="String" id="T:System.String" />
              <parameter name="xNode">
                <type name="XmlNode" id="T:System.Xml.XmlNode" />
              </parameter>
              <parameter name="Xpath">
                <type name="String" id="T:System.String" />
              </parameter>
              <parameter name="attributeName">
                <type name="String" id="T:System.String" />
              </parameter>
            </method>
          </methodOverload>
          <method name="SelectNodes" id="M:MControl.Xml.XmlUtil.SelectNodes(System.Xml.XmlNode,System.String)" access="Public" contract="Static">
            <type name="XmlNodeList" id="T:System.Xml.XmlNodeList" />
            <parameter name="Node">
              <type name="XmlNode" id="T:System.Xml.XmlNode" />
            </parameter>
            <parameter name="Xpath">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="SelectSingleNode" id="M:MControl.Xml.XmlUtil.SelectSingleNode(System.Xml.XmlNode,System.String)" access="Public" contract="Static">
            <type name="XmlNode" id="T:System.Xml.XmlNode" />
            <parameter name="Node">
              <type name="XmlNode" id="T:System.Xml.XmlNode" />
            </parameter>
            <parameter name="Xpath">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <class name="xmlWriter" id="T:MControl.Xml.xmlWriter" access="Public" namespace="MControl.Xml" displayName="xmlWriter">
          <constructor name=".ctor" id="M:MControl.Xml.xmlWriter.#ctor" access="Public" contract="Normal">
            <documentation><summary><autoText>Initializes a new instance of the <see cref="T:MControl.Xml.xmlWriter" /> class.</autoText></summary></documentation>
          </constructor>
          <method name="close" id="M:MControl.Xml.xmlWriter.close" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
          </method>
          <method name="getFilename" id="M:MControl.Xml.xmlWriter.getFilename" access="Public" contract="Normal">
            <type name="String" id="T:System.String" />
          </method>
          <method name="getIndentLevel" id="M:MControl.Xml.xmlWriter.getIndentLevel" access="Public" contract="Normal">
            <type name="Int32" id="T:System.Int32" valueType="true" />
          </method>
          <method name="mustBeClosed" id="M:MControl.Xml.xmlWriter.mustBeClosed" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
          </method>
          <method name="open" id="M:MControl.Xml.xmlWriter.open(System.String)" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="strFilename">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
          <method name="setIndentLevel" id="M:MControl.Xml.xmlWriter.setIndentLevel(System.Int32)" access="Public" contract="Normal">
            <type name="Void" id="T:System.Void" valueType="true" />
            <parameter name="n">
              <type name="Int32" id="T:System.Int32" valueType="true" />
            </parameter>
          </method>
          <method name="writeString" id="M:MControl.Xml.xmlWriter.writeString(System.String)" access="Public" contract="Normal">
            <type name="Boolean" id="T:System.Boolean" valueType="true" />
            <parameter name="strData">
              <type name="String" id="T:System.String" />
            </parameter>
          </method>
        </class>
        <enumeration name="NODETYPE" id="T:MControl.Xml.NODETYPE" displayName="NODETYPE" namespace="MControl.Xml" access="Public">
          <field name="NODETYPE_NA" id="F:MControl.Xml.NODETYPE.NODETYPE_NA" value="0" />
          <field name="NODETYPE_BEGINELEMENT" id="F:MControl.Xml.NODETYPE.NODETYPE_BEGINELEMENT" value="1" />
          <field name="NODETYPE_ENDELEMENT" id="F:MControl.Xml.NODETYPE.NODETYPE_ENDELEMENT" value="2" />
          <field name="NODETYPE_ATTRIB" id="F:MControl.Xml.NODETYPE.NODETYPE_ATTRIB" value="3" />
          <field name="NODETYPE_CONTENT" id="F:MControl.Xml.NODETYPE.NODETYPE_CONTENT" value="4" />
          <field name="NODETYPE_PI" id="F:MControl.Xml.NODETYPE.NODETYPE_PI" value="5" />
          <field name="NODETYPE_COMMENT" id="F:MControl.Xml.NODETYPE.NODETYPE_COMMENT" value="6" />
          <field name="NODETYPE_CDATA" id="F:MControl.Xml.NODETYPE.NODETYPE_CDATA" value="7" />
        </enumeration>
        <enumeration name="SerializedFormatType" id="T:MControl.Xml.SerializedFormatType" displayName="SerializedFormatType" namespace="MControl.Xml" access="Public">
          <field name="Binary" id="F:MControl.Xml.SerializedFormatType.Binary" value="0" />
          <field name="Document" id="F:MControl.Xml.SerializedFormatType.Document" value="1" />
        </enumeration>
        <enumeration name="XmlUtil.NodeType" id="T:MControl.Xml.XmlUtil.NodeType" displayName="XmlUtil.NodeType" namespace="MControl.Xml" access="NestedPublic">
          <field name="Element" id="F:MControl.Xml.XmlUtil.NodeType.Element" value="0" />
          <field name="Attribute" id="F:MControl.Xml.XmlUtil.NodeType.Attribute" value="1" />
          <field name="CDATA" id="F:MControl.Xml.XmlUtil.NodeType.CDATA" value="2" />
        </enumeration>
      </namespace>
    </module>
  </assembly>
</ndoc>